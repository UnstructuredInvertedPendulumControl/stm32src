
WIPNAENAE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b678  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800b738  0800b738  0001b738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd54  0800bd54  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd5c  0800bd5c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b7c  200001e8  0800bf4c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d64  0800bf4c  00021d64  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f932  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bfb  00000000  00000000  0003fb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00043740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00044d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7ee  00000000  00000000  00046238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194f4  00000000  00000000  00062a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adfe8  00000000  00000000  0007bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00129f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d4  00000000  00000000  00129f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b720 	.word	0x0800b720

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800b720 	.word	0x0800b720

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f81f 	bl	8001480 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff69 	bl	8001324 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f811 	bl	8001480 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f807 	bl	8001480 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff8b 	bl	800139c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff81 	bl	800139c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f001 fef0 	bl	80022ec <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f001 feeb 	bl	80022ec <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_dadd>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	46d6      	mov	lr, sl
 8000686:	4646      	mov	r6, r8
 8000688:	000d      	movs	r5, r1
 800068a:	0001      	movs	r1, r0
 800068c:	0018      	movs	r0, r3
 800068e:	b5c0      	push	{r6, r7, lr}
 8000690:	0017      	movs	r7, r2
 8000692:	032b      	lsls	r3, r5, #12
 8000694:	0a5a      	lsrs	r2, r3, #9
 8000696:	0f4b      	lsrs	r3, r1, #29
 8000698:	4313      	orrs	r3, r2
 800069a:	00ca      	lsls	r2, r1, #3
 800069c:	4691      	mov	r9, r2
 800069e:	0302      	lsls	r2, r0, #12
 80006a0:	006e      	lsls	r6, r5, #1
 80006a2:	0041      	lsls	r1, r0, #1
 80006a4:	0a52      	lsrs	r2, r2, #9
 80006a6:	0fec      	lsrs	r4, r5, #31
 80006a8:	0f7d      	lsrs	r5, r7, #29
 80006aa:	4315      	orrs	r5, r2
 80006ac:	0d76      	lsrs	r6, r6, #21
 80006ae:	0d49      	lsrs	r1, r1, #21
 80006b0:	0fc0      	lsrs	r0, r0, #31
 80006b2:	4682      	mov	sl, r0
 80006b4:	46ac      	mov	ip, r5
 80006b6:	00ff      	lsls	r7, r7, #3
 80006b8:	1a72      	subs	r2, r6, r1
 80006ba:	4284      	cmp	r4, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x40>
 80006be:	e098      	b.n	80007f2 <__aeabi_dadd+0x172>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x46>
 80006c4:	e081      	b.n	80007ca <__aeabi_dadd+0x14a>
 80006c6:	2900      	cmp	r1, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x4c>
 80006ca:	e0b6      	b.n	800083a <__aeabi_dadd+0x1ba>
 80006cc:	49c9      	ldr	r1, [pc, #804]	; (80009f4 <__aeabi_dadd+0x374>)
 80006ce:	428e      	cmp	r6, r1
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x54>
 80006d2:	e172      	b.n	80009ba <__aeabi_dadd+0x33a>
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0028      	movs	r0, r5
 80006d8:	0409      	lsls	r1, r1, #16
 80006da:	4308      	orrs	r0, r1
 80006dc:	4684      	mov	ip, r0
 80006de:	2a38      	cmp	r2, #56	; 0x38
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x64>
 80006e2:	e15e      	b.n	80009a2 <__aeabi_dadd+0x322>
 80006e4:	2a1f      	cmp	r2, #31
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dadd+0x6a>
 80006e8:	e1ee      	b.n	8000ac8 <__aeabi_dadd+0x448>
 80006ea:	2020      	movs	r0, #32
 80006ec:	0039      	movs	r1, r7
 80006ee:	4665      	mov	r5, ip
 80006f0:	1a80      	subs	r0, r0, r2
 80006f2:	4087      	lsls	r7, r0
 80006f4:	40d1      	lsrs	r1, r2
 80006f6:	4085      	lsls	r5, r0
 80006f8:	430d      	orrs	r5, r1
 80006fa:	0039      	movs	r1, r7
 80006fc:	1e4f      	subs	r7, r1, #1
 80006fe:	41b9      	sbcs	r1, r7
 8000700:	4667      	mov	r7, ip
 8000702:	40d7      	lsrs	r7, r2
 8000704:	4329      	orrs	r1, r5
 8000706:	1bdb      	subs	r3, r3, r7
 8000708:	464a      	mov	r2, r9
 800070a:	1a55      	subs	r5, r2, r1
 800070c:	45a9      	cmp	r9, r5
 800070e:	4189      	sbcs	r1, r1
 8000710:	4249      	negs	r1, r1
 8000712:	1a5b      	subs	r3, r3, r1
 8000714:	4698      	mov	r8, r3
 8000716:	4643      	mov	r3, r8
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	d400      	bmi.n	800071e <__aeabi_dadd+0x9e>
 800071c:	e0cc      	b.n	80008b8 <__aeabi_dadd+0x238>
 800071e:	4643      	mov	r3, r8
 8000720:	025b      	lsls	r3, r3, #9
 8000722:	0a5b      	lsrs	r3, r3, #9
 8000724:	4698      	mov	r8, r3
 8000726:	4643      	mov	r3, r8
 8000728:	2b00      	cmp	r3, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0xae>
 800072c:	e12c      	b.n	8000988 <__aeabi_dadd+0x308>
 800072e:	4640      	mov	r0, r8
 8000730:	f001 fdbe 	bl	80022b0 <__clzsi2>
 8000734:	0001      	movs	r1, r0
 8000736:	3908      	subs	r1, #8
 8000738:	2220      	movs	r2, #32
 800073a:	0028      	movs	r0, r5
 800073c:	4643      	mov	r3, r8
 800073e:	1a52      	subs	r2, r2, r1
 8000740:	408b      	lsls	r3, r1
 8000742:	40d0      	lsrs	r0, r2
 8000744:	408d      	lsls	r5, r1
 8000746:	4303      	orrs	r3, r0
 8000748:	428e      	cmp	r6, r1
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0xce>
 800074c:	e117      	b.n	800097e <__aeabi_dadd+0x2fe>
 800074e:	1b8e      	subs	r6, r1, r6
 8000750:	1c72      	adds	r2, r6, #1
 8000752:	2a1f      	cmp	r2, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xd8>
 8000756:	e1a7      	b.n	8000aa8 <__aeabi_dadd+0x428>
 8000758:	2120      	movs	r1, #32
 800075a:	0018      	movs	r0, r3
 800075c:	002e      	movs	r6, r5
 800075e:	1a89      	subs	r1, r1, r2
 8000760:	408d      	lsls	r5, r1
 8000762:	4088      	lsls	r0, r1
 8000764:	40d6      	lsrs	r6, r2
 8000766:	40d3      	lsrs	r3, r2
 8000768:	1e69      	subs	r1, r5, #1
 800076a:	418d      	sbcs	r5, r1
 800076c:	4330      	orrs	r0, r6
 800076e:	4698      	mov	r8, r3
 8000770:	2600      	movs	r6, #0
 8000772:	4305      	orrs	r5, r0
 8000774:	076b      	lsls	r3, r5, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000778:	230f      	movs	r3, #15
 800077a:	402b      	ands	r3, r5
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000780:	1d2b      	adds	r3, r5, #4
 8000782:	42ab      	cmp	r3, r5
 8000784:	41ad      	sbcs	r5, r5
 8000786:	426d      	negs	r5, r5
 8000788:	44a8      	add	r8, r5
 800078a:	001d      	movs	r5, r3
 800078c:	4643      	mov	r3, r8
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x114>
 8000792:	e094      	b.n	80008be <__aeabi_dadd+0x23e>
 8000794:	4b97      	ldr	r3, [pc, #604]	; (80009f4 <__aeabi_dadd+0x374>)
 8000796:	1c72      	adds	r2, r6, #1
 8000798:	429a      	cmp	r2, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x11e>
 800079c:	e09d      	b.n	80008da <__aeabi_dadd+0x25a>
 800079e:	4641      	mov	r1, r8
 80007a0:	4b95      	ldr	r3, [pc, #596]	; (80009f8 <__aeabi_dadd+0x378>)
 80007a2:	08ed      	lsrs	r5, r5, #3
 80007a4:	4019      	ands	r1, r3
 80007a6:	000b      	movs	r3, r1
 80007a8:	0552      	lsls	r2, r2, #21
 80007aa:	0749      	lsls	r1, r1, #29
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	4329      	orrs	r1, r5
 80007b0:	0b1b      	lsrs	r3, r3, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	4313      	orrs	r3, r2
 80007b8:	07e4      	lsls	r4, r4, #31
 80007ba:	4323      	orrs	r3, r4
 80007bc:	0008      	movs	r0, r1
 80007be:	0019      	movs	r1, r3
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d043      	beq.n	8000856 <__aeabi_dadd+0x1d6>
 80007ce:	1b8a      	subs	r2, r1, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x156>
 80007d4:	e12a      	b.n	8000a2c <__aeabi_dadd+0x3ac>
 80007d6:	464c      	mov	r4, r9
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x15e>
 80007dc:	e1d1      	b.n	8000b82 <__aeabi_dadd+0x502>
 80007de:	1e54      	subs	r4, r2, #1
 80007e0:	2a01      	cmp	r2, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x166>
 80007e4:	e21f      	b.n	8000c26 <__aeabi_dadd+0x5a6>
 80007e6:	4d83      	ldr	r5, [pc, #524]	; (80009f4 <__aeabi_dadd+0x374>)
 80007e8:	42aa      	cmp	r2, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x16e>
 80007ec:	e272      	b.n	8000cd4 <__aeabi_dadd+0x654>
 80007ee:	0022      	movs	r2, r4
 80007f0:	e123      	b.n	8000a3a <__aeabi_dadd+0x3ba>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x178>
 80007f6:	e098      	b.n	800092a <__aeabi_dadd+0x2aa>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d042      	beq.n	8000882 <__aeabi_dadd+0x202>
 80007fc:	497d      	ldr	r1, [pc, #500]	; (80009f4 <__aeabi_dadd+0x374>)
 80007fe:	428e      	cmp	r6, r1
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x184>
 8000802:	e0da      	b.n	80009ba <__aeabi_dadd+0x33a>
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0028      	movs	r0, r5
 8000808:	0409      	lsls	r1, r1, #16
 800080a:	4308      	orrs	r0, r1
 800080c:	4684      	mov	ip, r0
 800080e:	2a38      	cmp	r2, #56	; 0x38
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0x194>
 8000812:	e129      	b.n	8000a68 <__aeabi_dadd+0x3e8>
 8000814:	2a1f      	cmp	r2, #31
 8000816:	dc00      	bgt.n	800081a <__aeabi_dadd+0x19a>
 8000818:	e187      	b.n	8000b2a <__aeabi_dadd+0x4aa>
 800081a:	0011      	movs	r1, r2
 800081c:	4665      	mov	r5, ip
 800081e:	3920      	subs	r1, #32
 8000820:	40cd      	lsrs	r5, r1
 8000822:	2a20      	cmp	r2, #32
 8000824:	d004      	beq.n	8000830 <__aeabi_dadd+0x1b0>
 8000826:	2040      	movs	r0, #64	; 0x40
 8000828:	4661      	mov	r1, ip
 800082a:	1a82      	subs	r2, r0, r2
 800082c:	4091      	lsls	r1, r2
 800082e:	430f      	orrs	r7, r1
 8000830:	0039      	movs	r1, r7
 8000832:	1e4f      	subs	r7, r1, #1
 8000834:	41b9      	sbcs	r1, r7
 8000836:	430d      	orrs	r5, r1
 8000838:	e11b      	b.n	8000a72 <__aeabi_dadd+0x3f2>
 800083a:	0029      	movs	r1, r5
 800083c:	4339      	orrs	r1, r7
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x1c2>
 8000840:	e0b5      	b.n	80009ae <__aeabi_dadd+0x32e>
 8000842:	1e51      	subs	r1, r2, #1
 8000844:	2a01      	cmp	r2, #1
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x1ca>
 8000848:	e1ab      	b.n	8000ba2 <__aeabi_dadd+0x522>
 800084a:	486a      	ldr	r0, [pc, #424]	; (80009f4 <__aeabi_dadd+0x374>)
 800084c:	4282      	cmp	r2, r0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x1d2>
 8000850:	e1b2      	b.n	8000bb8 <__aeabi_dadd+0x538>
 8000852:	000a      	movs	r2, r1
 8000854:	e743      	b.n	80006de <__aeabi_dadd+0x5e>
 8000856:	4969      	ldr	r1, [pc, #420]	; (80009fc <__aeabi_dadd+0x37c>)
 8000858:	1c75      	adds	r5, r6, #1
 800085a:	420d      	tst	r5, r1
 800085c:	d000      	beq.n	8000860 <__aeabi_dadd+0x1e0>
 800085e:	e0cf      	b.n	8000a00 <__aeabi_dadd+0x380>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1e6>
 8000864:	e193      	b.n	8000b8e <__aeabi_dadd+0x50e>
 8000866:	4649      	mov	r1, r9
 8000868:	4319      	orrs	r1, r3
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x1ee>
 800086c:	e1d1      	b.n	8000c12 <__aeabi_dadd+0x592>
 800086e:	4661      	mov	r1, ip
 8000870:	4339      	orrs	r1, r7
 8000872:	d000      	beq.n	8000876 <__aeabi_dadd+0x1f6>
 8000874:	e1e3      	b.n	8000c3e <__aeabi_dadd+0x5be>
 8000876:	4649      	mov	r1, r9
 8000878:	0758      	lsls	r0, r3, #29
 800087a:	08c9      	lsrs	r1, r1, #3
 800087c:	4301      	orrs	r1, r0
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	e026      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000882:	0029      	movs	r1, r5
 8000884:	4339      	orrs	r1, r7
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x20a>
 8000888:	e091      	b.n	80009ae <__aeabi_dadd+0x32e>
 800088a:	1e51      	subs	r1, r2, #1
 800088c:	2a01      	cmp	r2, #1
 800088e:	d005      	beq.n	800089c <__aeabi_dadd+0x21c>
 8000890:	4858      	ldr	r0, [pc, #352]	; (80009f4 <__aeabi_dadd+0x374>)
 8000892:	4282      	cmp	r2, r0
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x218>
 8000896:	e18f      	b.n	8000bb8 <__aeabi_dadd+0x538>
 8000898:	000a      	movs	r2, r1
 800089a:	e7b8      	b.n	800080e <__aeabi_dadd+0x18e>
 800089c:	003d      	movs	r5, r7
 800089e:	444d      	add	r5, r9
 80008a0:	454d      	cmp	r5, r9
 80008a2:	4189      	sbcs	r1, r1
 80008a4:	4463      	add	r3, ip
 80008a6:	4698      	mov	r8, r3
 80008a8:	4249      	negs	r1, r1
 80008aa:	4488      	add	r8, r1
 80008ac:	4643      	mov	r3, r8
 80008ae:	2602      	movs	r6, #2
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	d500      	bpl.n	80008b6 <__aeabi_dadd+0x236>
 80008b4:	e0eb      	b.n	8000a8e <__aeabi_dadd+0x40e>
 80008b6:	3e01      	subs	r6, #1
 80008b8:	076b      	lsls	r3, r5, #29
 80008ba:	d000      	beq.n	80008be <__aeabi_dadd+0x23e>
 80008bc:	e75c      	b.n	8000778 <__aeabi_dadd+0xf8>
 80008be:	4643      	mov	r3, r8
 80008c0:	08e9      	lsrs	r1, r5, #3
 80008c2:	075a      	lsls	r2, r3, #29
 80008c4:	4311      	orrs	r1, r2
 80008c6:	0032      	movs	r2, r6
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	484a      	ldr	r0, [pc, #296]	; (80009f4 <__aeabi_dadd+0x374>)
 80008cc:	4282      	cmp	r2, r0
 80008ce:	d021      	beq.n	8000914 <__aeabi_dadd+0x294>
 80008d0:	031b      	lsls	r3, r3, #12
 80008d2:	0552      	lsls	r2, r2, #21
 80008d4:	0b1b      	lsrs	r3, r3, #12
 80008d6:	0d52      	lsrs	r2, r2, #21
 80008d8:	e76c      	b.n	80007b4 <__aeabi_dadd+0x134>
 80008da:	2300      	movs	r3, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	e769      	b.n	80007b4 <__aeabi_dadd+0x134>
 80008e0:	002a      	movs	r2, r5
 80008e2:	433a      	orrs	r2, r7
 80008e4:	d069      	beq.n	80009ba <__aeabi_dadd+0x33a>
 80008e6:	464a      	mov	r2, r9
 80008e8:	0758      	lsls	r0, r3, #29
 80008ea:	08d1      	lsrs	r1, r2, #3
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	031b      	lsls	r3, r3, #12
 80008f2:	4308      	orrs	r0, r1
 80008f4:	421a      	tst	r2, r3
 80008f6:	d007      	beq.n	8000908 <__aeabi_dadd+0x288>
 80008f8:	0029      	movs	r1, r5
 80008fa:	08ed      	lsrs	r5, r5, #3
 80008fc:	421d      	tst	r5, r3
 80008fe:	d103      	bne.n	8000908 <__aeabi_dadd+0x288>
 8000900:	002a      	movs	r2, r5
 8000902:	08ff      	lsrs	r7, r7, #3
 8000904:	0748      	lsls	r0, r1, #29
 8000906:	4338      	orrs	r0, r7
 8000908:	0f43      	lsrs	r3, r0, #29
 800090a:	00c1      	lsls	r1, r0, #3
 800090c:	075b      	lsls	r3, r3, #29
 800090e:	08c9      	lsrs	r1, r1, #3
 8000910:	4319      	orrs	r1, r3
 8000912:	0013      	movs	r3, r2
 8000914:	000a      	movs	r2, r1
 8000916:	431a      	orrs	r2, r3
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x29c>
 800091a:	e213      	b.n	8000d44 <__aeabi_dadd+0x6c4>
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0312      	lsls	r2, r2, #12
 8000920:	4313      	orrs	r3, r2
 8000922:	031b      	lsls	r3, r3, #12
 8000924:	4a33      	ldr	r2, [pc, #204]	; (80009f4 <__aeabi_dadd+0x374>)
 8000926:	0b1b      	lsrs	r3, r3, #12
 8000928:	e744      	b.n	80007b4 <__aeabi_dadd+0x134>
 800092a:	2a00      	cmp	r2, #0
 800092c:	d04b      	beq.n	80009c6 <__aeabi_dadd+0x346>
 800092e:	1b8a      	subs	r2, r1, r6
 8000930:	2e00      	cmp	r6, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x2b6>
 8000934:	e0e7      	b.n	8000b06 <__aeabi_dadd+0x486>
 8000936:	482f      	ldr	r0, [pc, #188]	; (80009f4 <__aeabi_dadd+0x374>)
 8000938:	4281      	cmp	r1, r0
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x2be>
 800093c:	e195      	b.n	8000c6a <__aeabi_dadd+0x5ea>
 800093e:	2080      	movs	r0, #128	; 0x80
 8000940:	0400      	lsls	r0, r0, #16
 8000942:	4303      	orrs	r3, r0
 8000944:	2a38      	cmp	r2, #56	; 0x38
 8000946:	dd00      	ble.n	800094a <__aeabi_dadd+0x2ca>
 8000948:	e143      	b.n	8000bd2 <__aeabi_dadd+0x552>
 800094a:	2a1f      	cmp	r2, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x2d0>
 800094e:	e1db      	b.n	8000d08 <__aeabi_dadd+0x688>
 8000950:	2020      	movs	r0, #32
 8000952:	001d      	movs	r5, r3
 8000954:	464e      	mov	r6, r9
 8000956:	1a80      	subs	r0, r0, r2
 8000958:	4085      	lsls	r5, r0
 800095a:	40d6      	lsrs	r6, r2
 800095c:	4335      	orrs	r5, r6
 800095e:	464e      	mov	r6, r9
 8000960:	4086      	lsls	r6, r0
 8000962:	0030      	movs	r0, r6
 8000964:	40d3      	lsrs	r3, r2
 8000966:	1e46      	subs	r6, r0, #1
 8000968:	41b0      	sbcs	r0, r6
 800096a:	449c      	add	ip, r3
 800096c:	4305      	orrs	r5, r0
 800096e:	19ed      	adds	r5, r5, r7
 8000970:	42bd      	cmp	r5, r7
 8000972:	419b      	sbcs	r3, r3
 8000974:	425b      	negs	r3, r3
 8000976:	4463      	add	r3, ip
 8000978:	4698      	mov	r8, r3
 800097a:	000e      	movs	r6, r1
 800097c:	e07f      	b.n	8000a7e <__aeabi_dadd+0x3fe>
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <__aeabi_dadd+0x378>)
 8000980:	1a76      	subs	r6, r6, r1
 8000982:	4013      	ands	r3, r2
 8000984:	4698      	mov	r8, r3
 8000986:	e6f5      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000988:	0028      	movs	r0, r5
 800098a:	f001 fc91 	bl	80022b0 <__clzsi2>
 800098e:	0001      	movs	r1, r0
 8000990:	3118      	adds	r1, #24
 8000992:	291f      	cmp	r1, #31
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dadd+0x318>
 8000996:	e6cf      	b.n	8000738 <__aeabi_dadd+0xb8>
 8000998:	002b      	movs	r3, r5
 800099a:	3808      	subs	r0, #8
 800099c:	4083      	lsls	r3, r0
 800099e:	2500      	movs	r5, #0
 80009a0:	e6d2      	b.n	8000748 <__aeabi_dadd+0xc8>
 80009a2:	4662      	mov	r2, ip
 80009a4:	433a      	orrs	r2, r7
 80009a6:	0011      	movs	r1, r2
 80009a8:	1e4f      	subs	r7, r1, #1
 80009aa:	41b9      	sbcs	r1, r7
 80009ac:	e6ac      	b.n	8000708 <__aeabi_dadd+0x88>
 80009ae:	4649      	mov	r1, r9
 80009b0:	0758      	lsls	r0, r3, #29
 80009b2:	08c9      	lsrs	r1, r1, #3
 80009b4:	4301      	orrs	r1, r0
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	e787      	b.n	80008ca <__aeabi_dadd+0x24a>
 80009ba:	4649      	mov	r1, r9
 80009bc:	075a      	lsls	r2, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	4311      	orrs	r1, r2
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	e7a6      	b.n	8000914 <__aeabi_dadd+0x294>
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <__aeabi_dadd+0x37c>)
 80009c8:	1c70      	adds	r0, r6, #1
 80009ca:	4208      	tst	r0, r1
 80009cc:	d000      	beq.n	80009d0 <__aeabi_dadd+0x350>
 80009ce:	e0bb      	b.n	8000b48 <__aeabi_dadd+0x4c8>
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x356>
 80009d4:	e114      	b.n	8000c00 <__aeabi_dadd+0x580>
 80009d6:	4649      	mov	r1, r9
 80009d8:	4319      	orrs	r1, r3
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x35e>
 80009dc:	e175      	b.n	8000cca <__aeabi_dadd+0x64a>
 80009de:	0029      	movs	r1, r5
 80009e0:	4339      	orrs	r1, r7
 80009e2:	d000      	beq.n	80009e6 <__aeabi_dadd+0x366>
 80009e4:	e17e      	b.n	8000ce4 <__aeabi_dadd+0x664>
 80009e6:	4649      	mov	r1, r9
 80009e8:	0758      	lsls	r0, r3, #29
 80009ea:	08c9      	lsrs	r1, r1, #3
 80009ec:	4301      	orrs	r1, r0
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	e76e      	b.n	80008d0 <__aeabi_dadd+0x250>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	000007ff 	.word	0x000007ff
 80009f8:	ff7fffff 	.word	0xff7fffff
 80009fc:	000007fe 	.word	0x000007fe
 8000a00:	4649      	mov	r1, r9
 8000a02:	1bcd      	subs	r5, r1, r7
 8000a04:	4661      	mov	r1, ip
 8000a06:	1a58      	subs	r0, r3, r1
 8000a08:	45a9      	cmp	r9, r5
 8000a0a:	4189      	sbcs	r1, r1
 8000a0c:	4249      	negs	r1, r1
 8000a0e:	4688      	mov	r8, r1
 8000a10:	0001      	movs	r1, r0
 8000a12:	4640      	mov	r0, r8
 8000a14:	1a09      	subs	r1, r1, r0
 8000a16:	4688      	mov	r8, r1
 8000a18:	0209      	lsls	r1, r1, #8
 8000a1a:	d500      	bpl.n	8000a1e <__aeabi_dadd+0x39e>
 8000a1c:	e0a6      	b.n	8000b6c <__aeabi_dadd+0x4ec>
 8000a1e:	4641      	mov	r1, r8
 8000a20:	4329      	orrs	r1, r5
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dadd+0x3a6>
 8000a24:	e67f      	b.n	8000726 <__aeabi_dadd+0xa6>
 8000a26:	2300      	movs	r3, #0
 8000a28:	2400      	movs	r4, #0
 8000a2a:	e751      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000a2c:	4cc7      	ldr	r4, [pc, #796]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000a2e:	42a1      	cmp	r1, r4
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x3b4>
 8000a32:	e0c7      	b.n	8000bc4 <__aeabi_dadd+0x544>
 8000a34:	2480      	movs	r4, #128	; 0x80
 8000a36:	0424      	lsls	r4, r4, #16
 8000a38:	4323      	orrs	r3, r4
 8000a3a:	2a38      	cmp	r2, #56	; 0x38
 8000a3c:	dc54      	bgt.n	8000ae8 <__aeabi_dadd+0x468>
 8000a3e:	2a1f      	cmp	r2, #31
 8000a40:	dd00      	ble.n	8000a44 <__aeabi_dadd+0x3c4>
 8000a42:	e0cc      	b.n	8000bde <__aeabi_dadd+0x55e>
 8000a44:	2420      	movs	r4, #32
 8000a46:	4648      	mov	r0, r9
 8000a48:	1aa4      	subs	r4, r4, r2
 8000a4a:	001d      	movs	r5, r3
 8000a4c:	464e      	mov	r6, r9
 8000a4e:	40a0      	lsls	r0, r4
 8000a50:	40d6      	lsrs	r6, r2
 8000a52:	40a5      	lsls	r5, r4
 8000a54:	0004      	movs	r4, r0
 8000a56:	40d3      	lsrs	r3, r2
 8000a58:	4662      	mov	r2, ip
 8000a5a:	4335      	orrs	r5, r6
 8000a5c:	1e66      	subs	r6, r4, #1
 8000a5e:	41b4      	sbcs	r4, r6
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	469c      	mov	ip, r3
 8000a64:	4325      	orrs	r5, r4
 8000a66:	e044      	b.n	8000af2 <__aeabi_dadd+0x472>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	433a      	orrs	r2, r7
 8000a6c:	0015      	movs	r5, r2
 8000a6e:	1e6f      	subs	r7, r5, #1
 8000a70:	41bd      	sbcs	r5, r7
 8000a72:	444d      	add	r5, r9
 8000a74:	454d      	cmp	r5, r9
 8000a76:	4189      	sbcs	r1, r1
 8000a78:	4249      	negs	r1, r1
 8000a7a:	4688      	mov	r8, r1
 8000a7c:	4498      	add	r8, r3
 8000a7e:	4643      	mov	r3, r8
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	d400      	bmi.n	8000a86 <__aeabi_dadd+0x406>
 8000a84:	e718      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000a86:	4bb1      	ldr	r3, [pc, #708]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000a88:	3601      	adds	r6, #1
 8000a8a:	429e      	cmp	r6, r3
 8000a8c:	d049      	beq.n	8000b22 <__aeabi_dadd+0x4a2>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	4baf      	ldr	r3, [pc, #700]	; (8000d50 <__aeabi_dadd+0x6d0>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	401a      	ands	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	086a      	lsrs	r2, r5, #1
 8000a9a:	400d      	ands	r5, r1
 8000a9c:	4315      	orrs	r5, r2
 8000a9e:	07d9      	lsls	r1, r3, #31
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	4698      	mov	r8, r3
 8000aa4:	430d      	orrs	r5, r1
 8000aa6:	e665      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	3e1f      	subs	r6, #31
 8000aac:	40f0      	lsrs	r0, r6
 8000aae:	2a20      	cmp	r2, #32
 8000ab0:	d003      	beq.n	8000aba <__aeabi_dadd+0x43a>
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	431d      	orrs	r5, r3
 8000aba:	1e69      	subs	r1, r5, #1
 8000abc:	418d      	sbcs	r5, r1
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	4305      	orrs	r5, r0
 8000ac6:	e6f7      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000ac8:	0011      	movs	r1, r2
 8000aca:	4665      	mov	r5, ip
 8000acc:	3920      	subs	r1, #32
 8000ace:	40cd      	lsrs	r5, r1
 8000ad0:	2a20      	cmp	r2, #32
 8000ad2:	d004      	beq.n	8000ade <__aeabi_dadd+0x45e>
 8000ad4:	2040      	movs	r0, #64	; 0x40
 8000ad6:	4661      	mov	r1, ip
 8000ad8:	1a82      	subs	r2, r0, r2
 8000ada:	4091      	lsls	r1, r2
 8000adc:	430f      	orrs	r7, r1
 8000ade:	0039      	movs	r1, r7
 8000ae0:	1e4f      	subs	r7, r1, #1
 8000ae2:	41b9      	sbcs	r1, r7
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	e60f      	b.n	8000708 <__aeabi_dadd+0x88>
 8000ae8:	464a      	mov	r2, r9
 8000aea:	4313      	orrs	r3, r2
 8000aec:	001d      	movs	r5, r3
 8000aee:	1e6b      	subs	r3, r5, #1
 8000af0:	419d      	sbcs	r5, r3
 8000af2:	1b7d      	subs	r5, r7, r5
 8000af4:	42af      	cmp	r7, r5
 8000af6:	419b      	sbcs	r3, r3
 8000af8:	4662      	mov	r2, ip
 8000afa:	425b      	negs	r3, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	4698      	mov	r8, r3
 8000b00:	4654      	mov	r4, sl
 8000b02:	000e      	movs	r6, r1
 8000b04:	e607      	b.n	8000716 <__aeabi_dadd+0x96>
 8000b06:	4648      	mov	r0, r9
 8000b08:	4318      	orrs	r0, r3
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x48e>
 8000b0c:	e0b3      	b.n	8000c76 <__aeabi_dadd+0x5f6>
 8000b0e:	1e50      	subs	r0, r2, #1
 8000b10:	2a01      	cmp	r2, #1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x496>
 8000b14:	e10d      	b.n	8000d32 <__aeabi_dadd+0x6b2>
 8000b16:	4d8d      	ldr	r5, [pc, #564]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000b18:	42aa      	cmp	r2, r5
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x49e>
 8000b1c:	e0a5      	b.n	8000c6a <__aeabi_dadd+0x5ea>
 8000b1e:	0002      	movs	r2, r0
 8000b20:	e710      	b.n	8000944 <__aeabi_dadd+0x2c4>
 8000b22:	0032      	movs	r2, r6
 8000b24:	2300      	movs	r3, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	e644      	b.n	80007b4 <__aeabi_dadd+0x134>
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	0038      	movs	r0, r7
 8000b2e:	1a89      	subs	r1, r1, r2
 8000b30:	4665      	mov	r5, ip
 8000b32:	408f      	lsls	r7, r1
 8000b34:	408d      	lsls	r5, r1
 8000b36:	40d0      	lsrs	r0, r2
 8000b38:	1e79      	subs	r1, r7, #1
 8000b3a:	418f      	sbcs	r7, r1
 8000b3c:	4305      	orrs	r5, r0
 8000b3e:	433d      	orrs	r5, r7
 8000b40:	4667      	mov	r7, ip
 8000b42:	40d7      	lsrs	r7, r2
 8000b44:	19db      	adds	r3, r3, r7
 8000b46:	e794      	b.n	8000a72 <__aeabi_dadd+0x3f2>
 8000b48:	4a80      	ldr	r2, [pc, #512]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x4d0>
 8000b4e:	e0ec      	b.n	8000d2a <__aeabi_dadd+0x6aa>
 8000b50:	0039      	movs	r1, r7
 8000b52:	4449      	add	r1, r9
 8000b54:	4549      	cmp	r1, r9
 8000b56:	4192      	sbcs	r2, r2
 8000b58:	4463      	add	r3, ip
 8000b5a:	4252      	negs	r2, r2
 8000b5c:	189b      	adds	r3, r3, r2
 8000b5e:	07dd      	lsls	r5, r3, #31
 8000b60:	0849      	lsrs	r1, r1, #1
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	0006      	movs	r6, r0
 8000b68:	430d      	orrs	r5, r1
 8000b6a:	e6a5      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1abd      	subs	r5, r7, r2
 8000b70:	42af      	cmp	r7, r5
 8000b72:	4189      	sbcs	r1, r1
 8000b74:	4662      	mov	r2, ip
 8000b76:	4249      	negs	r1, r1
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	1a5b      	subs	r3, r3, r1
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	4654      	mov	r4, sl
 8000b80:	e5d1      	b.n	8000726 <__aeabi_dadd+0xa6>
 8000b82:	076c      	lsls	r4, r5, #29
 8000b84:	08f9      	lsrs	r1, r7, #3
 8000b86:	4321      	orrs	r1, r4
 8000b88:	08eb      	lsrs	r3, r5, #3
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	e69d      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	431a      	orrs	r2, r3
 8000b92:	d175      	bne.n	8000c80 <__aeabi_dadd+0x600>
 8000b94:	4661      	mov	r1, ip
 8000b96:	4339      	orrs	r1, r7
 8000b98:	d114      	bne.n	8000bc4 <__aeabi_dadd+0x544>
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	2400      	movs	r4, #0
 8000b9e:	031b      	lsls	r3, r3, #12
 8000ba0:	e6bc      	b.n	800091c <__aeabi_dadd+0x29c>
 8000ba2:	464a      	mov	r2, r9
 8000ba4:	1bd5      	subs	r5, r2, r7
 8000ba6:	45a9      	cmp	r9, r5
 8000ba8:	4189      	sbcs	r1, r1
 8000baa:	4662      	mov	r2, ip
 8000bac:	4249      	negs	r1, r1
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	2601      	movs	r6, #1
 8000bb6:	e5ae      	b.n	8000716 <__aeabi_dadd+0x96>
 8000bb8:	464a      	mov	r2, r9
 8000bba:	08d1      	lsrs	r1, r2, #3
 8000bbc:	075a      	lsls	r2, r3, #29
 8000bbe:	4311      	orrs	r1, r2
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	e6a7      	b.n	8000914 <__aeabi_dadd+0x294>
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	08f9      	lsrs	r1, r7, #3
 8000bc8:	075a      	lsls	r2, r3, #29
 8000bca:	4654      	mov	r4, sl
 8000bcc:	4311      	orrs	r1, r2
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	e6a0      	b.n	8000914 <__aeabi_dadd+0x294>
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	001d      	movs	r5, r3
 8000bd8:	1e6b      	subs	r3, r5, #1
 8000bda:	419d      	sbcs	r5, r3
 8000bdc:	e6c7      	b.n	800096e <__aeabi_dadd+0x2ee>
 8000bde:	0014      	movs	r4, r2
 8000be0:	001e      	movs	r6, r3
 8000be2:	3c20      	subs	r4, #32
 8000be4:	40e6      	lsrs	r6, r4
 8000be6:	2a20      	cmp	r2, #32
 8000be8:	d005      	beq.n	8000bf6 <__aeabi_dadd+0x576>
 8000bea:	2440      	movs	r4, #64	; 0x40
 8000bec:	1aa2      	subs	r2, r4, r2
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	464a      	mov	r2, r9
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	4691      	mov	r9, r2
 8000bf6:	464d      	mov	r5, r9
 8000bf8:	1e6b      	subs	r3, r5, #1
 8000bfa:	419d      	sbcs	r5, r3
 8000bfc:	4335      	orrs	r5, r6
 8000bfe:	e778      	b.n	8000af2 <__aeabi_dadd+0x472>
 8000c00:	464a      	mov	r2, r9
 8000c02:	431a      	orrs	r2, r3
 8000c04:	d000      	beq.n	8000c08 <__aeabi_dadd+0x588>
 8000c06:	e66b      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000c08:	076b      	lsls	r3, r5, #29
 8000c0a:	08f9      	lsrs	r1, r7, #3
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	08eb      	lsrs	r3, r5, #3
 8000c10:	e680      	b.n	8000914 <__aeabi_dadd+0x294>
 8000c12:	4661      	mov	r1, ip
 8000c14:	4339      	orrs	r1, r7
 8000c16:	d054      	beq.n	8000cc2 <__aeabi_dadd+0x642>
 8000c18:	4663      	mov	r3, ip
 8000c1a:	08f9      	lsrs	r1, r7, #3
 8000c1c:	075c      	lsls	r4, r3, #29
 8000c1e:	4321      	orrs	r1, r4
 8000c20:	08db      	lsrs	r3, r3, #3
 8000c22:	0004      	movs	r4, r0
 8000c24:	e654      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000c26:	464a      	mov	r2, r9
 8000c28:	1abd      	subs	r5, r7, r2
 8000c2a:	42af      	cmp	r7, r5
 8000c2c:	4189      	sbcs	r1, r1
 8000c2e:	4662      	mov	r2, ip
 8000c30:	4249      	negs	r1, r1
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	4698      	mov	r8, r3
 8000c38:	0004      	movs	r4, r0
 8000c3a:	2601      	movs	r6, #1
 8000c3c:	e56b      	b.n	8000716 <__aeabi_dadd+0x96>
 8000c3e:	464a      	mov	r2, r9
 8000c40:	1bd5      	subs	r5, r2, r7
 8000c42:	45a9      	cmp	r9, r5
 8000c44:	4189      	sbcs	r1, r1
 8000c46:	4662      	mov	r2, ip
 8000c48:	4249      	negs	r1, r1
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	1a52      	subs	r2, r2, r1
 8000c4e:	4690      	mov	r8, r2
 8000c50:	0212      	lsls	r2, r2, #8
 8000c52:	d532      	bpl.n	8000cba <__aeabi_dadd+0x63a>
 8000c54:	464a      	mov	r2, r9
 8000c56:	1abd      	subs	r5, r7, r2
 8000c58:	42af      	cmp	r7, r5
 8000c5a:	4189      	sbcs	r1, r1
 8000c5c:	4662      	mov	r2, ip
 8000c5e:	4249      	negs	r1, r1
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	1a5b      	subs	r3, r3, r1
 8000c64:	4698      	mov	r8, r3
 8000c66:	0004      	movs	r4, r0
 8000c68:	e584      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000c6a:	4663      	mov	r3, ip
 8000c6c:	08f9      	lsrs	r1, r7, #3
 8000c6e:	075a      	lsls	r2, r3, #29
 8000c70:	4311      	orrs	r1, r2
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	e64e      	b.n	8000914 <__aeabi_dadd+0x294>
 8000c76:	08f9      	lsrs	r1, r7, #3
 8000c78:	0768      	lsls	r0, r5, #29
 8000c7a:	4301      	orrs	r1, r0
 8000c7c:	08eb      	lsrs	r3, r5, #3
 8000c7e:	e624      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000c80:	4662      	mov	r2, ip
 8000c82:	433a      	orrs	r2, r7
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x608>
 8000c86:	e698      	b.n	80009ba <__aeabi_dadd+0x33a>
 8000c88:	464a      	mov	r2, r9
 8000c8a:	08d1      	lsrs	r1, r2, #3
 8000c8c:	075a      	lsls	r2, r3, #29
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	031b      	lsls	r3, r3, #12
 8000c96:	421a      	tst	r2, r3
 8000c98:	d008      	beq.n	8000cac <__aeabi_dadd+0x62c>
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	08c5      	lsrs	r5, r0, #3
 8000c9e:	421d      	tst	r5, r3
 8000ca0:	d104      	bne.n	8000cac <__aeabi_dadd+0x62c>
 8000ca2:	4654      	mov	r4, sl
 8000ca4:	002a      	movs	r2, r5
 8000ca6:	08f9      	lsrs	r1, r7, #3
 8000ca8:	0743      	lsls	r3, r0, #29
 8000caa:	4319      	orrs	r1, r3
 8000cac:	0f4b      	lsrs	r3, r1, #29
 8000cae:	00c9      	lsls	r1, r1, #3
 8000cb0:	075b      	lsls	r3, r3, #29
 8000cb2:	08c9      	lsrs	r1, r1, #3
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	e62c      	b.n	8000914 <__aeabi_dadd+0x294>
 8000cba:	4641      	mov	r1, r8
 8000cbc:	4329      	orrs	r1, r5
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_dadd+0x642>
 8000cc0:	e5fa      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	e602      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000cca:	076b      	lsls	r3, r5, #29
 8000ccc:	08f9      	lsrs	r1, r7, #3
 8000cce:	4319      	orrs	r1, r3
 8000cd0:	08eb      	lsrs	r3, r5, #3
 8000cd2:	e5fd      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000cd4:	4663      	mov	r3, ip
 8000cd6:	08f9      	lsrs	r1, r7, #3
 8000cd8:	075b      	lsls	r3, r3, #29
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	4663      	mov	r3, ip
 8000cde:	0004      	movs	r4, r0
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	e617      	b.n	8000914 <__aeabi_dadd+0x294>
 8000ce4:	003d      	movs	r5, r7
 8000ce6:	444d      	add	r5, r9
 8000ce8:	4463      	add	r3, ip
 8000cea:	454d      	cmp	r5, r9
 8000cec:	4189      	sbcs	r1, r1
 8000cee:	4698      	mov	r8, r3
 8000cf0:	4249      	negs	r1, r1
 8000cf2:	4488      	add	r8, r1
 8000cf4:	4643      	mov	r3, r8
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	d400      	bmi.n	8000cfc <__aeabi_dadd+0x67c>
 8000cfa:	e5dd      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000cfc:	4642      	mov	r2, r8
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <__aeabi_dadd+0x6d0>)
 8000d00:	2601      	movs	r6, #1
 8000d02:	401a      	ands	r2, r3
 8000d04:	4690      	mov	r8, r2
 8000d06:	e5d7      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000d08:	0010      	movs	r0, r2
 8000d0a:	001e      	movs	r6, r3
 8000d0c:	3820      	subs	r0, #32
 8000d0e:	40c6      	lsrs	r6, r0
 8000d10:	2a20      	cmp	r2, #32
 8000d12:	d005      	beq.n	8000d20 <__aeabi_dadd+0x6a0>
 8000d14:	2040      	movs	r0, #64	; 0x40
 8000d16:	1a82      	subs	r2, r0, r2
 8000d18:	4093      	lsls	r3, r2
 8000d1a:	464a      	mov	r2, r9
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	4691      	mov	r9, r2
 8000d20:	464d      	mov	r5, r9
 8000d22:	1e6b      	subs	r3, r5, #1
 8000d24:	419d      	sbcs	r5, r3
 8000d26:	4335      	orrs	r5, r6
 8000d28:	e621      	b.n	800096e <__aeabi_dadd+0x2ee>
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x134>
 8000d32:	464a      	mov	r2, r9
 8000d34:	19d5      	adds	r5, r2, r7
 8000d36:	42bd      	cmp	r5, r7
 8000d38:	4189      	sbcs	r1, r1
 8000d3a:	4463      	add	r3, ip
 8000d3c:	4698      	mov	r8, r3
 8000d3e:	4249      	negs	r1, r1
 8000d40:	4488      	add	r8, r1
 8000d42:	e5b3      	b.n	80008ac <__aeabi_dadd+0x22c>
 8000d44:	2100      	movs	r1, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000d48:	000b      	movs	r3, r1
 8000d4a:	e533      	b.n	80007b4 <__aeabi_dadd+0x134>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d059      	beq.n	8000e2c <__aeabi_ddiv+0xd8>
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x2c>
 8000d7e:	e098      	b.n	8000eb2 <__aeabi_ddiv+0x15e>
 8000d80:	0f6b      	lsrs	r3, r5, #29
 8000d82:	00e4      	lsls	r4, r4, #3
 8000d84:	431c      	orrs	r4, r3
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	4323      	orrs	r3, r4
 8000d8c:	4698      	mov	r8, r3
 8000d8e:	4b83      	ldr	r3, [pc, #524]	; (8000f9c <__aeabi_ddiv+0x248>)
 8000d90:	00ed      	lsls	r5, r5, #3
 8000d92:	469b      	mov	fp, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	4699      	mov	r9, r3
 8000d98:	4483      	add	fp, r0
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	033c      	lsls	r4, r7, #12
 8000d9e:	007b      	lsls	r3, r7, #1
 8000da0:	4650      	mov	r0, sl
 8000da2:	0b24      	lsrs	r4, r4, #12
 8000da4:	0d5b      	lsrs	r3, r3, #21
 8000da6:	0fff      	lsrs	r7, r7, #31
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d067      	beq.n	8000e7c <__aeabi_ddiv+0x128>
 8000dac:	4a7a      	ldr	r2, [pc, #488]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d018      	beq.n	8000de4 <__aeabi_ddiv+0x90>
 8000db2:	497a      	ldr	r1, [pc, #488]	; (8000f9c <__aeabi_ddiv+0x248>)
 8000db4:	0f42      	lsrs	r2, r0, #29
 8000db6:	468c      	mov	ip, r1
 8000db8:	00e4      	lsls	r4, r4, #3
 8000dba:	4659      	mov	r1, fp
 8000dbc:	4314      	orrs	r4, r2
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	4463      	add	r3, ip
 8000dc2:	0412      	lsls	r2, r2, #16
 8000dc4:	1acb      	subs	r3, r1, r3
 8000dc6:	4314      	orrs	r4, r2
 8000dc8:	469b      	mov	fp, r3
 8000dca:	00c2      	lsls	r2, r0, #3
 8000dcc:	2000      	movs	r0, #0
 8000dce:	0033      	movs	r3, r6
 8000dd0:	407b      	eors	r3, r7
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d900      	bls.n	8000ddc <__aeabi_ddiv+0x88>
 8000dda:	e0ef      	b.n	8000fbc <__aeabi_ddiv+0x268>
 8000ddc:	4970      	ldr	r1, [pc, #448]	; (8000fa0 <__aeabi_ddiv+0x24c>)
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	58cb      	ldr	r3, [r1, r3]
 8000de2:	469f      	mov	pc, r3
 8000de4:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <__aeabi_ddiv+0x250>)
 8000de6:	4652      	mov	r2, sl
 8000de8:	469c      	mov	ip, r3
 8000dea:	4322      	orrs	r2, r4
 8000dec:	44e3      	add	fp, ip
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_ddiv+0xa0>
 8000df2:	e095      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000df4:	4649      	mov	r1, r9
 8000df6:	2302      	movs	r3, #2
 8000df8:	4319      	orrs	r1, r3
 8000dfa:	4689      	mov	r9, r1
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	2002      	movs	r0, #2
 8000e00:	e7e5      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000e02:	2300      	movs	r3, #0
 8000e04:	2400      	movs	r4, #0
 8000e06:	2500      	movs	r5, #0
 8000e08:	4652      	mov	r2, sl
 8000e0a:	051b      	lsls	r3, r3, #20
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	07d2      	lsls	r2, r2, #31
 8000e10:	4313      	orrs	r3, r2
 8000e12:	0028      	movs	r0, r5
 8000e14:	0019      	movs	r1, r3
 8000e16:	b005      	add	sp, #20
 8000e18:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1a:	46bb      	mov	fp, r7
 8000e1c:	46b2      	mov	sl, r6
 8000e1e:	46a9      	mov	r9, r5
 8000e20:	46a0      	mov	r8, r4
 8000e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e24:	2400      	movs	r4, #0
 8000e26:	2500      	movs	r5, #0
 8000e28:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000e2a:	e7ed      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	4698      	mov	r8, r3
 8000e32:	d100      	bne.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e089      	b.n	8000f4a <__aeabi_ddiv+0x1f6>
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0xe8>
 8000e3a:	e1e0      	b.n	80011fe <__aeabi_ddiv+0x4aa>
 8000e3c:	0020      	movs	r0, r4
 8000e3e:	f001 fa37 	bl	80022b0 <__clzsi2>
 8000e42:	0001      	movs	r1, r0
 8000e44:	0002      	movs	r2, r0
 8000e46:	390b      	subs	r1, #11
 8000e48:	231d      	movs	r3, #29
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	0010      	movs	r0, r2
 8000e50:	40d9      	lsrs	r1, r3
 8000e52:	3808      	subs	r0, #8
 8000e54:	4084      	lsls	r4, r0
 8000e56:	000b      	movs	r3, r1
 8000e58:	464d      	mov	r5, r9
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	4085      	lsls	r5, r0
 8000e60:	4851      	ldr	r0, [pc, #324]	; (8000fa8 <__aeabi_ddiv+0x254>)
 8000e62:	033c      	lsls	r4, r7, #12
 8000e64:	1a83      	subs	r3, r0, r2
 8000e66:	469b      	mov	fp, r3
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	007b      	lsls	r3, r7, #1
 8000e70:	4650      	mov	r0, sl
 8000e72:	0b24      	lsrs	r4, r4, #12
 8000e74:	0d5b      	lsrs	r3, r3, #21
 8000e76:	0fff      	lsrs	r7, r7, #31
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d197      	bne.n	8000dac <__aeabi_ddiv+0x58>
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	4322      	orrs	r2, r4
 8000e80:	d055      	beq.n	8000f2e <__aeabi_ddiv+0x1da>
 8000e82:	2c00      	cmp	r4, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_ddiv+0x134>
 8000e86:	e1ca      	b.n	800121e <__aeabi_ddiv+0x4ca>
 8000e88:	0020      	movs	r0, r4
 8000e8a:	f001 fa11 	bl	80022b0 <__clzsi2>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	3a0b      	subs	r2, #11
 8000e92:	231d      	movs	r3, #29
 8000e94:	0001      	movs	r1, r0
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	4652      	mov	r2, sl
 8000e9a:	3908      	subs	r1, #8
 8000e9c:	40da      	lsrs	r2, r3
 8000e9e:	408c      	lsls	r4, r1
 8000ea0:	4314      	orrs	r4, r2
 8000ea2:	4652      	mov	r2, sl
 8000ea4:	408a      	lsls	r2, r1
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <__aeabi_ddiv+0x258>)
 8000ea8:	4458      	add	r0, fp
 8000eaa:	469b      	mov	fp, r3
 8000eac:	4483      	add	fp, r0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e78d      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	d140      	bne.n	8000f3c <__aeabi_ddiv+0x1e8>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	3b06      	subs	r3, #6
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	4683      	mov	fp, r0
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	e769      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000ec8:	46b2      	mov	sl, r6
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d0a9      	beq.n	8000e24 <__aeabi_ddiv+0xd0>
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_ddiv+0x182>
 8000ed4:	e211      	b.n	80012fa <__aeabi_ddiv+0x5a6>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d093      	beq.n	8000e02 <__aeabi_ddiv+0xae>
 8000eda:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <__aeabi_ddiv+0x25c>)
 8000edc:	445a      	add	r2, fp
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	dc00      	bgt.n	8000ee4 <__aeabi_ddiv+0x190>
 8000ee2:	e13c      	b.n	800115e <__aeabi_ddiv+0x40a>
 8000ee4:	076b      	lsls	r3, r5, #29
 8000ee6:	d000      	beq.n	8000eea <__aeabi_ddiv+0x196>
 8000ee8:	e1a7      	b.n	800123a <__aeabi_ddiv+0x4e6>
 8000eea:	08ed      	lsrs	r5, r5, #3
 8000eec:	4643      	mov	r3, r8
 8000eee:	01db      	lsls	r3, r3, #7
 8000ef0:	d506      	bpl.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <__aeabi_ddiv+0x260>)
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	4690      	mov	r8, r2
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	445a      	add	r2, fp
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <__aeabi_ddiv+0x264>)
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dc8e      	bgt.n	8000e24 <__aeabi_ddiv+0xd0>
 8000f06:	4643      	mov	r3, r8
 8000f08:	0552      	lsls	r2, r2, #21
 8000f0a:	0758      	lsls	r0, r3, #29
 8000f0c:	025c      	lsls	r4, r3, #9
 8000f0e:	4305      	orrs	r5, r0
 8000f10:	0b24      	lsrs	r4, r4, #12
 8000f12:	0d53      	lsrs	r3, r2, #21
 8000f14:	e778      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f16:	46ba      	mov	sl, r7
 8000f18:	46a0      	mov	r8, r4
 8000f1a:	0015      	movs	r5, r2
 8000f1c:	9000      	str	r0, [sp, #0]
 8000f1e:	e7d4      	b.n	8000eca <__aeabi_ddiv+0x176>
 8000f20:	464a      	mov	r2, r9
 8000f22:	2303      	movs	r3, #3
 8000f24:	431a      	orrs	r2, r3
 8000f26:	4691      	mov	r9, r2
 8000f28:	2003      	movs	r0, #3
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	e74f      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000f2e:	4649      	mov	r1, r9
 8000f30:	2301      	movs	r3, #1
 8000f32:	4319      	orrs	r1, r3
 8000f34:	4689      	mov	r9, r1
 8000f36:	2400      	movs	r4, #0
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e748      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	4699      	mov	r9, r3
 8000f40:	3b09      	subs	r3, #9
 8000f42:	46a0      	mov	r8, r4
 8000f44:	4683      	mov	fp, r0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	e728      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	2300      	movs	r3, #0
 8000f50:	469b      	mov	fp, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	2500      	movs	r5, #0
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	e720      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	469a      	mov	sl, r3
 8000f60:	2500      	movs	r5, #0
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	e74f      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	4641      	mov	r1, r8
 8000f6c:	031b      	lsls	r3, r3, #12
 8000f6e:	4219      	tst	r1, r3
 8000f70:	d008      	beq.n	8000f84 <__aeabi_ddiv+0x230>
 8000f72:	421c      	tst	r4, r3
 8000f74:	d106      	bne.n	8000f84 <__aeabi_ddiv+0x230>
 8000f76:	431c      	orrs	r4, r3
 8000f78:	0324      	lsls	r4, r4, #12
 8000f7a:	46ba      	mov	sl, r7
 8000f7c:	0015      	movs	r5, r2
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000f80:	0b24      	lsrs	r4, r4, #12
 8000f82:	e741      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f84:	2480      	movs	r4, #128	; 0x80
 8000f86:	4643      	mov	r3, r8
 8000f88:	0324      	lsls	r4, r4, #12
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	46b2      	mov	sl, r6
 8000f90:	4b01      	ldr	r3, [pc, #4]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000f92:	0b24      	lsrs	r4, r4, #12
 8000f94:	e738      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	000007ff 	.word	0x000007ff
 8000f9c:	fffffc01 	.word	0xfffffc01
 8000fa0:	0800b81c 	.word	0x0800b81c
 8000fa4:	fffff801 	.word	0xfffff801
 8000fa8:	fffffc0d 	.word	0xfffffc0d
 8000fac:	000003f3 	.word	0x000003f3
 8000fb0:	000003ff 	.word	0x000003ff
 8000fb4:	feffffff 	.word	0xfeffffff
 8000fb8:	000007fe 	.word	0x000007fe
 8000fbc:	4544      	cmp	r4, r8
 8000fbe:	d200      	bcs.n	8000fc2 <__aeabi_ddiv+0x26e>
 8000fc0:	e116      	b.n	80011f0 <__aeabi_ddiv+0x49c>
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x272>
 8000fc4:	e111      	b.n	80011ea <__aeabi_ddiv+0x496>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	425b      	negs	r3, r3
 8000fca:	469c      	mov	ip, r3
 8000fcc:	002e      	movs	r6, r5
 8000fce:	4640      	mov	r0, r8
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	44e3      	add	fp, ip
 8000fd4:	0223      	lsls	r3, r4, #8
 8000fd6:	0e14      	lsrs	r4, r2, #24
 8000fd8:	431c      	orrs	r4, r3
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	4699      	mov	r9, r3
 8000fde:	0423      	lsls	r3, r4, #16
 8000fe0:	0c1f      	lsrs	r7, r3, #16
 8000fe2:	0212      	lsls	r2, r2, #8
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	9200      	str	r2, [sp, #0]
 8000fe8:	9701      	str	r7, [sp, #4]
 8000fea:	f7ff f92f 	bl	800024c <__aeabi_uidivmod>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	437a      	muls	r2, r7
 8000ff2:	040b      	lsls	r3, r1, #16
 8000ff4:	0c31      	lsrs	r1, r6, #16
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	4319      	orrs	r1, r3
 8000ffa:	428a      	cmp	r2, r1
 8000ffc:	d90b      	bls.n	8001016 <__aeabi_ddiv+0x2c2>
 8000ffe:	2301      	movs	r3, #1
 8001000:	425b      	negs	r3, r3
 8001002:	469c      	mov	ip, r3
 8001004:	1909      	adds	r1, r1, r4
 8001006:	44e0      	add	r8, ip
 8001008:	428c      	cmp	r4, r1
 800100a:	d804      	bhi.n	8001016 <__aeabi_ddiv+0x2c2>
 800100c:	428a      	cmp	r2, r1
 800100e:	d902      	bls.n	8001016 <__aeabi_ddiv+0x2c2>
 8001010:	1e83      	subs	r3, r0, #2
 8001012:	4698      	mov	r8, r3
 8001014:	1909      	adds	r1, r1, r4
 8001016:	1a88      	subs	r0, r1, r2
 8001018:	4649      	mov	r1, r9
 800101a:	f7ff f917 	bl	800024c <__aeabi_uidivmod>
 800101e:	0409      	lsls	r1, r1, #16
 8001020:	468c      	mov	ip, r1
 8001022:	0431      	lsls	r1, r6, #16
 8001024:	4666      	mov	r6, ip
 8001026:	9a01      	ldr	r2, [sp, #4]
 8001028:	0c09      	lsrs	r1, r1, #16
 800102a:	4342      	muls	r2, r0
 800102c:	0003      	movs	r3, r0
 800102e:	4331      	orrs	r1, r6
 8001030:	428a      	cmp	r2, r1
 8001032:	d904      	bls.n	800103e <__aeabi_ddiv+0x2ea>
 8001034:	1909      	adds	r1, r1, r4
 8001036:	3b01      	subs	r3, #1
 8001038:	428c      	cmp	r4, r1
 800103a:	d800      	bhi.n	800103e <__aeabi_ddiv+0x2ea>
 800103c:	e111      	b.n	8001262 <__aeabi_ddiv+0x50e>
 800103e:	1a89      	subs	r1, r1, r2
 8001040:	4642      	mov	r2, r8
 8001042:	9e00      	ldr	r6, [sp, #0]
 8001044:	0412      	lsls	r2, r2, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	0c33      	lsrs	r3, r6, #16
 800104a:	001f      	movs	r7, r3
 800104c:	0c10      	lsrs	r0, r2, #16
 800104e:	4690      	mov	r8, r2
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	0413      	lsls	r3, r2, #16
 8001054:	0432      	lsls	r2, r6, #16
 8001056:	0c16      	lsrs	r6, r2, #16
 8001058:	0032      	movs	r2, r6
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	435a      	muls	r2, r3
 800105e:	9603      	str	r6, [sp, #12]
 8001060:	437b      	muls	r3, r7
 8001062:	4346      	muls	r6, r0
 8001064:	4378      	muls	r0, r7
 8001066:	0c17      	lsrs	r7, r2, #16
 8001068:	46bc      	mov	ip, r7
 800106a:	199b      	adds	r3, r3, r6
 800106c:	4463      	add	r3, ip
 800106e:	429e      	cmp	r6, r3
 8001070:	d903      	bls.n	800107a <__aeabi_ddiv+0x326>
 8001072:	2680      	movs	r6, #128	; 0x80
 8001074:	0276      	lsls	r6, r6, #9
 8001076:	46b4      	mov	ip, r6
 8001078:	4460      	add	r0, ip
 800107a:	0c1e      	lsrs	r6, r3, #16
 800107c:	1830      	adds	r0, r6, r0
 800107e:	0416      	lsls	r6, r2, #16
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	0c36      	lsrs	r6, r6, #16
 8001084:	199e      	adds	r6, r3, r6
 8001086:	4281      	cmp	r1, r0
 8001088:	d200      	bcs.n	800108c <__aeabi_ddiv+0x338>
 800108a:	e09c      	b.n	80011c6 <__aeabi_ddiv+0x472>
 800108c:	d100      	bne.n	8001090 <__aeabi_ddiv+0x33c>
 800108e:	e097      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8001090:	1bae      	subs	r6, r5, r6
 8001092:	1a09      	subs	r1, r1, r0
 8001094:	42b5      	cmp	r5, r6
 8001096:	4180      	sbcs	r0, r0
 8001098:	4240      	negs	r0, r0
 800109a:	1a08      	subs	r0, r1, r0
 800109c:	4284      	cmp	r4, r0
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x34e>
 80010a0:	e111      	b.n	80012c6 <__aeabi_ddiv+0x572>
 80010a2:	4649      	mov	r1, r9
 80010a4:	f7ff f8d2 	bl	800024c <__aeabi_uidivmod>
 80010a8:	9a01      	ldr	r2, [sp, #4]
 80010aa:	040b      	lsls	r3, r1, #16
 80010ac:	4342      	muls	r2, r0
 80010ae:	0c31      	lsrs	r1, r6, #16
 80010b0:	0005      	movs	r5, r0
 80010b2:	4319      	orrs	r1, r3
 80010b4:	428a      	cmp	r2, r1
 80010b6:	d907      	bls.n	80010c8 <__aeabi_ddiv+0x374>
 80010b8:	1909      	adds	r1, r1, r4
 80010ba:	3d01      	subs	r5, #1
 80010bc:	428c      	cmp	r4, r1
 80010be:	d803      	bhi.n	80010c8 <__aeabi_ddiv+0x374>
 80010c0:	428a      	cmp	r2, r1
 80010c2:	d901      	bls.n	80010c8 <__aeabi_ddiv+0x374>
 80010c4:	1e85      	subs	r5, r0, #2
 80010c6:	1909      	adds	r1, r1, r4
 80010c8:	1a88      	subs	r0, r1, r2
 80010ca:	4649      	mov	r1, r9
 80010cc:	f7ff f8be 	bl	800024c <__aeabi_uidivmod>
 80010d0:	0409      	lsls	r1, r1, #16
 80010d2:	468c      	mov	ip, r1
 80010d4:	0431      	lsls	r1, r6, #16
 80010d6:	4666      	mov	r6, ip
 80010d8:	9a01      	ldr	r2, [sp, #4]
 80010da:	0c09      	lsrs	r1, r1, #16
 80010dc:	4342      	muls	r2, r0
 80010de:	0003      	movs	r3, r0
 80010e0:	4331      	orrs	r1, r6
 80010e2:	428a      	cmp	r2, r1
 80010e4:	d907      	bls.n	80010f6 <__aeabi_ddiv+0x3a2>
 80010e6:	1909      	adds	r1, r1, r4
 80010e8:	3b01      	subs	r3, #1
 80010ea:	428c      	cmp	r4, r1
 80010ec:	d803      	bhi.n	80010f6 <__aeabi_ddiv+0x3a2>
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d901      	bls.n	80010f6 <__aeabi_ddiv+0x3a2>
 80010f2:	1e83      	subs	r3, r0, #2
 80010f4:	1909      	adds	r1, r1, r4
 80010f6:	9e03      	ldr	r6, [sp, #12]
 80010f8:	1a89      	subs	r1, r1, r2
 80010fa:	0032      	movs	r2, r6
 80010fc:	042d      	lsls	r5, r5, #16
 80010fe:	431d      	orrs	r5, r3
 8001100:	9f02      	ldr	r7, [sp, #8]
 8001102:	042b      	lsls	r3, r5, #16
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	435a      	muls	r2, r3
 8001108:	437b      	muls	r3, r7
 800110a:	469c      	mov	ip, r3
 800110c:	0c28      	lsrs	r0, r5, #16
 800110e:	4346      	muls	r6, r0
 8001110:	0c13      	lsrs	r3, r2, #16
 8001112:	44b4      	add	ip, r6
 8001114:	4463      	add	r3, ip
 8001116:	4378      	muls	r0, r7
 8001118:	429e      	cmp	r6, r3
 800111a:	d903      	bls.n	8001124 <__aeabi_ddiv+0x3d0>
 800111c:	2680      	movs	r6, #128	; 0x80
 800111e:	0276      	lsls	r6, r6, #9
 8001120:	46b4      	mov	ip, r6
 8001122:	4460      	add	r0, ip
 8001124:	0c1e      	lsrs	r6, r3, #16
 8001126:	0412      	lsls	r2, r2, #16
 8001128:	041b      	lsls	r3, r3, #16
 800112a:	0c12      	lsrs	r2, r2, #16
 800112c:	1830      	adds	r0, r6, r0
 800112e:	189b      	adds	r3, r3, r2
 8001130:	4281      	cmp	r1, r0
 8001132:	d306      	bcc.n	8001142 <__aeabi_ddiv+0x3ee>
 8001134:	d002      	beq.n	800113c <__aeabi_ddiv+0x3e8>
 8001136:	2301      	movs	r3, #1
 8001138:	431d      	orrs	r5, r3
 800113a:	e6ce      	b.n	8000eda <__aeabi_ddiv+0x186>
 800113c:	2b00      	cmp	r3, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x3ee>
 8001140:	e6cb      	b.n	8000eda <__aeabi_ddiv+0x186>
 8001142:	1861      	adds	r1, r4, r1
 8001144:	1e6e      	subs	r6, r5, #1
 8001146:	42a1      	cmp	r1, r4
 8001148:	d200      	bcs.n	800114c <__aeabi_ddiv+0x3f8>
 800114a:	e0a4      	b.n	8001296 <__aeabi_ddiv+0x542>
 800114c:	4281      	cmp	r1, r0
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0x3fe>
 8001150:	e0c9      	b.n	80012e6 <__aeabi_ddiv+0x592>
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x402>
 8001154:	e0d9      	b.n	800130a <__aeabi_ddiv+0x5b6>
 8001156:	0035      	movs	r5, r6
 8001158:	e7ed      	b.n	8001136 <__aeabi_ddiv+0x3e2>
 800115a:	2501      	movs	r5, #1
 800115c:	426d      	negs	r5, r5
 800115e:	2101      	movs	r1, #1
 8001160:	1a89      	subs	r1, r1, r2
 8001162:	2938      	cmp	r1, #56	; 0x38
 8001164:	dd00      	ble.n	8001168 <__aeabi_ddiv+0x414>
 8001166:	e64c      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001168:	291f      	cmp	r1, #31
 800116a:	dc00      	bgt.n	800116e <__aeabi_ddiv+0x41a>
 800116c:	e07f      	b.n	800126e <__aeabi_ddiv+0x51a>
 800116e:	231f      	movs	r3, #31
 8001170:	425b      	negs	r3, r3
 8001172:	1a9a      	subs	r2, r3, r2
 8001174:	4643      	mov	r3, r8
 8001176:	40d3      	lsrs	r3, r2
 8001178:	2920      	cmp	r1, #32
 800117a:	d004      	beq.n	8001186 <__aeabi_ddiv+0x432>
 800117c:	4644      	mov	r4, r8
 800117e:	4a65      	ldr	r2, [pc, #404]	; (8001314 <__aeabi_ddiv+0x5c0>)
 8001180:	445a      	add	r2, fp
 8001182:	4094      	lsls	r4, r2
 8001184:	4325      	orrs	r5, r4
 8001186:	1e6a      	subs	r2, r5, #1
 8001188:	4195      	sbcs	r5, r2
 800118a:	2207      	movs	r2, #7
 800118c:	432b      	orrs	r3, r5
 800118e:	0015      	movs	r5, r2
 8001190:	2400      	movs	r4, #0
 8001192:	401d      	ands	r5, r3
 8001194:	421a      	tst	r2, r3
 8001196:	d100      	bne.n	800119a <__aeabi_ddiv+0x446>
 8001198:	e0a1      	b.n	80012de <__aeabi_ddiv+0x58a>
 800119a:	220f      	movs	r2, #15
 800119c:	2400      	movs	r4, #0
 800119e:	401a      	ands	r2, r3
 80011a0:	2a04      	cmp	r2, #4
 80011a2:	d100      	bne.n	80011a6 <__aeabi_ddiv+0x452>
 80011a4:	e098      	b.n	80012d8 <__aeabi_ddiv+0x584>
 80011a6:	1d1a      	adds	r2, r3, #4
 80011a8:	429a      	cmp	r2, r3
 80011aa:	419b      	sbcs	r3, r3
 80011ac:	425b      	negs	r3, r3
 80011ae:	18e4      	adds	r4, r4, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	0222      	lsls	r2, r4, #8
 80011b4:	d400      	bmi.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e08f      	b.n	80012d8 <__aeabi_ddiv+0x584>
 80011b8:	2301      	movs	r3, #1
 80011ba:	2400      	movs	r4, #0
 80011bc:	2500      	movs	r5, #0
 80011be:	e623      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 80011c0:	42b5      	cmp	r5, r6
 80011c2:	d300      	bcc.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e764      	b.n	8001090 <__aeabi_ddiv+0x33c>
 80011c6:	4643      	mov	r3, r8
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	9b00      	ldr	r3, [sp, #0]
 80011cc:	469c      	mov	ip, r3
 80011ce:	4465      	add	r5, ip
 80011d0:	001f      	movs	r7, r3
 80011d2:	429d      	cmp	r5, r3
 80011d4:	419b      	sbcs	r3, r3
 80011d6:	425b      	negs	r3, r3
 80011d8:	191b      	adds	r3, r3, r4
 80011da:	18c9      	adds	r1, r1, r3
 80011dc:	428c      	cmp	r4, r1
 80011de:	d23a      	bcs.n	8001256 <__aeabi_ddiv+0x502>
 80011e0:	4288      	cmp	r0, r1
 80011e2:	d863      	bhi.n	80012ac <__aeabi_ddiv+0x558>
 80011e4:	d060      	beq.n	80012a8 <__aeabi_ddiv+0x554>
 80011e6:	4690      	mov	r8, r2
 80011e8:	e752      	b.n	8001090 <__aeabi_ddiv+0x33c>
 80011ea:	42aa      	cmp	r2, r5
 80011ec:	d900      	bls.n	80011f0 <__aeabi_ddiv+0x49c>
 80011ee:	e6ea      	b.n	8000fc6 <__aeabi_ddiv+0x272>
 80011f0:	4643      	mov	r3, r8
 80011f2:	07de      	lsls	r6, r3, #31
 80011f4:	0858      	lsrs	r0, r3, #1
 80011f6:	086b      	lsrs	r3, r5, #1
 80011f8:	431e      	orrs	r6, r3
 80011fa:	07ed      	lsls	r5, r5, #31
 80011fc:	e6ea      	b.n	8000fd4 <__aeabi_ddiv+0x280>
 80011fe:	4648      	mov	r0, r9
 8001200:	f001 f856 	bl	80022b0 <__clzsi2>
 8001204:	0001      	movs	r1, r0
 8001206:	0002      	movs	r2, r0
 8001208:	3115      	adds	r1, #21
 800120a:	3220      	adds	r2, #32
 800120c:	291c      	cmp	r1, #28
 800120e:	dc00      	bgt.n	8001212 <__aeabi_ddiv+0x4be>
 8001210:	e61a      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 8001212:	464b      	mov	r3, r9
 8001214:	3808      	subs	r0, #8
 8001216:	4083      	lsls	r3, r0
 8001218:	2500      	movs	r5, #0
 800121a:	4698      	mov	r8, r3
 800121c:	e620      	b.n	8000e60 <__aeabi_ddiv+0x10c>
 800121e:	f001 f847 	bl	80022b0 <__clzsi2>
 8001222:	0003      	movs	r3, r0
 8001224:	001a      	movs	r2, r3
 8001226:	3215      	adds	r2, #21
 8001228:	3020      	adds	r0, #32
 800122a:	2a1c      	cmp	r2, #28
 800122c:	dc00      	bgt.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e630      	b.n	8000e92 <__aeabi_ddiv+0x13e>
 8001230:	4654      	mov	r4, sl
 8001232:	3b08      	subs	r3, #8
 8001234:	2200      	movs	r2, #0
 8001236:	409c      	lsls	r4, r3
 8001238:	e635      	b.n	8000ea6 <__aeabi_ddiv+0x152>
 800123a:	230f      	movs	r3, #15
 800123c:	402b      	ands	r3, r5
 800123e:	2b04      	cmp	r3, #4
 8001240:	d100      	bne.n	8001244 <__aeabi_ddiv+0x4f0>
 8001242:	e652      	b.n	8000eea <__aeabi_ddiv+0x196>
 8001244:	2305      	movs	r3, #5
 8001246:	425b      	negs	r3, r3
 8001248:	42ab      	cmp	r3, r5
 800124a:	419b      	sbcs	r3, r3
 800124c:	3504      	adds	r5, #4
 800124e:	425b      	negs	r3, r3
 8001250:	08ed      	lsrs	r5, r5, #3
 8001252:	4498      	add	r8, r3
 8001254:	e64a      	b.n	8000eec <__aeabi_ddiv+0x198>
 8001256:	428c      	cmp	r4, r1
 8001258:	d1c5      	bne.n	80011e6 <__aeabi_ddiv+0x492>
 800125a:	42af      	cmp	r7, r5
 800125c:	d9c0      	bls.n	80011e0 <__aeabi_ddiv+0x48c>
 800125e:	4690      	mov	r8, r2
 8001260:	e716      	b.n	8001090 <__aeabi_ddiv+0x33c>
 8001262:	428a      	cmp	r2, r1
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x514>
 8001266:	e6ea      	b.n	800103e <__aeabi_ddiv+0x2ea>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1909      	adds	r1, r1, r4
 800126c:	e6e7      	b.n	800103e <__aeabi_ddiv+0x2ea>
 800126e:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <__aeabi_ddiv+0x5c4>)
 8001270:	0028      	movs	r0, r5
 8001272:	445a      	add	r2, fp
 8001274:	4643      	mov	r3, r8
 8001276:	4095      	lsls	r5, r2
 8001278:	4093      	lsls	r3, r2
 800127a:	40c8      	lsrs	r0, r1
 800127c:	1e6a      	subs	r2, r5, #1
 800127e:	4195      	sbcs	r5, r2
 8001280:	4644      	mov	r4, r8
 8001282:	4303      	orrs	r3, r0
 8001284:	432b      	orrs	r3, r5
 8001286:	40cc      	lsrs	r4, r1
 8001288:	075a      	lsls	r2, r3, #29
 800128a:	d092      	beq.n	80011b2 <__aeabi_ddiv+0x45e>
 800128c:	220f      	movs	r2, #15
 800128e:	401a      	ands	r2, r3
 8001290:	2a04      	cmp	r2, #4
 8001292:	d188      	bne.n	80011a6 <__aeabi_ddiv+0x452>
 8001294:	e78d      	b.n	80011b2 <__aeabi_ddiv+0x45e>
 8001296:	0035      	movs	r5, r6
 8001298:	4281      	cmp	r1, r0
 800129a:	d000      	beq.n	800129e <__aeabi_ddiv+0x54a>
 800129c:	e74b      	b.n	8001136 <__aeabi_ddiv+0x3e2>
 800129e:	9a00      	ldr	r2, [sp, #0]
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x552>
 80012a4:	e747      	b.n	8001136 <__aeabi_ddiv+0x3e2>
 80012a6:	e618      	b.n	8000eda <__aeabi_ddiv+0x186>
 80012a8:	42ae      	cmp	r6, r5
 80012aa:	d99c      	bls.n	80011e6 <__aeabi_ddiv+0x492>
 80012ac:	2302      	movs	r3, #2
 80012ae:	425b      	negs	r3, r3
 80012b0:	469c      	mov	ip, r3
 80012b2:	9b00      	ldr	r3, [sp, #0]
 80012b4:	44e0      	add	r8, ip
 80012b6:	469c      	mov	ip, r3
 80012b8:	4465      	add	r5, ip
 80012ba:	429d      	cmp	r5, r3
 80012bc:	419b      	sbcs	r3, r3
 80012be:	425b      	negs	r3, r3
 80012c0:	191b      	adds	r3, r3, r4
 80012c2:	18c9      	adds	r1, r1, r3
 80012c4:	e6e4      	b.n	8001090 <__aeabi_ddiv+0x33c>
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <__aeabi_ddiv+0x5c8>)
 80012c8:	445a      	add	r2, fp
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	dc00      	bgt.n	80012d0 <__aeabi_ddiv+0x57c>
 80012ce:	e744      	b.n	800115a <__aeabi_ddiv+0x406>
 80012d0:	2301      	movs	r3, #1
 80012d2:	2500      	movs	r5, #0
 80012d4:	4498      	add	r8, r3
 80012d6:	e609      	b.n	8000eec <__aeabi_ddiv+0x198>
 80012d8:	0765      	lsls	r5, r4, #29
 80012da:	0264      	lsls	r4, r4, #9
 80012dc:	0b24      	lsrs	r4, r4, #12
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	431d      	orrs	r5, r3
 80012e2:	2300      	movs	r3, #0
 80012e4:	e590      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 80012e6:	9e00      	ldr	r6, [sp, #0]
 80012e8:	3d02      	subs	r5, #2
 80012ea:	0072      	lsls	r2, r6, #1
 80012ec:	42b2      	cmp	r2, r6
 80012ee:	41bf      	sbcs	r7, r7
 80012f0:	427f      	negs	r7, r7
 80012f2:	193c      	adds	r4, r7, r4
 80012f4:	1909      	adds	r1, r1, r4
 80012f6:	9200      	str	r2, [sp, #0]
 80012f8:	e7ce      	b.n	8001298 <__aeabi_ddiv+0x544>
 80012fa:	2480      	movs	r4, #128	; 0x80
 80012fc:	4643      	mov	r3, r8
 80012fe:	0324      	lsls	r4, r4, #12
 8001300:	431c      	orrs	r4, r3
 8001302:	0324      	lsls	r4, r4, #12
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <__aeabi_ddiv+0x5cc>)
 8001306:	0b24      	lsrs	r4, r4, #12
 8001308:	e57e      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 800130a:	9a00      	ldr	r2, [sp, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d3ea      	bcc.n	80012e6 <__aeabi_ddiv+0x592>
 8001310:	0035      	movs	r5, r6
 8001312:	e7c4      	b.n	800129e <__aeabi_ddiv+0x54a>
 8001314:	0000043e 	.word	0x0000043e
 8001318:	0000041e 	.word	0x0000041e
 800131c:	000003ff 	.word	0x000003ff
 8001320:	000007ff 	.word	0x000007ff

08001324 <__eqdf2>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	464f      	mov	r7, r9
 8001328:	4646      	mov	r6, r8
 800132a:	46d6      	mov	lr, sl
 800132c:	4694      	mov	ip, r2
 800132e:	4691      	mov	r9, r2
 8001330:	031a      	lsls	r2, r3, #12
 8001332:	0b12      	lsrs	r2, r2, #12
 8001334:	4d18      	ldr	r5, [pc, #96]	; (8001398 <__eqdf2+0x74>)
 8001336:	b5c0      	push	{r6, r7, lr}
 8001338:	004c      	lsls	r4, r1, #1
 800133a:	030f      	lsls	r7, r1, #12
 800133c:	4692      	mov	sl, r2
 800133e:	005a      	lsls	r2, r3, #1
 8001340:	0006      	movs	r6, r0
 8001342:	4680      	mov	r8, r0
 8001344:	0b3f      	lsrs	r7, r7, #12
 8001346:	2001      	movs	r0, #1
 8001348:	0d64      	lsrs	r4, r4, #21
 800134a:	0fc9      	lsrs	r1, r1, #31
 800134c:	0d52      	lsrs	r2, r2, #21
 800134e:	0fdb      	lsrs	r3, r3, #31
 8001350:	42ac      	cmp	r4, r5
 8001352:	d00a      	beq.n	800136a <__eqdf2+0x46>
 8001354:	42aa      	cmp	r2, r5
 8001356:	d003      	beq.n	8001360 <__eqdf2+0x3c>
 8001358:	4294      	cmp	r4, r2
 800135a:	d101      	bne.n	8001360 <__eqdf2+0x3c>
 800135c:	4557      	cmp	r7, sl
 800135e:	d00d      	beq.n	800137c <__eqdf2+0x58>
 8001360:	bce0      	pop	{r5, r6, r7}
 8001362:	46ba      	mov	sl, r7
 8001364:	46b1      	mov	r9, r6
 8001366:	46a8      	mov	r8, r5
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136a:	003d      	movs	r5, r7
 800136c:	4335      	orrs	r5, r6
 800136e:	d1f7      	bne.n	8001360 <__eqdf2+0x3c>
 8001370:	42a2      	cmp	r2, r4
 8001372:	d1f5      	bne.n	8001360 <__eqdf2+0x3c>
 8001374:	4652      	mov	r2, sl
 8001376:	4665      	mov	r5, ip
 8001378:	432a      	orrs	r2, r5
 800137a:	d1f1      	bne.n	8001360 <__eqdf2+0x3c>
 800137c:	2001      	movs	r0, #1
 800137e:	45c8      	cmp	r8, r9
 8001380:	d1ee      	bne.n	8001360 <__eqdf2+0x3c>
 8001382:	4299      	cmp	r1, r3
 8001384:	d006      	beq.n	8001394 <__eqdf2+0x70>
 8001386:	2c00      	cmp	r4, #0
 8001388:	d1ea      	bne.n	8001360 <__eqdf2+0x3c>
 800138a:	433e      	orrs	r6, r7
 800138c:	0030      	movs	r0, r6
 800138e:	1e46      	subs	r6, r0, #1
 8001390:	41b0      	sbcs	r0, r6
 8001392:	e7e5      	b.n	8001360 <__eqdf2+0x3c>
 8001394:	2000      	movs	r0, #0
 8001396:	e7e3      	b.n	8001360 <__eqdf2+0x3c>
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	464e      	mov	r6, r9
 80013a0:	4645      	mov	r5, r8
 80013a2:	4657      	mov	r7, sl
 80013a4:	46de      	mov	lr, fp
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	0016      	movs	r6, r2
 80013ae:	031b      	lsls	r3, r3, #12
 80013b0:	0b1b      	lsrs	r3, r3, #12
 80013b2:	4d32      	ldr	r5, [pc, #200]	; (800147c <__gedf2+0xe0>)
 80013b4:	030f      	lsls	r7, r1, #12
 80013b6:	004a      	lsls	r2, r1, #1
 80013b8:	4699      	mov	r9, r3
 80013ba:	0043      	lsls	r3, r0, #1
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d029      	beq.n	8001422 <__gedf2+0x86>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d018      	beq.n	8001404 <__gedf2+0x68>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d12a      	bne.n	800142c <__gedf2+0x90>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	46a3      	mov	fp, r4
 80013da:	4265      	negs	r5, r4
 80013dc:	4165      	adcs	r5, r4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <__gedf2+0x4c>
 80013e2:	464c      	mov	r4, r9
 80013e4:	4326      	orrs	r6, r4
 80013e6:	d027      	beq.n	8001438 <__gedf2+0x9c>
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	d115      	bne.n	8001418 <__gedf2+0x7c>
 80013ec:	4281      	cmp	r1, r0
 80013ee:	d028      	beq.n	8001442 <__gedf2+0xa6>
 80013f0:	2002      	movs	r0, #2
 80013f2:	3901      	subs	r1, #1
 80013f4:	4008      	ands	r0, r1
 80013f6:	3801      	subs	r0, #1
 80013f8:	bcf0      	pop	{r4, r5, r6, r7}
 80013fa:	46bb      	mov	fp, r7
 80013fc:	46b2      	mov	sl, r6
 80013fe:	46a9      	mov	r9, r5
 8001400:	46a0      	mov	r8, r4
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	464d      	mov	r5, r9
 8001406:	432e      	orrs	r6, r5
 8001408:	d12f      	bne.n	800146a <__gedf2+0xce>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d1ee      	bne.n	80013ec <__gedf2+0x50>
 800140e:	433c      	orrs	r4, r7
 8001410:	4265      	negs	r5, r4
 8001412:	4165      	adcs	r5, r4
 8001414:	2d00      	cmp	r5, #0
 8001416:	d0e9      	beq.n	80013ec <__gedf2+0x50>
 8001418:	2800      	cmp	r0, #0
 800141a:	d1ed      	bne.n	80013f8 <__gedf2+0x5c>
 800141c:	2001      	movs	r0, #1
 800141e:	4240      	negs	r0, r0
 8001420:	e7ea      	b.n	80013f8 <__gedf2+0x5c>
 8001422:	003d      	movs	r5, r7
 8001424:	4325      	orrs	r5, r4
 8001426:	d120      	bne.n	800146a <__gedf2+0xce>
 8001428:	4293      	cmp	r3, r2
 800142a:	d0eb      	beq.n	8001404 <__gedf2+0x68>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1dd      	bne.n	80013ec <__gedf2+0x50>
 8001430:	464c      	mov	r4, r9
 8001432:	4326      	orrs	r6, r4
 8001434:	d1da      	bne.n	80013ec <__gedf2+0x50>
 8001436:	e7db      	b.n	80013f0 <__gedf2+0x54>
 8001438:	465b      	mov	r3, fp
 800143a:	2000      	movs	r0, #0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0db      	beq.n	80013f8 <__gedf2+0x5c>
 8001440:	e7d6      	b.n	80013f0 <__gedf2+0x54>
 8001442:	429a      	cmp	r2, r3
 8001444:	dc0a      	bgt.n	800145c <__gedf2+0xc0>
 8001446:	dbe7      	blt.n	8001418 <__gedf2+0x7c>
 8001448:	454f      	cmp	r7, r9
 800144a:	d8d1      	bhi.n	80013f0 <__gedf2+0x54>
 800144c:	d010      	beq.n	8001470 <__gedf2+0xd4>
 800144e:	2000      	movs	r0, #0
 8001450:	454f      	cmp	r7, r9
 8001452:	d2d1      	bcs.n	80013f8 <__gedf2+0x5c>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0e1      	beq.n	800141c <__gedf2+0x80>
 8001458:	0008      	movs	r0, r1
 800145a:	e7cd      	b.n	80013f8 <__gedf2+0x5c>
 800145c:	4243      	negs	r3, r0
 800145e:	4158      	adcs	r0, r3
 8001460:	2302      	movs	r3, #2
 8001462:	4240      	negs	r0, r0
 8001464:	4018      	ands	r0, r3
 8001466:	3801      	subs	r0, #1
 8001468:	e7c6      	b.n	80013f8 <__gedf2+0x5c>
 800146a:	2002      	movs	r0, #2
 800146c:	4240      	negs	r0, r0
 800146e:	e7c3      	b.n	80013f8 <__gedf2+0x5c>
 8001470:	45c4      	cmp	ip, r8
 8001472:	d8bd      	bhi.n	80013f0 <__gedf2+0x54>
 8001474:	2000      	movs	r0, #0
 8001476:	45c4      	cmp	ip, r8
 8001478:	d2be      	bcs.n	80013f8 <__gedf2+0x5c>
 800147a:	e7eb      	b.n	8001454 <__gedf2+0xb8>
 800147c:	000007ff 	.word	0x000007ff

08001480 <__ledf2>:
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	464e      	mov	r6, r9
 8001484:	4645      	mov	r5, r8
 8001486:	4657      	mov	r7, sl
 8001488:	46de      	mov	lr, fp
 800148a:	0004      	movs	r4, r0
 800148c:	0018      	movs	r0, r3
 800148e:	b5e0      	push	{r5, r6, r7, lr}
 8001490:	0016      	movs	r6, r2
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	0b1b      	lsrs	r3, r3, #12
 8001496:	4d31      	ldr	r5, [pc, #196]	; (800155c <__ledf2+0xdc>)
 8001498:	030f      	lsls	r7, r1, #12
 800149a:	004a      	lsls	r2, r1, #1
 800149c:	4699      	mov	r9, r3
 800149e:	0043      	lsls	r3, r0, #1
 80014a0:	46a4      	mov	ip, r4
 80014a2:	46b0      	mov	r8, r6
 80014a4:	0b3f      	lsrs	r7, r7, #12
 80014a6:	0d52      	lsrs	r2, r2, #21
 80014a8:	0fc9      	lsrs	r1, r1, #31
 80014aa:	0d5b      	lsrs	r3, r3, #21
 80014ac:	0fc0      	lsrs	r0, r0, #31
 80014ae:	42aa      	cmp	r2, r5
 80014b0:	d011      	beq.n	80014d6 <__ledf2+0x56>
 80014b2:	42ab      	cmp	r3, r5
 80014b4:	d014      	beq.n	80014e0 <__ledf2+0x60>
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d12f      	bne.n	800151a <__ledf2+0x9a>
 80014ba:	433c      	orrs	r4, r7
 80014bc:	46a3      	mov	fp, r4
 80014be:	4265      	negs	r5, r4
 80014c0:	4165      	adcs	r5, r4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d114      	bne.n	80014f0 <__ledf2+0x70>
 80014c6:	464c      	mov	r4, r9
 80014c8:	4326      	orrs	r6, r4
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x70>
 80014cc:	465b      	mov	r3, fp
 80014ce:	2000      	movs	r0, #0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d017      	beq.n	8001504 <__ledf2+0x84>
 80014d4:	e010      	b.n	80014f8 <__ledf2+0x78>
 80014d6:	003d      	movs	r5, r7
 80014d8:	4325      	orrs	r5, r4
 80014da:	d112      	bne.n	8001502 <__ledf2+0x82>
 80014dc:	4293      	cmp	r3, r2
 80014de:	d11c      	bne.n	800151a <__ledf2+0x9a>
 80014e0:	464d      	mov	r5, r9
 80014e2:	432e      	orrs	r6, r5
 80014e4:	d10d      	bne.n	8001502 <__ledf2+0x82>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d104      	bne.n	80014f4 <__ledf2+0x74>
 80014ea:	433c      	orrs	r4, r7
 80014ec:	4265      	negs	r5, r4
 80014ee:	4165      	adcs	r5, r4
 80014f0:	2d00      	cmp	r5, #0
 80014f2:	d10d      	bne.n	8001510 <__ledf2+0x90>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d016      	beq.n	8001526 <__ledf2+0xa6>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x84>
 8001502:	2002      	movs	r0, #2
 8001504:	bcf0      	pop	{r4, r5, r6, r7}
 8001506:	46bb      	mov	fp, r7
 8001508:	46b2      	mov	sl, r6
 800150a:	46a9      	mov	r9, r5
 800150c:	46a0      	mov	r8, r4
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001510:	2800      	cmp	r0, #0
 8001512:	d1f7      	bne.n	8001504 <__ledf2+0x84>
 8001514:	2001      	movs	r0, #1
 8001516:	4240      	negs	r0, r0
 8001518:	e7f4      	b.n	8001504 <__ledf2+0x84>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ea      	bne.n	80014f4 <__ledf2+0x74>
 800151e:	464c      	mov	r4, r9
 8001520:	4326      	orrs	r6, r4
 8001522:	d1e7      	bne.n	80014f4 <__ledf2+0x74>
 8001524:	e7e8      	b.n	80014f8 <__ledf2+0x78>
 8001526:	429a      	cmp	r2, r3
 8001528:	dd06      	ble.n	8001538 <__ledf2+0xb8>
 800152a:	4243      	negs	r3, r0
 800152c:	4158      	adcs	r0, r3
 800152e:	2302      	movs	r3, #2
 8001530:	4240      	negs	r0, r0
 8001532:	4018      	ands	r0, r3
 8001534:	3801      	subs	r0, #1
 8001536:	e7e5      	b.n	8001504 <__ledf2+0x84>
 8001538:	429a      	cmp	r2, r3
 800153a:	dbe9      	blt.n	8001510 <__ledf2+0x90>
 800153c:	454f      	cmp	r7, r9
 800153e:	d8db      	bhi.n	80014f8 <__ledf2+0x78>
 8001540:	d006      	beq.n	8001550 <__ledf2+0xd0>
 8001542:	2000      	movs	r0, #0
 8001544:	454f      	cmp	r7, r9
 8001546:	d2dd      	bcs.n	8001504 <__ledf2+0x84>
 8001548:	2900      	cmp	r1, #0
 800154a:	d0e3      	beq.n	8001514 <__ledf2+0x94>
 800154c:	0008      	movs	r0, r1
 800154e:	e7d9      	b.n	8001504 <__ledf2+0x84>
 8001550:	45c4      	cmp	ip, r8
 8001552:	d8d1      	bhi.n	80014f8 <__ledf2+0x78>
 8001554:	2000      	movs	r0, #0
 8001556:	45c4      	cmp	ip, r8
 8001558:	d2d4      	bcs.n	8001504 <__ledf2+0x84>
 800155a:	e7f5      	b.n	8001548 <__ledf2+0xc8>
 800155c:	000007ff 	.word	0x000007ff

08001560 <__aeabi_dmul>:
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	4657      	mov	r7, sl
 8001564:	464e      	mov	r6, r9
 8001566:	4645      	mov	r5, r8
 8001568:	46de      	mov	lr, fp
 800156a:	b5e0      	push	{r5, r6, r7, lr}
 800156c:	4698      	mov	r8, r3
 800156e:	030c      	lsls	r4, r1, #12
 8001570:	004b      	lsls	r3, r1, #1
 8001572:	0006      	movs	r6, r0
 8001574:	4692      	mov	sl, r2
 8001576:	b087      	sub	sp, #28
 8001578:	0b24      	lsrs	r4, r4, #12
 800157a:	0d5b      	lsrs	r3, r3, #21
 800157c:	0fcf      	lsrs	r7, r1, #31
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <__aeabi_dmul+0xfc>
 8001582:	4add      	ldr	r2, [pc, #884]	; (80018f8 <__aeabi_dmul+0x398>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0x2a>
 8001588:	e086      	b.n	8001698 <__aeabi_dmul+0x138>
 800158a:	0f42      	lsrs	r2, r0, #29
 800158c:	00e4      	lsls	r4, r4, #3
 800158e:	4314      	orrs	r4, r2
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	0412      	lsls	r2, r2, #16
 8001594:	4314      	orrs	r4, r2
 8001596:	4ad9      	ldr	r2, [pc, #868]	; (80018fc <__aeabi_dmul+0x39c>)
 8001598:	00c5      	lsls	r5, r0, #3
 800159a:	4694      	mov	ip, r2
 800159c:	4463      	add	r3, ip
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	4699      	mov	r9, r3
 80015a4:	469b      	mov	fp, r3
 80015a6:	4643      	mov	r3, r8
 80015a8:	4642      	mov	r2, r8
 80015aa:	031e      	lsls	r6, r3, #12
 80015ac:	0fd2      	lsrs	r2, r2, #31
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4650      	mov	r0, sl
 80015b2:	4690      	mov	r8, r2
 80015b4:	0b36      	lsrs	r6, r6, #12
 80015b6:	0d5b      	lsrs	r3, r3, #21
 80015b8:	d100      	bne.n	80015bc <__aeabi_dmul+0x5c>
 80015ba:	e078      	b.n	80016ae <__aeabi_dmul+0x14e>
 80015bc:	4ace      	ldr	r2, [pc, #824]	; (80018f8 <__aeabi_dmul+0x398>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01d      	beq.n	80015fe <__aeabi_dmul+0x9e>
 80015c2:	49ce      	ldr	r1, [pc, #824]	; (80018fc <__aeabi_dmul+0x39c>)
 80015c4:	0f42      	lsrs	r2, r0, #29
 80015c6:	468c      	mov	ip, r1
 80015c8:	9900      	ldr	r1, [sp, #0]
 80015ca:	4463      	add	r3, ip
 80015cc:	00f6      	lsls	r6, r6, #3
 80015ce:	468c      	mov	ip, r1
 80015d0:	4316      	orrs	r6, r2
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	449c      	add	ip, r3
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	4663      	mov	r3, ip
 80015da:	4316      	orrs	r6, r2
 80015dc:	00c2      	lsls	r2, r0, #3
 80015de:	2000      	movs	r0, #0
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	9900      	ldr	r1, [sp, #0]
 80015e4:	4643      	mov	r3, r8
 80015e6:	3101      	adds	r1, #1
 80015e8:	468c      	mov	ip, r1
 80015ea:	4649      	mov	r1, r9
 80015ec:	407b      	eors	r3, r7
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	290f      	cmp	r1, #15
 80015f2:	d900      	bls.n	80015f6 <__aeabi_dmul+0x96>
 80015f4:	e07e      	b.n	80016f4 <__aeabi_dmul+0x194>
 80015f6:	4bc2      	ldr	r3, [pc, #776]	; (8001900 <__aeabi_dmul+0x3a0>)
 80015f8:	0089      	lsls	r1, r1, #2
 80015fa:	5859      	ldr	r1, [r3, r1]
 80015fc:	468f      	mov	pc, r1
 80015fe:	4652      	mov	r2, sl
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	4332      	orrs	r2, r6
 8001604:	d000      	beq.n	8001608 <__aeabi_dmul+0xa8>
 8001606:	e156      	b.n	80018b6 <__aeabi_dmul+0x356>
 8001608:	49bb      	ldr	r1, [pc, #748]	; (80018f8 <__aeabi_dmul+0x398>)
 800160a:	2600      	movs	r6, #0
 800160c:	468c      	mov	ip, r1
 800160e:	4463      	add	r3, ip
 8001610:	4649      	mov	r1, r9
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2302      	movs	r3, #2
 8001616:	4319      	orrs	r1, r3
 8001618:	4689      	mov	r9, r1
 800161a:	2002      	movs	r0, #2
 800161c:	e7e1      	b.n	80015e2 <__aeabi_dmul+0x82>
 800161e:	4643      	mov	r3, r8
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	0034      	movs	r4, r6
 8001624:	0015      	movs	r5, r2
 8001626:	4683      	mov	fp, r0
 8001628:	465b      	mov	r3, fp
 800162a:	2b02      	cmp	r3, #2
 800162c:	d05e      	beq.n	80016ec <__aeabi_dmul+0x18c>
 800162e:	2b03      	cmp	r3, #3
 8001630:	d100      	bne.n	8001634 <__aeabi_dmul+0xd4>
 8001632:	e1f3      	b.n	8001a1c <__aeabi_dmul+0x4bc>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d000      	beq.n	800163a <__aeabi_dmul+0xda>
 8001638:	e118      	b.n	800186c <__aeabi_dmul+0x30c>
 800163a:	2200      	movs	r2, #0
 800163c:	2400      	movs	r4, #0
 800163e:	2500      	movs	r5, #0
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	0512      	lsls	r2, r2, #20
 8001644:	4322      	orrs	r2, r4
 8001646:	07db      	lsls	r3, r3, #31
 8001648:	431a      	orrs	r2, r3
 800164a:	0028      	movs	r0, r5
 800164c:	0011      	movs	r1, r2
 800164e:	b007      	add	sp, #28
 8001650:	bcf0      	pop	{r4, r5, r6, r7}
 8001652:	46bb      	mov	fp, r7
 8001654:	46b2      	mov	sl, r6
 8001656:	46a9      	mov	r9, r5
 8001658:	46a0      	mov	r8, r4
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	0025      	movs	r5, r4
 800165e:	4305      	orrs	r5, r0
 8001660:	d100      	bne.n	8001664 <__aeabi_dmul+0x104>
 8001662:	e141      	b.n	80018e8 <__aeabi_dmul+0x388>
 8001664:	2c00      	cmp	r4, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dmul+0x10a>
 8001668:	e1ad      	b.n	80019c6 <__aeabi_dmul+0x466>
 800166a:	0020      	movs	r0, r4
 800166c:	f000 fe20 	bl	80022b0 <__clzsi2>
 8001670:	0001      	movs	r1, r0
 8001672:	0002      	movs	r2, r0
 8001674:	390b      	subs	r1, #11
 8001676:	231d      	movs	r3, #29
 8001678:	0010      	movs	r0, r2
 800167a:	1a5b      	subs	r3, r3, r1
 800167c:	0031      	movs	r1, r6
 800167e:	0035      	movs	r5, r6
 8001680:	3808      	subs	r0, #8
 8001682:	4084      	lsls	r4, r0
 8001684:	40d9      	lsrs	r1, r3
 8001686:	4085      	lsls	r5, r0
 8001688:	430c      	orrs	r4, r1
 800168a:	489e      	ldr	r0, [pc, #632]	; (8001904 <__aeabi_dmul+0x3a4>)
 800168c:	1a83      	subs	r3, r0, r2
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	4699      	mov	r9, r3
 8001694:	469b      	mov	fp, r3
 8001696:	e786      	b.n	80015a6 <__aeabi_dmul+0x46>
 8001698:	0005      	movs	r5, r0
 800169a:	4325      	orrs	r5, r4
 800169c:	d000      	beq.n	80016a0 <__aeabi_dmul+0x140>
 800169e:	e11c      	b.n	80018da <__aeabi_dmul+0x37a>
 80016a0:	2208      	movs	r2, #8
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2302      	movs	r3, #2
 80016a6:	2400      	movs	r4, #0
 80016a8:	4691      	mov	r9, r2
 80016aa:	469b      	mov	fp, r3
 80016ac:	e77b      	b.n	80015a6 <__aeabi_dmul+0x46>
 80016ae:	4652      	mov	r2, sl
 80016b0:	4332      	orrs	r2, r6
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dmul+0x156>
 80016b4:	e10a      	b.n	80018cc <__aeabi_dmul+0x36c>
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	d100      	bne.n	80016bc <__aeabi_dmul+0x15c>
 80016ba:	e176      	b.n	80019aa <__aeabi_dmul+0x44a>
 80016bc:	0030      	movs	r0, r6
 80016be:	f000 fdf7 	bl	80022b0 <__clzsi2>
 80016c2:	0002      	movs	r2, r0
 80016c4:	3a0b      	subs	r2, #11
 80016c6:	231d      	movs	r3, #29
 80016c8:	0001      	movs	r1, r0
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	3908      	subs	r1, #8
 80016d0:	40da      	lsrs	r2, r3
 80016d2:	408e      	lsls	r6, r1
 80016d4:	4316      	orrs	r6, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	408a      	lsls	r2, r1
 80016da:	9b00      	ldr	r3, [sp, #0]
 80016dc:	4989      	ldr	r1, [pc, #548]	; (8001904 <__aeabi_dmul+0x3a4>)
 80016de:	1a18      	subs	r0, r3, r0
 80016e0:	0003      	movs	r3, r0
 80016e2:	468c      	mov	ip, r1
 80016e4:	4463      	add	r3, ip
 80016e6:	2000      	movs	r0, #0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	e77a      	b.n	80015e2 <__aeabi_dmul+0x82>
 80016ec:	2400      	movs	r4, #0
 80016ee:	2500      	movs	r5, #0
 80016f0:	4a81      	ldr	r2, [pc, #516]	; (80018f8 <__aeabi_dmul+0x398>)
 80016f2:	e7a5      	b.n	8001640 <__aeabi_dmul+0xe0>
 80016f4:	0c2f      	lsrs	r7, r5, #16
 80016f6:	042d      	lsls	r5, r5, #16
 80016f8:	0c2d      	lsrs	r5, r5, #16
 80016fa:	002b      	movs	r3, r5
 80016fc:	0c11      	lsrs	r1, r2, #16
 80016fe:	0412      	lsls	r2, r2, #16
 8001700:	0c12      	lsrs	r2, r2, #16
 8001702:	4353      	muls	r3, r2
 8001704:	4698      	mov	r8, r3
 8001706:	0013      	movs	r3, r2
 8001708:	0028      	movs	r0, r5
 800170a:	437b      	muls	r3, r7
 800170c:	4699      	mov	r9, r3
 800170e:	4348      	muls	r0, r1
 8001710:	4448      	add	r0, r9
 8001712:	4683      	mov	fp, r0
 8001714:	4640      	mov	r0, r8
 8001716:	000b      	movs	r3, r1
 8001718:	0c00      	lsrs	r0, r0, #16
 800171a:	4682      	mov	sl, r0
 800171c:	4658      	mov	r0, fp
 800171e:	437b      	muls	r3, r7
 8001720:	4450      	add	r0, sl
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	4581      	cmp	r9, r0
 8001726:	d906      	bls.n	8001736 <__aeabi_dmul+0x1d6>
 8001728:	469a      	mov	sl, r3
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	44ca      	add	sl, r9
 8001732:	4653      	mov	r3, sl
 8001734:	9302      	str	r3, [sp, #8]
 8001736:	0c03      	lsrs	r3, r0, #16
 8001738:	469b      	mov	fp, r3
 800173a:	4643      	mov	r3, r8
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	0400      	lsls	r0, r0, #16
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	4698      	mov	r8, r3
 8001744:	0003      	movs	r3, r0
 8001746:	4443      	add	r3, r8
 8001748:	9304      	str	r3, [sp, #16]
 800174a:	0c33      	lsrs	r3, r6, #16
 800174c:	4699      	mov	r9, r3
 800174e:	002b      	movs	r3, r5
 8001750:	0436      	lsls	r6, r6, #16
 8001752:	0c36      	lsrs	r6, r6, #16
 8001754:	4373      	muls	r3, r6
 8001756:	4698      	mov	r8, r3
 8001758:	0033      	movs	r3, r6
 800175a:	437b      	muls	r3, r7
 800175c:	469a      	mov	sl, r3
 800175e:	464b      	mov	r3, r9
 8001760:	435d      	muls	r5, r3
 8001762:	435f      	muls	r7, r3
 8001764:	4643      	mov	r3, r8
 8001766:	4455      	add	r5, sl
 8001768:	0c18      	lsrs	r0, r3, #16
 800176a:	1940      	adds	r0, r0, r5
 800176c:	4582      	cmp	sl, r0
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x218>
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	469a      	mov	sl, r3
 8001776:	4457      	add	r7, sl
 8001778:	0c05      	lsrs	r5, r0, #16
 800177a:	19eb      	adds	r3, r5, r7
 800177c:	9305      	str	r3, [sp, #20]
 800177e:	4643      	mov	r3, r8
 8001780:	041d      	lsls	r5, r3, #16
 8001782:	0c2d      	lsrs	r5, r5, #16
 8001784:	0400      	lsls	r0, r0, #16
 8001786:	1940      	adds	r0, r0, r5
 8001788:	0c25      	lsrs	r5, r4, #16
 800178a:	0424      	lsls	r4, r4, #16
 800178c:	0c24      	lsrs	r4, r4, #16
 800178e:	0027      	movs	r7, r4
 8001790:	4357      	muls	r7, r2
 8001792:	436a      	muls	r2, r5
 8001794:	4690      	mov	r8, r2
 8001796:	002a      	movs	r2, r5
 8001798:	0c3b      	lsrs	r3, r7, #16
 800179a:	469a      	mov	sl, r3
 800179c:	434a      	muls	r2, r1
 800179e:	4361      	muls	r1, r4
 80017a0:	4441      	add	r1, r8
 80017a2:	4451      	add	r1, sl
 80017a4:	4483      	add	fp, r0
 80017a6:	4588      	cmp	r8, r1
 80017a8:	d903      	bls.n	80017b2 <__aeabi_dmul+0x252>
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	4698      	mov	r8, r3
 80017b0:	4442      	add	r2, r8
 80017b2:	043f      	lsls	r7, r7, #16
 80017b4:	0c0b      	lsrs	r3, r1, #16
 80017b6:	0c3f      	lsrs	r7, r7, #16
 80017b8:	0409      	lsls	r1, r1, #16
 80017ba:	19c9      	adds	r1, r1, r7
 80017bc:	0027      	movs	r7, r4
 80017be:	4698      	mov	r8, r3
 80017c0:	464b      	mov	r3, r9
 80017c2:	4377      	muls	r7, r6
 80017c4:	435c      	muls	r4, r3
 80017c6:	436e      	muls	r6, r5
 80017c8:	435d      	muls	r5, r3
 80017ca:	0c3b      	lsrs	r3, r7, #16
 80017cc:	4699      	mov	r9, r3
 80017ce:	19a4      	adds	r4, r4, r6
 80017d0:	444c      	add	r4, r9
 80017d2:	4442      	add	r2, r8
 80017d4:	9503      	str	r5, [sp, #12]
 80017d6:	42a6      	cmp	r6, r4
 80017d8:	d904      	bls.n	80017e4 <__aeabi_dmul+0x284>
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	4698      	mov	r8, r3
 80017e0:	4445      	add	r5, r8
 80017e2:	9503      	str	r5, [sp, #12]
 80017e4:	9b02      	ldr	r3, [sp, #8]
 80017e6:	043f      	lsls	r7, r7, #16
 80017e8:	445b      	add	r3, fp
 80017ea:	001e      	movs	r6, r3
 80017ec:	4283      	cmp	r3, r0
 80017ee:	4180      	sbcs	r0, r0
 80017f0:	0423      	lsls	r3, r4, #16
 80017f2:	4698      	mov	r8, r3
 80017f4:	9b05      	ldr	r3, [sp, #20]
 80017f6:	0c3f      	lsrs	r7, r7, #16
 80017f8:	4447      	add	r7, r8
 80017fa:	4698      	mov	r8, r3
 80017fc:	1876      	adds	r6, r6, r1
 80017fe:	428e      	cmp	r6, r1
 8001800:	4189      	sbcs	r1, r1
 8001802:	4447      	add	r7, r8
 8001804:	4240      	negs	r0, r0
 8001806:	183d      	adds	r5, r7, r0
 8001808:	46a8      	mov	r8, r5
 800180a:	4693      	mov	fp, r2
 800180c:	4249      	negs	r1, r1
 800180e:	468a      	mov	sl, r1
 8001810:	44c3      	add	fp, r8
 8001812:	429f      	cmp	r7, r3
 8001814:	41bf      	sbcs	r7, r7
 8001816:	4580      	cmp	r8, r0
 8001818:	4180      	sbcs	r0, r0
 800181a:	9b03      	ldr	r3, [sp, #12]
 800181c:	44da      	add	sl, fp
 800181e:	4698      	mov	r8, r3
 8001820:	4653      	mov	r3, sl
 8001822:	4240      	negs	r0, r0
 8001824:	427f      	negs	r7, r7
 8001826:	4307      	orrs	r7, r0
 8001828:	0c24      	lsrs	r4, r4, #16
 800182a:	4593      	cmp	fp, r2
 800182c:	4192      	sbcs	r2, r2
 800182e:	458a      	cmp	sl, r1
 8001830:	4189      	sbcs	r1, r1
 8001832:	193f      	adds	r7, r7, r4
 8001834:	0ddc      	lsrs	r4, r3, #23
 8001836:	9b04      	ldr	r3, [sp, #16]
 8001838:	0275      	lsls	r5, r6, #9
 800183a:	431d      	orrs	r5, r3
 800183c:	1e68      	subs	r0, r5, #1
 800183e:	4185      	sbcs	r5, r0
 8001840:	4653      	mov	r3, sl
 8001842:	4252      	negs	r2, r2
 8001844:	4249      	negs	r1, r1
 8001846:	430a      	orrs	r2, r1
 8001848:	18bf      	adds	r7, r7, r2
 800184a:	4447      	add	r7, r8
 800184c:	0df6      	lsrs	r6, r6, #23
 800184e:	027f      	lsls	r7, r7, #9
 8001850:	4335      	orrs	r5, r6
 8001852:	025a      	lsls	r2, r3, #9
 8001854:	433c      	orrs	r4, r7
 8001856:	4315      	orrs	r5, r2
 8001858:	01fb      	lsls	r3, r7, #7
 800185a:	d400      	bmi.n	800185e <__aeabi_dmul+0x2fe>
 800185c:	e0c1      	b.n	80019e2 <__aeabi_dmul+0x482>
 800185e:	2101      	movs	r1, #1
 8001860:	086a      	lsrs	r2, r5, #1
 8001862:	400d      	ands	r5, r1
 8001864:	4315      	orrs	r5, r2
 8001866:	07e2      	lsls	r2, r4, #31
 8001868:	4315      	orrs	r5, r2
 800186a:	0864      	lsrs	r4, r4, #1
 800186c:	4926      	ldr	r1, [pc, #152]	; (8001908 <__aeabi_dmul+0x3a8>)
 800186e:	4461      	add	r1, ip
 8001870:	2900      	cmp	r1, #0
 8001872:	dd56      	ble.n	8001922 <__aeabi_dmul+0x3c2>
 8001874:	076b      	lsls	r3, r5, #29
 8001876:	d009      	beq.n	800188c <__aeabi_dmul+0x32c>
 8001878:	220f      	movs	r2, #15
 800187a:	402a      	ands	r2, r5
 800187c:	2a04      	cmp	r2, #4
 800187e:	d005      	beq.n	800188c <__aeabi_dmul+0x32c>
 8001880:	1d2a      	adds	r2, r5, #4
 8001882:	42aa      	cmp	r2, r5
 8001884:	41ad      	sbcs	r5, r5
 8001886:	426d      	negs	r5, r5
 8001888:	1964      	adds	r4, r4, r5
 800188a:	0015      	movs	r5, r2
 800188c:	01e3      	lsls	r3, r4, #7
 800188e:	d504      	bpl.n	800189a <__aeabi_dmul+0x33a>
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <__aeabi_dmul+0x3ac>)
 8001894:	00c9      	lsls	r1, r1, #3
 8001896:	4014      	ands	r4, r2
 8001898:	4461      	add	r1, ip
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <__aeabi_dmul+0x3b0>)
 800189c:	4291      	cmp	r1, r2
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dmul+0x342>
 80018a0:	e724      	b.n	80016ec <__aeabi_dmul+0x18c>
 80018a2:	0762      	lsls	r2, r4, #29
 80018a4:	08ed      	lsrs	r5, r5, #3
 80018a6:	0264      	lsls	r4, r4, #9
 80018a8:	0549      	lsls	r1, r1, #21
 80018aa:	4315      	orrs	r5, r2
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	0d4a      	lsrs	r2, r1, #21
 80018b0:	e6c6      	b.n	8001640 <__aeabi_dmul+0xe0>
 80018b2:	9701      	str	r7, [sp, #4]
 80018b4:	e6b8      	b.n	8001628 <__aeabi_dmul+0xc8>
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <__aeabi_dmul+0x398>)
 80018b8:	2003      	movs	r0, #3
 80018ba:	4694      	mov	ip, r2
 80018bc:	4463      	add	r3, ip
 80018be:	464a      	mov	r2, r9
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2303      	movs	r3, #3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	4691      	mov	r9, r2
 80018c8:	4652      	mov	r2, sl
 80018ca:	e68a      	b.n	80015e2 <__aeabi_dmul+0x82>
 80018cc:	4649      	mov	r1, r9
 80018ce:	2301      	movs	r3, #1
 80018d0:	4319      	orrs	r1, r3
 80018d2:	4689      	mov	r9, r1
 80018d4:	2600      	movs	r6, #0
 80018d6:	2001      	movs	r0, #1
 80018d8:	e683      	b.n	80015e2 <__aeabi_dmul+0x82>
 80018da:	220c      	movs	r2, #12
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2303      	movs	r3, #3
 80018e0:	0005      	movs	r5, r0
 80018e2:	4691      	mov	r9, r2
 80018e4:	469b      	mov	fp, r3
 80018e6:	e65e      	b.n	80015a6 <__aeabi_dmul+0x46>
 80018e8:	2304      	movs	r3, #4
 80018ea:	4699      	mov	r9, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	2400      	movs	r4, #0
 80018f4:	469b      	mov	fp, r3
 80018f6:	e656      	b.n	80015a6 <__aeabi_dmul+0x46>
 80018f8:	000007ff 	.word	0x000007ff
 80018fc:	fffffc01 	.word	0xfffffc01
 8001900:	0800b85c 	.word	0x0800b85c
 8001904:	fffffc0d 	.word	0xfffffc0d
 8001908:	000003ff 	.word	0x000003ff
 800190c:	feffffff 	.word	0xfeffffff
 8001910:	000007fe 	.word	0x000007fe
 8001914:	2300      	movs	r3, #0
 8001916:	2480      	movs	r4, #128	; 0x80
 8001918:	2500      	movs	r5, #0
 800191a:	4a44      	ldr	r2, [pc, #272]	; (8001a2c <__aeabi_dmul+0x4cc>)
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	0324      	lsls	r4, r4, #12
 8001920:	e68e      	b.n	8001640 <__aeabi_dmul+0xe0>
 8001922:	2001      	movs	r0, #1
 8001924:	1a40      	subs	r0, r0, r1
 8001926:	2838      	cmp	r0, #56	; 0x38
 8001928:	dd00      	ble.n	800192c <__aeabi_dmul+0x3cc>
 800192a:	e686      	b.n	800163a <__aeabi_dmul+0xda>
 800192c:	281f      	cmp	r0, #31
 800192e:	dd5b      	ble.n	80019e8 <__aeabi_dmul+0x488>
 8001930:	221f      	movs	r2, #31
 8001932:	0023      	movs	r3, r4
 8001934:	4252      	negs	r2, r2
 8001936:	1a51      	subs	r1, r2, r1
 8001938:	40cb      	lsrs	r3, r1
 800193a:	0019      	movs	r1, r3
 800193c:	2820      	cmp	r0, #32
 800193e:	d003      	beq.n	8001948 <__aeabi_dmul+0x3e8>
 8001940:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <__aeabi_dmul+0x4d0>)
 8001942:	4462      	add	r2, ip
 8001944:	4094      	lsls	r4, r2
 8001946:	4325      	orrs	r5, r4
 8001948:	1e6a      	subs	r2, r5, #1
 800194a:	4195      	sbcs	r5, r2
 800194c:	002a      	movs	r2, r5
 800194e:	430a      	orrs	r2, r1
 8001950:	2107      	movs	r1, #7
 8001952:	000d      	movs	r5, r1
 8001954:	2400      	movs	r4, #0
 8001956:	4015      	ands	r5, r2
 8001958:	4211      	tst	r1, r2
 800195a:	d05b      	beq.n	8001a14 <__aeabi_dmul+0x4b4>
 800195c:	210f      	movs	r1, #15
 800195e:	2400      	movs	r4, #0
 8001960:	4011      	ands	r1, r2
 8001962:	2904      	cmp	r1, #4
 8001964:	d053      	beq.n	8001a0e <__aeabi_dmul+0x4ae>
 8001966:	1d11      	adds	r1, r2, #4
 8001968:	4291      	cmp	r1, r2
 800196a:	4192      	sbcs	r2, r2
 800196c:	4252      	negs	r2, r2
 800196e:	18a4      	adds	r4, r4, r2
 8001970:	000a      	movs	r2, r1
 8001972:	0223      	lsls	r3, r4, #8
 8001974:	d54b      	bpl.n	8001a0e <__aeabi_dmul+0x4ae>
 8001976:	2201      	movs	r2, #1
 8001978:	2400      	movs	r4, #0
 800197a:	2500      	movs	r5, #0
 800197c:	e660      	b.n	8001640 <__aeabi_dmul+0xe0>
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	031b      	lsls	r3, r3, #12
 8001982:	421c      	tst	r4, r3
 8001984:	d009      	beq.n	800199a <__aeabi_dmul+0x43a>
 8001986:	421e      	tst	r6, r3
 8001988:	d107      	bne.n	800199a <__aeabi_dmul+0x43a>
 800198a:	4333      	orrs	r3, r6
 800198c:	031c      	lsls	r4, r3, #12
 800198e:	4643      	mov	r3, r8
 8001990:	0015      	movs	r5, r2
 8001992:	0b24      	lsrs	r4, r4, #12
 8001994:	4a25      	ldr	r2, [pc, #148]	; (8001a2c <__aeabi_dmul+0x4cc>)
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	e652      	b.n	8001640 <__aeabi_dmul+0xe0>
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4314      	orrs	r4, r2
 80019a0:	0324      	lsls	r4, r4, #12
 80019a2:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <__aeabi_dmul+0x4cc>)
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	9701      	str	r7, [sp, #4]
 80019a8:	e64a      	b.n	8001640 <__aeabi_dmul+0xe0>
 80019aa:	f000 fc81 	bl	80022b0 <__clzsi2>
 80019ae:	0003      	movs	r3, r0
 80019b0:	001a      	movs	r2, r3
 80019b2:	3215      	adds	r2, #21
 80019b4:	3020      	adds	r0, #32
 80019b6:	2a1c      	cmp	r2, #28
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dmul+0x45c>
 80019ba:	e684      	b.n	80016c6 <__aeabi_dmul+0x166>
 80019bc:	4656      	mov	r6, sl
 80019be:	3b08      	subs	r3, #8
 80019c0:	2200      	movs	r2, #0
 80019c2:	409e      	lsls	r6, r3
 80019c4:	e689      	b.n	80016da <__aeabi_dmul+0x17a>
 80019c6:	f000 fc73 	bl	80022b0 <__clzsi2>
 80019ca:	0001      	movs	r1, r0
 80019cc:	0002      	movs	r2, r0
 80019ce:	3115      	adds	r1, #21
 80019d0:	3220      	adds	r2, #32
 80019d2:	291c      	cmp	r1, #28
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x478>
 80019d6:	e64e      	b.n	8001676 <__aeabi_dmul+0x116>
 80019d8:	0034      	movs	r4, r6
 80019da:	3808      	subs	r0, #8
 80019dc:	2500      	movs	r5, #0
 80019de:	4084      	lsls	r4, r0
 80019e0:	e653      	b.n	800168a <__aeabi_dmul+0x12a>
 80019e2:	9b00      	ldr	r3, [sp, #0]
 80019e4:	469c      	mov	ip, r3
 80019e6:	e741      	b.n	800186c <__aeabi_dmul+0x30c>
 80019e8:	4912      	ldr	r1, [pc, #72]	; (8001a34 <__aeabi_dmul+0x4d4>)
 80019ea:	0022      	movs	r2, r4
 80019ec:	4461      	add	r1, ip
 80019ee:	002e      	movs	r6, r5
 80019f0:	408d      	lsls	r5, r1
 80019f2:	408a      	lsls	r2, r1
 80019f4:	40c6      	lsrs	r6, r0
 80019f6:	1e69      	subs	r1, r5, #1
 80019f8:	418d      	sbcs	r5, r1
 80019fa:	4332      	orrs	r2, r6
 80019fc:	432a      	orrs	r2, r5
 80019fe:	40c4      	lsrs	r4, r0
 8001a00:	0753      	lsls	r3, r2, #29
 8001a02:	d0b6      	beq.n	8001972 <__aeabi_dmul+0x412>
 8001a04:	210f      	movs	r1, #15
 8001a06:	4011      	ands	r1, r2
 8001a08:	2904      	cmp	r1, #4
 8001a0a:	d1ac      	bne.n	8001966 <__aeabi_dmul+0x406>
 8001a0c:	e7b1      	b.n	8001972 <__aeabi_dmul+0x412>
 8001a0e:	0765      	lsls	r5, r4, #29
 8001a10:	0264      	lsls	r4, r4, #9
 8001a12:	0b24      	lsrs	r4, r4, #12
 8001a14:	08d2      	lsrs	r2, r2, #3
 8001a16:	4315      	orrs	r5, r2
 8001a18:	2200      	movs	r2, #0
 8001a1a:	e611      	b.n	8001640 <__aeabi_dmul+0xe0>
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	0312      	lsls	r2, r2, #12
 8001a20:	4314      	orrs	r4, r2
 8001a22:	0324      	lsls	r4, r4, #12
 8001a24:	4a01      	ldr	r2, [pc, #4]	; (8001a2c <__aeabi_dmul+0x4cc>)
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	e60a      	b.n	8001640 <__aeabi_dmul+0xe0>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	0000043e 	.word	0x0000043e
 8001a34:	0000041e 	.word	0x0000041e

08001a38 <__aeabi_dsub>:
 8001a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3a:	4657      	mov	r7, sl
 8001a3c:	464e      	mov	r6, r9
 8001a3e:	4645      	mov	r5, r8
 8001a40:	46de      	mov	lr, fp
 8001a42:	0004      	movs	r4, r0
 8001a44:	b5e0      	push	{r5, r6, r7, lr}
 8001a46:	001f      	movs	r7, r3
 8001a48:	0010      	movs	r0, r2
 8001a4a:	030b      	lsls	r3, r1, #12
 8001a4c:	0f62      	lsrs	r2, r4, #29
 8001a4e:	004e      	lsls	r6, r1, #1
 8001a50:	0fcd      	lsrs	r5, r1, #31
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	0339      	lsls	r1, r7, #12
 8001a56:	4313      	orrs	r3, r2
 8001a58:	0a49      	lsrs	r1, r1, #9
 8001a5a:	00e2      	lsls	r2, r4, #3
 8001a5c:	0f44      	lsrs	r4, r0, #29
 8001a5e:	4321      	orrs	r1, r4
 8001a60:	4cc2      	ldr	r4, [pc, #776]	; (8001d6c <__aeabi_dsub+0x334>)
 8001a62:	4691      	mov	r9, r2
 8001a64:	4692      	mov	sl, r2
 8001a66:	00c0      	lsls	r0, r0, #3
 8001a68:	007a      	lsls	r2, r7, #1
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	0d76      	lsrs	r6, r6, #21
 8001a6e:	0d52      	lsrs	r2, r2, #21
 8001a70:	0fff      	lsrs	r7, r7, #31
 8001a72:	42a2      	cmp	r2, r4
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dsub+0x40>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dsub+0x1aa>
 8001a78:	2401      	movs	r4, #1
 8001a7a:	4067      	eors	r7, r4
 8001a7c:	46bb      	mov	fp, r7
 8001a7e:	42bd      	cmp	r5, r7
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x4c>
 8001a82:	e088      	b.n	8001b96 <__aeabi_dsub+0x15e>
 8001a84:	1ab4      	subs	r4, r6, r2
 8001a86:	46a4      	mov	ip, r4
 8001a88:	2c00      	cmp	r4, #0
 8001a8a:	dc00      	bgt.n	8001a8e <__aeabi_dsub+0x56>
 8001a8c:	e0b2      	b.n	8001bf4 <__aeabi_dsub+0x1bc>
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x5c>
 8001a92:	e0c5      	b.n	8001c20 <__aeabi_dsub+0x1e8>
 8001a94:	4ab5      	ldr	r2, [pc, #724]	; (8001d6c <__aeabi_dsub+0x334>)
 8001a96:	4296      	cmp	r6, r2
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x64>
 8001a9a:	e28b      	b.n	8001fb4 <__aeabi_dsub+0x57c>
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	0412      	lsls	r2, r2, #16
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	4662      	mov	r2, ip
 8001aa4:	2a38      	cmp	r2, #56	; 0x38
 8001aa6:	dd00      	ble.n	8001aaa <__aeabi_dsub+0x72>
 8001aa8:	e1a1      	b.n	8001dee <__aeabi_dsub+0x3b6>
 8001aaa:	2a1f      	cmp	r2, #31
 8001aac:	dd00      	ble.n	8001ab0 <__aeabi_dsub+0x78>
 8001aae:	e216      	b.n	8001ede <__aeabi_dsub+0x4a6>
 8001ab0:	2720      	movs	r7, #32
 8001ab2:	000c      	movs	r4, r1
 8001ab4:	1abf      	subs	r7, r7, r2
 8001ab6:	40bc      	lsls	r4, r7
 8001ab8:	0002      	movs	r2, r0
 8001aba:	46a0      	mov	r8, r4
 8001abc:	4664      	mov	r4, ip
 8001abe:	40b8      	lsls	r0, r7
 8001ac0:	40e2      	lsrs	r2, r4
 8001ac2:	4644      	mov	r4, r8
 8001ac4:	4314      	orrs	r4, r2
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	1e50      	subs	r0, r2, #1
 8001aca:	4182      	sbcs	r2, r0
 8001acc:	4660      	mov	r0, ip
 8001ace:	40c1      	lsrs	r1, r0
 8001ad0:	4322      	orrs	r2, r4
 8001ad2:	1a5b      	subs	r3, r3, r1
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	1a8c      	subs	r4, r1, r2
 8001ad8:	45a1      	cmp	r9, r4
 8001ada:	4192      	sbcs	r2, r2
 8001adc:	4252      	negs	r2, r2
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	4643      	mov	r3, r8
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	d400      	bmi.n	8001aea <__aeabi_dsub+0xb2>
 8001ae8:	e117      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8001aea:	4643      	mov	r3, r8
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	0a5b      	lsrs	r3, r3, #9
 8001af0:	4698      	mov	r8, r3
 8001af2:	4643      	mov	r3, r8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0xc2>
 8001af8:	e16c      	b.n	8001dd4 <__aeabi_dsub+0x39c>
 8001afa:	4640      	mov	r0, r8
 8001afc:	f000 fbd8 	bl	80022b0 <__clzsi2>
 8001b00:	0002      	movs	r2, r0
 8001b02:	3a08      	subs	r2, #8
 8001b04:	2120      	movs	r1, #32
 8001b06:	0020      	movs	r0, r4
 8001b08:	4643      	mov	r3, r8
 8001b0a:	1a89      	subs	r1, r1, r2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	40c8      	lsrs	r0, r1
 8001b10:	4094      	lsls	r4, r2
 8001b12:	4303      	orrs	r3, r0
 8001b14:	4296      	cmp	r6, r2
 8001b16:	dd00      	ble.n	8001b1a <__aeabi_dsub+0xe2>
 8001b18:	e157      	b.n	8001dca <__aeabi_dsub+0x392>
 8001b1a:	1b96      	subs	r6, r2, r6
 8001b1c:	1c71      	adds	r1, r6, #1
 8001b1e:	291f      	cmp	r1, #31
 8001b20:	dd00      	ble.n	8001b24 <__aeabi_dsub+0xec>
 8001b22:	e1cb      	b.n	8001ebc <__aeabi_dsub+0x484>
 8001b24:	2220      	movs	r2, #32
 8001b26:	0018      	movs	r0, r3
 8001b28:	0026      	movs	r6, r4
 8001b2a:	1a52      	subs	r2, r2, r1
 8001b2c:	4094      	lsls	r4, r2
 8001b2e:	4090      	lsls	r0, r2
 8001b30:	40ce      	lsrs	r6, r1
 8001b32:	40cb      	lsrs	r3, r1
 8001b34:	1e62      	subs	r2, r4, #1
 8001b36:	4194      	sbcs	r4, r2
 8001b38:	4330      	orrs	r0, r6
 8001b3a:	4698      	mov	r8, r3
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	4304      	orrs	r4, r0
 8001b40:	0763      	lsls	r3, r4, #29
 8001b42:	d009      	beq.n	8001b58 <__aeabi_dsub+0x120>
 8001b44:	230f      	movs	r3, #15
 8001b46:	4023      	ands	r3, r4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d005      	beq.n	8001b58 <__aeabi_dsub+0x120>
 8001b4c:	1d23      	adds	r3, r4, #4
 8001b4e:	42a3      	cmp	r3, r4
 8001b50:	41a4      	sbcs	r4, r4
 8001b52:	4264      	negs	r4, r4
 8001b54:	44a0      	add	r8, r4
 8001b56:	001c      	movs	r4, r3
 8001b58:	4643      	mov	r3, r8
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x128>
 8001b5e:	e0df      	b.n	8001d20 <__aeabi_dsub+0x2e8>
 8001b60:	4b82      	ldr	r3, [pc, #520]	; (8001d6c <__aeabi_dsub+0x334>)
 8001b62:	3601      	adds	r6, #1
 8001b64:	429e      	cmp	r6, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x132>
 8001b68:	e0fb      	b.n	8001d62 <__aeabi_dsub+0x32a>
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <__aeabi_dsub+0x338>)
 8001b6e:	08e4      	lsrs	r4, r4, #3
 8001b70:	401a      	ands	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	0571      	lsls	r1, r6, #21
 8001b76:	0752      	lsls	r2, r2, #29
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	0b1b      	lsrs	r3, r3, #12
 8001b7e:	0d49      	lsrs	r1, r1, #21
 8001b80:	0509      	lsls	r1, r1, #20
 8001b82:	07ed      	lsls	r5, r5, #31
 8001b84:	4319      	orrs	r1, r3
 8001b86:	4329      	orrs	r1, r5
 8001b88:	0010      	movs	r0, r2
 8001b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b8c:	46bb      	mov	fp, r7
 8001b8e:	46b2      	mov	sl, r6
 8001b90:	46a9      	mov	r9, r5
 8001b92:	46a0      	mov	r8, r4
 8001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b96:	1ab4      	subs	r4, r6, r2
 8001b98:	46a4      	mov	ip, r4
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	dd58      	ble.n	8001c50 <__aeabi_dsub+0x218>
 8001b9e:	2a00      	cmp	r2, #0
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x16c>
 8001ba2:	e09e      	b.n	8001ce2 <__aeabi_dsub+0x2aa>
 8001ba4:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <__aeabi_dsub+0x334>)
 8001ba6:	4296      	cmp	r6, r2
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x174>
 8001baa:	e13b      	b.n	8001e24 <__aeabi_dsub+0x3ec>
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	0412      	lsls	r2, r2, #16
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	4662      	mov	r2, ip
 8001bb4:	2a38      	cmp	r2, #56	; 0x38
 8001bb6:	dd00      	ble.n	8001bba <__aeabi_dsub+0x182>
 8001bb8:	e0c1      	b.n	8001d3e <__aeabi_dsub+0x306>
 8001bba:	2a1f      	cmp	r2, #31
 8001bbc:	dc00      	bgt.n	8001bc0 <__aeabi_dsub+0x188>
 8001bbe:	e1bb      	b.n	8001f38 <__aeabi_dsub+0x500>
 8001bc0:	000c      	movs	r4, r1
 8001bc2:	3a20      	subs	r2, #32
 8001bc4:	40d4      	lsrs	r4, r2
 8001bc6:	0022      	movs	r2, r4
 8001bc8:	4664      	mov	r4, ip
 8001bca:	2c20      	cmp	r4, #32
 8001bcc:	d004      	beq.n	8001bd8 <__aeabi_dsub+0x1a0>
 8001bce:	2740      	movs	r7, #64	; 0x40
 8001bd0:	1b3f      	subs	r7, r7, r4
 8001bd2:	40b9      	lsls	r1, r7
 8001bd4:	4308      	orrs	r0, r1
 8001bd6:	4680      	mov	r8, r0
 8001bd8:	4644      	mov	r4, r8
 8001bda:	1e61      	subs	r1, r4, #1
 8001bdc:	418c      	sbcs	r4, r1
 8001bde:	4314      	orrs	r4, r2
 8001be0:	e0b1      	b.n	8001d46 <__aeabi_dsub+0x30e>
 8001be2:	000c      	movs	r4, r1
 8001be4:	4304      	orrs	r4, r0
 8001be6:	d02a      	beq.n	8001c3e <__aeabi_dsub+0x206>
 8001be8:	46bb      	mov	fp, r7
 8001bea:	42bd      	cmp	r5, r7
 8001bec:	d02d      	beq.n	8001c4a <__aeabi_dsub+0x212>
 8001bee:	4c61      	ldr	r4, [pc, #388]	; (8001d74 <__aeabi_dsub+0x33c>)
 8001bf0:	46a4      	mov	ip, r4
 8001bf2:	44b4      	add	ip, r6
 8001bf4:	4664      	mov	r4, ip
 8001bf6:	2c00      	cmp	r4, #0
 8001bf8:	d05c      	beq.n	8001cb4 <__aeabi_dsub+0x27c>
 8001bfa:	1b94      	subs	r4, r2, r6
 8001bfc:	46a4      	mov	ip, r4
 8001bfe:	2e00      	cmp	r6, #0
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x1cc>
 8001c02:	e115      	b.n	8001e30 <__aeabi_dsub+0x3f8>
 8001c04:	464d      	mov	r5, r9
 8001c06:	431d      	orrs	r5, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1d4>
 8001c0a:	e1c3      	b.n	8001f94 <__aeabi_dsub+0x55c>
 8001c0c:	1e65      	subs	r5, r4, #1
 8001c0e:	2c01      	cmp	r4, #1
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x1dc>
 8001c12:	e20c      	b.n	800202e <__aeabi_dsub+0x5f6>
 8001c14:	4e55      	ldr	r6, [pc, #340]	; (8001d6c <__aeabi_dsub+0x334>)
 8001c16:	42b4      	cmp	r4, r6
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x1e4>
 8001c1a:	e1f8      	b.n	800200e <__aeabi_dsub+0x5d6>
 8001c1c:	46ac      	mov	ip, r5
 8001c1e:	e10e      	b.n	8001e3e <__aeabi_dsub+0x406>
 8001c20:	000a      	movs	r2, r1
 8001c22:	4302      	orrs	r2, r0
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f0>
 8001c26:	e136      	b.n	8001e96 <__aeabi_dsub+0x45e>
 8001c28:	0022      	movs	r2, r4
 8001c2a:	3a01      	subs	r2, #1
 8001c2c:	2c01      	cmp	r4, #1
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x1fa>
 8001c30:	e1c6      	b.n	8001fc0 <__aeabi_dsub+0x588>
 8001c32:	4c4e      	ldr	r4, [pc, #312]	; (8001d6c <__aeabi_dsub+0x334>)
 8001c34:	45a4      	cmp	ip, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x202>
 8001c38:	e0f4      	b.n	8001e24 <__aeabi_dsub+0x3ec>
 8001c3a:	4694      	mov	ip, r2
 8001c3c:	e731      	b.n	8001aa2 <__aeabi_dsub+0x6a>
 8001c3e:	2401      	movs	r4, #1
 8001c40:	4067      	eors	r7, r4
 8001c42:	46bb      	mov	fp, r7
 8001c44:	42bd      	cmp	r5, r7
 8001c46:	d000      	beq.n	8001c4a <__aeabi_dsub+0x212>
 8001c48:	e71c      	b.n	8001a84 <__aeabi_dsub+0x4c>
 8001c4a:	4c4a      	ldr	r4, [pc, #296]	; (8001d74 <__aeabi_dsub+0x33c>)
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	44b4      	add	ip, r6
 8001c50:	4664      	mov	r4, ip
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x220>
 8001c56:	e0cf      	b.n	8001df8 <__aeabi_dsub+0x3c0>
 8001c58:	1b94      	subs	r4, r2, r6
 8001c5a:	46a4      	mov	ip, r4
 8001c5c:	2e00      	cmp	r6, #0
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dsub+0x22a>
 8001c60:	e15c      	b.n	8001f1c <__aeabi_dsub+0x4e4>
 8001c62:	4e42      	ldr	r6, [pc, #264]	; (8001d6c <__aeabi_dsub+0x334>)
 8001c64:	42b2      	cmp	r2, r6
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x232>
 8001c68:	e1ec      	b.n	8002044 <__aeabi_dsub+0x60c>
 8001c6a:	2680      	movs	r6, #128	; 0x80
 8001c6c:	0436      	lsls	r6, r6, #16
 8001c6e:	4333      	orrs	r3, r6
 8001c70:	4664      	mov	r4, ip
 8001c72:	2c38      	cmp	r4, #56	; 0x38
 8001c74:	dd00      	ble.n	8001c78 <__aeabi_dsub+0x240>
 8001c76:	e1b3      	b.n	8001fe0 <__aeabi_dsub+0x5a8>
 8001c78:	2c1f      	cmp	r4, #31
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dsub+0x246>
 8001c7c:	e238      	b.n	80020f0 <__aeabi_dsub+0x6b8>
 8001c7e:	2620      	movs	r6, #32
 8001c80:	1b36      	subs	r6, r6, r4
 8001c82:	001c      	movs	r4, r3
 8001c84:	40b4      	lsls	r4, r6
 8001c86:	464f      	mov	r7, r9
 8001c88:	46a0      	mov	r8, r4
 8001c8a:	4664      	mov	r4, ip
 8001c8c:	40e7      	lsrs	r7, r4
 8001c8e:	4644      	mov	r4, r8
 8001c90:	433c      	orrs	r4, r7
 8001c92:	464f      	mov	r7, r9
 8001c94:	40b7      	lsls	r7, r6
 8001c96:	003e      	movs	r6, r7
 8001c98:	1e77      	subs	r7, r6, #1
 8001c9a:	41be      	sbcs	r6, r7
 8001c9c:	4334      	orrs	r4, r6
 8001c9e:	4666      	mov	r6, ip
 8001ca0:	40f3      	lsrs	r3, r6
 8001ca2:	18c9      	adds	r1, r1, r3
 8001ca4:	1824      	adds	r4, r4, r0
 8001ca6:	4284      	cmp	r4, r0
 8001ca8:	419b      	sbcs	r3, r3
 8001caa:	425b      	negs	r3, r3
 8001cac:	4698      	mov	r8, r3
 8001cae:	0016      	movs	r6, r2
 8001cb0:	4488      	add	r8, r1
 8001cb2:	e04e      	b.n	8001d52 <__aeabi_dsub+0x31a>
 8001cb4:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <__aeabi_dsub+0x340>)
 8001cb6:	1c74      	adds	r4, r6, #1
 8001cb8:	4214      	tst	r4, r2
 8001cba:	d000      	beq.n	8001cbe <__aeabi_dsub+0x286>
 8001cbc:	e0d6      	b.n	8001e6c <__aeabi_dsub+0x434>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	2e00      	cmp	r6, #0
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x290>
 8001cc6:	e15b      	b.n	8001f80 <__aeabi_dsub+0x548>
 8001cc8:	2a00      	cmp	r2, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x296>
 8001ccc:	e1a5      	b.n	800201a <__aeabi_dsub+0x5e2>
 8001cce:	000a      	movs	r2, r1
 8001cd0:	4302      	orrs	r2, r0
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x29e>
 8001cd4:	e1bb      	b.n	800204e <__aeabi_dsub+0x616>
 8001cd6:	464a      	mov	r2, r9
 8001cd8:	0759      	lsls	r1, r3, #29
 8001cda:	08d2      	lsrs	r2, r2, #3
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	e027      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 8001ce2:	000a      	movs	r2, r1
 8001ce4:	4302      	orrs	r2, r0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x2b2>
 8001ce8:	e174      	b.n	8001fd4 <__aeabi_dsub+0x59c>
 8001cea:	0022      	movs	r2, r4
 8001cec:	3a01      	subs	r2, #1
 8001cee:	2c01      	cmp	r4, #1
 8001cf0:	d005      	beq.n	8001cfe <__aeabi_dsub+0x2c6>
 8001cf2:	4c1e      	ldr	r4, [pc, #120]	; (8001d6c <__aeabi_dsub+0x334>)
 8001cf4:	45a4      	cmp	ip, r4
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x2c2>
 8001cf8:	e094      	b.n	8001e24 <__aeabi_dsub+0x3ec>
 8001cfa:	4694      	mov	ip, r2
 8001cfc:	e759      	b.n	8001bb2 <__aeabi_dsub+0x17a>
 8001cfe:	4448      	add	r0, r9
 8001d00:	4548      	cmp	r0, r9
 8001d02:	4192      	sbcs	r2, r2
 8001d04:	185b      	adds	r3, r3, r1
 8001d06:	4698      	mov	r8, r3
 8001d08:	0004      	movs	r4, r0
 8001d0a:	4252      	negs	r2, r2
 8001d0c:	4490      	add	r8, r2
 8001d0e:	4643      	mov	r3, r8
 8001d10:	2602      	movs	r6, #2
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	d500      	bpl.n	8001d18 <__aeabi_dsub+0x2e0>
 8001d16:	e0c4      	b.n	8001ea2 <__aeabi_dsub+0x46a>
 8001d18:	3e01      	subs	r6, #1
 8001d1a:	0763      	lsls	r3, r4, #29
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x2e8>
 8001d1e:	e711      	b.n	8001b44 <__aeabi_dsub+0x10c>
 8001d20:	4643      	mov	r3, r8
 8001d22:	46b4      	mov	ip, r6
 8001d24:	0759      	lsls	r1, r3, #29
 8001d26:	08e2      	lsrs	r2, r4, #3
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	490f      	ldr	r1, [pc, #60]	; (8001d6c <__aeabi_dsub+0x334>)
 8001d2e:	458c      	cmp	ip, r1
 8001d30:	d040      	beq.n	8001db4 <__aeabi_dsub+0x37c>
 8001d32:	4661      	mov	r1, ip
 8001d34:	031b      	lsls	r3, r3, #12
 8001d36:	0549      	lsls	r1, r1, #21
 8001d38:	0b1b      	lsrs	r3, r3, #12
 8001d3a:	0d49      	lsrs	r1, r1, #21
 8001d3c:	e720      	b.n	8001b80 <__aeabi_dsub+0x148>
 8001d3e:	4301      	orrs	r1, r0
 8001d40:	000c      	movs	r4, r1
 8001d42:	1e61      	subs	r1, r4, #1
 8001d44:	418c      	sbcs	r4, r1
 8001d46:	444c      	add	r4, r9
 8001d48:	454c      	cmp	r4, r9
 8001d4a:	4192      	sbcs	r2, r2
 8001d4c:	4252      	negs	r2, r2
 8001d4e:	4690      	mov	r8, r2
 8001d50:	4498      	add	r8, r3
 8001d52:	4643      	mov	r3, r8
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	d5e0      	bpl.n	8001d1a <__aeabi_dsub+0x2e2>
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__aeabi_dsub+0x334>)
 8001d5a:	3601      	adds	r6, #1
 8001d5c:	429e      	cmp	r6, r3
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x32a>
 8001d60:	e09f      	b.n	8001ea2 <__aeabi_dsub+0x46a>
 8001d62:	0031      	movs	r1, r6
 8001d64:	2300      	movs	r3, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e70a      	b.n	8001b80 <__aeabi_dsub+0x148>
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	000007ff 	.word	0x000007ff
 8001d70:	ff7fffff 	.word	0xff7fffff
 8001d74:	fffff801 	.word	0xfffff801
 8001d78:	000007fe 	.word	0x000007fe
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x34a>
 8001d80:	e160      	b.n	8002044 <__aeabi_dsub+0x60c>
 8001d82:	000a      	movs	r2, r1
 8001d84:	4302      	orrs	r2, r0
 8001d86:	d04d      	beq.n	8001e24 <__aeabi_dsub+0x3ec>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	075c      	lsls	r4, r3, #29
 8001d8c:	08d2      	lsrs	r2, r2, #3
 8001d8e:	4322      	orrs	r2, r4
 8001d90:	2480      	movs	r4, #128	; 0x80
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	0324      	lsls	r4, r4, #12
 8001d96:	4223      	tst	r3, r4
 8001d98:	d007      	beq.n	8001daa <__aeabi_dsub+0x372>
 8001d9a:	08ce      	lsrs	r6, r1, #3
 8001d9c:	4226      	tst	r6, r4
 8001d9e:	d104      	bne.n	8001daa <__aeabi_dsub+0x372>
 8001da0:	465d      	mov	r5, fp
 8001da2:	0033      	movs	r3, r6
 8001da4:	08c2      	lsrs	r2, r0, #3
 8001da6:	0749      	lsls	r1, r1, #29
 8001da8:	430a      	orrs	r2, r1
 8001daa:	0f51      	lsrs	r1, r2, #29
 8001dac:	00d2      	lsls	r2, r2, #3
 8001dae:	08d2      	lsrs	r2, r2, #3
 8001db0:	0749      	lsls	r1, r1, #29
 8001db2:	430a      	orrs	r2, r1
 8001db4:	0011      	movs	r1, r2
 8001db6:	4319      	orrs	r1, r3
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x384>
 8001dba:	e1c8      	b.n	800214e <__aeabi_dsub+0x716>
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0309      	lsls	r1, r1, #12
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	031b      	lsls	r3, r3, #12
 8001dc4:	49d5      	ldr	r1, [pc, #852]	; (800211c <__aeabi_dsub+0x6e4>)
 8001dc6:	0b1b      	lsrs	r3, r3, #12
 8001dc8:	e6da      	b.n	8001b80 <__aeabi_dsub+0x148>
 8001dca:	49d5      	ldr	r1, [pc, #852]	; (8002120 <__aeabi_dsub+0x6e8>)
 8001dcc:	1ab6      	subs	r6, r6, r2
 8001dce:	400b      	ands	r3, r1
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	e6b5      	b.n	8001b40 <__aeabi_dsub+0x108>
 8001dd4:	0020      	movs	r0, r4
 8001dd6:	f000 fa6b 	bl	80022b0 <__clzsi2>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	3218      	adds	r2, #24
 8001dde:	2a1f      	cmp	r2, #31
 8001de0:	dc00      	bgt.n	8001de4 <__aeabi_dsub+0x3ac>
 8001de2:	e68f      	b.n	8001b04 <__aeabi_dsub+0xcc>
 8001de4:	0023      	movs	r3, r4
 8001de6:	3808      	subs	r0, #8
 8001de8:	4083      	lsls	r3, r0
 8001dea:	2400      	movs	r4, #0
 8001dec:	e692      	b.n	8001b14 <__aeabi_dsub+0xdc>
 8001dee:	4308      	orrs	r0, r1
 8001df0:	0002      	movs	r2, r0
 8001df2:	1e50      	subs	r0, r2, #1
 8001df4:	4182      	sbcs	r2, r0
 8001df6:	e66d      	b.n	8001ad4 <__aeabi_dsub+0x9c>
 8001df8:	4cca      	ldr	r4, [pc, #808]	; (8002124 <__aeabi_dsub+0x6ec>)
 8001dfa:	1c72      	adds	r2, r6, #1
 8001dfc:	4222      	tst	r2, r4
 8001dfe:	d000      	beq.n	8001e02 <__aeabi_dsub+0x3ca>
 8001e00:	e0ad      	b.n	8001f5e <__aeabi_dsub+0x526>
 8001e02:	464a      	mov	r2, r9
 8001e04:	431a      	orrs	r2, r3
 8001e06:	2e00      	cmp	r6, #0
 8001e08:	d1b8      	bne.n	8001d7c <__aeabi_dsub+0x344>
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x3d8>
 8001e0e:	e158      	b.n	80020c2 <__aeabi_dsub+0x68a>
 8001e10:	000a      	movs	r2, r1
 8001e12:	4302      	orrs	r2, r0
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x3e0>
 8001e16:	e159      	b.n	80020cc <__aeabi_dsub+0x694>
 8001e18:	464a      	mov	r2, r9
 8001e1a:	0759      	lsls	r1, r3, #29
 8001e1c:	08d2      	lsrs	r2, r2, #3
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	e786      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 8001e24:	464a      	mov	r2, r9
 8001e26:	0759      	lsls	r1, r3, #29
 8001e28:	08d2      	lsrs	r2, r2, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	e7c1      	b.n	8001db4 <__aeabi_dsub+0x37c>
 8001e30:	4dba      	ldr	r5, [pc, #744]	; (800211c <__aeabi_dsub+0x6e4>)
 8001e32:	42aa      	cmp	r2, r5
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x400>
 8001e36:	e11e      	b.n	8002076 <__aeabi_dsub+0x63e>
 8001e38:	2580      	movs	r5, #128	; 0x80
 8001e3a:	042d      	lsls	r5, r5, #16
 8001e3c:	432b      	orrs	r3, r5
 8001e3e:	4664      	mov	r4, ip
 8001e40:	2c38      	cmp	r4, #56	; 0x38
 8001e42:	dc5d      	bgt.n	8001f00 <__aeabi_dsub+0x4c8>
 8001e44:	2c1f      	cmp	r4, #31
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x412>
 8001e48:	e0d0      	b.n	8001fec <__aeabi_dsub+0x5b4>
 8001e4a:	2520      	movs	r5, #32
 8001e4c:	4667      	mov	r7, ip
 8001e4e:	1b2d      	subs	r5, r5, r4
 8001e50:	464e      	mov	r6, r9
 8001e52:	001c      	movs	r4, r3
 8001e54:	40fe      	lsrs	r6, r7
 8001e56:	40ac      	lsls	r4, r5
 8001e58:	4334      	orrs	r4, r6
 8001e5a:	464e      	mov	r6, r9
 8001e5c:	40ae      	lsls	r6, r5
 8001e5e:	0035      	movs	r5, r6
 8001e60:	40fb      	lsrs	r3, r7
 8001e62:	1e6e      	subs	r6, r5, #1
 8001e64:	41b5      	sbcs	r5, r6
 8001e66:	1ac9      	subs	r1, r1, r3
 8001e68:	432c      	orrs	r4, r5
 8001e6a:	e04e      	b.n	8001f0a <__aeabi_dsub+0x4d2>
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	1a14      	subs	r4, r2, r0
 8001e70:	45a1      	cmp	r9, r4
 8001e72:	4192      	sbcs	r2, r2
 8001e74:	4252      	negs	r2, r2
 8001e76:	4690      	mov	r8, r2
 8001e78:	1a5f      	subs	r7, r3, r1
 8001e7a:	003a      	movs	r2, r7
 8001e7c:	4647      	mov	r7, r8
 8001e7e:	1bd2      	subs	r2, r2, r7
 8001e80:	4690      	mov	r8, r2
 8001e82:	0212      	lsls	r2, r2, #8
 8001e84:	d500      	bpl.n	8001e88 <__aeabi_dsub+0x450>
 8001e86:	e08b      	b.n	8001fa0 <__aeabi_dsub+0x568>
 8001e88:	4642      	mov	r2, r8
 8001e8a:	4322      	orrs	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x458>
 8001e8e:	e630      	b.n	8001af2 <__aeabi_dsub+0xba>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2500      	movs	r5, #0
 8001e94:	e74d      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 8001e96:	464a      	mov	r2, r9
 8001e98:	0759      	lsls	r1, r3, #29
 8001e9a:	08d2      	lsrs	r2, r2, #3
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	08db      	lsrs	r3, r3, #3
 8001ea0:	e744      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 8001ea2:	4642      	mov	r2, r8
 8001ea4:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <__aeabi_dsub+0x6e8>)
 8001ea6:	0861      	lsrs	r1, r4, #1
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	2201      	movs	r2, #1
 8001eae:	4014      	ands	r4, r2
 8001eb0:	430c      	orrs	r4, r1
 8001eb2:	07da      	lsls	r2, r3, #31
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	4314      	orrs	r4, r2
 8001eba:	e641      	b.n	8001b40 <__aeabi_dsub+0x108>
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	3e1f      	subs	r6, #31
 8001ec0:	40f2      	lsrs	r2, r6
 8001ec2:	0016      	movs	r6, r2
 8001ec4:	2920      	cmp	r1, #32
 8001ec6:	d003      	beq.n	8001ed0 <__aeabi_dsub+0x498>
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	1a51      	subs	r1, r2, r1
 8001ecc:	408b      	lsls	r3, r1
 8001ece:	431c      	orrs	r4, r3
 8001ed0:	1e62      	subs	r2, r4, #1
 8001ed2:	4194      	sbcs	r4, r2
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4334      	orrs	r4, r6
 8001ed8:	4698      	mov	r8, r3
 8001eda:	2600      	movs	r6, #0
 8001edc:	e71d      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8001ede:	000c      	movs	r4, r1
 8001ee0:	3a20      	subs	r2, #32
 8001ee2:	40d4      	lsrs	r4, r2
 8001ee4:	0022      	movs	r2, r4
 8001ee6:	4664      	mov	r4, ip
 8001ee8:	2c20      	cmp	r4, #32
 8001eea:	d004      	beq.n	8001ef6 <__aeabi_dsub+0x4be>
 8001eec:	2740      	movs	r7, #64	; 0x40
 8001eee:	1b3f      	subs	r7, r7, r4
 8001ef0:	40b9      	lsls	r1, r7
 8001ef2:	4308      	orrs	r0, r1
 8001ef4:	4680      	mov	r8, r0
 8001ef6:	4644      	mov	r4, r8
 8001ef8:	1e61      	subs	r1, r4, #1
 8001efa:	418c      	sbcs	r4, r1
 8001efc:	4322      	orrs	r2, r4
 8001efe:	e5e9      	b.n	8001ad4 <__aeabi_dsub+0x9c>
 8001f00:	464c      	mov	r4, r9
 8001f02:	4323      	orrs	r3, r4
 8001f04:	001c      	movs	r4, r3
 8001f06:	1e63      	subs	r3, r4, #1
 8001f08:	419c      	sbcs	r4, r3
 8001f0a:	1b04      	subs	r4, r0, r4
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	419b      	sbcs	r3, r3
 8001f10:	425b      	negs	r3, r3
 8001f12:	1acb      	subs	r3, r1, r3
 8001f14:	4698      	mov	r8, r3
 8001f16:	465d      	mov	r5, fp
 8001f18:	0016      	movs	r6, r2
 8001f1a:	e5e2      	b.n	8001ae2 <__aeabi_dsub+0xaa>
 8001f1c:	464e      	mov	r6, r9
 8001f1e:	431e      	orrs	r6, r3
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x4ec>
 8001f22:	e0ae      	b.n	8002082 <__aeabi_dsub+0x64a>
 8001f24:	1e66      	subs	r6, r4, #1
 8001f26:	2c01      	cmp	r4, #1
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x4f4>
 8001f2a:	e0fd      	b.n	8002128 <__aeabi_dsub+0x6f0>
 8001f2c:	4f7b      	ldr	r7, [pc, #492]	; (800211c <__aeabi_dsub+0x6e4>)
 8001f2e:	42bc      	cmp	r4, r7
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x4fc>
 8001f32:	e107      	b.n	8002144 <__aeabi_dsub+0x70c>
 8001f34:	46b4      	mov	ip, r6
 8001f36:	e69b      	b.n	8001c70 <__aeabi_dsub+0x238>
 8001f38:	4664      	mov	r4, ip
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	1b12      	subs	r2, r2, r4
 8001f3e:	000c      	movs	r4, r1
 8001f40:	4094      	lsls	r4, r2
 8001f42:	0007      	movs	r7, r0
 8001f44:	4090      	lsls	r0, r2
 8001f46:	46a0      	mov	r8, r4
 8001f48:	4664      	mov	r4, ip
 8001f4a:	1e42      	subs	r2, r0, #1
 8001f4c:	4190      	sbcs	r0, r2
 8001f4e:	4662      	mov	r2, ip
 8001f50:	40e7      	lsrs	r7, r4
 8001f52:	4644      	mov	r4, r8
 8001f54:	40d1      	lsrs	r1, r2
 8001f56:	433c      	orrs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	185b      	adds	r3, r3, r1
 8001f5c:	e6f3      	b.n	8001d46 <__aeabi_dsub+0x30e>
 8001f5e:	4c6f      	ldr	r4, [pc, #444]	; (800211c <__aeabi_dsub+0x6e4>)
 8001f60:	42a2      	cmp	r2, r4
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x52e>
 8001f64:	e0d5      	b.n	8002112 <__aeabi_dsub+0x6da>
 8001f66:	4448      	add	r0, r9
 8001f68:	185b      	adds	r3, r3, r1
 8001f6a:	4548      	cmp	r0, r9
 8001f6c:	4189      	sbcs	r1, r1
 8001f6e:	4249      	negs	r1, r1
 8001f70:	185b      	adds	r3, r3, r1
 8001f72:	07dc      	lsls	r4, r3, #31
 8001f74:	0840      	lsrs	r0, r0, #1
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	4698      	mov	r8, r3
 8001f7a:	0016      	movs	r6, r2
 8001f7c:	4304      	orrs	r4, r0
 8001f7e:	e6cc      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x54e>
 8001f84:	e082      	b.n	800208c <__aeabi_dsub+0x654>
 8001f86:	000a      	movs	r2, r1
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	d140      	bne.n	800200e <__aeabi_dsub+0x5d6>
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	2500      	movs	r5, #0
 8001f90:	031b      	lsls	r3, r3, #12
 8001f92:	e713      	b.n	8001dbc <__aeabi_dsub+0x384>
 8001f94:	074b      	lsls	r3, r1, #29
 8001f96:	08c2      	lsrs	r2, r0, #3
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	465d      	mov	r5, fp
 8001f9c:	08cb      	lsrs	r3, r1, #3
 8001f9e:	e6c5      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 8001fa0:	464a      	mov	r2, r9
 8001fa2:	1a84      	subs	r4, r0, r2
 8001fa4:	42a0      	cmp	r0, r4
 8001fa6:	4192      	sbcs	r2, r2
 8001fa8:	1acb      	subs	r3, r1, r3
 8001faa:	4252      	negs	r2, r2
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	4698      	mov	r8, r3
 8001fb0:	465d      	mov	r5, fp
 8001fb2:	e59e      	b.n	8001af2 <__aeabi_dsub+0xba>
 8001fb4:	464a      	mov	r2, r9
 8001fb6:	0759      	lsls	r1, r3, #29
 8001fb8:	08d2      	lsrs	r2, r2, #3
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	08db      	lsrs	r3, r3, #3
 8001fbe:	e6f9      	b.n	8001db4 <__aeabi_dsub+0x37c>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	1a14      	subs	r4, r2, r0
 8001fc4:	45a1      	cmp	r9, r4
 8001fc6:	4192      	sbcs	r2, r2
 8001fc8:	1a5b      	subs	r3, r3, r1
 8001fca:	4252      	negs	r2, r2
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	4698      	mov	r8, r3
 8001fd0:	2601      	movs	r6, #1
 8001fd2:	e586      	b.n	8001ae2 <__aeabi_dsub+0xaa>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	0759      	lsls	r1, r3, #29
 8001fd8:	08d2      	lsrs	r2, r2, #3
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	e6a5      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 8001fe0:	464c      	mov	r4, r9
 8001fe2:	4323      	orrs	r3, r4
 8001fe4:	001c      	movs	r4, r3
 8001fe6:	1e63      	subs	r3, r4, #1
 8001fe8:	419c      	sbcs	r4, r3
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_dsub+0x26c>
 8001fec:	4665      	mov	r5, ip
 8001fee:	001e      	movs	r6, r3
 8001ff0:	3d20      	subs	r5, #32
 8001ff2:	40ee      	lsrs	r6, r5
 8001ff4:	2c20      	cmp	r4, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dsub+0x5cc>
 8001ff8:	2540      	movs	r5, #64	; 0x40
 8001ffa:	1b2d      	subs	r5, r5, r4
 8001ffc:	40ab      	lsls	r3, r5
 8001ffe:	464c      	mov	r4, r9
 8002000:	431c      	orrs	r4, r3
 8002002:	46a2      	mov	sl, r4
 8002004:	4654      	mov	r4, sl
 8002006:	1e63      	subs	r3, r4, #1
 8002008:	419c      	sbcs	r4, r3
 800200a:	4334      	orrs	r4, r6
 800200c:	e77d      	b.n	8001f0a <__aeabi_dsub+0x4d2>
 800200e:	074b      	lsls	r3, r1, #29
 8002010:	08c2      	lsrs	r2, r0, #3
 8002012:	431a      	orrs	r2, r3
 8002014:	465d      	mov	r5, fp
 8002016:	08cb      	lsrs	r3, r1, #3
 8002018:	e6cc      	b.n	8001db4 <__aeabi_dsub+0x37c>
 800201a:	000a      	movs	r2, r1
 800201c:	4302      	orrs	r2, r0
 800201e:	d100      	bne.n	8002022 <__aeabi_dsub+0x5ea>
 8002020:	e736      	b.n	8001e90 <__aeabi_dsub+0x458>
 8002022:	074b      	lsls	r3, r1, #29
 8002024:	08c2      	lsrs	r2, r0, #3
 8002026:	431a      	orrs	r2, r3
 8002028:	465d      	mov	r5, fp
 800202a:	08cb      	lsrs	r3, r1, #3
 800202c:	e681      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 800202e:	464a      	mov	r2, r9
 8002030:	1a84      	subs	r4, r0, r2
 8002032:	42a0      	cmp	r0, r4
 8002034:	4192      	sbcs	r2, r2
 8002036:	1acb      	subs	r3, r1, r3
 8002038:	4252      	negs	r2, r2
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	4698      	mov	r8, r3
 800203e:	465d      	mov	r5, fp
 8002040:	2601      	movs	r6, #1
 8002042:	e54e      	b.n	8001ae2 <__aeabi_dsub+0xaa>
 8002044:	074b      	lsls	r3, r1, #29
 8002046:	08c2      	lsrs	r2, r0, #3
 8002048:	431a      	orrs	r2, r3
 800204a:	08cb      	lsrs	r3, r1, #3
 800204c:	e6b2      	b.n	8001db4 <__aeabi_dsub+0x37c>
 800204e:	464a      	mov	r2, r9
 8002050:	1a14      	subs	r4, r2, r0
 8002052:	45a1      	cmp	r9, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	1a5f      	subs	r7, r3, r1
 8002058:	4252      	negs	r2, r2
 800205a:	1aba      	subs	r2, r7, r2
 800205c:	4690      	mov	r8, r2
 800205e:	0212      	lsls	r2, r2, #8
 8002060:	d56b      	bpl.n	800213a <__aeabi_dsub+0x702>
 8002062:	464a      	mov	r2, r9
 8002064:	1a84      	subs	r4, r0, r2
 8002066:	42a0      	cmp	r0, r4
 8002068:	4192      	sbcs	r2, r2
 800206a:	1acb      	subs	r3, r1, r3
 800206c:	4252      	negs	r2, r2
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	4698      	mov	r8, r3
 8002072:	465d      	mov	r5, fp
 8002074:	e564      	b.n	8001b40 <__aeabi_dsub+0x108>
 8002076:	074b      	lsls	r3, r1, #29
 8002078:	08c2      	lsrs	r2, r0, #3
 800207a:	431a      	orrs	r2, r3
 800207c:	465d      	mov	r5, fp
 800207e:	08cb      	lsrs	r3, r1, #3
 8002080:	e698      	b.n	8001db4 <__aeabi_dsub+0x37c>
 8002082:	074b      	lsls	r3, r1, #29
 8002084:	08c2      	lsrs	r2, r0, #3
 8002086:	431a      	orrs	r2, r3
 8002088:	08cb      	lsrs	r3, r1, #3
 800208a:	e64f      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 800208c:	000a      	movs	r2, r1
 800208e:	4302      	orrs	r2, r0
 8002090:	d090      	beq.n	8001fb4 <__aeabi_dsub+0x57c>
 8002092:	464a      	mov	r2, r9
 8002094:	075c      	lsls	r4, r3, #29
 8002096:	08d2      	lsrs	r2, r2, #3
 8002098:	4314      	orrs	r4, r2
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	0312      	lsls	r2, r2, #12
 80020a0:	4213      	tst	r3, r2
 80020a2:	d008      	beq.n	80020b6 <__aeabi_dsub+0x67e>
 80020a4:	08ce      	lsrs	r6, r1, #3
 80020a6:	4216      	tst	r6, r2
 80020a8:	d105      	bne.n	80020b6 <__aeabi_dsub+0x67e>
 80020aa:	08c0      	lsrs	r0, r0, #3
 80020ac:	0749      	lsls	r1, r1, #29
 80020ae:	4308      	orrs	r0, r1
 80020b0:	0004      	movs	r4, r0
 80020b2:	465d      	mov	r5, fp
 80020b4:	0033      	movs	r3, r6
 80020b6:	0f61      	lsrs	r1, r4, #29
 80020b8:	00e2      	lsls	r2, r4, #3
 80020ba:	0749      	lsls	r1, r1, #29
 80020bc:	08d2      	lsrs	r2, r2, #3
 80020be:	430a      	orrs	r2, r1
 80020c0:	e678      	b.n	8001db4 <__aeabi_dsub+0x37c>
 80020c2:	074b      	lsls	r3, r1, #29
 80020c4:	08c2      	lsrs	r2, r0, #3
 80020c6:	431a      	orrs	r2, r3
 80020c8:	08cb      	lsrs	r3, r1, #3
 80020ca:	e632      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 80020cc:	4448      	add	r0, r9
 80020ce:	185b      	adds	r3, r3, r1
 80020d0:	4548      	cmp	r0, r9
 80020d2:	4192      	sbcs	r2, r2
 80020d4:	4698      	mov	r8, r3
 80020d6:	4252      	negs	r2, r2
 80020d8:	4490      	add	r8, r2
 80020da:	4643      	mov	r3, r8
 80020dc:	0004      	movs	r4, r0
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	d400      	bmi.n	80020e4 <__aeabi_dsub+0x6ac>
 80020e2:	e61a      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 80020e4:	4642      	mov	r2, r8
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <__aeabi_dsub+0x6e8>)
 80020e8:	2601      	movs	r6, #1
 80020ea:	401a      	ands	r2, r3
 80020ec:	4690      	mov	r8, r2
 80020ee:	e614      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 80020f0:	4666      	mov	r6, ip
 80020f2:	001f      	movs	r7, r3
 80020f4:	3e20      	subs	r6, #32
 80020f6:	40f7      	lsrs	r7, r6
 80020f8:	2c20      	cmp	r4, #32
 80020fa:	d005      	beq.n	8002108 <__aeabi_dsub+0x6d0>
 80020fc:	2640      	movs	r6, #64	; 0x40
 80020fe:	1b36      	subs	r6, r6, r4
 8002100:	40b3      	lsls	r3, r6
 8002102:	464c      	mov	r4, r9
 8002104:	431c      	orrs	r4, r3
 8002106:	46a2      	mov	sl, r4
 8002108:	4654      	mov	r4, sl
 800210a:	1e63      	subs	r3, r4, #1
 800210c:	419c      	sbcs	r4, r3
 800210e:	433c      	orrs	r4, r7
 8002110:	e5c8      	b.n	8001ca4 <__aeabi_dsub+0x26c>
 8002112:	0011      	movs	r1, r2
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	e532      	b.n	8001b80 <__aeabi_dsub+0x148>
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	000007ff 	.word	0x000007ff
 8002120:	ff7fffff 	.word	0xff7fffff
 8002124:	000007fe 	.word	0x000007fe
 8002128:	464a      	mov	r2, r9
 800212a:	1814      	adds	r4, r2, r0
 800212c:	4284      	cmp	r4, r0
 800212e:	4192      	sbcs	r2, r2
 8002130:	185b      	adds	r3, r3, r1
 8002132:	4698      	mov	r8, r3
 8002134:	4252      	negs	r2, r2
 8002136:	4490      	add	r8, r2
 8002138:	e5e9      	b.n	8001d0e <__aeabi_dsub+0x2d6>
 800213a:	4642      	mov	r2, r8
 800213c:	4322      	orrs	r2, r4
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x70a>
 8002140:	e6a6      	b.n	8001e90 <__aeabi_dsub+0x458>
 8002142:	e5ea      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8002144:	074b      	lsls	r3, r1, #29
 8002146:	08c2      	lsrs	r2, r0, #3
 8002148:	431a      	orrs	r2, r3
 800214a:	08cb      	lsrs	r3, r1, #3
 800214c:	e632      	b.n	8001db4 <__aeabi_dsub+0x37c>
 800214e:	2200      	movs	r2, #0
 8002150:	4901      	ldr	r1, [pc, #4]	; (8002158 <__aeabi_dsub+0x720>)
 8002152:	0013      	movs	r3, r2
 8002154:	e514      	b.n	8001b80 <__aeabi_dsub+0x148>
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	000007ff 	.word	0x000007ff

0800215c <__aeabi_dcmpun>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	0005      	movs	r5, r0
 8002160:	480c      	ldr	r0, [pc, #48]	; (8002194 <__aeabi_dcmpun+0x38>)
 8002162:	030c      	lsls	r4, r1, #12
 8002164:	0016      	movs	r6, r2
 8002166:	0049      	lsls	r1, r1, #1
 8002168:	031a      	lsls	r2, r3, #12
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	0b24      	lsrs	r4, r4, #12
 800216e:	0d49      	lsrs	r1, r1, #21
 8002170:	0b12      	lsrs	r2, r2, #12
 8002172:	0d5b      	lsrs	r3, r3, #21
 8002174:	4281      	cmp	r1, r0
 8002176:	d008      	beq.n	800218a <__aeabi_dcmpun+0x2e>
 8002178:	4906      	ldr	r1, [pc, #24]	; (8002194 <__aeabi_dcmpun+0x38>)
 800217a:	2000      	movs	r0, #0
 800217c:	428b      	cmp	r3, r1
 800217e:	d103      	bne.n	8002188 <__aeabi_dcmpun+0x2c>
 8002180:	4332      	orrs	r2, r6
 8002182:	0010      	movs	r0, r2
 8002184:	1e42      	subs	r2, r0, #1
 8002186:	4190      	sbcs	r0, r2
 8002188:	bd70      	pop	{r4, r5, r6, pc}
 800218a:	2001      	movs	r0, #1
 800218c:	432c      	orrs	r4, r5
 800218e:	d1fb      	bne.n	8002188 <__aeabi_dcmpun+0x2c>
 8002190:	e7f2      	b.n	8002178 <__aeabi_dcmpun+0x1c>
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	000007ff 	.word	0x000007ff

08002198 <__aeabi_d2iz>:
 8002198:	000a      	movs	r2, r1
 800219a:	b530      	push	{r4, r5, lr}
 800219c:	4c13      	ldr	r4, [pc, #76]	; (80021ec <__aeabi_d2iz+0x54>)
 800219e:	0053      	lsls	r3, r2, #1
 80021a0:	0309      	lsls	r1, r1, #12
 80021a2:	0005      	movs	r5, r0
 80021a4:	0b09      	lsrs	r1, r1, #12
 80021a6:	2000      	movs	r0, #0
 80021a8:	0d5b      	lsrs	r3, r3, #21
 80021aa:	0fd2      	lsrs	r2, r2, #31
 80021ac:	42a3      	cmp	r3, r4
 80021ae:	dd04      	ble.n	80021ba <__aeabi_d2iz+0x22>
 80021b0:	480f      	ldr	r0, [pc, #60]	; (80021f0 <__aeabi_d2iz+0x58>)
 80021b2:	4283      	cmp	r3, r0
 80021b4:	dd02      	ble.n	80021bc <__aeabi_d2iz+0x24>
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <__aeabi_d2iz+0x5c>)
 80021b8:	18d0      	adds	r0, r2, r3
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	2080      	movs	r0, #128	; 0x80
 80021be:	0340      	lsls	r0, r0, #13
 80021c0:	4301      	orrs	r1, r0
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <__aeabi_d2iz+0x60>)
 80021c4:	1ac0      	subs	r0, r0, r3
 80021c6:	281f      	cmp	r0, #31
 80021c8:	dd08      	ble.n	80021dc <__aeabi_d2iz+0x44>
 80021ca:	480c      	ldr	r0, [pc, #48]	; (80021fc <__aeabi_d2iz+0x64>)
 80021cc:	1ac3      	subs	r3, r0, r3
 80021ce:	40d9      	lsrs	r1, r3
 80021d0:	000b      	movs	r3, r1
 80021d2:	4258      	negs	r0, r3
 80021d4:	2a00      	cmp	r2, #0
 80021d6:	d1f0      	bne.n	80021ba <__aeabi_d2iz+0x22>
 80021d8:	0018      	movs	r0, r3
 80021da:	e7ee      	b.n	80021ba <__aeabi_d2iz+0x22>
 80021dc:	4c08      	ldr	r4, [pc, #32]	; (8002200 <__aeabi_d2iz+0x68>)
 80021de:	40c5      	lsrs	r5, r0
 80021e0:	46a4      	mov	ip, r4
 80021e2:	4463      	add	r3, ip
 80021e4:	4099      	lsls	r1, r3
 80021e6:	000b      	movs	r3, r1
 80021e8:	432b      	orrs	r3, r5
 80021ea:	e7f2      	b.n	80021d2 <__aeabi_d2iz+0x3a>
 80021ec:	000003fe 	.word	0x000003fe
 80021f0:	0000041d 	.word	0x0000041d
 80021f4:	7fffffff 	.word	0x7fffffff
 80021f8:	00000433 	.word	0x00000433
 80021fc:	00000413 	.word	0x00000413
 8002200:	fffffbed 	.word	0xfffffbed

08002204 <__aeabi_i2d>:
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	2800      	cmp	r0, #0
 8002208:	d016      	beq.n	8002238 <__aeabi_i2d+0x34>
 800220a:	17c3      	asrs	r3, r0, #31
 800220c:	18c5      	adds	r5, r0, r3
 800220e:	405d      	eors	r5, r3
 8002210:	0fc4      	lsrs	r4, r0, #31
 8002212:	0028      	movs	r0, r5
 8002214:	f000 f84c 	bl	80022b0 <__clzsi2>
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <__aeabi_i2d+0x5c>)
 800221a:	1a12      	subs	r2, r2, r0
 800221c:	280a      	cmp	r0, #10
 800221e:	dc16      	bgt.n	800224e <__aeabi_i2d+0x4a>
 8002220:	0003      	movs	r3, r0
 8002222:	002e      	movs	r6, r5
 8002224:	3315      	adds	r3, #21
 8002226:	409e      	lsls	r6, r3
 8002228:	230b      	movs	r3, #11
 800222a:	1a18      	subs	r0, r3, r0
 800222c:	40c5      	lsrs	r5, r0
 800222e:	0553      	lsls	r3, r2, #21
 8002230:	032d      	lsls	r5, r5, #12
 8002232:	0b2d      	lsrs	r5, r5, #12
 8002234:	0d5b      	lsrs	r3, r3, #21
 8002236:	e003      	b.n	8002240 <__aeabi_i2d+0x3c>
 8002238:	2400      	movs	r4, #0
 800223a:	2300      	movs	r3, #0
 800223c:	2500      	movs	r5, #0
 800223e:	2600      	movs	r6, #0
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	432b      	orrs	r3, r5
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4323      	orrs	r3, r4
 8002248:	0030      	movs	r0, r6
 800224a:	0019      	movs	r1, r3
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	380b      	subs	r0, #11
 8002250:	4085      	lsls	r5, r0
 8002252:	0553      	lsls	r3, r2, #21
 8002254:	032d      	lsls	r5, r5, #12
 8002256:	2600      	movs	r6, #0
 8002258:	0b2d      	lsrs	r5, r5, #12
 800225a:	0d5b      	lsrs	r3, r3, #21
 800225c:	e7f0      	b.n	8002240 <__aeabi_i2d+0x3c>
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	0000041e 	.word	0x0000041e

08002264 <__aeabi_ui2d>:
 8002264:	b510      	push	{r4, lr}
 8002266:	1e04      	subs	r4, r0, #0
 8002268:	d010      	beq.n	800228c <__aeabi_ui2d+0x28>
 800226a:	f000 f821 	bl	80022b0 <__clzsi2>
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <__aeabi_ui2d+0x48>)
 8002270:	1a1b      	subs	r3, r3, r0
 8002272:	280a      	cmp	r0, #10
 8002274:	dc11      	bgt.n	800229a <__aeabi_ui2d+0x36>
 8002276:	220b      	movs	r2, #11
 8002278:	0021      	movs	r1, r4
 800227a:	1a12      	subs	r2, r2, r0
 800227c:	40d1      	lsrs	r1, r2
 800227e:	3015      	adds	r0, #21
 8002280:	030a      	lsls	r2, r1, #12
 8002282:	055b      	lsls	r3, r3, #21
 8002284:	4084      	lsls	r4, r0
 8002286:	0b12      	lsrs	r2, r2, #12
 8002288:	0d5b      	lsrs	r3, r3, #21
 800228a:	e001      	b.n	8002290 <__aeabi_ui2d+0x2c>
 800228c:	2300      	movs	r3, #0
 800228e:	2200      	movs	r2, #0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	4313      	orrs	r3, r2
 8002294:	0020      	movs	r0, r4
 8002296:	0019      	movs	r1, r3
 8002298:	bd10      	pop	{r4, pc}
 800229a:	0022      	movs	r2, r4
 800229c:	380b      	subs	r0, #11
 800229e:	4082      	lsls	r2, r0
 80022a0:	055b      	lsls	r3, r3, #21
 80022a2:	0312      	lsls	r2, r2, #12
 80022a4:	2400      	movs	r4, #0
 80022a6:	0b12      	lsrs	r2, r2, #12
 80022a8:	0d5b      	lsrs	r3, r3, #21
 80022aa:	e7f1      	b.n	8002290 <__aeabi_ui2d+0x2c>
 80022ac:	0000041e 	.word	0x0000041e

080022b0 <__clzsi2>:
 80022b0:	211c      	movs	r1, #28
 80022b2:	2301      	movs	r3, #1
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	4298      	cmp	r0, r3
 80022b8:	d301      	bcc.n	80022be <__clzsi2+0xe>
 80022ba:	0c00      	lsrs	r0, r0, #16
 80022bc:	3910      	subs	r1, #16
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	4298      	cmp	r0, r3
 80022c2:	d301      	bcc.n	80022c8 <__clzsi2+0x18>
 80022c4:	0a00      	lsrs	r0, r0, #8
 80022c6:	3908      	subs	r1, #8
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	4298      	cmp	r0, r3
 80022cc:	d301      	bcc.n	80022d2 <__clzsi2+0x22>
 80022ce:	0900      	lsrs	r0, r0, #4
 80022d0:	3904      	subs	r1, #4
 80022d2:	a202      	add	r2, pc, #8	; (adr r2, 80022dc <__clzsi2+0x2c>)
 80022d4:	5c10      	ldrb	r0, [r2, r0]
 80022d6:	1840      	adds	r0, r0, r1
 80022d8:	4770      	bx	lr
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	02020304 	.word	0x02020304
 80022e0:	01010101 	.word	0x01010101
	...

080022ec <__clzdi2>:
 80022ec:	b510      	push	{r4, lr}
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d103      	bne.n	80022fa <__clzdi2+0xe>
 80022f2:	f7ff ffdd 	bl	80022b0 <__clzsi2>
 80022f6:	3020      	adds	r0, #32
 80022f8:	e002      	b.n	8002300 <__clzdi2+0x14>
 80022fa:	1c08      	adds	r0, r1, #0
 80022fc:	f7ff ffd8 	bl	80022b0 <__clzsi2>
 8002300:	bd10      	pop	{r4, pc}
 8002302:	46c0      	nop			; (mov r8, r8)

08002304 <u2f>:
#include "stdio.h"

uint8_t LSBMSB_REGS[] = {DATAX0, DATAY0, DATAZ0, DATAX1, DATAY1, DATAZ1};

extern double u2f(uint8_t LSB, uint8_t MSB, double m_rng, double uncertainty)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	603a      	str	r2, [r7, #0]
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	240f      	movs	r4, #15
 8002310:	193b      	adds	r3, r7, r4
 8002312:	1c02      	adds	r2, r0, #0
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	200e      	movs	r0, #14
 8002318:	183b      	adds	r3, r7, r0
 800231a:	1c0a      	adds	r2, r1, #0
 800231c:	701a      	strb	r2, [r3, #0]
	return ((double)(MSB << 8 | LSB) * m_rng - uncertainty);
 800231e:	183b      	adds	r3, r7, r0
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	193b      	adds	r3, r7, r4
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	0018      	movs	r0, r3
 800232c:	f7ff ff6a 	bl	8002204 <__aeabi_i2d>
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f7ff f914 	bl	8001560 <__aeabi_dmul>
 8002338:	0002      	movs	r2, r0
 800233a:	000b      	movs	r3, r1
 800233c:	0010      	movs	r0, r2
 800233e:	0019      	movs	r1, r3
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f7ff fb78 	bl	8001a38 <__aeabi_dsub>
 8002348:	0002      	movs	r2, r0
 800234a:	000b      	movs	r3, r1
}
 800234c:	0010      	movs	r0, r2
 800234e:	0019      	movs	r1, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b005      	add	sp, #20
 8002354:	bd90      	pop	{r4, r7, pc}

08002356 <payload.9415>:
	// enable device i2c bus connected on the chip select gpio pin
	HAL_GPIO_WritePin(acc_ref->gpio_port, acc_ref->CS_PIN, GPIO_PIN_SET);
	uint8_t buffer[2];
	// run setup code
	uint8_t* payload(uint8_t reg, uint8_t data)
	{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	0002      	movs	r2, r0
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	1dbb      	adds	r3, r7, #6
 8002364:	1c0a      	adds	r2, r1, #0
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	4663      	mov	r3, ip
 800236a:	4662      	mov	r2, ip
 800236c:	603a      	str	r2, [r7, #0]
		// lil macro
		buffer[0] = reg;
 800236e:	1dfa      	adds	r2, r7, #7
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	705a      	strb	r2, [r3, #1]
		buffer[1] = data;
 8002374:	1dba      	adds	r2, r7, #6
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	709a      	strb	r2, [r3, #2]
		return buffer;
 800237a:	3301      	adds	r3, #1
	}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <vADXL345_DeviceSetup>:
{
 8002384:	b5b0      	push	{r4, r5, r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
extern void vADXL345_DeviceSetup(AccelerometerData_t *acc_ref, I2C_HandleTypeDef *ref)
 800238e:	2328      	movs	r3, #40	; 0x28
 8002390:	18fa      	adds	r2, r7, r3
 8002392:	240c      	movs	r4, #12
 8002394:	193b      	adds	r3, r7, r4
 8002396:	605a      	str	r2, [r3, #4]
	printf("Running setup on adxl device CS: #%lu\n\r\n", acc_ref->CS_PIN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <vADXL345_DeviceSetup+0xb8>)
 800239e:	0011      	movs	r1, r2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f006 ffcd 	bl	8009340 <iprintf>
	HAL_GPIO_WritePin(acc_ref->gpio_port, acc_ref->CS_PIN, GPIO_PIN_SET);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6858      	ldr	r0, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2201      	movs	r2, #1
 80023b2:	0019      	movs	r1, r3
 80023b4:	f001 fd72 	bl	8003e9c <HAL_GPIO_WritePin>
				// lil macro
				buffer2[0] = reg;
				return buffer2;
		}
	// initialize device into FIFO read status
	HAL_I2C_Master_Transmit(ref, (uint16_t)ADXL345_ADDR, payload(FIFO_CTL, ADXL_FIFO_CONFIGURATION), 2, 100);
 80023b8:	193b      	adds	r3, r7, r4
 80023ba:	469c      	mov	ip, r3
 80023bc:	2183      	movs	r1, #131	; 0x83
 80023be:	2038      	movs	r0, #56	; 0x38
 80023c0:	f7ff ffc9 	bl	8002356 <payload.9415>
 80023c4:	0002      	movs	r2, r0
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	2364      	movs	r3, #100	; 0x64
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2302      	movs	r3, #2
 80023ce:	2153      	movs	r1, #83	; 0x53
 80023d0:	f001 fe18 	bl	8004004 <HAL_I2C_Master_Transmit>
	// initialize stream mode for FIFO
	HAL_I2C_Master_Transmit(ref, (uint16_t)ADXL345_ADDR, payload(POWER_CTL, ADXL_MEASURE_MODE), 2, 100);
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	469c      	mov	ip, r3
 80023d8:	2108      	movs	r1, #8
 80023da:	202d      	movs	r0, #45	; 0x2d
 80023dc:	f7ff ffbb 	bl	8002356 <payload.9415>
 80023e0:	0002      	movs	r2, r0
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	2364      	movs	r3, #100	; 0x64
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2302      	movs	r3, #2
 80023ea:	2153      	movs	r1, #83	; 0x53
 80023ec:	f001 fe0a 	bl	8004004 <HAL_I2C_Master_Transmit>
	// disable device i2c bus connected on the chip select gpio pin
	uint8_t dev_id = HAL_I2C_Master_Receive(ref, (uint16_t)ADXL345_ADDR, payloadreg(DEVID),1,100);
 80023f0:	193b      	adds	r3, r7, r4
 80023f2:	469c      	mov	ip, r3
 80023f4:	2000      	movs	r0, #0
 80023f6:	f000 f825 	bl	8002444 <payloadreg.9419>
 80023fa:	0002      	movs	r2, r0
 80023fc:	2517      	movs	r5, #23
 80023fe:	197c      	adds	r4, r7, r5
 8002400:	6838      	ldr	r0, [r7, #0]
 8002402:	2364      	movs	r3, #100	; 0x64
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	2153      	movs	r1, #83	; 0x53
 800240a:	f001 ff03 	bl	8004214 <HAL_I2C_Master_Receive>
 800240e:	0003      	movs	r3, r0
 8002410:	7023      	strb	r3, [r4, #0]
	printf("Successfully setup device ID: %d\n\r\n", dev_id);
 8002412:	197b      	adds	r3, r7, r5
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <vADXL345_DeviceSetup+0xbc>)
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f006 ff90 	bl	8009340 <iprintf>
	HAL_GPIO_WritePin(acc_ref->gpio_port, acc_ref->CS_PIN, GPIO_PIN_RESET);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6858      	ldr	r0, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	2200      	movs	r2, #0
 800242c:	0019      	movs	r1, r3
 800242e:	f001 fd35 	bl	8003e9c <HAL_GPIO_WritePin>
};
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b006      	add	sp, #24
 8002438:	bdb0      	pop	{r4, r5, r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	0800b738 	.word	0x0800b738
 8002440:	0800b764 	.word	0x0800b764

08002444 <payloadreg.9419>:
		{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	0002      	movs	r2, r0
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	4663      	mov	r3, ip
 8002452:	4662      	mov	r2, ip
 8002454:	603a      	str	r2, [r7, #0]
				buffer2[0] = reg;
 8002456:	1dfa      	adds	r2, r7, #7
 8002458:	7812      	ldrb	r2, [r2, #0]
 800245a:	701a      	strb	r2, [r3, #0]
		}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}

08002464 <payload.9428>:
	printf("Grabbing Data from Accelerometer on CS_PIN: #%lu\n\r\n", ref->CS_PIN);
	HAL_GPIO_WritePin(ref->gpio_port, ref->CS_PIN, GPIO_PIN_SET);
	uint8_t buffer[1];
		// run setup code
	uint8_t* payload(uint8_t reg)
	{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	4663      	mov	r3, ip
 8002472:	4662      	mov	r2, ip
 8002474:	603a      	str	r2, [r7, #0]
			// lil macro
			buffer[0] = reg;
 8002476:	1dfa      	adds	r2, r7, #7
 8002478:	7812      	ldrb	r2, [r2, #0]
 800247a:	701a      	strb	r2, [r3, #0]
			return buffer;
	}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}

08002484 <vADXL345_DeviceRead>:
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af02      	add	r7, sp, #8
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
extern void vADXL345_DeviceRead(AccelerometerData_t *ref, I2C_HandleTypeDef* devref)
 800248e:	2330      	movs	r3, #48	; 0x30
 8002490:	18fa      	adds	r2, r7, r3
 8002492:	2308      	movs	r3, #8
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	605a      	str	r2, [r3, #4]
	printf("Grabbing Data from Accelerometer on CS_PIN: #%lu\n\r\n", ref->CS_PIN);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <vADXL345_DeviceRead+0xe4>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f006 ff4d 	bl	8009340 <iprintf>
	HAL_GPIO_WritePin(ref->gpio_port, ref->CS_PIN, GPIO_PIN_SET);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6858      	ldr	r0, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2201      	movs	r2, #1
 80024b2:	0019      	movs	r1, r3
 80024b4:	f001 fcf2 	bl	8003e9c <HAL_GPIO_WritePin>
	uint8_t LSBMSB_OUT[6];
	// get 2 byte msb, lsb data
	for (int i = 0; i < 5; i++) LSBMSB_OUT[i] = HAL_I2C_Master_Receive(devref, (uint16_t)ADXL345_ADDR,payload(LSBMSB_REGS[i]), 1, 100);
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	e01c      	b.n	80024f8 <vADXL345_DeviceRead+0x74>
 80024be:	4a2b      	ldr	r2, [pc, #172]	; (800256c <vADXL345_DeviceRead+0xe8>)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	2308      	movs	r3, #8
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	469c      	mov	ip, r3
 80024cc:	0010      	movs	r0, r2
 80024ce:	f7ff ffc9 	bl	8002464 <payload.9428>
 80024d2:	0002      	movs	r2, r0
 80024d4:	6838      	ldr	r0, [r7, #0]
 80024d6:	2364      	movs	r3, #100	; 0x64
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	2153      	movs	r1, #83	; 0x53
 80024de:	f001 fe99 	bl	8004214 <HAL_I2C_Master_Receive>
 80024e2:	0003      	movs	r3, r0
 80024e4:	0019      	movs	r1, r3
 80024e6:	2310      	movs	r3, #16
 80024e8:	18fa      	adds	r2, r7, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	18d3      	adds	r3, r2, r3
 80024ee:	1c0a      	adds	r2, r1, #0
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	dddf      	ble.n	80024be <vADXL345_DeviceRead+0x3a>
	// combine and scale msb, lsb data
	for (int i = 0; i < 2; i++) ref->data[i] = u2f(LSBMSB_OUT[i], LSBMSB_OUT[i+3], MRNG, UNC);
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	e020      	b.n	8002546 <vADXL345_DeviceRead+0xc2>
 8002504:	2110      	movs	r1, #16
 8002506:	187a      	adds	r2, r7, r1
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	18d3      	adds	r3, r2, r3
 800250c:	781c      	ldrb	r4, [r3, #0]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	3303      	adds	r3, #3
 8002512:	187a      	adds	r2, r7, r1
 8002514:	5cd5      	ldrb	r5, [r2, r3]
 8002516:	2000      	movs	r0, #0
 8002518:	4915      	ldr	r1, [pc, #84]	; (8002570 <vADXL345_DeviceRead+0xec>)
 800251a:	2200      	movs	r2, #0
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <vADXL345_DeviceRead+0xf0>)
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	0002      	movs	r2, r0
 8002524:	000b      	movs	r3, r1
 8002526:	0029      	movs	r1, r5
 8002528:	0020      	movs	r0, r4
 800252a:	f7ff feeb 	bl	8002304 <u2f>
 800252e:	0002      	movs	r2, r0
 8002530:	000b      	movs	r3, r1
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	3101      	adds	r1, #1
 8002538:	00c9      	lsls	r1, r1, #3
 800253a:	1841      	adds	r1, r0, r1
 800253c:	600a      	str	r2, [r1, #0]
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	3301      	adds	r3, #1
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	dddb      	ble.n	8002504 <vADXL345_DeviceRead+0x80>
	// deselect device
	HAL_GPIO_WritePin(ref->gpio_port, ref->CS_PIN, GPIO_PIN_RESET);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6858      	ldr	r0, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	2200      	movs	r2, #0
 8002558:	0019      	movs	r1, r3
 800255a:	f001 fc9f 	bl	8003e9c <HAL_GPIO_WritePin>
};
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b008      	add	sp, #32
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	0800b788 	.word	0x0800b788
 800256c:	20000000 	.word	0x20000000
 8002570:	3f200000 	.word	0x3f200000
 8002574:	3fe00000 	.word	0x3fe00000

08002578 <__io_putchar>:
AccelerometerData_t accelerometer3;




void __io_putchar(uint8_t ch) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	0002      	movs	r2, r0
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	701a      	strb	r2, [r3, #0]
HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8002584:	1df9      	adds	r1, r7, #7
 8002586:	4804      	ldr	r0, [pc, #16]	; (8002598 <__io_putchar+0x20>)
 8002588:	2301      	movs	r3, #1
 800258a:	2201      	movs	r2, #1
 800258c:	f003 f8fe 	bl	800578c <HAL_UART_Transmit>
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20001c3c 	.word	0x20001c3c

0800259c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a0:	f000 fd2a 	bl	8002ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a4:	f000 f83a 	bl	800261c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a8:	f000 f9b8 	bl	800291c <MX_GPIO_Init>
  MX_ADC1_Init();
 80025ac:	f000 f87e 	bl	80026ac <MX_ADC1_Init>
  MX_I2C1_Init();
 80025b0:	f000 f8e6 	bl	8002780 <MX_I2C1_Init>
  MX_I2C2_Init();
 80025b4:	f000 f924 	bl	8002800 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80025b8:	f000 f962 	bl	8002880 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <main+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2100      	movs	r1, #0
 80025c4:	0018      	movs	r0, r3
 80025c6:	f006 fed5 	bl	8009374 <setbuf>

  /* USER CODE END 2 */
  accelerometer1.CS_PIN = GPIO_PIN_2;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <main+0x68>)
 80025cc:	2204      	movs	r2, #4
 80025ce:	601a      	str	r2, [r3, #0]
  accelerometer1.gpio_port = GPIOB;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <main+0x68>)
 80025d2:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <main+0x6c>)
 80025d4:	605a      	str	r2, [r3, #4]


  vADXL345_DeviceSetup(&accelerometer1, &hi2c1);
 80025d6:	4a0d      	ldr	r2, [pc, #52]	; (800260c <main+0x70>)
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <main+0x68>)
 80025da:	0011      	movs	r1, r2
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff fed1 	bl	8002384 <vADXL345_DeviceSetup>
  //vADXL345_DeviceSetup(accelerometer2.CS_PIN, &hi2c1);
  //vADXL345_DeviceSetup(accelerometer3.CS_PIN, &hi2c1);
  /* Init scheduler */
  osKernelInitialize();
 80025e2:	f003 ffb7 	bl	8006554 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <main+0x74>)
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <main+0x78>)
 80025ea:	2100      	movs	r1, #0
 80025ec:	0018      	movs	r0, r3
 80025ee:	f003 fff9 	bl	80065e4 <osThreadNew>
 80025f2:	0002      	movs	r2, r0
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <main+0x7c>)
 80025f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80025f8:	f003 ffce 	bl	8006598 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <main+0x60>
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20000018 	.word	0x20000018
 8002604:	20001bb8 	.word	0x20001bb8
 8002608:	50000400 	.word	0x50000400
 800260c:	20001b1c 	.word	0x20001b1c
 8002610:	0800b89c 	.word	0x0800b89c
 8002614:	08002a51 	.word	0x08002a51
 8002618:	20001b18 	.word	0x20001b18

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b093      	sub	sp, #76	; 0x4c
 8002620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	2410      	movs	r4, #16
 8002624:	193b      	adds	r3, r7, r4
 8002626:	0018      	movs	r0, r3
 8002628:	2338      	movs	r3, #56	; 0x38
 800262a:	001a      	movs	r2, r3
 800262c:	2100      	movs	r1, #0
 800262e:	f006 fa04 	bl	8008a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002632:	003b      	movs	r3, r7
 8002634:	0018      	movs	r0, r3
 8002636:	2310      	movs	r3, #16
 8002638:	001a      	movs	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	f006 f9fd 	bl	8008a3a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	0018      	movs	r0, r3
 8002646:	f002 f97d 	bl	8004944 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800264a:	193b      	adds	r3, r7, r4
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	193b      	adds	r3, r7, r4
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	0052      	lsls	r2, r2, #1
 8002656:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002658:	193b      	adds	r3, r7, r4
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800265e:	193b      	adds	r3, r7, r4
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002664:	193b      	adds	r3, r7, r4
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266a:	193b      	adds	r3, r7, r4
 800266c:	0018      	movs	r0, r3
 800266e:	f002 f9b5 	bl	80049dc <HAL_RCC_OscConfig>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d001      	beq.n	800267a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002676:	f000 fa2d 	bl	8002ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800267a:	003b      	movs	r3, r7
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002680:	003b      	movs	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002686:	003b      	movs	r3, r7
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800268c:	003b      	movs	r3, r7
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002692:	003b      	movs	r3, r7
 8002694:	2100      	movs	r1, #0
 8002696:	0018      	movs	r0, r3
 8002698:	f002 fcc0 	bl	800501c <HAL_RCC_ClockConfig>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80026a0:	f000 fa18 	bl	8002ad4 <Error_Handler>
  }
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b013      	add	sp, #76	; 0x4c
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	0018      	movs	r0, r3
 80026b6:	230c      	movs	r3, #12
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f006 f9bd 	bl	8008a3a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026c2:	4a2e      	ldr	r2, [pc, #184]	; (800277c <MX_ADC1_Init+0xd0>)
 80026c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	05d2      	lsls	r2, r2, #23
 80026cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026ce:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026e2:	2204      	movs	r2, #4
 80026e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <MX_ADC1_Init+0xcc>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <MX_ADC1_Init+0xcc>)
 8002700:	2220      	movs	r2, #32
 8002702:	2100      	movs	r1, #0
 8002704:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_ADC1_Init+0xcc>)
 8002708:	2200      	movs	r2, #0
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_ADC1_Init+0xcc>)
 800270e:	2200      	movs	r2, #0
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <MX_ADC1_Init+0xcc>)
 8002714:	222c      	movs	r2, #44	; 0x2c
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_ADC1_Init+0xcc>)
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_ADC1_Init+0xcc>)
 8002722:	2200      	movs	r2, #0
 8002724:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_ADC1_Init+0xcc>)
 8002728:	2200      	movs	r2, #0
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_ADC1_Init+0xcc>)
 800272e:	223c      	movs	r2, #60	; 0x3c
 8002730:	2100      	movs	r1, #0
 8002732:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_ADC1_Init+0xcc>)
 8002736:	2200      	movs	r2, #0
 8002738:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_ADC1_Init+0xcc>)
 800273c:	0018      	movs	r0, r3
 800273e:	f000 fddf 	bl	8003300 <HAL_ADC_Init>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d001      	beq.n	800274a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002746:	f000 f9c5 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275c:	1d3a      	adds	r2, r7, #4
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_ADC1_Init+0xcc>)
 8002760:	0011      	movs	r1, r2
 8002762:	0018      	movs	r0, r3
 8002764:	f000 ffaa 	bl	80036bc <HAL_ADC_ConfigChannel>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d001      	beq.n	8002770 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800276c:	f000 f9b2 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20001bd8 	.word	0x20001bd8
 800277c:	40012400 	.word	0x40012400

08002780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <MX_I2C1_Init+0x74>)
 8002786:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <MX_I2C1_Init+0x78>)
 8002788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_I2C1_Init+0x74>)
 800278c:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <MX_I2C1_Init+0x7c>)
 800278e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <MX_I2C1_Init+0x74>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <MX_I2C1_Init+0x74>)
 8002798:	2201      	movs	r2, #1
 800279a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <MX_I2C1_Init+0x74>)
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <MX_I2C1_Init+0x74>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <MX_I2C1_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <MX_I2C1_Init+0x74>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <MX_I2C1_Init+0x74>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <MX_I2C1_Init+0x74>)
 80027bc:	0018      	movs	r0, r3
 80027be:	f001 fb8b 	bl	8003ed8 <HAL_I2C_Init>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d001      	beq.n	80027ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027c6:	f000 f985 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <MX_I2C1_Init+0x74>)
 80027cc:	2100      	movs	r1, #0
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 f820 	bl	8004814 <HAL_I2CEx_ConfigAnalogFilter>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d001      	beq.n	80027dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027d8:	f000 f97c 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <MX_I2C1_Init+0x74>)
 80027de:	2100      	movs	r1, #0
 80027e0:	0018      	movs	r0, r3
 80027e2:	f002 f863 	bl	80048ac <HAL_I2CEx_ConfigDigitalFilter>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d001      	beq.n	80027ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ea:	f000 f973 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20001b1c 	.word	0x20001b1c
 80027f8:	40005400 	.word	0x40005400
 80027fc:	00303d5b 	.word	0x00303d5b

08002800 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <MX_I2C2_Init+0x74>)
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <MX_I2C2_Init+0x78>)
 8002808:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <MX_I2C2_Init+0x74>)
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <MX_I2C2_Init+0x7c>)
 800280e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <MX_I2C2_Init+0x74>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <MX_I2C2_Init+0x74>)
 8002818:	2201      	movs	r2, #1
 800281a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <MX_I2C2_Init+0x74>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <MX_I2C2_Init+0x74>)
 8002824:	2200      	movs	r2, #0
 8002826:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002828:	4b12      	ldr	r3, [pc, #72]	; (8002874 <MX_I2C2_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <MX_I2C2_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <MX_I2C2_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <MX_I2C2_Init+0x74>)
 800283c:	0018      	movs	r0, r3
 800283e:	f001 fb4b 	bl	8003ed8 <HAL_I2C_Init>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	d001      	beq.n	800284a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002846:	f000 f945 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <MX_I2C2_Init+0x74>)
 800284c:	2100      	movs	r1, #0
 800284e:	0018      	movs	r0, r3
 8002850:	f001 ffe0 	bl	8004814 <HAL_I2CEx_ConfigAnalogFilter>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002858:	f000 f93c 	bl	8002ad4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <MX_I2C2_Init+0x74>)
 800285e:	2100      	movs	r1, #0
 8002860:	0018      	movs	r0, r3
 8002862:	f002 f823 	bl	80048ac <HAL_I2CEx_ConfigDigitalFilter>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d001      	beq.n	800286e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800286a:	f000 f933 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20001b68 	.word	0x20001b68
 8002878:	40005800 	.word	0x40005800
 800287c:	00303d5b 	.word	0x00303d5b

08002880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002884:	4b23      	ldr	r3, [pc, #140]	; (8002914 <MX_USART1_UART_Init+0x94>)
 8002886:	4a24      	ldr	r2, [pc, #144]	; (8002918 <MX_USART1_UART_Init+0x98>)
 8002888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800288a:	4b22      	ldr	r3, [pc, #136]	; (8002914 <MX_USART1_UART_Init+0x94>)
 800288c:	22e1      	movs	r2, #225	; 0xe1
 800288e:	0252      	lsls	r2, r2, #9
 8002890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <MX_USART1_UART_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <MX_USART1_UART_Init+0x94>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b18      	ldr	r3, [pc, #96]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f002 ff08 	bl	80056e0 <HAL_UART_Init>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d001      	beq.n	80028d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028d4:	f000 f8fe 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028da:	2100      	movs	r1, #0
 80028dc:	0018      	movs	r0, r3
 80028de:	f003 fcdf 	bl	80062a0 <HAL_UARTEx_SetTxFifoThreshold>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d001      	beq.n	80028ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028e6:	f000 f8f5 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028ec:	2100      	movs	r1, #0
 80028ee:	0018      	movs	r0, r3
 80028f0:	f003 fd16 	bl	8006320 <HAL_UARTEx_SetRxFifoThreshold>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028f8:	f000 f8ec 	bl	8002ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <MX_USART1_UART_Init+0x94>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f003 fc94 	bl	800622c <HAL_UARTEx_DisableFifoMode>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d001      	beq.n	800290c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002908:	f000 f8e4 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	20001c3c 	.word	0x20001c3c
 8002918:	40013800 	.word	0x40013800

0800291c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	240c      	movs	r4, #12
 8002924:	193b      	adds	r3, r7, r4
 8002926:	0018      	movs	r0, r3
 8002928:	2314      	movs	r3, #20
 800292a:	001a      	movs	r2, r3
 800292c:	2100      	movs	r1, #0
 800292e:	f006 f884 	bl	8008a3a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002938:	2102      	movs	r1, #2
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	2202      	movs	r2, #2
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <MX_GPIO_Init+0x128>)
 800294c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	635a      	str	r2, [r3, #52]	; 0x34
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	2201      	movs	r2, #1
 800295c:	4013      	ands	r3, r2
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002968:	2104      	movs	r1, #4
 800296a:	430a      	orrs	r2, r1
 800296c:	635a      	str	r2, [r3, #52]	; 0x34
 800296e:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <MX_GPIO_Init+0x128>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2204      	movs	r2, #4
 8002974:	4013      	ands	r3, r2
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800297a:	23a0      	movs	r3, #160	; 0xa0
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	2200      	movs	r2, #0
 8002980:	2102      	movs	r1, #2
 8002982:	0018      	movs	r0, r3
 8002984:	f001 fa8a 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002988:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <MX_GPIO_Init+0x12c>)
 800298a:	2200      	movs	r2, #0
 800298c:	2130      	movs	r1, #48	; 0x30
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fa84 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002996:	2200      	movs	r2, #0
 8002998:	2104      	movs	r1, #4
 800299a:	0018      	movs	r0, r3
 800299c:	f001 fa7e 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2202      	movs	r2, #2
 80029a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2201      	movs	r2, #1
 80029aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	193a      	adds	r2, r7, r4
 80029ba:	23a0      	movs	r3, #160	; 0xa0
 80029bc:	05db      	lsls	r3, r3, #23
 80029be:	0011      	movs	r1, r2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f001 f907 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	2210      	movs	r2, #16
 80029ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	2202      	movs	r2, #2
 80029d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	2205      	movs	r2, #5
 80029e2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	193a      	adds	r2, r7, r4
 80029e6:	23a0      	movs	r3, #160	; 0xa0
 80029e8:	05db      	lsls	r3, r3, #23
 80029ea:	0011      	movs	r1, r2
 80029ec:	0018      	movs	r0, r3
 80029ee:	f001 f8f1 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	2230      	movs	r2, #48	; 0x30
 80029f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	193b      	adds	r3, r7, r4
 80029fa:	2201      	movs	r2, #1
 80029fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <MX_GPIO_Init+0x12c>)
 8002a0e:	0019      	movs	r1, r3
 8002a10:	0010      	movs	r0, r2
 8002a12:	f001 f8df 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a16:	0021      	movs	r1, r4
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	2201      	movs	r2, #1
 8002a22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	187b      	adds	r3, r7, r1
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	187b      	adds	r3, r7, r1
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <MX_GPIO_Init+0x130>)
 8002a34:	0019      	movs	r1, r3
 8002a36:	0010      	movs	r0, r2
 8002a38:	f001 f8cc 	bl	8003bd4 <HAL_GPIO_Init>

}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b009      	add	sp, #36	; 0x24
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	50000800 	.word	0x50000800
 8002a4c:	50000400 	.word	0x50000400

08002a50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(int i = 0; i < 9 ; i ++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e026      	b.n	8002aac <StartDefaultTask+0x5c>
  {
    osDelay(5
 8002a5e:	2005      	movs	r0, #5
 8002a60:	f003 fe56 	bl	8006710 <osDelay>
    		);
    vADXL345_DeviceRead(&accelerometer1, &hi2c1);
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <StartDefaultTask+0x6c>)
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <StartDefaultTask+0x70>)
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7ff fd0a 	bl	8002484 <vADXL345_DeviceRead>
    printf("=============== [%d]\n\r\n", i);
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <StartDefaultTask+0x74>)
 8002a74:	0011      	movs	r1, r2
 8002a76:	0018      	movs	r0, r3
 8002a78:	f006 fc62 	bl	8009340 <iprintf>
    printf("X: %f\n\r\n", accelerometer1.data[0]);
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <StartDefaultTask+0x70>)
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4911      	ldr	r1, [pc, #68]	; (8002ac8 <StartDefaultTask+0x78>)
 8002a84:	0008      	movs	r0, r1
 8002a86:	f006 fc5b 	bl	8009340 <iprintf>
    printf("Y: %f\n\r\n", accelerometer1.data[1]);
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <StartDefaultTask+0x70>)
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	490e      	ldr	r1, [pc, #56]	; (8002acc <StartDefaultTask+0x7c>)
 8002a92:	0008      	movs	r0, r1
 8002a94:	f006 fc54 	bl	8009340 <iprintf>
    printf("Z: %f\n\r\n", accelerometer1.data[2]);
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <StartDefaultTask+0x70>)
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <StartDefaultTask+0x80>)
 8002aa0:	0008      	movs	r0, r1
 8002aa2:	f006 fc4d 	bl	8009340 <iprintf>
  for(int i = 0; i < 9 ; i ++)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	ddd5      	ble.n	8002a5e <StartDefaultTask+0xe>
  }
  /* USER CODE END 5 */
}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20001b1c 	.word	0x20001b1c
 8002ac0:	20001bb8 	.word	0x20001bb8
 8002ac4:	0800b7c8 	.word	0x0800b7c8
 8002ac8:	0800b7e0 	.word	0x0800b7e0
 8002acc:	0800b7ec 	.word	0x0800b7ec
 8002ad0:	0800b7f8 	.word	0x0800b7f8

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002adc:	e7fe      	b.n	8002adc <Error_Handler+0x8>
	...

08002ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_MspInit+0x5c>)
 8002ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_MspInit+0x5c>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_MspInit+0x5c>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2201      	movs	r2, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_MspInit+0x5c>)
 8002b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_MspInit+0x5c>)
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0549      	lsls	r1, r1, #21
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_MspInit+0x5c>)
 8002b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	055b      	lsls	r3, r3, #21
 8002b14:	4013      	ands	r3, r2
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2103      	movs	r1, #3
 8002b22:	0018      	movs	r0, r3
 8002b24:	f001 f834 	bl	8003b90 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002b28:	23c0      	movs	r3, #192	; 0xc0
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fae9 	bl	8003104 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	40021000 	.word	0x40021000

08002b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b097      	sub	sp, #92	; 0x5c
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	2344      	movs	r3, #68	; 0x44
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	2314      	movs	r3, #20
 8002b50:	001a      	movs	r2, r3
 8002b52:	2100      	movs	r1, #0
 8002b54:	f005 ff71 	bl	8008a3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b58:	2410      	movs	r4, #16
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	2334      	movs	r3, #52	; 0x34
 8002b60:	001a      	movs	r2, r3
 8002b62:	2100      	movs	r1, #0
 8002b64:	f005 ff69 	bl	8008a3a <memset>
  if(hadc->Instance==ADC1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a20      	ldr	r2, [pc, #128]	; (8002bf0 <HAL_ADC_MspInit+0xb0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d139      	bne.n	8002be6 <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b72:	193b      	adds	r3, r7, r4
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	01d2      	lsls	r2, r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	0018      	movs	r0, r3
 8002b84:	f002 fbf4 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b8c:	f7ff ffa2 	bl	8002ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <HAL_ADC_MspInit+0xb4>)
 8002b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_ADC_MspInit+0xb4>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0349      	lsls	r1, r1, #13
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_ADC_MspInit+0xb4>)
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	035b      	lsls	r3, r3, #13
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_ADC_MspInit+0xb4>)
 8002bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_ADC_MspInit+0xb4>)
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <HAL_ADC_MspInit+0xb4>)
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bc4:	2144      	movs	r1, #68	; 0x44
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	187a      	adds	r2, r7, r1
 8002bda:	23a0      	movs	r3, #160	; 0xa0
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	0011      	movs	r1, r2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 fff7 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b017      	add	sp, #92	; 0x5c
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	40012400 	.word	0x40012400
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b099      	sub	sp, #100	; 0x64
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	234c      	movs	r3, #76	; 0x4c
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	0018      	movs	r0, r3
 8002c06:	2314      	movs	r3, #20
 8002c08:	001a      	movs	r2, r3
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	f005 ff15 	bl	8008a3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c10:	2418      	movs	r4, #24
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	0018      	movs	r0, r3
 8002c16:	2334      	movs	r3, #52	; 0x34
 8002c18:	001a      	movs	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f005 ff0d 	bl	8008a3a <memset>
  if(hi2c->Instance==I2C1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3e      	ldr	r2, [pc, #248]	; (8002d20 <HAL_I2C_MspInit+0x128>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d13e      	bne.n	8002ca8 <HAL_I2C_MspInit+0xb0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c30:	193b      	adds	r3, r7, r4
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f002 fb99 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c42:	f7ff ff47 	bl	8002ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002c5e:	214c      	movs	r1, #76	; 0x4c
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	22c0      	movs	r2, #192	; 0xc0
 8002c64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2212      	movs	r2, #18
 8002c6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	2200      	movs	r2, #0
 8002c76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	2206      	movs	r2, #6
 8002c7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <HAL_I2C_MspInit+0x130>)
 8002c82:	0019      	movs	r1, r3
 8002c84:	0010      	movs	r0, r2
 8002c86:	f000 ffa5 	bl	8003bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8e:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	0389      	lsls	r1, r1, #14
 8002c94:	430a      	orrs	r2, r1
 8002c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	039b      	lsls	r3, r3, #14
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ca6:	e036      	b.n	8002d16 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <HAL_I2C_MspInit+0x134>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d131      	bne.n	8002d16 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002cca:	214c      	movs	r1, #76	; 0x4c
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	22c0      	movs	r2, #192	; 0xc0
 8002cd0:	0152      	lsls	r2, r2, #5
 8002cd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2212      	movs	r2, #18
 8002cd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2206      	movs	r2, #6
 8002cea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	187a      	adds	r2, r7, r1
 8002cee:	23a0      	movs	r3, #160	; 0xa0
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 ff6d 	bl	8003bd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	03c9      	lsls	r1, r1, #15
 8002d04:	430a      	orrs	r2, r1
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_I2C_MspInit+0x12c>)
 8002d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	03db      	lsls	r3, r3, #15
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b019      	add	sp, #100	; 0x64
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40005400 	.word	0x40005400
 8002d24:	40021000 	.word	0x40021000
 8002d28:	50000400 	.word	0x50000400
 8002d2c:	40005800 	.word	0x40005800

08002d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b097      	sub	sp, #92	; 0x5c
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	2344      	movs	r3, #68	; 0x44
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	2314      	movs	r3, #20
 8002d40:	001a      	movs	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	f005 fe79 	bl	8008a3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d48:	2410      	movs	r4, #16
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	2334      	movs	r3, #52	; 0x34
 8002d50:	001a      	movs	r2, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	f005 fe71 	bl	8008a3a <memset>
  if(huart->Instance==USART1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a23      	ldr	r2, [pc, #140]	; (8002dec <HAL_UART_MspInit+0xbc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d13f      	bne.n	8002de2 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	0018      	movs	r0, r3
 8002d72:	f002 fafd 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8002d76:	1e03      	subs	r3, r0, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d7a:	f7ff feab 	bl	8002ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <HAL_UART_MspInit+0xc0>)
 8002d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_UART_MspInit+0xc0>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	01c9      	lsls	r1, r1, #7
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_UART_MspInit+0xc0>)
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_UART_MspInit+0xc0>)
 8002d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_UART_MspInit+0xc0>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	430a      	orrs	r2, r1
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_UART_MspInit+0xc0>)
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	2201      	movs	r2, #1
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002db2:	2144      	movs	r1, #68	; 0x44
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	22c0      	movs	r2, #192	; 0xc0
 8002db8:	00d2      	lsls	r2, r2, #3
 8002dba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	187a      	adds	r2, r7, r1
 8002dd6:	23a0      	movs	r3, #160	; 0xa0
 8002dd8:	05db      	lsls	r3, r3, #23
 8002dda:	0011      	movs	r1, r2
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 fef9 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b017      	add	sp, #92	; 0x5c
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40021000 	.word	0x40021000

08002df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <NMI_Handler+0x4>

08002dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfe:	e7fe      	b.n	8002dfe <HardFault_Handler+0x4>

08002e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e04:	f000 f962 	bl	80030cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e08:	f004 ff1e 	bl	8007c48 <xTaskGetSchedulerState>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e12:	f005 fbf1 	bl	80085f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_kill>:

int _kill(int pid, int sig)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e32:	f005 fdcf 	bl	80089d4 <__errno>
 8002e36:	0003      	movs	r3, r0
 8002e38:	2216      	movs	r2, #22
 8002e3a:	601a      	str	r2, [r3, #0]
	return -1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	425b      	negs	r3, r3
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_exit>:

void _exit (int status)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e50:	2301      	movs	r3, #1
 8002e52:	425a      	negs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	0011      	movs	r1, r2
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff ffe5 	bl	8002e28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e5e:	e7fe      	b.n	8002e5e <_exit+0x16>

08002e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e00a      	b.n	8002e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e72:	e000      	b.n	8002e76 <_read+0x16>
 8002e74:	bf00      	nop
 8002e76:	0001      	movs	r1, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	60ba      	str	r2, [r7, #8]
 8002e7e:	b2ca      	uxtb	r2, r1
 8002e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dbf0      	blt.n	8002e72 <_read+0x12>
	}

return len;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b006      	add	sp, #24
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e009      	b.n	8002ec0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	60ba      	str	r2, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff fb5f 	bl	8002578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf1      	blt.n	8002eac <_write+0x12>
	}
	return len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_close>:

int _close(int file)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	425b      	negs	r3, r3
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	0192      	lsls	r2, r2, #6
 8002ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_isatty>:

int _isatty(int file)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
	return 1;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b004      	add	sp, #16
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <_sbrk+0x5c>)
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <_sbrk+0x60>)
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <_sbrk+0x64>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <_sbrk+0x64>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <_sbrk+0x68>)
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <_sbrk+0x64>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	18d3      	adds	r3, r2, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d207      	bcs.n	8002f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f5c:	f005 fd3a 	bl	80089d4 <__errno>
 8002f60:	0003      	movs	r3, r0
 8002f62:	220c      	movs	r2, #12
 8002f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	425b      	negs	r3, r3
 8002f6a:	e009      	b.n	8002f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	18d2      	adds	r2, r2, r3
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <_sbrk+0x64>)
 8002f7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b006      	add	sp, #24
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20009000 	.word	0x20009000
 8002f8c:	00000400 	.word	0x00000400
 8002f90:	20000204 	.word	0x20000204
 8002f94:	20001d68 	.word	0x20001d68

08002f98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fa4:	480d      	ldr	r0, [pc, #52]	; (8002fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fa6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fa8:	f7ff fff6 	bl	8002f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fac:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fae:	490d      	ldr	r1, [pc, #52]	; (8002fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <LoopForever+0xe>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb4:	e002      	b.n	8002fbc <LoopCopyDataInit>

08002fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fba:	3304      	adds	r3, #4

08002fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc0:	d3f9      	bcc.n	8002fb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <LoopForever+0x16>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc8:	e001      	b.n	8002fce <LoopFillZerobss>

08002fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fcc:	3204      	adds	r2, #4

08002fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd0:	d3fb      	bcc.n	8002fca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fd2:	f005 fd05 	bl	80089e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002fd6:	f7ff fae1 	bl	800259c <main>

08002fda <LoopForever>:

LoopForever:
  b LoopForever
 8002fda:	e7fe      	b.n	8002fda <LoopForever>
  ldr   r0, =_estack
 8002fdc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002fe8:	0800bd64 	.word	0x0800bd64
  ldr r2, =_sbss
 8002fec:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002ff0:	20001d64 	.word	0x20001d64

08002ff4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ff4:	e7fe      	b.n	8002ff4 <ADC1_COMP_IRQHandler>
	...

08002ff8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_Init+0x3c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_Init+0x3c>)
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	0049      	lsls	r1, r1, #1
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003012:	2003      	movs	r0, #3
 8003014:	f000 f810 	bl	8003038 <HAL_InitTick>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d003      	beq.n	8003024 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800301c:	1dfb      	adds	r3, r7, #7
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e001      	b.n	8003028 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fd5c 	bl	8002ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003028:	1dfb      	adds	r3, r7, #7
 800302a:	781b      	ldrb	r3, [r3, #0]
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b002      	add	sp, #8
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003040:	230f      	movs	r3, #15
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_InitTick+0x88>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02b      	beq.n	80030a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <HAL_InitTick+0x8c>)
 8003052:	681c      	ldr	r4, [r3, #0]
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_InitTick+0x88>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	0019      	movs	r1, r3
 800305a:	23fa      	movs	r3, #250	; 0xfa
 800305c:	0098      	lsls	r0, r3, #2
 800305e:	f7fd f86f 	bl	8000140 <__udivsi3>
 8003062:	0003      	movs	r3, r0
 8003064:	0019      	movs	r1, r3
 8003066:	0020      	movs	r0, r4
 8003068:	f7fd f86a 	bl	8000140 <__udivsi3>
 800306c:	0003      	movs	r3, r0
 800306e:	0018      	movs	r0, r3
 8003070:	f000 fda3 	bl	8003bba <HAL_SYSTICK_Config>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d112      	bne.n	800309e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d80a      	bhi.n	8003094 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	2301      	movs	r3, #1
 8003082:	425b      	negs	r3, r3
 8003084:	2200      	movs	r2, #0
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fd82 	bl	8003b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_InitTick+0x90>)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e00d      	b.n	80030b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003094:	230f      	movs	r3, #15
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e008      	b.n	80030b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800309e:	230f      	movs	r3, #15
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e003      	b.n	80030b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030a8:	230f      	movs	r3, #15
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	781b      	ldrb	r3, [r3, #0]
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b005      	add	sp, #20
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	20000010 	.word	0x20000010
 80030c4:	20000008 	.word	0x20000008
 80030c8:	2000000c 	.word	0x2000000c

080030cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_IncTick+0x1c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	001a      	movs	r2, r3
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_IncTick+0x20>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	18d2      	adds	r2, r2, r3
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_IncTick+0x20>)
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	20000010 	.word	0x20000010
 80030ec:	20001d10 	.word	0x20001d10

080030f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  return uwTick;
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <HAL_GetTick+0x10>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	20001d10 	.word	0x20001d10

08003104 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a06      	ldr	r2, [pc, #24]	; (800312c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b002      	add	sp, #8
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40010000 	.word	0x40010000
 800312c:	fffff9ff 	.word	0xfffff9ff

08003130 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a05      	ldr	r2, [pc, #20]	; (8003154 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003140:	401a      	ands	r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	fe3fffff 	.word	0xfe3fffff

08003158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	23e0      	movs	r3, #224	; 0xe0
 8003166:	045b      	lsls	r3, r3, #17
 8003168:	4013      	ands	r3, r2
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}

08003172 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	2104      	movs	r1, #4
 8003186:	400a      	ands	r2, r1
 8003188:	2107      	movs	r1, #7
 800318a:	4091      	lsls	r1, r2
 800318c:	000a      	movs	r2, r1
 800318e:	43d2      	mvns	r2, r2
 8003190:	401a      	ands	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2104      	movs	r1, #4
 8003196:	400b      	ands	r3, r1
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4099      	lsls	r1, r3
 800319c:	000b      	movs	r3, r1
 800319e:	431a      	orrs	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b004      	add	sp, #16
 80031aa:	bd80      	pop	{r7, pc}

080031ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	211f      	movs	r1, #31
 80031c0:	400a      	ands	r2, r1
 80031c2:	210f      	movs	r1, #15
 80031c4:	4091      	lsls	r1, r2
 80031c6:	000a      	movs	r2, r1
 80031c8:	43d2      	mvns	r2, r2
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0e9b      	lsrs	r3, r3, #26
 80031d0:	210f      	movs	r1, #15
 80031d2:	4019      	ands	r1, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	201f      	movs	r0, #31
 80031d8:	4003      	ands	r3, r0
 80031da:	4099      	lsls	r1, r3
 80031dc:	000b      	movs	r3, r1
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b004      	add	sp, #16
 80031ea:	bd80      	pop	{r7, pc}

080031ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	035b      	lsls	r3, r3, #13
 80031fe:	0b5b      	lsrs	r3, r3, #13
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}

0800320e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	0352      	lsls	r2, r2, #13
 8003220:	0b52      	lsrs	r2, r2, #13
 8003222:	43d2      	mvns	r2, r2
 8003224:	401a      	ands	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	0212      	lsls	r2, r2, #8
 8003248:	43d2      	mvns	r2, r2
 800324a:	401a      	ands	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	400b      	ands	r3, r1
 8003254:	4904      	ldr	r1, [pc, #16]	; (8003268 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003256:	400b      	ands	r3, r1
 8003258:	431a      	orrs	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b004      	add	sp, #16
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	07ffff00 	.word	0x07ffff00

0800326c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a05      	ldr	r2, [pc, #20]	; (8003290 <LL_ADC_EnableInternalRegulator+0x24>)
 800327a:	4013      	ands	r3, r2
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	0552      	lsls	r2, r2, #21
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b002      	add	sp, #8
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	6fffffe8 	.word	0x6fffffe8

08003294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	055b      	lsls	r3, r3, #21
 80032a4:	401a      	ands	r2, r3
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	055b      	lsls	r3, r3, #21
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d101      	bne.n	80032b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_IsEnabled+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_IsEnabled+0x1a>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b002      	add	sp, #8
 80032dc:	bd80      	pop	{r7, pc}

080032de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2204      	movs	r2, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d101      	bne.n	80032f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003308:	231f      	movs	r3, #31
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e1b1      	b.n	800368a <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff fc05 	bl	8002b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2254      	movs	r2, #84	; 0x54
 8003340:	2100      	movs	r1, #0
 8003342:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0018      	movs	r0, r3
 800334a:	f7ff ffa3 	bl	8003294 <LL_ADC_IsInternalRegulatorEnabled>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d115      	bne.n	800337e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0018      	movs	r0, r3
 8003358:	f7ff ff88 	bl	800326c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800335c:	4bcd      	ldr	r3, [pc, #820]	; (8003694 <HAL_ADC_Init+0x394>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	49cd      	ldr	r1, [pc, #820]	; (8003698 <HAL_ADC_Init+0x398>)
 8003362:	0018      	movs	r0, r3
 8003364:	f7fc feec 	bl	8000140 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003370:	e002      	b.n	8003378 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3b01      	subs	r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f9      	bne.n	8003372 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0018      	movs	r0, r3
 8003384:	f7ff ff86 	bl	8003294 <LL_ADC_IsInternalRegulatorEnabled>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d10f      	bne.n	80033ac <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	2210      	movs	r2, #16
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2201      	movs	r2, #1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033a4:	231f      	movs	r3, #31
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff ff94 	bl	80032de <LL_ADC_REG_IsConversionOngoing>
 80033b6:	0003      	movs	r3, r0
 80033b8:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	2210      	movs	r2, #16
 80033c0:	4013      	ands	r3, r2
 80033c2:	d000      	beq.n	80033c6 <HAL_ADC_Init+0xc6>
 80033c4:	e154      	b.n	8003670 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d000      	beq.n	80033ce <HAL_ADC_Init+0xce>
 80033cc:	e150      	b.n	8003670 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	4ab2      	ldr	r2, [pc, #712]	; (800369c <HAL_ADC_Init+0x39c>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	2202      	movs	r2, #2
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff ff6a 	bl	80032bc <LL_ADC_IsEnabled>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d156      	bne.n	800349a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2218      	movs	r2, #24
 80033f4:	4393      	bics	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0f9b      	lsrs	r3, r3, #30
 800340a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003410:	4313      	orrs	r3, r2
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	223c      	movs	r2, #60	; 0x3c
 800341c:	5c9b      	ldrb	r3, [r3, r2]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d111      	bne.n	8003446 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	0f9b      	lsrs	r3, r3, #30
 8003428:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800342e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003434:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800343a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	2201      	movs	r2, #1
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	4a94      	ldr	r2, [pc, #592]	; (80036a0 <HAL_ADC_Init+0x3a0>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	430a      	orrs	r2, r1
 800345a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	23c0      	movs	r3, #192	; 0xc0
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	429a      	cmp	r2, r3
 8003466:	d018      	beq.n	800349a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	05db      	lsls	r3, r3, #23
 8003470:	429a      	cmp	r2, r3
 8003472:	d012      	beq.n	800349a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	061b      	lsls	r3, r3, #24
 800347c:	429a      	cmp	r2, r3
 800347e:	d00c      	beq.n	800349a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003480:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_ADC_Init+0x3a4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a88      	ldr	r2, [pc, #544]	; (80036a8 <HAL_ADC_Init+0x3a8>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	23f0      	movs	r3, #240	; 0xf0
 8003490:	039b      	lsls	r3, r3, #14
 8003492:	401a      	ands	r2, r3
 8003494:	4b83      	ldr	r3, [pc, #524]	; (80036a4 <HAL_ADC_Init+0x3a4>)
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7e1b      	ldrb	r3, [r3, #24]
 800349e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7e5b      	ldrb	r3, [r3, #25]
 80034a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e9b      	ldrb	r3, [r3, #26]
 80034ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_ADC_Init+0x1be>
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	015b      	lsls	r3, r3, #5
 80034bc:	e000      	b.n	80034c0 <HAL_ADC_Init+0x1c0>
 80034be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034c6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da04      	bge.n	80034da <HAL_ADC_Init+0x1da>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	e001      	b.n	80034de <HAL_ADC_Init+0x1de>
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80034de:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	5c5b      	ldrb	r3, [r3, r1]
 80034e6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034e8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d115      	bne.n	8003526 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7e9b      	ldrb	r3, [r3, #26]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	0252      	lsls	r2, r2, #9
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	e00b      	b.n	8003526 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	2220      	movs	r2, #32
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	2201      	movs	r2, #1
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003532:	23e0      	movs	r3, #224	; 0xe0
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800353c:	4313      	orrs	r3, r2
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_ADC_Init+0x3ac>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	430a      	orrs	r2, r1
 8003558:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	4a53      	ldr	r2, [pc, #332]	; (80036b0 <HAL_ADC_Init+0x3b0>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	430a      	orrs	r2, r1
 800356e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	001a      	movs	r2, r3
 800357a:	2100      	movs	r1, #0
 800357c:	f7ff fdf9 	bl	8003172 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	494a      	ldr	r1, [pc, #296]	; (80036b4 <HAL_ADC_Init+0x3b4>)
 800358a:	001a      	movs	r2, r3
 800358c:	f7ff fdf1 	bl	8003172 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2110      	movs	r1, #16
 80035a4:	4249      	negs	r1, r1
 80035a6:	430a      	orrs	r2, r1
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
 80035aa:	e03a      	b.n	8003622 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	039b      	lsls	r3, r3, #14
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d134      	bne.n	8003622 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e00c      	b.n	80035d8 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	40da      	lsrs	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	220f      	movs	r2, #15
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b0f      	cmp	r3, #15
 80035d0:	d006      	beq.n	80035e0 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	3301      	adds	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b07      	cmp	r3, #7
 80035dc:	d9ef      	bls.n	80035be <HAL_ADC_Init+0x2be>
 80035de:	e000      	b.n	80035e2 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80035e0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d109      	bne.n	80035fc <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2110      	movs	r1, #16
 80035f4:	4249      	negs	r1, r1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	629a      	str	r2, [r3, #40]	; 0x28
 80035fa:	e012      	b.n	8003622 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	3b01      	subs	r3, #1
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	221c      	movs	r2, #28
 800360c:	4013      	ands	r3, r2
 800360e:	2210      	movs	r2, #16
 8003610:	4252      	negs	r2, r2
 8003612:	409a      	lsls	r2, r3
 8003614:	0011      	movs	r1, r2
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_ADC_Init+0x3b8>)
 800362a:	4013      	ands	r3, r2
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	429a      	cmp	r2, r3
 8003630:	d10b      	bne.n	800364a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	2203      	movs	r2, #3
 800363e:	4393      	bics	r3, r2
 8003640:	2201      	movs	r2, #1
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003648:	e01c      	b.n	8003684 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	2212      	movs	r2, #18
 8003650:	4393      	bics	r3, r2
 8003652:	2210      	movs	r2, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	2201      	movs	r2, #1
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003666:	231f      	movs	r3, #31
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800366e:	e009      	b.n	8003684 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	2210      	movs	r2, #16
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800367c:	231f      	movs	r3, #31
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003684:	231f      	movs	r3, #31
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	781b      	ldrb	r3, [r3, #0]
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b008      	add	sp, #32
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	20000008 	.word	0x20000008
 8003698:	00030d40 	.word	0x00030d40
 800369c:	fffffefd 	.word	0xfffffefd
 80036a0:	1ffffc02 	.word	0x1ffffc02
 80036a4:	40012708 	.word	0x40012708
 80036a8:	ffc3ffff 	.word	0xffc3ffff
 80036ac:	fffe0219 	.word	0xfffe0219
 80036b0:	dffffc02 	.word	0xdffffc02
 80036b4:	07ffff04 	.word	0x07ffff04
 80036b8:	833fffe7 	.word	0x833fffe7

080036bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c6:	2317      	movs	r3, #23
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2254      	movs	r2, #84	; 0x54
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x24>
 80036dc:	2302      	movs	r3, #2
 80036de:	e1c0      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x3a6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2254      	movs	r2, #84	; 0x54
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff fdf6 	bl	80032de <LL_ADC_REG_IsConversionOngoing>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d000      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0x3c>
 80036f6:	e1a3      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d100      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x46>
 8003700:	e143      	b.n	800398a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	429a      	cmp	r2, r3
 800370c:	d004      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003712:	4ac1      	ldr	r2, [pc, #772]	; (8003a18 <HAL_ADC_ConfigChannel+0x35c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d108      	bne.n	800372a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0019      	movs	r1, r3
 8003722:	0010      	movs	r0, r2
 8003724:	f7ff fd62 	bl	80031ec <LL_ADC_REG_SetSequencerChAdd>
 8003728:	e0c9      	b.n	80038be <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	211f      	movs	r1, #31
 8003734:	400b      	ands	r3, r1
 8003736:	210f      	movs	r1, #15
 8003738:	4099      	lsls	r1, r3
 800373a:	000b      	movs	r3, r1
 800373c:	43db      	mvns	r3, r3
 800373e:	4013      	ands	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	035b      	lsls	r3, r3, #13
 8003748:	0b5b      	lsrs	r3, r3, #13
 800374a:	d105      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x9c>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	221f      	movs	r2, #31
 8003754:	4013      	ands	r3, r2
 8003756:	e098      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
 8003760:	d000      	beq.n	8003764 <HAL_ADC_ConfigChannel+0xa8>
 8003762:	e091      	b.n	8003888 <HAL_ADC_ConfigChannel+0x1cc>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2202      	movs	r2, #2
 800376a:	4013      	ands	r3, r2
 800376c:	d000      	beq.n	8003770 <HAL_ADC_ConfigChannel+0xb4>
 800376e:	e089      	b.n	8003884 <HAL_ADC_ConfigChannel+0x1c8>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2204      	movs	r2, #4
 8003776:	4013      	ands	r3, r2
 8003778:	d000      	beq.n	800377c <HAL_ADC_ConfigChannel+0xc0>
 800377a:	e081      	b.n	8003880 <HAL_ADC_ConfigChannel+0x1c4>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	4013      	ands	r3, r2
 8003784:	d000      	beq.n	8003788 <HAL_ADC_ConfigChannel+0xcc>
 8003786:	e079      	b.n	800387c <HAL_ADC_ConfigChannel+0x1c0>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2210      	movs	r2, #16
 800378e:	4013      	ands	r3, r2
 8003790:	d000      	beq.n	8003794 <HAL_ADC_ConfigChannel+0xd8>
 8003792:	e071      	b.n	8003878 <HAL_ADC_ConfigChannel+0x1bc>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2220      	movs	r2, #32
 800379a:	4013      	ands	r3, r2
 800379c:	d000      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0xe4>
 800379e:	e069      	b.n	8003874 <HAL_ADC_ConfigChannel+0x1b8>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4013      	ands	r3, r2
 80037a8:	d000      	beq.n	80037ac <HAL_ADC_ConfigChannel+0xf0>
 80037aa:	e061      	b.n	8003870 <HAL_ADC_ConfigChannel+0x1b4>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	4013      	ands	r3, r2
 80037b4:	d000      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0xfc>
 80037b6:	e059      	b.n	800386c <HAL_ADC_ConfigChannel+0x1b0>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4013      	ands	r3, r2
 80037c2:	d151      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x1ac>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4013      	ands	r3, r2
 80037ce:	d149      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1a8>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4013      	ands	r3, r2
 80037da:	d141      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x1a4>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4013      	ands	r3, r2
 80037e6:	d139      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1a0>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	015b      	lsls	r3, r3, #5
 80037f0:	4013      	ands	r3, r2
 80037f2:	d131      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x19c>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	019b      	lsls	r3, r3, #6
 80037fc:	4013      	ands	r3, r2
 80037fe:	d129      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x198>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	01db      	lsls	r3, r3, #7
 8003808:	4013      	ands	r3, r2
 800380a:	d121      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x194>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	4013      	ands	r3, r2
 8003816:	d119      	bne.n	800384c <HAL_ADC_ConfigChannel+0x190>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	025b      	lsls	r3, r3, #9
 8003820:	4013      	ands	r3, r2
 8003822:	d111      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x18c>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	029b      	lsls	r3, r3, #10
 800382c:	4013      	ands	r3, r2
 800382e:	d109      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x188>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	02db      	lsls	r3, r3, #11
 8003838:	4013      	ands	r3, r2
 800383a:	d001      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x184>
 800383c:	2312      	movs	r3, #18
 800383e:	e024      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003840:	2300      	movs	r3, #0
 8003842:	e022      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003844:	2311      	movs	r3, #17
 8003846:	e020      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003848:	2310      	movs	r3, #16
 800384a:	e01e      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 800384c:	230f      	movs	r3, #15
 800384e:	e01c      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003850:	230e      	movs	r3, #14
 8003852:	e01a      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003854:	230d      	movs	r3, #13
 8003856:	e018      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003858:	230c      	movs	r3, #12
 800385a:	e016      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 800385c:	230b      	movs	r3, #11
 800385e:	e014      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003860:	230a      	movs	r3, #10
 8003862:	e012      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003864:	2309      	movs	r3, #9
 8003866:	e010      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003868:	2308      	movs	r3, #8
 800386a:	e00e      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 800386c:	2307      	movs	r3, #7
 800386e:	e00c      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003870:	2306      	movs	r3, #6
 8003872:	e00a      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003874:	2305      	movs	r3, #5
 8003876:	e008      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003878:	2304      	movs	r3, #4
 800387a:	e006      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 800387c:	2303      	movs	r3, #3
 800387e:	e004      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003880:	2302      	movs	r3, #2
 8003882:	e002      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_ADC_ConfigChannel+0x1ce>
 8003888:	2300      	movs	r3, #0
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	6852      	ldr	r2, [r2, #4]
 800388e:	201f      	movs	r0, #31
 8003890:	4002      	ands	r2, r0
 8003892:	4093      	lsls	r3, r2
 8003894:	000a      	movs	r2, r1
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d808      	bhi.n	80038be <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	001a      	movs	r2, r3
 80038ba:	f7ff fc77 	bl	80031ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	001a      	movs	r2, r3
 80038cc:	f7ff fcb2 	bl	8003234 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db00      	blt.n	80038da <HAL_ADC_ConfigChannel+0x21e>
 80038d8:	e0bc      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038da:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff fc3b 	bl	8003158 <LL_ADC_GetCommonPathInternalCh>
 80038e2:	0003      	movs	r3, r0
 80038e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a4d      	ldr	r2, [pc, #308]	; (8003a20 <HAL_ADC_ConfigChannel+0x364>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d122      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038f8:	d11d      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	0412      	lsls	r2, r2, #16
 8003900:	4313      	orrs	r3, r2
 8003902:	4a46      	ldr	r2, [pc, #280]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 8003904:	0019      	movs	r1, r3
 8003906:	0010      	movs	r0, r2
 8003908:	f7ff fc12 	bl	8003130 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800390c:	4b45      	ldr	r3, [pc, #276]	; (8003a24 <HAL_ADC_ConfigChannel+0x368>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4945      	ldr	r1, [pc, #276]	; (8003a28 <HAL_ADC_ConfigChannel+0x36c>)
 8003912:	0018      	movs	r0, r3
 8003914:	f7fc fc14 	bl	8000140 <__udivsi3>
 8003918:	0003      	movs	r3, r0
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	0013      	movs	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	189b      	adds	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003926:	e002      	b.n	800392e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b01      	subs	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f9      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003934:	e08e      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <HAL_ADC_ConfigChannel+0x370>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d10e      	bne.n	800395e <HAL_ADC_ConfigChannel+0x2a2>
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	045b      	lsls	r3, r3, #17
 8003946:	4013      	ands	r3, r2
 8003948:	d109      	bne.n	800395e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	0452      	lsls	r2, r2, #17
 8003950:	4313      	orrs	r3, r2
 8003952:	4a32      	ldr	r2, [pc, #200]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 8003954:	0019      	movs	r1, r3
 8003956:	0010      	movs	r0, r2
 8003958:	f7ff fbea 	bl	8003130 <LL_ADC_SetCommonPathInternalCh>
 800395c:	e07a      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a33      	ldr	r2, [pc, #204]	; (8003a30 <HAL_ADC_ConfigChannel+0x374>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d000      	beq.n	800396a <HAL_ADC_ConfigChannel+0x2ae>
 8003968:	e074      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	03db      	lsls	r3, r3, #15
 8003970:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003972:	d000      	beq.n	8003976 <HAL_ADC_ConfigChannel+0x2ba>
 8003974:	e06e      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	03d2      	lsls	r2, r2, #15
 800397c:	4313      	orrs	r3, r2
 800397e:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f7ff fbd4 	bl	8003130 <LL_ADC_SetCommonPathInternalCh>
 8003988:	e064      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	429a      	cmp	r2, r3
 8003994:	d004      	beq.n	80039a0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <HAL_ADC_ConfigChannel+0x35c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d107      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0019      	movs	r1, r3
 80039aa:	0010      	movs	r0, r2
 80039ac:	f7ff fc2f 	bl	800320e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da4d      	bge.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff fbcc 	bl	8003158 <LL_ADC_GetCommonPathInternalCh>
 80039c0:	0003      	movs	r3, r0
 80039c2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <HAL_ADC_ConfigChannel+0x364>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_ADC_ConfigChannel+0x378>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 80039d6:	0019      	movs	r1, r3
 80039d8:	0010      	movs	r0, r2
 80039da:	f7ff fba9 	bl	8003130 <LL_ADC_SetCommonPathInternalCh>
 80039de:	e039      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <HAL_ADC_ConfigChannel+0x370>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d108      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <HAL_ADC_ConfigChannel+0x37c>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 80039f2:	0019      	movs	r1, r3
 80039f4:	0010      	movs	r0, r2
 80039f6:	f7ff fb9b 	bl	8003130 <LL_ADC_SetCommonPathInternalCh>
 80039fa:	e02b      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <HAL_ADC_ConfigChannel+0x374>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d126      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <HAL_ADC_ConfigChannel+0x380>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	4a03      	ldr	r2, [pc, #12]	; (8003a1c <HAL_ADC_ConfigChannel+0x360>)
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f7ff fb8d 	bl	8003130 <LL_ADC_SetCommonPathInternalCh>
 8003a16:	e01d      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x398>
 8003a18:	80000004 	.word	0x80000004
 8003a1c:	40012708 	.word	0x40012708
 8003a20:	b0001000 	.word	0xb0001000
 8003a24:	20000008 	.word	0x20000008
 8003a28:	00030d40 	.word	0x00030d40
 8003a2c:	b8004000 	.word	0xb8004000
 8003a30:	b4002000 	.word	0xb4002000
 8003a34:	ff7fffff 	.word	0xff7fffff
 8003a38:	feffffff 	.word	0xfeffffff
 8003a3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	2220      	movs	r2, #32
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a4c:	2317      	movs	r3, #23
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2254      	movs	r2, #84	; 0x54
 8003a58:	2100      	movs	r1, #0
 8003a5a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003a5c:	2317      	movs	r3, #23
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	781b      	ldrb	r3, [r3, #0]
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b006      	add	sp, #24
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	0002      	movs	r2, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	1dfb      	adds	r3, r7, #7
 8003a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a80:	d828      	bhi.n	8003ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a82:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <__NVIC_SetPriority+0xd4>)
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b25b      	sxtb	r3, r3
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	33c0      	adds	r3, #192	; 0xc0
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	589b      	ldr	r3, [r3, r2]
 8003a92:	1dfa      	adds	r2, r7, #7
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	0011      	movs	r1, r2
 8003a98:	2203      	movs	r2, #3
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	00d2      	lsls	r2, r2, #3
 8003a9e:	21ff      	movs	r1, #255	; 0xff
 8003aa0:	4091      	lsls	r1, r2
 8003aa2:	000a      	movs	r2, r1
 8003aa4:	43d2      	mvns	r2, r2
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	019b      	lsls	r3, r3, #6
 8003aae:	22ff      	movs	r2, #255	; 0xff
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	1dfb      	adds	r3, r7, #7
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	2303      	movs	r3, #3
 8003aba:	4003      	ands	r3, r0
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac0:	481f      	ldr	r0, [pc, #124]	; (8003b40 <__NVIC_SetPriority+0xd4>)
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	430a      	orrs	r2, r1
 8003acc:	33c0      	adds	r3, #192	; 0xc0
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ad2:	e031      	b.n	8003b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <__NVIC_SetPriority+0xd8>)
 8003ad6:	1dfb      	adds	r3, r7, #7
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	0019      	movs	r1, r3
 8003adc:	230f      	movs	r3, #15
 8003ade:	400b      	ands	r3, r1
 8003ae0:	3b08      	subs	r3, #8
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3306      	adds	r3, #6
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	3304      	adds	r3, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1dfa      	adds	r2, r7, #7
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	0011      	movs	r1, r2
 8003af4:	2203      	movs	r2, #3
 8003af6:	400a      	ands	r2, r1
 8003af8:	00d2      	lsls	r2, r2, #3
 8003afa:	21ff      	movs	r1, #255	; 0xff
 8003afc:	4091      	lsls	r1, r2
 8003afe:	000a      	movs	r2, r1
 8003b00:	43d2      	mvns	r2, r2
 8003b02:	401a      	ands	r2, r3
 8003b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	019b      	lsls	r3, r3, #6
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	1dfb      	adds	r3, r7, #7
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	0018      	movs	r0, r3
 8003b14:	2303      	movs	r3, #3
 8003b16:	4003      	ands	r3, r0
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b1c:	4809      	ldr	r0, [pc, #36]	; (8003b44 <__NVIC_SetPriority+0xd8>)
 8003b1e:	1dfb      	adds	r3, r7, #7
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	001c      	movs	r4, r3
 8003b24:	230f      	movs	r3, #15
 8003b26:	4023      	ands	r3, r4
 8003b28:	3b08      	subs	r3, #8
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	3306      	adds	r3, #6
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	18c3      	adds	r3, r0, r3
 8003b34:	3304      	adds	r3, #4
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b003      	add	sp, #12
 8003b3e:	bd90      	pop	{r4, r7, pc}
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1e5a      	subs	r2, r3, #1
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	045b      	lsls	r3, r3, #17
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d301      	bcc.n	8003b60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e010      	b.n	8003b82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <SysTick_Config+0x44>)
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	3a01      	subs	r2, #1
 8003b66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	425b      	negs	r3, r3
 8003b6c:	2103      	movs	r1, #3
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7ff ff7c 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <SysTick_Config+0x44>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7a:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <SysTick_Config+0x44>)
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	e000e010 	.word	0xe000e010

08003b90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	210f      	movs	r1, #15
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	1c02      	adds	r2, r0, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	0011      	movs	r1, r2
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7ff ff5d 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b004      	add	sp, #16
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7ff ffbf 	bl	8003b48 <SysTick_Config>
 8003bca:	0003      	movs	r3, r0
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be2:	e147      	b.n	8003e74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4091      	lsls	r1, r2
 8003bee:	000a      	movs	r2, r1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <HAL_GPIO_Init+0x28>
 8003bfa:	e138      	b.n	8003e6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d005      	beq.n	8003c14 <HAL_GPIO_Init+0x40>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d130      	bne.n	8003c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	409a      	lsls	r2, r3
 8003c22:	0013      	movs	r3, r2
 8003c24:	43da      	mvns	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	0013      	movs	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	43da      	mvns	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	2201      	movs	r2, #1
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
 8003c68:	0013      	movs	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d017      	beq.n	8003cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	0013      	movs	r3, r2
 8003c92:	43da      	mvns	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d123      	bne.n	8003d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	58d3      	ldr	r3, [r2, r3]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2207      	movs	r2, #7
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2107      	movs	r1, #7
 8003cea:	400b      	ands	r3, r1
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	43da      	mvns	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	401a      	ands	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	0013      	movs	r3, r2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	23c0      	movs	r3, #192	; 0xc0
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	4013      	ands	r3, r2
 8003d44:	d100      	bne.n	8003d48 <HAL_GPIO_Init+0x174>
 8003d46:	e092      	b.n	8003e6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d48:	4a50      	ldr	r2, [pc, #320]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3318      	adds	r3, #24
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	589b      	ldr	r3, [r3, r2]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	220f      	movs	r2, #15
 8003d60:	409a      	lsls	r2, r3
 8003d62:	0013      	movs	r3, r2
 8003d64:	43da      	mvns	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	23a0      	movs	r3, #160	; 0xa0
 8003d70:	05db      	lsls	r3, r3, #23
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d013      	beq.n	8003d9e <HAL_GPIO_Init+0x1ca>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a45      	ldr	r2, [pc, #276]	; (8003e90 <HAL_GPIO_Init+0x2bc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00d      	beq.n	8003d9a <HAL_GPIO_Init+0x1c6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a44      	ldr	r2, [pc, #272]	; (8003e94 <HAL_GPIO_Init+0x2c0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <HAL_GPIO_Init+0x1c2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <HAL_GPIO_Init+0x2c4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <HAL_GPIO_Init+0x1be>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e006      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d92:	2305      	movs	r3, #5
 8003d94:	e004      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e002      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	2103      	movs	r1, #3
 8003da4:	400a      	ands	r2, r1
 8003da6:	00d2      	lsls	r2, r2, #3
 8003da8:	4093      	lsls	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003db0:	4936      	ldr	r1, [pc, #216]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3318      	adds	r3, #24
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dbe:	4a33      	ldr	r2, [pc, #204]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	58d3      	ldr	r3, [r2, r3]
 8003dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003de4:	4929      	ldr	r1, [pc, #164]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003dec:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003dee:	2384      	movs	r3, #132	; 0x84
 8003df0:	58d3      	ldr	r3, [r2, r3]
 8003df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	029b      	lsls	r3, r3, #10
 8003e06:	4013      	ands	r3, r2
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e12:	491e      	ldr	r1, [pc, #120]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e14:	2284      	movs	r2, #132	; 0x84
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43da      	mvns	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	035b      	lsls	r3, r3, #13
 8003e32:	4013      	ands	r3, r2
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e44:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	039b      	lsls	r3, r3, #14
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	3301      	adds	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	40da      	lsrs	r2, r3
 8003e7c:	1e13      	subs	r3, r2, #0
 8003e7e:	d000      	beq.n	8003e82 <HAL_GPIO_Init+0x2ae>
 8003e80:	e6b0      	b.n	8003be4 <HAL_GPIO_Init+0x10>
  }
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b006      	add	sp, #24
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021800 	.word	0x40021800
 8003e90:	50000400 	.word	0x50000400
 8003e94:	50000800 	.word	0x50000800
 8003e98:	50000c00 	.word	0x50000c00

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	0008      	movs	r0, r1
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	1cbb      	adds	r3, r7, #2
 8003eaa:	1c02      	adds	r2, r0, #0
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	1c7b      	adds	r3, r7, #1
 8003eb0:	1c0a      	adds	r2, r1, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb4:	1c7b      	adds	r3, r7, #1
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ebc:	1cbb      	adds	r3, r7, #2
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec4:	e003      	b.n	8003ece <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec6:	1cbb      	adds	r3, r7, #2
 8003ec8:	881a      	ldrh	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e082      	b.n	8003ff0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2241      	movs	r2, #65	; 0x41
 8003eee:	5c9b      	ldrb	r3, [r3, r2]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d107      	bne.n	8003f06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2240      	movs	r2, #64	; 0x40
 8003efa:	2100      	movs	r1, #0
 8003efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fe fe79 	bl	8002bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2241      	movs	r2, #65	; 0x41
 8003f0a:	2124      	movs	r1, #36	; 0x24
 8003f0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2101      	movs	r1, #1
 8003f1a:	438a      	bics	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4934      	ldr	r1, [pc, #208]	; (8003ff8 <HAL_I2C_Init+0x120>)
 8003f28:	400a      	ands	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4931      	ldr	r1, [pc, #196]	; (8003ffc <HAL_I2C_Init+0x124>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d108      	bne.n	8003f56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	0209      	lsls	r1, r1, #8
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e007      	b.n	8003f66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2184      	movs	r1, #132	; 0x84
 8003f60:	0209      	lsls	r1, r1, #8
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d104      	bne.n	8003f78 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	0112      	lsls	r2, r2, #4
 8003f76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	491f      	ldr	r1, [pc, #124]	; (8004000 <HAL_I2C_Init+0x128>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	491a      	ldr	r1, [pc, #104]	; (8003ffc <HAL_I2C_Init+0x124>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69d9      	ldr	r1, [r3, #28]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2101      	movs	r1, #1
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2241      	movs	r2, #65	; 0x41
 8003fdc:	2120      	movs	r1, #32
 8003fde:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2242      	movs	r2, #66	; 0x42
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	f0ffffff 	.word	0xf0ffffff
 8003ffc:	ffff7fff 	.word	0xffff7fff
 8004000:	02008000 	.word	0x02008000

08004004 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	0008      	movs	r0, r1
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	0019      	movs	r1, r3
 8004012:	230a      	movs	r3, #10
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	1c02      	adds	r2, r0, #0
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	2308      	movs	r3, #8
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	1c0a      	adds	r2, r1, #0
 8004020:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2241      	movs	r2, #65	; 0x41
 8004026:	5c9b      	ldrb	r3, [r3, r2]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b20      	cmp	r3, #32
 800402c:	d000      	beq.n	8004030 <HAL_I2C_Master_Transmit+0x2c>
 800402e:	e0e7      	b.n	8004200 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2240      	movs	r2, #64	; 0x40
 8004034:	5c9b      	ldrb	r3, [r3, r2]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2C_Master_Transmit+0x3a>
 800403a:	2302      	movs	r3, #2
 800403c:	e0e1      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1fe>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2240      	movs	r2, #64	; 0x40
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004046:	f7ff f853 	bl	80030f0 <HAL_GetTick>
 800404a:	0003      	movs	r3, r0
 800404c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	0219      	lsls	r1, r3, #8
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	f000 fa04 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0cc      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2241      	movs	r2, #65	; 0x41
 800406c:	2121      	movs	r1, #33	; 0x21
 800406e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2242      	movs	r2, #66	; 0x42
 8004074:	2110      	movs	r1, #16
 8004076:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2208      	movs	r2, #8
 8004088:	18ba      	adds	r2, r7, r2
 800408a:	8812      	ldrh	r2, [r2, #0]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2bff      	cmp	r3, #255	; 0xff
 800409c:	d911      	bls.n	80040c2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	22ff      	movs	r2, #255	; 0xff
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	045c      	lsls	r4, r3, #17
 80040ae:	230a      	movs	r3, #10
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	8819      	ldrh	r1, [r3, #0]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	4b55      	ldr	r3, [pc, #340]	; (800420c <HAL_I2C_Master_Transmit+0x208>)
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	0023      	movs	r3, r4
 80040bc:	f000 fb74 	bl	80047a8 <I2C_TransferConfig>
 80040c0:	e075      	b.n	80041ae <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	049c      	lsls	r4, r3, #18
 80040d6:	230a      	movs	r3, #10
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	8819      	ldrh	r1, [r3, #0]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	4b4b      	ldr	r3, [pc, #300]	; (800420c <HAL_I2C_Master_Transmit+0x208>)
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	0023      	movs	r3, r4
 80040e4:	f000 fb60 	bl	80047a8 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80040e8:	e061      	b.n	80041ae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 f9f8 	bl	80044e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e081      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03a      	beq.n	80041ae <HAL_I2C_Master_Transmit+0x1aa>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d136      	bne.n	80041ae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	0013      	movs	r3, r2
 800414a:	2200      	movs	r2, #0
 800414c:	2180      	movs	r1, #128	; 0x80
 800414e:	f000 f98b 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e053      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2bff      	cmp	r3, #255	; 0xff
 8004162:	d911      	bls.n	8004188 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	22ff      	movs	r2, #255	; 0xff
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	b2da      	uxtb	r2, r3
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	045c      	lsls	r4, r3, #17
 8004174:	230a      	movs	r3, #10
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	8819      	ldrh	r1, [r3, #0]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	2300      	movs	r3, #0
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	0023      	movs	r3, r4
 8004182:	f000 fb11 	bl	80047a8 <I2C_TransferConfig>
 8004186:	e012      	b.n	80041ae <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	b2da      	uxtb	r2, r3
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	049c      	lsls	r4, r3, #18
 800419c:	230a      	movs	r3, #10
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	8819      	ldrh	r1, [r3, #0]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	2300      	movs	r3, #0
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	0023      	movs	r3, r4
 80041aa:	f000 fafd 	bl	80047a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d198      	bne.n	80040ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f9d0 	bl	8004564 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e01a      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2220      	movs	r2, #32
 80041d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	490c      	ldr	r1, [pc, #48]	; (8004210 <HAL_I2C_Master_Transmit+0x20c>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2241      	movs	r2, #65	; 0x41
 80041e8:	2120      	movs	r1, #32
 80041ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2242      	movs	r2, #66	; 0x42
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b007      	add	sp, #28
 8004208:	bd90      	pop	{r4, r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	80002000 	.word	0x80002000
 8004210:	fe00e800 	.word	0xfe00e800

08004214 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	0008      	movs	r0, r1
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	0019      	movs	r1, r3
 8004222:	230a      	movs	r3, #10
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	1c02      	adds	r2, r0, #0
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	2308      	movs	r3, #8
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	1c0a      	adds	r2, r1, #0
 8004230:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2241      	movs	r2, #65	; 0x41
 8004236:	5c9b      	ldrb	r3, [r3, r2]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b20      	cmp	r3, #32
 800423c:	d000      	beq.n	8004240 <HAL_I2C_Master_Receive+0x2c>
 800423e:	e0e8      	b.n	8004412 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2240      	movs	r2, #64	; 0x40
 8004244:	5c9b      	ldrb	r3, [r3, r2]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_I2C_Master_Receive+0x3a>
 800424a:	2302      	movs	r3, #2
 800424c:	e0e2      	b.n	8004414 <HAL_I2C_Master_Receive+0x200>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2240      	movs	r2, #64	; 0x40
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004256:	f7fe ff4b 	bl	80030f0 <HAL_GetTick>
 800425a:	0003      	movs	r3, r0
 800425c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	0219      	lsls	r1, r3, #8
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2319      	movs	r3, #25
 800426a:	2201      	movs	r2, #1
 800426c:	f000 f8fc 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8004270:	1e03      	subs	r3, r0, #0
 8004272:	d001      	beq.n	8004278 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0cd      	b.n	8004414 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2241      	movs	r2, #65	; 0x41
 800427c:	2122      	movs	r1, #34	; 0x22
 800427e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2242      	movs	r2, #66	; 0x42
 8004284:	2110      	movs	r1, #16
 8004286:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2208      	movs	r2, #8
 8004298:	18ba      	adds	r2, r7, r2
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2bff      	cmp	r3, #255	; 0xff
 80042ac:	d911      	bls.n	80042d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	22ff      	movs	r2, #255	; 0xff
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	045c      	lsls	r4, r3, #17
 80042be:	230a      	movs	r3, #10
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	8819      	ldrh	r1, [r3, #0]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	4b55      	ldr	r3, [pc, #340]	; (800441c <HAL_I2C_Master_Receive+0x208>)
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	0023      	movs	r3, r4
 80042cc:	f000 fa6c 	bl	80047a8 <I2C_TransferConfig>
 80042d0:	e076      	b.n	80043c0 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	049c      	lsls	r4, r3, #18
 80042e6:	230a      	movs	r3, #10
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	8819      	ldrh	r1, [r3, #0]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_I2C_Master_Receive+0x208>)
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	0023      	movs	r3, r4
 80042f4:	f000 fa58 	bl	80047a8 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80042f8:	e062      	b.n	80043c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	0018      	movs	r0, r3
 8004302:	f000 f96b 	bl	80045dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e082      	b.n	8004414 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d03a      	beq.n	80043c0 <HAL_I2C_Master_Receive+0x1ac>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d136      	bne.n	80043c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	0013      	movs	r3, r2
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	f000 f882 	bl	8004468 <I2C_WaitOnFlagUntilTimeout>
 8004364:	1e03      	subs	r3, r0, #0
 8004366:	d001      	beq.n	800436c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e053      	b.n	8004414 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2bff      	cmp	r3, #255	; 0xff
 8004374:	d911      	bls.n	800439a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	b2da      	uxtb	r2, r3
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	045c      	lsls	r4, r3, #17
 8004386:	230a      	movs	r3, #10
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	8819      	ldrh	r1, [r3, #0]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	0023      	movs	r3, r4
 8004394:	f000 fa08 	bl	80047a8 <I2C_TransferConfig>
 8004398:	e012      	b.n	80043c0 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	049c      	lsls	r4, r3, #18
 80043ae:	230a      	movs	r3, #10
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	8819      	ldrh	r1, [r3, #0]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	0023      	movs	r3, r4
 80043bc:	f000 f9f4 	bl	80047a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d197      	bne.n	80042fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 f8c7 	bl	8004564 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e01a      	b.n	8004414 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2220      	movs	r2, #32
 80043e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	490b      	ldr	r1, [pc, #44]	; (8004420 <HAL_I2C_Master_Receive+0x20c>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2241      	movs	r2, #65	; 0x41
 80043fa:	2120      	movs	r1, #32
 80043fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2242      	movs	r2, #66	; 0x42
 8004402:	2100      	movs	r1, #0
 8004404:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2240      	movs	r2, #64	; 0x40
 800440a:	2100      	movs	r1, #0
 800440c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
  }
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b007      	add	sp, #28
 800441a:	bd90      	pop	{r4, r7, pc}
 800441c:	80002400 	.word	0x80002400
 8004420:	fe00e800 	.word	0xfe00e800

08004424 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2202      	movs	r2, #2
 8004434:	4013      	ands	r3, r2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d103      	bne.n	8004442 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2201      	movs	r2, #1
 800444a:	4013      	ands	r3, r2
 800444c:	2b01      	cmp	r3, #1
 800444e:	d007      	beq.n	8004460 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2101      	movs	r1, #1
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]
  }
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	1dfb      	adds	r3, r7, #7
 8004476:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004478:	e021      	b.n	80044be <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	d01e      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7fe fe36 	bl	80030f0 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d113      	bne.n	80044be <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	2220      	movs	r2, #32
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2241      	movs	r2, #65	; 0x41
 80044a6:	2120      	movs	r1, #32
 80044a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2242      	movs	r2, #66	; 0x42
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2240      	movs	r2, #64	; 0x40
 80044b6:	2100      	movs	r1, #0
 80044b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e00f      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	4013      	ands	r3, r2
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	425a      	negs	r2, r3
 80044ce:	4153      	adcs	r3, r2
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	001a      	movs	r2, r3
 80044d4:	1dfb      	adds	r3, r7, #7
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d0ce      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b004      	add	sp, #16
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044f2:	e02b      	b.n	800454c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 f8da 	bl	80046b4 <I2C_IsAcknowledgeFailed>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d001      	beq.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e029      	b.n	800455c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3301      	adds	r3, #1
 800450c:	d01e      	beq.n	800454c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fe fdef 	bl	80030f0 <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d113      	bne.n	800454c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	2220      	movs	r2, #32
 800452a:	431a      	orrs	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2241      	movs	r2, #65	; 0x41
 8004534:	2120      	movs	r1, #32
 8004536:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2242      	movs	r2, #66	; 0x42
 800453c:	2100      	movs	r1, #0
 800453e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	2100      	movs	r1, #0
 8004546:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e007      	b.n	800455c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2202      	movs	r2, #2
 8004554:	4013      	ands	r3, r2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d1cc      	bne.n	80044f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b004      	add	sp, #16
 8004562:	bd80      	pop	{r7, pc}

08004564 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004570:	e028      	b.n	80045c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	0018      	movs	r0, r3
 800457a:	f000 f89b 	bl	80046b4 <I2C_IsAcknowledgeFailed>
 800457e:	1e03      	subs	r3, r0, #0
 8004580:	d001      	beq.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e026      	b.n	80045d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fe fdb3 	bl	80030f0 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d113      	bne.n	80045c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	2220      	movs	r2, #32
 80045a2:	431a      	orrs	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2241      	movs	r2, #65	; 0x41
 80045ac:	2120      	movs	r1, #32
 80045ae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2242      	movs	r2, #66	; 0x42
 80045b4:	2100      	movs	r1, #0
 80045b6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2240      	movs	r2, #64	; 0x40
 80045bc:	2100      	movs	r1, #0
 80045be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e007      	b.n	80045d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2220      	movs	r2, #32
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d1cf      	bne.n	8004572 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e8:	e055      	b.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 f85f 	bl	80046b4 <I2C_IsAcknowledgeFailed>
 80045f6:	1e03      	subs	r3, r0, #0
 80045f8:	d001      	beq.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e053      	b.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2220      	movs	r2, #32
 8004606:	4013      	ands	r3, r2
 8004608:	2b20      	cmp	r3, #32
 800460a:	d129      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2204      	movs	r2, #4
 8004614:	4013      	ands	r3, r2
 8004616:	2b04      	cmp	r3, #4
 8004618:	d105      	bne.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e03f      	b.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2220      	movs	r2, #32
 800462c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	491d      	ldr	r1, [pc, #116]	; (80046b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800463a:	400a      	ands	r2, r1
 800463c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2241      	movs	r2, #65	; 0x41
 8004648:	2120      	movs	r1, #32
 800464a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2242      	movs	r2, #66	; 0x42
 8004650:	2100      	movs	r1, #0
 8004652:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2240      	movs	r2, #64	; 0x40
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e022      	b.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fe fd46 	bl	80030f0 <HAL_GetTick>
 8004664:	0002      	movs	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	2220      	movs	r2, #32
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2241      	movs	r2, #65	; 0x41
 8004686:	2120      	movs	r1, #32
 8004688:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2240      	movs	r2, #64	; 0x40
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e007      	b.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2204      	movs	r2, #4
 800469e:	4013      	ands	r3, r2
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d1a2      	bne.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b004      	add	sp, #16
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	fe00e800 	.word	0xfe00e800

080046b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2210      	movs	r2, #16
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d164      	bne.n	8004798 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	049b      	lsls	r3, r3, #18
 80046d8:	401a      	ands	r2, r3
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	049b      	lsls	r3, r3, #18
 80046de:	429a      	cmp	r2, r3
 80046e0:	d02b      	beq.n	800473a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	01c9      	lsls	r1, r1, #7
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f4:	e021      	b.n	800473a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3301      	adds	r3, #1
 80046fa:	d01e      	beq.n	800473a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fc:	f7fe fcf8 	bl	80030f0 <HAL_GetTick>
 8004700:	0002      	movs	r2, r0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	d302      	bcc.n	8004712 <I2C_IsAcknowledgeFailed+0x5e>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d113      	bne.n	800473a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	2220      	movs	r2, #32
 8004718:	431a      	orrs	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2241      	movs	r2, #65	; 0x41
 8004722:	2120      	movs	r1, #32
 8004724:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2242      	movs	r2, #66	; 0x42
 800472a:	2100      	movs	r1, #0
 800472c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2240      	movs	r2, #64	; 0x40
 8004732:	2100      	movs	r1, #0
 8004734:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e02f      	b.n	800479a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2220      	movs	r2, #32
 8004742:	4013      	ands	r3, r2
 8004744:	2b20      	cmp	r3, #32
 8004746:	d1d6      	bne.n	80046f6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2210      	movs	r2, #16
 800474e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2220      	movs	r2, #32
 8004756:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	0018      	movs	r0, r3
 800475c:	f7ff fe62 	bl	8004424 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	490e      	ldr	r1, [pc, #56]	; (80047a4 <I2C_IsAcknowledgeFailed+0xf0>)
 800476c:	400a      	ands	r2, r1
 800476e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	2204      	movs	r2, #4
 8004776:	431a      	orrs	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2241      	movs	r2, #65	; 0x41
 8004780:	2120      	movs	r1, #32
 8004782:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2242      	movs	r2, #66	; 0x42
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b004      	add	sp, #16
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	fe00e800 	.word	0xfe00e800

080047a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	0008      	movs	r0, r1
 80047b2:	0011      	movs	r1, r2
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	240a      	movs	r4, #10
 80047b8:	193b      	adds	r3, r7, r4
 80047ba:	1c02      	adds	r2, r0, #0
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	2009      	movs	r0, #9
 80047c0:	183b      	adds	r3, r7, r0
 80047c2:	1c0a      	adds	r2, r1, #0
 80047c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	0d51      	lsrs	r1, r2, #21
 80047d0:	2280      	movs	r2, #128	; 0x80
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	400a      	ands	r2, r1
 80047d6:	490e      	ldr	r1, [pc, #56]	; (8004810 <I2C_TransferConfig+0x68>)
 80047d8:	430a      	orrs	r2, r1
 80047da:	43d2      	mvns	r2, r2
 80047dc:	401a      	ands	r2, r3
 80047de:	0011      	movs	r1, r2
 80047e0:	193b      	adds	r3, r7, r4
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	059b      	lsls	r3, r3, #22
 80047e6:	0d9a      	lsrs	r2, r3, #22
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	0418      	lsls	r0, r3, #16
 80047ee:	23ff      	movs	r3, #255	; 0xff
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	4003      	ands	r3, r0
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	46bd      	mov	sp, r7
 800480a:	b005      	add	sp, #20
 800480c:	bd90      	pop	{r4, r7, pc}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	03ff63ff 	.word	0x03ff63ff

08004814 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2241      	movs	r2, #65	; 0x41
 8004822:	5c9b      	ldrb	r3, [r3, r2]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b20      	cmp	r3, #32
 8004828:	d138      	bne.n	800489c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	5c9b      	ldrb	r3, [r3, r2]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004834:	2302      	movs	r3, #2
 8004836:	e032      	b.n	800489e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2240      	movs	r2, #64	; 0x40
 800483c:	2101      	movs	r1, #1
 800483e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2241      	movs	r2, #65	; 0x41
 8004844:	2124      	movs	r1, #36	; 0x24
 8004846:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2101      	movs	r1, #1
 8004854:	438a      	bics	r2, r1
 8004856:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4911      	ldr	r1, [pc, #68]	; (80048a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004864:	400a      	ands	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6819      	ldr	r1, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2101      	movs	r1, #1
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2241      	movs	r2, #65	; 0x41
 800488c:	2120      	movs	r1, #32
 800488e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	2100      	movs	r1, #0
 8004896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	ffffefff 	.word	0xffffefff

080048ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2241      	movs	r2, #65	; 0x41
 80048ba:	5c9b      	ldrb	r3, [r3, r2]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d139      	bne.n	8004936 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2240      	movs	r2, #64	; 0x40
 80048c6:	5c9b      	ldrb	r3, [r3, r2]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e033      	b.n	8004938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2240      	movs	r2, #64	; 0x40
 80048d4:	2101      	movs	r1, #1
 80048d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2241      	movs	r2, #65	; 0x41
 80048dc:	2124      	movs	r1, #36	; 0x24
 80048de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	438a      	bics	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a11      	ldr	r2, [pc, #68]	; (8004940 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2101      	movs	r1, #1
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2241      	movs	r2, #65	; 0x41
 8004926:	2120      	movs	r1, #32
 8004928:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2240      	movs	r2, #64	; 0x40
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e000      	b.n	8004938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004936:	2302      	movs	r3, #2
  }
}
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	b004      	add	sp, #16
 800493e:	bd80      	pop	{r7, pc}
 8004940:	fffff0ff 	.word	0xfffff0ff

08004944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	4b17      	ldr	r3, [pc, #92]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d11f      	bne.n	80049a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	0013      	movs	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	189b      	adds	r3, r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4912      	ldr	r1, [pc, #72]	; (80049c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004976:	0018      	movs	r0, r3
 8004978:	f7fb fbe2 	bl	8000140 <__udivsi3>
 800497c:	0003      	movs	r3, r0
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004982:	e008      	b.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b01      	subs	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e001      	b.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e009      	b.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	401a      	ands	r2, r3
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0ed      	beq.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b004      	add	sp, #16
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	40007000 	.word	0x40007000
 80049b8:	fffff9ff 	.word	0xfffff9ff
 80049bc:	20000008 	.word	0x20000008
 80049c0:	000f4240 	.word	0x000f4240

080049c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	23e0      	movs	r3, #224	; 0xe0
 80049ce:	01db      	lsls	r3, r3, #7
 80049d0:	4013      	ands	r3, r2
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e304      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	4013      	ands	r3, r2
 80049f6:	d100      	bne.n	80049fa <HAL_RCC_OscConfig+0x1e>
 80049f8:	e07c      	b.n	8004af4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fa:	4bc3      	ldr	r3, [pc, #780]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2238      	movs	r2, #56	; 0x38
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a04:	4bc0      	ldr	r3, [pc, #768]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d102      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3e>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	4bb9      	ldr	r3, [pc, #740]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d062      	beq.n	8004af2 <HAL_RCC_OscConfig+0x116>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d15e      	bne.n	8004af2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e2df      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	025b      	lsls	r3, r3, #9
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_OscConfig+0x78>
 8004a44:	4bb0      	ldr	r3, [pc, #704]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4baf      	ldr	r3, [pc, #700]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	0249      	lsls	r1, r1, #9
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e020      	b.n	8004a96 <HAL_RCC_OscConfig+0xba>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	23a0      	movs	r3, #160	; 0xa0
 8004a5a:	02db      	lsls	r3, r3, #11
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d10e      	bne.n	8004a7e <HAL_RCC_OscConfig+0xa2>
 8004a60:	4ba9      	ldr	r3, [pc, #676]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4ba8      	ldr	r3, [pc, #672]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a66:	2180      	movs	r1, #128	; 0x80
 8004a68:	02c9      	lsls	r1, r1, #11
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	4ba6      	ldr	r3, [pc, #664]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4ba5      	ldr	r3, [pc, #660]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	0249      	lsls	r1, r1, #9
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e00b      	b.n	8004a96 <HAL_RCC_OscConfig+0xba>
 8004a7e:	4ba2      	ldr	r3, [pc, #648]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4ba1      	ldr	r3, [pc, #644]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a84:	49a1      	ldr	r1, [pc, #644]	; (8004d0c <HAL_RCC_OscConfig+0x330>)
 8004a86:	400a      	ands	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	4b9f      	ldr	r3, [pc, #636]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b9e      	ldr	r3, [pc, #632]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004a90:	499f      	ldr	r1, [pc, #636]	; (8004d10 <HAL_RCC_OscConfig+0x334>)
 8004a92:	400a      	ands	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d014      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fe fb27 	bl	80030f0 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fe fb22 	bl	80030f0 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e29e      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aba:	4b93      	ldr	r3, [pc, #588]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	029b      	lsls	r3, r3, #10
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xcc>
 8004ac6:	e015      	b.n	8004af4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe fb12 	bl	80030f0 <HAL_GetTick>
 8004acc:	0003      	movs	r3, r0
 8004ace:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad2:	f7fe fb0d 	bl	80030f0 <HAL_GetTick>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b64      	cmp	r3, #100	; 0x64
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e289      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae4:	4b88      	ldr	r3, [pc, #544]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	029b      	lsls	r3, r3, #10
 8004aec:	4013      	ands	r3, r2
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0xf6>
 8004af0:	e000      	b.n	8004af4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2202      	movs	r2, #2
 8004afa:	4013      	ands	r3, r2
 8004afc:	d100      	bne.n	8004b00 <HAL_RCC_OscConfig+0x124>
 8004afe:	e099      	b.n	8004c34 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b00:	4b81      	ldr	r3, [pc, #516]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2238      	movs	r2, #56	; 0x38
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b0a:	4b7f      	ldr	r3, [pc, #508]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	4013      	ands	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d102      	bne.n	8004b20 <HAL_RCC_OscConfig+0x144>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d002      	beq.n	8004b26 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d135      	bne.n	8004b92 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b26:	4b78      	ldr	r3, [pc, #480]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x162>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e25c      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b72      	ldr	r3, [pc, #456]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a74      	ldr	r2, [pc, #464]	; (8004d14 <HAL_RCC_OscConfig+0x338>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	0019      	movs	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	4b6e      	ldr	r3, [pc, #440]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d112      	bne.n	8004b80 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b5a:	4b6b      	ldr	r3, [pc, #428]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6e      	ldr	r2, [pc, #440]	; (8004d18 <HAL_RCC_OscConfig+0x33c>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	4b67      	ldr	r3, [pc, #412]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004b6e:	4b66      	ldr	r3, [pc, #408]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	0adb      	lsrs	r3, r3, #11
 8004b74:	2207      	movs	r2, #7
 8004b76:	4013      	ands	r3, r2
 8004b78:	4a68      	ldr	r2, [pc, #416]	; (8004d1c <HAL_RCC_OscConfig+0x340>)
 8004b7a:	40da      	lsrs	r2, r3
 8004b7c:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <HAL_RCC_OscConfig+0x344>)
 8004b7e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b80:	4b68      	ldr	r3, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x348>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fe fa57 	bl	8003038 <HAL_InitTick>
 8004b8a:	1e03      	subs	r3, r0, #0
 8004b8c:	d051      	beq.n	8004c32 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e232      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d030      	beq.n	8004bfc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004b9a:	4b5b      	ldr	r3, [pc, #364]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5e      	ldr	r2, [pc, #376]	; (8004d18 <HAL_RCC_OscConfig+0x33c>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	4b57      	ldr	r3, [pc, #348]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004baa:	430a      	orrs	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004bae:	4b56      	ldr	r3, [pc, #344]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b55      	ldr	r3, [pc, #340]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	0049      	lsls	r1, r1, #1
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fe fa98 	bl	80030f0 <HAL_GetTick>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fe fa93 	bl	80030f0 <HAL_GetTick>
 8004bca:	0002      	movs	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e20f      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4013      	ands	r3, r2
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a4a      	ldr	r2, [pc, #296]	; (8004d14 <HAL_RCC_OscConfig+0x338>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	4b44      	ldr	r3, [pc, #272]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	e01b      	b.n	8004c34 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004bfc:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c02:	4949      	ldr	r1, [pc, #292]	; (8004d28 <HAL_RCC_OscConfig+0x34c>)
 8004c04:	400a      	ands	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fe fa72 	bl	80030f0 <HAL_GetTick>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fe fa6d 	bl	80030f0 <HAL_GetTick>
 8004c16:	0002      	movs	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e1e9      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c24:	4b38      	ldr	r3, [pc, #224]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d1f0      	bne.n	8004c12 <HAL_RCC_OscConfig+0x236>
 8004c30:	e000      	b.n	8004c34 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2208      	movs	r2, #8
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d047      	beq.n	8004cce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c3e:	4b32      	ldr	r3, [pc, #200]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2238      	movs	r2, #56	; 0x38
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b18      	cmp	r3, #24
 8004c48:	d10a      	bne.n	8004c60 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4e:	2202      	movs	r2, #2
 8004c50:	4013      	ands	r3, r2
 8004c52:	d03c      	beq.n	8004cce <HAL_RCC_OscConfig+0x2f2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d138      	bne.n	8004cce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e1cb      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d019      	beq.n	8004c9c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c6c:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c6e:	2101      	movs	r1, #1
 8004c70:	430a      	orrs	r2, r1
 8004c72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fe fa3c 	bl	80030f0 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe fa37 	bl	80030f0 <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1b3      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c90:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c94:	2202      	movs	r2, #2
 8004c96:	4013      	ands	r3, r2
 8004c98:	d0f1      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2a2>
 8004c9a:	e018      	b.n	8004cce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004c9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	438a      	bics	r2, r1
 8004ca6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe fa22 	bl	80030f0 <HAL_GetTick>
 8004cac:	0003      	movs	r3, r0
 8004cae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb2:	f7fe fa1d 	bl	80030f0 <HAL_GetTick>
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e199      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cc4:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc8:	2202      	movs	r2, #2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d1f1      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d100      	bne.n	8004cda <HAL_RCC_OscConfig+0x2fe>
 8004cd8:	e0c6      	b.n	8004e68 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	231f      	movs	r3, #31
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2238      	movs	r2, #56	; 0x38
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d11e      	bne.n	8004d2c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_RCC_OscConfig+0x32c>)
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <HAL_RCC_OscConfig+0x31e>
 8004cf8:	e0b6      	b.n	8004e68 <HAL_RCC_OscConfig+0x48c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d000      	beq.n	8004d04 <HAL_RCC_OscConfig+0x328>
 8004d02:	e0b1      	b.n	8004e68 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e177      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	fffeffff 	.word	0xfffeffff
 8004d10:	fffbffff 	.word	0xfffbffff
 8004d14:	ffff80ff 	.word	0xffff80ff
 8004d18:	ffffc7ff 	.word	0xffffc7ff
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	20000008 	.word	0x20000008
 8004d24:	2000000c 	.word	0x2000000c
 8004d28:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d2c:	4bb4      	ldr	r3, [pc, #720]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	055b      	lsls	r3, r3, #21
 8004d34:	4013      	ands	r3, r2
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_OscConfig+0x360>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x362>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d011      	beq.n	8004d66 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	4baf      	ldr	r3, [pc, #700]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d46:	4bae      	ldr	r3, [pc, #696]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004d48:	2180      	movs	r1, #128	; 0x80
 8004d4a:	0549      	lsls	r1, r1, #21
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d50:	4bab      	ldr	r3, [pc, #684]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	055b      	lsls	r3, r3, #21
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004d5e:	231f      	movs	r3, #31
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4ba7      	ldr	r3, [pc, #668]	; (8005004 <HAL_RCC_OscConfig+0x628>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d11a      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d72:	4ba4      	ldr	r3, [pc, #656]	; (8005004 <HAL_RCC_OscConfig+0x628>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4ba3      	ldr	r3, [pc, #652]	; (8005004 <HAL_RCC_OscConfig+0x628>)
 8004d78:	2180      	movs	r1, #128	; 0x80
 8004d7a:	0049      	lsls	r1, r1, #1
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004d80:	f7fe f9b6 	bl	80030f0 <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8a:	f7fe f9b1 	bl	80030f0 <HAL_GetTick>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e12d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9c:	4b99      	ldr	r3, [pc, #612]	; (8005004 <HAL_RCC_OscConfig+0x628>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4013      	ands	r3, r2
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <HAL_RCC_OscConfig+0x3e2>
 8004db0:	4b93      	ldr	r3, [pc, #588]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004db4:	4b92      	ldr	r3, [pc, #584]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004db6:	2101      	movs	r1, #1
 8004db8:	430a      	orrs	r2, r1
 8004dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dbc:	e01c      	b.n	8004df8 <HAL_RCC_OscConfig+0x41c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x404>
 8004dc6:	4b8e      	ldr	r3, [pc, #568]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004dc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dca:	4b8d      	ldr	r3, [pc, #564]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004dcc:	2104      	movs	r1, #4
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dd2:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dd6:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004dd8:	2101      	movs	r1, #1
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0x41c>
 8004de0:	4b87      	ldr	r3, [pc, #540]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004de2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004de4:	4b86      	ldr	r3, [pc, #536]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004de6:	2101      	movs	r1, #1
 8004de8:	438a      	bics	r2, r1
 8004dea:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dec:	4b84      	ldr	r3, [pc, #528]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004dee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004df0:	4b83      	ldr	r3, [pc, #524]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004df2:	2104      	movs	r1, #4
 8004df4:	438a      	bics	r2, r1
 8004df6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d014      	beq.n	8004e2a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fe f976 	bl	80030f0 <HAL_GetTick>
 8004e04:	0003      	movs	r3, r0
 8004e06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e08:	e009      	b.n	8004e1e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fe f971 	bl	80030f0 <HAL_GetTick>
 8004e0e:	0002      	movs	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	4a7c      	ldr	r2, [pc, #496]	; (8005008 <HAL_RCC_OscConfig+0x62c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e0ec      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e1e:	4b78      	ldr	r3, [pc, #480]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e22:	2202      	movs	r2, #2
 8004e24:	4013      	ands	r3, r2
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x42e>
 8004e28:	e013      	b.n	8004e52 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fe f961 	bl	80030f0 <HAL_GetTick>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e32:	e009      	b.n	8004e48 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fe f95c 	bl	80030f0 <HAL_GetTick>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	4a72      	ldr	r2, [pc, #456]	; (8005008 <HAL_RCC_OscConfig+0x62c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e0d7      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e48:	4b6d      	ldr	r3, [pc, #436]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e52:	231f      	movs	r3, #31
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d105      	bne.n	8004e68 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e5c:	4b68      	ldr	r3, [pc, #416]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e60:	4b67      	ldr	r3, [pc, #412]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004e62:	496a      	ldr	r1, [pc, #424]	; (800500c <HAL_RCC_OscConfig+0x630>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d100      	bne.n	8004e72 <HAL_RCC_OscConfig+0x496>
 8004e70:	e0c1      	b.n	8004ff6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e72:	4b63      	ldr	r3, [pc, #396]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2238      	movs	r2, #56	; 0x38
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d100      	bne.n	8004e80 <HAL_RCC_OscConfig+0x4a4>
 8004e7e:	e081      	b.n	8004f84 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d156      	bne.n	8004f36 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e88:	4b5d      	ldr	r3, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4b5c      	ldr	r3, [pc, #368]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004e8e:	4960      	ldr	r1, [pc, #384]	; (8005010 <HAL_RCC_OscConfig+0x634>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fe f92c 	bl	80030f0 <HAL_GetTick>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fe f927 	bl	80030f0 <HAL_GetTick>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0a3      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb0:	4b53      	ldr	r3, [pc, #332]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	049b      	lsls	r3, r3, #18
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebc:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a54      	ldr	r2, [pc, #336]	; (8005014 <HAL_RCC_OscConfig+0x638>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	4b45      	ldr	r3, [pc, #276]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004eec:	430a      	orrs	r2, r1
 8004eee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b43      	ldr	r3, [pc, #268]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b42      	ldr	r3, [pc, #264]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	0449      	lsls	r1, r1, #17
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	4b3f      	ldr	r3, [pc, #252]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	0549      	lsls	r1, r1, #21
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fe f8f0 	bl	80030f0 <HAL_GetTick>
 8004f10:	0003      	movs	r3, r0
 8004f12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fe f8eb 	bl	80030f0 <HAL_GetTick>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e067      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f28:	4b35      	ldr	r3, [pc, #212]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	049b      	lsls	r3, r3, #18
 8004f30:	4013      	ands	r3, r2
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x53a>
 8004f34:	e05f      	b.n	8004ff6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b32      	ldr	r3, [pc, #200]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b31      	ldr	r3, [pc, #196]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f3c:	4934      	ldr	r1, [pc, #208]	; (8005010 <HAL_RCC_OscConfig+0x634>)
 8004f3e:	400a      	ands	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004f42:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f48:	2103      	movs	r1, #3
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f4e:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f54:	4930      	ldr	r1, [pc, #192]	; (8005018 <HAL_RCC_OscConfig+0x63c>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fe f8c9 	bl	80030f0 <HAL_GetTick>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f64:	f7fe f8c4 	bl	80030f0 <HAL_GetTick>
 8004f68:	0002      	movs	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e040      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	049b      	lsls	r3, r3, #18
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x588>
 8004f82:	e038      	b.n	8004ff6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e033      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x624>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d126      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2270      	movs	r2, #112	; 0x70
 8004fa8:	401a      	ands	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d11f      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	23fe      	movs	r3, #254	; 0xfe
 8004fb6:	01db      	lsls	r3, r3, #7
 8004fb8:	401a      	ands	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d116      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	23f8      	movs	r3, #248	; 0xf8
 8004fc8:	039b      	lsls	r3, r3, #14
 8004fca:	401a      	ands	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d10e      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	23e0      	movs	r3, #224	; 0xe0
 8004fd8:	051b      	lsls	r3, r3, #20
 8004fda:	401a      	ands	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d106      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	0f5b      	lsrs	r3, r3, #29
 8004fe8:	075a      	lsls	r2, r3, #29
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b008      	add	sp, #32
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	40007000 	.word	0x40007000
 8005008:	00001388 	.word	0x00001388
 800500c:	efffffff 	.word	0xefffffff
 8005010:	feffffff 	.word	0xfeffffff
 8005014:	11c1808c 	.word	0x11c1808c
 8005018:	eefeffff 	.word	0xeefeffff

0800501c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0e9      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005030:	4b76      	ldr	r3, [pc, #472]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2207      	movs	r2, #7
 8005036:	4013      	ands	r3, r2
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d91e      	bls.n	800507c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b73      	ldr	r3, [pc, #460]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2207      	movs	r2, #7
 8005044:	4393      	bics	r3, r2
 8005046:	0019      	movs	r1, r3
 8005048:	4b70      	ldr	r3, [pc, #448]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005050:	f7fe f84e 	bl	80030f0 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005058:	e009      	b.n	800506e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505a:	f7fe f849 	bl	80030f0 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	4a6a      	ldr	r2, [pc, #424]	; (8005210 <HAL_RCC_ClockConfig+0x1f4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e0ca      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800506e:	4b67      	ldr	r3, [pc, #412]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2207      	movs	r2, #7
 8005074:	4013      	ands	r3, r2
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d1ee      	bne.n	800505a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2202      	movs	r2, #2
 8005082:	4013      	ands	r3, r2
 8005084:	d015      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2204      	movs	r2, #4
 800508c:	4013      	ands	r3, r2
 800508e:	d006      	beq.n	800509e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005090:	4b60      	ldr	r3, [pc, #384]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	4b5f      	ldr	r3, [pc, #380]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 8005096:	21e0      	movs	r1, #224	; 0xe0
 8005098:	01c9      	lsls	r1, r1, #7
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509e:	4b5d      	ldr	r3, [pc, #372]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_RCC_ClockConfig+0x1fc>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2201      	movs	r2, #1
 80050b8:	4013      	ands	r3, r2
 80050ba:	d057      	beq.n	800516c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c4:	4b53      	ldr	r3, [pc, #332]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	4013      	ands	r3, r2
 80050ce:	d12b      	bne.n	8005128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e097      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d107      	bne.n	80050ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050dc:	4b4d      	ldr	r3, [pc, #308]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	049b      	lsls	r3, r3, #18
 80050e4:	4013      	ands	r3, r2
 80050e6:	d11f      	bne.n	8005128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e08b      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d107      	bne.n	8005104 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f4:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4013      	ands	r3, r2
 80050fe:	d113      	bne.n	8005128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e07f      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d106      	bne.n	800511a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800510c:	4b41      	ldr	r3, [pc, #260]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 800510e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005110:	2202      	movs	r2, #2
 8005112:	4013      	ands	r3, r2
 8005114:	d108      	bne.n	8005128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e074      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511a:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 800511c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511e:	2202      	movs	r2, #2
 8005120:	4013      	ands	r3, r2
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e06d      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005128:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2207      	movs	r2, #7
 800512e:	4393      	bics	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4b37      	ldr	r3, [pc, #220]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 8005138:	430a      	orrs	r2, r1
 800513a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513c:	f7fd ffd8 	bl	80030f0 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005144:	e009      	b.n	800515a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005146:	f7fd ffd3 	bl	80030f0 <HAL_GetTick>
 800514a:	0002      	movs	r2, r0
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <HAL_RCC_ClockConfig+0x1f4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e054      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2238      	movs	r2, #56	; 0x38
 8005160:	401a      	ands	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	429a      	cmp	r2, r3
 800516a:	d1ec      	bne.n	8005146 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800516c:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2207      	movs	r2, #7
 8005172:	4013      	ands	r3, r2
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d21e      	bcs.n	80051b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2207      	movs	r2, #7
 8005180:	4393      	bics	r3, r2
 8005182:	0019      	movs	r1, r3
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800518c:	f7fd ffb0 	bl	80030f0 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005194:	e009      	b.n	80051aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005196:	f7fd ffab 	bl	80030f0 <HAL_GetTick>
 800519a:	0002      	movs	r2, r0
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_RCC_ClockConfig+0x1f4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e02c      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051aa:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2207      	movs	r2, #7
 80051b0:	4013      	ands	r3, r2
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d1ee      	bne.n	8005196 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2204      	movs	r2, #4
 80051be:	4013      	ands	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	4a15      	ldr	r2, [pc, #84]	; (800521c <HAL_RCC_ClockConfig+0x200>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80051d6:	f000 f829 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80051da:	0001      	movs	r1, r0
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	0a1b      	lsrs	r3, r3, #8
 80051e2:	220f      	movs	r2, #15
 80051e4:	401a      	ands	r2, r3
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <HAL_RCC_ClockConfig+0x204>)
 80051e8:	0092      	lsls	r2, r2, #2
 80051ea:	58d3      	ldr	r3, [r2, r3]
 80051ec:	221f      	movs	r2, #31
 80051ee:	4013      	ands	r3, r2
 80051f0:	000a      	movs	r2, r1
 80051f2:	40da      	lsrs	r2, r3
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_ClockConfig+0x208>)
 80051f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_ClockConfig+0x20c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f7fd ff1b 	bl	8003038 <HAL_InitTick>
 8005202:	0003      	movs	r3, r0
}
 8005204:	0018      	movs	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	b004      	add	sp, #16
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40022000 	.word	0x40022000
 8005210:	00001388 	.word	0x00001388
 8005214:	40021000 	.word	0x40021000
 8005218:	fffff0ff 	.word	0xfffff0ff
 800521c:	ffff8fff 	.word	0xffff8fff
 8005220:	0800b8c0 	.word	0x0800b8c0
 8005224:	20000008 	.word	0x20000008
 8005228:	2000000c 	.word	0x2000000c

0800522c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005232:	4b3c      	ldr	r3, [pc, #240]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2238      	movs	r2, #56	; 0x38
 8005238:	4013      	ands	r3, r2
 800523a:	d10f      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800523c:	4b39      	ldr	r3, [pc, #228]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0adb      	lsrs	r3, r3, #11
 8005242:	2207      	movs	r2, #7
 8005244:	4013      	ands	r3, r2
 8005246:	2201      	movs	r2, #1
 8005248:	409a      	lsls	r2, r3
 800524a:	0013      	movs	r3, r2
 800524c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	4835      	ldr	r0, [pc, #212]	; (8005328 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005252:	f7fa ff75 	bl	8000140 <__udivsi3>
 8005256:	0003      	movs	r3, r0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e05d      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800525c:	4b31      	ldr	r3, [pc, #196]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2238      	movs	r2, #56	; 0x38
 8005262:	4013      	ands	r3, r2
 8005264:	2b08      	cmp	r3, #8
 8005266:	d102      	bne.n	800526e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005268:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCC_GetSysClockFreq+0x100>)
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	e054      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800526e:	4b2d      	ldr	r3, [pc, #180]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2238      	movs	r2, #56	; 0x38
 8005274:	4013      	ands	r3, r2
 8005276:	2b10      	cmp	r3, #16
 8005278:	d138      	bne.n	80052ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800527a:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2203      	movs	r2, #3
 8005280:	4013      	ands	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005284:	4b27      	ldr	r3, [pc, #156]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	091b      	lsrs	r3, r3, #4
 800528a:	2207      	movs	r2, #7
 800528c:	4013      	ands	r3, r2
 800528e:	3301      	adds	r3, #1
 8005290:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d10d      	bne.n	80052b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	4824      	ldr	r0, [pc, #144]	; (800532c <HAL_RCC_GetSysClockFreq+0x100>)
 800529c:	f7fa ff50 	bl	8000140 <__udivsi3>
 80052a0:	0003      	movs	r3, r0
 80052a2:	0019      	movs	r1, r3
 80052a4:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	227f      	movs	r2, #127	; 0x7f
 80052ac:	4013      	ands	r3, r2
 80052ae:	434b      	muls	r3, r1
 80052b0:	617b      	str	r3, [r7, #20]
        break;
 80052b2:	e00d      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	481c      	ldr	r0, [pc, #112]	; (8005328 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052b8:	f7fa ff42 	bl	8000140 <__udivsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	0019      	movs	r1, r3
 80052c0:	4b18      	ldr	r3, [pc, #96]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	227f      	movs	r2, #127	; 0x7f
 80052c8:	4013      	ands	r3, r2
 80052ca:	434b      	muls	r3, r1
 80052cc:	617b      	str	r3, [r7, #20]
        break;
 80052ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	0f5b      	lsrs	r3, r3, #29
 80052d6:	2207      	movs	r2, #7
 80052d8:	4013      	ands	r3, r2
 80052da:	3301      	adds	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7fa ff2d 	bl	8000140 <__udivsi3>
 80052e6:	0003      	movs	r3, r0
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	e015      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80052ec:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2238      	movs	r2, #56	; 0x38
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d103      	bne.n	8005300 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005300:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2238      	movs	r2, #56	; 0x38
 8005306:	4013      	ands	r3, r2
 8005308:	2b18      	cmp	r3, #24
 800530a:	d103      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800530c:	23fa      	movs	r3, #250	; 0xfa
 800530e:	01db      	lsls	r3, r3, #7
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	e001      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005318:	693b      	ldr	r3, [r7, #16]
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b006      	add	sp, #24
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	40021000 	.word	0x40021000
 8005328:	00f42400 	.word	0x00f42400
 800532c:	007a1200 	.word	0x007a1200

08005330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b02      	ldr	r3, [pc, #8]	; (8005340 <HAL_RCC_GetHCLKFreq+0x10>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	20000008 	.word	0x20000008

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b5b0      	push	{r4, r5, r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005348:	f7ff fff2 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800534c:	0004      	movs	r4, r0
 800534e:	f7ff fb39 	bl	80049c4 <LL_RCC_GetAPB1Prescaler>
 8005352:	0003      	movs	r3, r0
 8005354:	0b1a      	lsrs	r2, r3, #12
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005358:	0092      	lsls	r2, r2, #2
 800535a:	58d3      	ldr	r3, [r2, r3]
 800535c:	221f      	movs	r2, #31
 800535e:	4013      	ands	r3, r2
 8005360:	40dc      	lsrs	r4, r3
 8005362:	0023      	movs	r3, r4
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	bdb0      	pop	{r4, r5, r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	0800b900 	.word	0x0800b900

08005370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005378:	2313      	movs	r3, #19
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005380:	2312      	movs	r3, #18
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	029b      	lsls	r3, r3, #10
 8005390:	4013      	ands	r3, r2
 8005392:	d100      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005394:	e0a3      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005396:	2011      	movs	r0, #17
 8005398:	183b      	adds	r3, r7, r0
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539e:	4bc3      	ldr	r3, [pc, #780]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	055b      	lsls	r3, r3, #21
 80053a6:	4013      	ands	r3, r2
 80053a8:	d110      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053aa:	4bc0      	ldr	r3, [pc, #768]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ae:	4bbf      	ldr	r3, [pc, #764]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	0549      	lsls	r1, r1, #21
 80053b4:	430a      	orrs	r2, r1
 80053b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80053b8:	4bbc      	ldr	r3, [pc, #752]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	055b      	lsls	r3, r3, #21
 80053c0:	4013      	ands	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c6:	183b      	adds	r3, r7, r0
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053cc:	4bb8      	ldr	r3, [pc, #736]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4bb7      	ldr	r3, [pc, #732]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	0049      	lsls	r1, r1, #1
 80053d6:	430a      	orrs	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053da:	f7fd fe89 	bl	80030f0 <HAL_GetTick>
 80053de:	0003      	movs	r3, r0
 80053e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e2:	e00b      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e4:	f7fd fe84 	bl	80030f0 <HAL_GetTick>
 80053e8:	0002      	movs	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d904      	bls.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80053f2:	2313      	movs	r3, #19
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	2203      	movs	r2, #3
 80053f8:	701a      	strb	r2, [r3, #0]
        break;
 80053fa:	e005      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053fc:	4bac      	ldr	r3, [pc, #688]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4013      	ands	r3, r2
 8005406:	d0ed      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005408:	2313      	movs	r3, #19
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d154      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005412:	4ba6      	ldr	r3, [pc, #664]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005416:	23c0      	movs	r3, #192	; 0xc0
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4013      	ands	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d019      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	429a      	cmp	r2, r3
 800542c:	d014      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800542e:	4b9f      	ldr	r3, [pc, #636]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005432:	4aa0      	ldr	r2, [pc, #640]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005434:	4013      	ands	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005438:	4b9c      	ldr	r3, [pc, #624]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800543a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800543c:	4b9b      	ldr	r3, [pc, #620]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800543e:	2180      	movs	r1, #128	; 0x80
 8005440:	0249      	lsls	r1, r1, #9
 8005442:	430a      	orrs	r2, r1
 8005444:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005446:	4b99      	ldr	r3, [pc, #612]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800544a:	4b98      	ldr	r3, [pc, #608]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800544c:	499a      	ldr	r1, [pc, #616]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800544e:	400a      	ands	r2, r1
 8005450:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005452:	4b96      	ldr	r3, [pc, #600]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2201      	movs	r2, #1
 800545c:	4013      	ands	r3, r2
 800545e:	d016      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fd fe46 	bl	80030f0 <HAL_GetTick>
 8005464:	0003      	movs	r3, r0
 8005466:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005468:	e00c      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fd fe41 	bl	80030f0 <HAL_GetTick>
 800546e:	0002      	movs	r2, r0
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	4a91      	ldr	r2, [pc, #580]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d904      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800547a:	2313      	movs	r3, #19
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	2203      	movs	r2, #3
 8005480:	701a      	strb	r2, [r3, #0]
            break;
 8005482:	e004      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005484:	4b89      	ldr	r3, [pc, #548]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005488:	2202      	movs	r2, #2
 800548a:	4013      	ands	r3, r2
 800548c:	d0ed      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800548e:	2313      	movs	r3, #19
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005498:	4b84      	ldr	r3, [pc, #528]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549c:	4a85      	ldr	r2, [pc, #532]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800549e:	4013      	ands	r3, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a6:	4b81      	ldr	r3, [pc, #516]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054a8:	430a      	orrs	r2, r1
 80054aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80054ac:	e00c      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ae:	2312      	movs	r3, #18
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	2213      	movs	r2, #19
 80054b4:	18ba      	adds	r2, r7, r2
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e005      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	2312      	movs	r3, #18
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	2213      	movs	r2, #19
 80054c2:	18ba      	adds	r2, r7, r2
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054c8:	2311      	movs	r3, #17
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d105      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d2:	4b76      	ldr	r3, [pc, #472]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d6:	4b75      	ldr	r3, [pc, #468]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d8:	4979      	ldr	r1, [pc, #484]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80054da:	400a      	ands	r2, r1
 80054dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	4013      	ands	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054e8:	4b70      	ldr	r3, [pc, #448]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	2203      	movs	r2, #3
 80054ee:	4393      	bics	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	4b6d      	ldr	r3, [pc, #436]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054f8:	430a      	orrs	r2, r1
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2202      	movs	r2, #2
 8005502:	4013      	ands	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005506:	4b69      	ldr	r3, [pc, #420]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550a:	220c      	movs	r2, #12
 800550c:	4393      	bics	r3, r2
 800550e:	0019      	movs	r1, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	4b65      	ldr	r3, [pc, #404]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005516:	430a      	orrs	r2, r1
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2210      	movs	r2, #16
 8005520:	4013      	ands	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005524:	4b61      	ldr	r3, [pc, #388]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	4a66      	ldr	r2, [pc, #408]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800552a:	4013      	ands	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4b5e      	ldr	r3, [pc, #376]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005534:	430a      	orrs	r2, r1
 8005536:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4013      	ands	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005544:	4b59      	ldr	r3, [pc, #356]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	4a5f      	ldr	r2, [pc, #380]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	4b56      	ldr	r3, [pc, #344]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005554:	430a      	orrs	r2, r1
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4013      	ands	r3, r2
 8005562:	d009      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005564:	4b51      	ldr	r3, [pc, #324]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	4a58      	ldr	r2, [pc, #352]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	4b4e      	ldr	r3, [pc, #312]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005574:	430a      	orrs	r2, r1
 8005576:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2220      	movs	r2, #32
 800557e:	4013      	ands	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005582:	4b4a      	ldr	r3, [pc, #296]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	4a52      	ldr	r2, [pc, #328]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005588:	4013      	ands	r3, r2
 800558a:	0019      	movs	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	4b46      	ldr	r3, [pc, #280]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005592:	430a      	orrs	r2, r1
 8005594:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	01db      	lsls	r3, r3, #7
 800559e:	4013      	ands	r3, r2
 80055a0:	d015      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a2:	4b42      	ldr	r3, [pc, #264]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	0899      	lsrs	r1, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	4b3f      	ldr	r3, [pc, #252]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055b0:	430a      	orrs	r2, r1
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	05db      	lsls	r3, r3, #23
 80055bc:	429a      	cmp	r2, r3
 80055be:	d106      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055c0:	4b3a      	ldr	r3, [pc, #232]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	0249      	lsls	r1, r1, #9
 80055ca:	430a      	orrs	r2, r1
 80055cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	031b      	lsls	r3, r3, #12
 80055d6:	4013      	ands	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055da:	4b34      	ldr	r3, [pc, #208]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055de:	2240      	movs	r2, #64	; 0x40
 80055e0:	4393      	bics	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055e8:	4b30      	ldr	r3, [pc, #192]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055ea:	430a      	orrs	r2, r1
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	039b      	lsls	r3, r3, #14
 80055f6:	4013      	ands	r3, r2
 80055f8:	d016      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055fa:	4b2c      	ldr	r3, [pc, #176]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	4a35      	ldr	r2, [pc, #212]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005600:	4013      	ands	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005608:	4b28      	ldr	r3, [pc, #160]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800560a:	430a      	orrs	r2, r1
 800560c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	03db      	lsls	r3, r3, #15
 8005616:	429a      	cmp	r2, r3
 8005618:	d106      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	4b23      	ldr	r3, [pc, #140]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	0449      	lsls	r1, r1, #17
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	03db      	lsls	r3, r3, #15
 8005630:	4013      	ands	r3, r2
 8005632:	d016      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005634:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005642:	4b1a      	ldr	r3, [pc, #104]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005644:	430a      	orrs	r2, r1
 8005646:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	045b      	lsls	r3, r3, #17
 8005650:	429a      	cmp	r2, r3
 8005652:	d106      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005654:	4b15      	ldr	r3, [pc, #84]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	4b14      	ldr	r3, [pc, #80]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	0449      	lsls	r1, r1, #17
 800565e:	430a      	orrs	r2, r1
 8005660:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	4013      	ands	r3, r2
 800566c:	d016      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005674:	4013      	ands	r3, r2
 8005676:	0019      	movs	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800567e:	430a      	orrs	r2, r1
 8005680:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	01db      	lsls	r3, r3, #7
 800568a:	429a      	cmp	r2, r3
 800568c:	d106      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800568e:	4b07      	ldr	r3, [pc, #28]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005694:	2180      	movs	r1, #128	; 0x80
 8005696:	0249      	lsls	r1, r1, #9
 8005698:	430a      	orrs	r2, r1
 800569a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800569c:	2312      	movs	r3, #18
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	781b      	ldrb	r3, [r3, #0]
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b006      	add	sp, #24
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40007000 	.word	0x40007000
 80056b4:	fffffcff 	.word	0xfffffcff
 80056b8:	fffeffff 	.word	0xfffeffff
 80056bc:	00001388 	.word	0x00001388
 80056c0:	efffffff 	.word	0xefffffff
 80056c4:	fffff3ff 	.word	0xfffff3ff
 80056c8:	fff3ffff 	.word	0xfff3ffff
 80056cc:	ffcfffff 	.word	0xffcfffff
 80056d0:	ffffcfff 	.word	0xffffcfff
 80056d4:	ffbfffff 	.word	0xffbfffff
 80056d8:	feffffff 	.word	0xfeffffff
 80056dc:	ffff3fff 	.word	0xffff3fff

080056e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e046      	b.n	8005780 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2284      	movs	r2, #132	; 0x84
 80056f6:	589b      	ldr	r3, [r3, r2]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2280      	movs	r2, #128	; 0x80
 8005700:	2100      	movs	r1, #0
 8005702:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	0018      	movs	r0, r3
 8005708:	f7fd fb12 	bl	8002d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2284      	movs	r2, #132	; 0x84
 8005710:	2124      	movs	r1, #36	; 0x24
 8005712:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2101      	movs	r1, #1
 8005720:	438a      	bics	r2, r1
 8005722:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f000 f8dc 	bl	80058e4 <UART_SetConfig>
 800572c:	0003      	movs	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e024      	b.n	8005780 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	0018      	movs	r0, r3
 8005742:	f000 fbad 	bl	8005ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	490d      	ldr	r1, [pc, #52]	; (8005788 <HAL_UART_Init+0xa8>)
 8005752:	400a      	ands	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	212a      	movs	r1, #42	; 0x2a
 8005762:	438a      	bics	r2, r1
 8005764:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2101      	movs	r1, #1
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	0018      	movs	r0, r3
 800577a:	f000 fc45 	bl	8006008 <UART_CheckIdleState>
 800577e:	0003      	movs	r3, r0
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b002      	add	sp, #8
 8005786:	bd80      	pop	{r7, pc}
 8005788:	ffffb7ff 	.word	0xffffb7ff

0800578c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2284      	movs	r2, #132	; 0x84
 80057a0:	589b      	ldr	r3, [r3, r2]
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d000      	beq.n	80057a8 <HAL_UART_Transmit+0x1c>
 80057a6:	e097      	b.n	80058d8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_UART_Transmit+0x2a>
 80057ae:	1dbb      	adds	r3, r7, #6
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e08f      	b.n	80058da <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	015b      	lsls	r3, r3, #5
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d109      	bne.n	80057da <HAL_UART_Transmit+0x4e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2201      	movs	r2, #1
 80057d2:	4013      	ands	r3, r2
 80057d4:	d001      	beq.n	80057da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e07f      	b.n	80058da <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2280      	movs	r2, #128	; 0x80
 80057de:	5c9b      	ldrb	r3, [r3, r2]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Transmit+0x5c>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e078      	b.n	80058da <HAL_UART_Transmit+0x14e>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	2101      	movs	r1, #1
 80057ee:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	228c      	movs	r2, #140	; 0x8c
 80057f4:	2100      	movs	r1, #0
 80057f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2284      	movs	r2, #132	; 0x84
 80057fc:	2121      	movs	r1, #33	; 0x21
 80057fe:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005800:	f7fd fc76 	bl	80030f0 <HAL_GetTick>
 8005804:	0003      	movs	r3, r0
 8005806:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1dba      	adds	r2, r7, #6
 800580c:	2154      	movs	r1, #84	; 0x54
 800580e:	8812      	ldrh	r2, [r2, #0]
 8005810:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1dba      	adds	r2, r7, #6
 8005816:	2156      	movs	r1, #86	; 0x56
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	015b      	lsls	r3, r3, #5
 8005824:	429a      	cmp	r2, r3
 8005826:	d108      	bne.n	800583a <HAL_UART_Transmit+0xae>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	e003      	b.n	8005842 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	2100      	movs	r1, #0
 8005848:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800584a:	e02c      	b.n	80058a6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	0013      	movs	r3, r2
 8005856:	2200      	movs	r2, #0
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	f000 fc1f 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 800585e:	1e03      	subs	r3, r0, #0
 8005860:	d001      	beq.n	8005866 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e039      	b.n	80058da <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	001a      	movs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	05d2      	lsls	r2, r2, #23
 8005878:	0dd2      	lsrs	r2, r2, #23
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	3302      	adds	r3, #2
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e007      	b.n	8005894 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	781a      	ldrb	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2256      	movs	r2, #86	; 0x56
 8005898:	5a9b      	ldrh	r3, [r3, r2]
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b299      	uxth	r1, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2256      	movs	r2, #86	; 0x56
 80058a4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2256      	movs	r2, #86	; 0x56
 80058aa:	5a9b      	ldrh	r3, [r3, r2]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1cc      	bne.n	800584c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	0013      	movs	r3, r2
 80058bc:	2200      	movs	r2, #0
 80058be:	2140      	movs	r1, #64	; 0x40
 80058c0:	f000 fbec 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 80058c4:	1e03      	subs	r3, r0, #0
 80058c6:	d001      	beq.n	80058cc <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e006      	b.n	80058da <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2284      	movs	r2, #132	; 0x84
 80058d0:	2120      	movs	r1, #32
 80058d2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e000      	b.n	80058da <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
  }
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b008      	add	sp, #32
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e4:	b5b0      	push	{r4, r5, r7, lr}
 80058e6:	b090      	sub	sp, #64	; 0x40
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ec:	231a      	movs	r3, #26
 80058ee:	2220      	movs	r2, #32
 80058f0:	4694      	mov	ip, r2
 80058f2:	44bc      	add	ip, r7
 80058f4:	4463      	add	r3, ip
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	431a      	orrs	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	4313      	orrs	r3, r2
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4ab9      	ldr	r2, [pc, #740]	; (8005c00 <UART_SetConfig+0x31c>)
 800591a:	4013      	ands	r3, r2
 800591c:	0019      	movs	r1, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	430b      	orrs	r3, r1
 8005926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4ab5      	ldr	r2, [pc, #724]	; (8005c04 <UART_SetConfig+0x320>)
 8005930:	4013      	ands	r3, r2
 8005932:	0018      	movs	r0, r3
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	68d9      	ldr	r1, [r3, #12]
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	0003      	movs	r3, r0
 800593e:	430b      	orrs	r3, r1
 8005940:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4aae      	ldr	r2, [pc, #696]	; (8005c08 <UART_SetConfig+0x324>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005958:	4313      	orrs	r3, r2
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	4aaa      	ldr	r2, [pc, #680]	; (8005c0c <UART_SetConfig+0x328>)
 8005964:	4013      	ands	r3, r2
 8005966:	0019      	movs	r1, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	430b      	orrs	r3, r1
 8005970:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	220f      	movs	r2, #15
 800597a:	4393      	bics	r3, r2
 800597c:	0018      	movs	r0, r3
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	0003      	movs	r3, r0
 8005988:	430b      	orrs	r3, r1
 800598a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a9f      	ldr	r2, [pc, #636]	; (8005c10 <UART_SetConfig+0x32c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d136      	bne.n	8005a04 <UART_SetConfig+0x120>
 8005996:	4b9f      	ldr	r3, [pc, #636]	; (8005c14 <UART_SetConfig+0x330>)
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	2203      	movs	r2, #3
 800599c:	4013      	ands	r3, r2
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d020      	beq.n	80059e4 <UART_SetConfig+0x100>
 80059a2:	d827      	bhi.n	80059f4 <UART_SetConfig+0x110>
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d00d      	beq.n	80059c4 <UART_SetConfig+0xe0>
 80059a8:	d824      	bhi.n	80059f4 <UART_SetConfig+0x110>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <UART_SetConfig+0xd0>
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d010      	beq.n	80059d4 <UART_SetConfig+0xf0>
 80059b2:	e01f      	b.n	80059f4 <UART_SetConfig+0x110>
 80059b4:	231b      	movs	r3, #27
 80059b6:	2220      	movs	r2, #32
 80059b8:	4694      	mov	ip, r2
 80059ba:	44bc      	add	ip, r7
 80059bc:	4463      	add	r3, ip
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	e0c5      	b.n	8005b50 <UART_SetConfig+0x26c>
 80059c4:	231b      	movs	r3, #27
 80059c6:	2220      	movs	r2, #32
 80059c8:	4694      	mov	ip, r2
 80059ca:	44bc      	add	ip, r7
 80059cc:	4463      	add	r3, ip
 80059ce:	2202      	movs	r2, #2
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e0bd      	b.n	8005b50 <UART_SetConfig+0x26c>
 80059d4:	231b      	movs	r3, #27
 80059d6:	2220      	movs	r2, #32
 80059d8:	4694      	mov	ip, r2
 80059da:	44bc      	add	ip, r7
 80059dc:	4463      	add	r3, ip
 80059de:	2204      	movs	r2, #4
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e0b5      	b.n	8005b50 <UART_SetConfig+0x26c>
 80059e4:	231b      	movs	r3, #27
 80059e6:	2220      	movs	r2, #32
 80059e8:	4694      	mov	ip, r2
 80059ea:	44bc      	add	ip, r7
 80059ec:	4463      	add	r3, ip
 80059ee:	2208      	movs	r2, #8
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	e0ad      	b.n	8005b50 <UART_SetConfig+0x26c>
 80059f4:	231b      	movs	r3, #27
 80059f6:	2220      	movs	r2, #32
 80059f8:	4694      	mov	ip, r2
 80059fa:	44bc      	add	ip, r7
 80059fc:	4463      	add	r3, ip
 80059fe:	2210      	movs	r2, #16
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e0a5      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a83      	ldr	r2, [pc, #524]	; (8005c18 <UART_SetConfig+0x334>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d136      	bne.n	8005a7c <UART_SetConfig+0x198>
 8005a0e:	4b81      	ldr	r3, [pc, #516]	; (8005c14 <UART_SetConfig+0x330>)
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	220c      	movs	r2, #12
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d020      	beq.n	8005a5c <UART_SetConfig+0x178>
 8005a1a:	d827      	bhi.n	8005a6c <UART_SetConfig+0x188>
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d00d      	beq.n	8005a3c <UART_SetConfig+0x158>
 8005a20:	d824      	bhi.n	8005a6c <UART_SetConfig+0x188>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <UART_SetConfig+0x148>
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d010      	beq.n	8005a4c <UART_SetConfig+0x168>
 8005a2a:	e01f      	b.n	8005a6c <UART_SetConfig+0x188>
 8005a2c:	231b      	movs	r3, #27
 8005a2e:	2220      	movs	r2, #32
 8005a30:	4694      	mov	ip, r2
 8005a32:	44bc      	add	ip, r7
 8005a34:	4463      	add	r3, ip
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e089      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005a3c:	231b      	movs	r3, #27
 8005a3e:	2220      	movs	r2, #32
 8005a40:	4694      	mov	ip, r2
 8005a42:	44bc      	add	ip, r7
 8005a44:	4463      	add	r3, ip
 8005a46:	2202      	movs	r2, #2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e081      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005a4c:	231b      	movs	r3, #27
 8005a4e:	2220      	movs	r2, #32
 8005a50:	4694      	mov	ip, r2
 8005a52:	44bc      	add	ip, r7
 8005a54:	4463      	add	r3, ip
 8005a56:	2204      	movs	r2, #4
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	e079      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005a5c:	231b      	movs	r3, #27
 8005a5e:	2220      	movs	r2, #32
 8005a60:	4694      	mov	ip, r2
 8005a62:	44bc      	add	ip, r7
 8005a64:	4463      	add	r3, ip
 8005a66:	2208      	movs	r2, #8
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e071      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005a6c:	231b      	movs	r3, #27
 8005a6e:	2220      	movs	r2, #32
 8005a70:	4694      	mov	ip, r2
 8005a72:	44bc      	add	ip, r7
 8005a74:	4463      	add	r3, ip
 8005a76:	2210      	movs	r2, #16
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	e069      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a66      	ldr	r2, [pc, #408]	; (8005c1c <UART_SetConfig+0x338>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d107      	bne.n	8005a96 <UART_SetConfig+0x1b2>
 8005a86:	231b      	movs	r3, #27
 8005a88:	2220      	movs	r2, #32
 8005a8a:	4694      	mov	ip, r2
 8005a8c:	44bc      	add	ip, r7
 8005a8e:	4463      	add	r3, ip
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e05c      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a61      	ldr	r2, [pc, #388]	; (8005c20 <UART_SetConfig+0x33c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d107      	bne.n	8005ab0 <UART_SetConfig+0x1cc>
 8005aa0:	231b      	movs	r3, #27
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	4694      	mov	ip, r2
 8005aa6:	44bc      	add	ip, r7
 8005aa8:	4463      	add	r3, ip
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e04f      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a54      	ldr	r2, [pc, #336]	; (8005c08 <UART_SetConfig+0x324>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d143      	bne.n	8005b42 <UART_SetConfig+0x25e>
 8005aba:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <UART_SetConfig+0x330>)
 8005abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005abe:	23c0      	movs	r3, #192	; 0xc0
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	22c0      	movs	r2, #192	; 0xc0
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d02a      	beq.n	8005b22 <UART_SetConfig+0x23e>
 8005acc:	22c0      	movs	r2, #192	; 0xc0
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d82e      	bhi.n	8005b32 <UART_SetConfig+0x24e>
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	0112      	lsls	r2, r2, #4
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d012      	beq.n	8005b02 <UART_SetConfig+0x21e>
 8005adc:	2280      	movs	r2, #128	; 0x80
 8005ade:	0112      	lsls	r2, r2, #4
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d826      	bhi.n	8005b32 <UART_SetConfig+0x24e>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <UART_SetConfig+0x20e>
 8005ae8:	2280      	movs	r2, #128	; 0x80
 8005aea:	00d2      	lsls	r2, r2, #3
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d010      	beq.n	8005b12 <UART_SetConfig+0x22e>
 8005af0:	e01f      	b.n	8005b32 <UART_SetConfig+0x24e>
 8005af2:	231b      	movs	r3, #27
 8005af4:	2220      	movs	r2, #32
 8005af6:	4694      	mov	ip, r2
 8005af8:	44bc      	add	ip, r7
 8005afa:	4463      	add	r3, ip
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e026      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005b02:	231b      	movs	r3, #27
 8005b04:	2220      	movs	r2, #32
 8005b06:	4694      	mov	ip, r2
 8005b08:	44bc      	add	ip, r7
 8005b0a:	4463      	add	r3, ip
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e01e      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005b12:	231b      	movs	r3, #27
 8005b14:	2220      	movs	r2, #32
 8005b16:	4694      	mov	ip, r2
 8005b18:	44bc      	add	ip, r7
 8005b1a:	4463      	add	r3, ip
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	e016      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005b22:	231b      	movs	r3, #27
 8005b24:	2220      	movs	r2, #32
 8005b26:	4694      	mov	ip, r2
 8005b28:	44bc      	add	ip, r7
 8005b2a:	4463      	add	r3, ip
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e00e      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005b32:	231b      	movs	r3, #27
 8005b34:	2220      	movs	r2, #32
 8005b36:	4694      	mov	ip, r2
 8005b38:	44bc      	add	ip, r7
 8005b3a:	4463      	add	r3, ip
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e006      	b.n	8005b50 <UART_SetConfig+0x26c>
 8005b42:	231b      	movs	r3, #27
 8005b44:	2220      	movs	r2, #32
 8005b46:	4694      	mov	ip, r2
 8005b48:	44bc      	add	ip, r7
 8005b4a:	4463      	add	r3, ip
 8005b4c:	2210      	movs	r2, #16
 8005b4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2c      	ldr	r2, [pc, #176]	; (8005c08 <UART_SetConfig+0x324>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d000      	beq.n	8005b5c <UART_SetConfig+0x278>
 8005b5a:	e0ad      	b.n	8005cb8 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b5c:	231b      	movs	r3, #27
 8005b5e:	2220      	movs	r2, #32
 8005b60:	4694      	mov	ip, r2
 8005b62:	44bc      	add	ip, r7
 8005b64:	4463      	add	r3, ip
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d015      	beq.n	8005b98 <UART_SetConfig+0x2b4>
 8005b6c:	dc18      	bgt.n	8005ba0 <UART_SetConfig+0x2bc>
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d00d      	beq.n	8005b8e <UART_SetConfig+0x2aa>
 8005b72:	dc15      	bgt.n	8005ba0 <UART_SetConfig+0x2bc>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <UART_SetConfig+0x29a>
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d005      	beq.n	8005b88 <UART_SetConfig+0x2a4>
 8005b7c:	e010      	b.n	8005ba0 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b7e:	f7ff fbe1 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8005b82:	0003      	movs	r3, r0
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b86:	e015      	b.n	8005bb4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b88:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <UART_SetConfig+0x340>)
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b8c:	e012      	b.n	8005bb4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b8e:	f7ff fb4d 	bl	800522c <HAL_RCC_GetSysClockFreq>
 8005b92:	0003      	movs	r3, r0
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b96:	e00d      	b.n	8005bb4 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b9e:	e009      	b.n	8005bb4 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005ba4:	231a      	movs	r3, #26
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	4694      	mov	ip, r2
 8005baa:	44bc      	add	ip, r7
 8005bac:	4463      	add	r3, ip
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
        break;
 8005bb2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d100      	bne.n	8005bbc <UART_SetConfig+0x2d8>
 8005bba:	e154      	b.n	8005e66 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <UART_SetConfig+0x344>)
 8005bc2:	0052      	lsls	r2, r2, #1
 8005bc4:	5ad3      	ldrh	r3, [r2, r3]
 8005bc6:	0019      	movs	r1, r3
 8005bc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bca:	f7fa fab9 	bl	8000140 <__udivsi3>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	0013      	movs	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d305      	bcc.n	8005bee <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d91e      	bls.n	8005c2c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005bee:	231a      	movs	r3, #26
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	4694      	mov	ip, r2
 8005bf4:	44bc      	add	ip, r7
 8005bf6:	4463      	add	r3, ip
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e133      	b.n	8005e66 <UART_SetConfig+0x582>
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	cfff69f3 	.word	0xcfff69f3
 8005c04:	ffffcfff 	.word	0xffffcfff
 8005c08:	40008000 	.word	0x40008000
 8005c0c:	11fff4ff 	.word	0x11fff4ff
 8005c10:	40013800 	.word	0x40013800
 8005c14:	40021000 	.word	0x40021000
 8005c18:	40004400 	.word	0x40004400
 8005c1c:	40004800 	.word	0x40004800
 8005c20:	40004c00 	.word	0x40004c00
 8005c24:	00f42400 	.word	0x00f42400
 8005c28:	0800b920 	.word	0x0800b920
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c38:	4b97      	ldr	r3, [pc, #604]	; (8005e98 <UART_SetConfig+0x5b4>)
 8005c3a:	0052      	lsls	r2, r2, #1
 8005c3c:	5ad3      	ldrh	r3, [r2, r3]
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	69b8      	ldr	r0, [r7, #24]
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	f7fa fc2c 	bl	80004a8 <__aeabi_uldivmod>
 8005c50:	0002      	movs	r2, r0
 8005c52:	000b      	movs	r3, r1
 8005c54:	0e11      	lsrs	r1, r2, #24
 8005c56:	021d      	lsls	r5, r3, #8
 8005c58:	430d      	orrs	r5, r1
 8005c5a:	0214      	lsls	r4, r2, #8
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68b8      	ldr	r0, [r7, #8]
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	1900      	adds	r0, r0, r4
 8005c6e:	4169      	adcs	r1, r5
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f7fa fc13 	bl	80004a8 <__aeabi_uldivmod>
 8005c82:	0002      	movs	r2, r0
 8005c84:	000b      	movs	r3, r1
 8005c86:	0013      	movs	r3, r2
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8c:	23c0      	movs	r3, #192	; 0xc0
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d309      	bcc.n	8005ca8 <UART_SetConfig+0x3c4>
 8005c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	035b      	lsls	r3, r3, #13
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d204      	bcs.n	8005ca8 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	e0de      	b.n	8005e66 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8005ca8:	231a      	movs	r3, #26
 8005caa:	2220      	movs	r2, #32
 8005cac:	4694      	mov	ip, r2
 8005cae:	44bc      	add	ip, r7
 8005cb0:	4463      	add	r3, ip
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e0d6      	b.n	8005e66 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d000      	beq.n	8005cc6 <UART_SetConfig+0x3e2>
 8005cc4:	e074      	b.n	8005db0 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8005cc6:	231b      	movs	r3, #27
 8005cc8:	2220      	movs	r2, #32
 8005cca:	4694      	mov	ip, r2
 8005ccc:	44bc      	add	ip, r7
 8005cce:	4463      	add	r3, ip
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d015      	beq.n	8005d02 <UART_SetConfig+0x41e>
 8005cd6:	dc18      	bgt.n	8005d0a <UART_SetConfig+0x426>
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d00d      	beq.n	8005cf8 <UART_SetConfig+0x414>
 8005cdc:	dc15      	bgt.n	8005d0a <UART_SetConfig+0x426>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <UART_SetConfig+0x404>
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d005      	beq.n	8005cf2 <UART_SetConfig+0x40e>
 8005ce6:	e010      	b.n	8005d0a <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7ff fb2c 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8005cec:	0003      	movs	r3, r0
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf0:	e015      	b.n	8005d1e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf2:	4b6a      	ldr	r3, [pc, #424]	; (8005e9c <UART_SetConfig+0x5b8>)
 8005cf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf6:	e012      	b.n	8005d1e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf8:	f7ff fa98 	bl	800522c <HAL_RCC_GetSysClockFreq>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d00:	e00d      	b.n	8005d1e <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d08:	e009      	b.n	8005d1e <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d0e:	231a      	movs	r3, #26
 8005d10:	2220      	movs	r2, #32
 8005d12:	4694      	mov	ip, r2
 8005d14:	44bc      	add	ip, r7
 8005d16:	4463      	add	r3, ip
 8005d18:	2201      	movs	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
        break;
 8005d1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d100      	bne.n	8005d26 <UART_SetConfig+0x442>
 8005d24:	e09f      	b.n	8005e66 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d2a:	4b5b      	ldr	r3, [pc, #364]	; (8005e98 <UART_SetConfig+0x5b4>)
 8005d2c:	0052      	lsls	r2, r2, #1
 8005d2e:	5ad3      	ldrh	r3, [r2, r3]
 8005d30:	0019      	movs	r1, r3
 8005d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d34:	f7fa fa04 	bl	8000140 <__udivsi3>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	005a      	lsls	r2, r3, #1
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	18d2      	adds	r2, r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	0019      	movs	r1, r3
 8005d4a:	0010      	movs	r0, r2
 8005d4c:	f7fa f9f8 	bl	8000140 <__udivsi3>
 8005d50:	0003      	movs	r3, r0
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	2b0f      	cmp	r3, #15
 8005d5a:	d921      	bls.n	8005da0 <UART_SetConfig+0x4bc>
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	025b      	lsls	r3, r3, #9
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d21c      	bcs.n	8005da0 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	200e      	movs	r0, #14
 8005d6c:	2420      	movs	r4, #32
 8005d6e:	193b      	adds	r3, r7, r4
 8005d70:	181b      	adds	r3, r3, r0
 8005d72:	210f      	movs	r1, #15
 8005d74:	438a      	bics	r2, r1
 8005d76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2207      	movs	r2, #7
 8005d80:	4013      	ands	r3, r2
 8005d82:	b299      	uxth	r1, r3
 8005d84:	193b      	adds	r3, r7, r4
 8005d86:	181b      	adds	r3, r3, r0
 8005d88:	193a      	adds	r2, r7, r4
 8005d8a:	1812      	adds	r2, r2, r0
 8005d8c:	8812      	ldrh	r2, [r2, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	193a      	adds	r2, r7, r4
 8005d98:	1812      	adds	r2, r2, r0
 8005d9a:	8812      	ldrh	r2, [r2, #0]
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	e062      	b.n	8005e66 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8005da0:	231a      	movs	r3, #26
 8005da2:	2220      	movs	r2, #32
 8005da4:	4694      	mov	ip, r2
 8005da6:	44bc      	add	ip, r7
 8005da8:	4463      	add	r3, ip
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e05a      	b.n	8005e66 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005db0:	231b      	movs	r3, #27
 8005db2:	2220      	movs	r2, #32
 8005db4:	4694      	mov	ip, r2
 8005db6:	44bc      	add	ip, r7
 8005db8:	4463      	add	r3, ip
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d015      	beq.n	8005dec <UART_SetConfig+0x508>
 8005dc0:	dc18      	bgt.n	8005df4 <UART_SetConfig+0x510>
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d00d      	beq.n	8005de2 <UART_SetConfig+0x4fe>
 8005dc6:	dc15      	bgt.n	8005df4 <UART_SetConfig+0x510>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <UART_SetConfig+0x4ee>
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d005      	beq.n	8005ddc <UART_SetConfig+0x4f8>
 8005dd0:	e010      	b.n	8005df4 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd2:	f7ff fab7 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dda:	e015      	b.n	8005e08 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b2f      	ldr	r3, [pc, #188]	; (8005e9c <UART_SetConfig+0x5b8>)
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005de0:	e012      	b.n	8005e08 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7ff fa23 	bl	800522c <HAL_RCC_GetSysClockFreq>
 8005de6:	0003      	movs	r3, r0
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dea:	e00d      	b.n	8005e08 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005df2:	e009      	b.n	8005e08 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005df8:	231a      	movs	r3, #26
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	4694      	mov	ip, r2
 8005dfe:	44bc      	add	ip, r7
 8005e00:	4463      	add	r3, ip
 8005e02:	2201      	movs	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]
        break;
 8005e06:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d02b      	beq.n	8005e66 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e12:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <UART_SetConfig+0x5b4>)
 8005e14:	0052      	lsls	r2, r2, #1
 8005e16:	5ad3      	ldrh	r3, [r2, r3]
 8005e18:	0019      	movs	r1, r3
 8005e1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e1c:	f7fa f990 	bl	8000140 <__udivsi3>
 8005e20:	0003      	movs	r3, r0
 8005e22:	001a      	movs	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	18d2      	adds	r2, r2, r3
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	0019      	movs	r1, r3
 8005e32:	0010      	movs	r0, r2
 8005e34:	f7fa f984 	bl	8000140 <__udivsi3>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b0f      	cmp	r3, #15
 8005e42:	d909      	bls.n	8005e58 <UART_SetConfig+0x574>
 8005e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	025b      	lsls	r3, r3, #9
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d204      	bcs.n	8005e58 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e54:	60da      	str	r2, [r3, #12]
 8005e56:	e006      	b.n	8005e66 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8005e58:	231a      	movs	r3, #26
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	4694      	mov	ip, r2
 8005e5e:	44bc      	add	ip, r7
 8005e60:	4463      	add	r3, ip
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	226a      	movs	r2, #106	; 0x6a
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	2268      	movs	r2, #104	; 0x68
 8005e72:	2101      	movs	r1, #1
 8005e74:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	2200      	movs	r2, #0
 8005e7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	2200      	movs	r2, #0
 8005e80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e82:	231a      	movs	r3, #26
 8005e84:	2220      	movs	r2, #32
 8005e86:	4694      	mov	ip, r2
 8005e88:	44bc      	add	ip, r7
 8005e8a:	4463      	add	r3, ip
 8005e8c:	781b      	ldrb	r3, [r3, #0]
}
 8005e8e:	0018      	movs	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b010      	add	sp, #64	; 0x40
 8005e94:	bdb0      	pop	{r4, r5, r7, pc}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	0800b920 	.word	0x0800b920
 8005e9c:	00f42400 	.word	0x00f42400

08005ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	2201      	movs	r2, #1
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <UART_AdvFeatureConfig+0x144>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	2202      	movs	r2, #2
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4a43      	ldr	r2, [pc, #268]	; (8005fe8 <UART_AdvFeatureConfig+0x148>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	0019      	movs	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d00b      	beq.n	8005f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a3b      	ldr	r2, [pc, #236]	; (8005fec <UART_AdvFeatureConfig+0x14c>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	0019      	movs	r1, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	2208      	movs	r2, #8
 8005f14:	4013      	ands	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	4a34      	ldr	r2, [pc, #208]	; (8005ff0 <UART_AdvFeatureConfig+0x150>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	0019      	movs	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	2210      	movs	r2, #16
 8005f36:	4013      	ands	r3, r2
 8005f38:	d00b      	beq.n	8005f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4a2c      	ldr	r2, [pc, #176]	; (8005ff4 <UART_AdvFeatureConfig+0x154>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	0019      	movs	r1, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	2220      	movs	r2, #32
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <UART_AdvFeatureConfig+0x158>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	0019      	movs	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	2240      	movs	r2, #64	; 0x40
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d01d      	beq.n	8005fba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4a1d      	ldr	r2, [pc, #116]	; (8005ffc <UART_AdvFeatureConfig+0x15c>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	035b      	lsls	r3, r3, #13
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d10b      	bne.n	8005fba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <UART_AdvFeatureConfig+0x160>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	0019      	movs	r1, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	2280      	movs	r2, #128	; 0x80
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	4a0e      	ldr	r2, [pc, #56]	; (8006004 <UART_AdvFeatureConfig+0x164>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	0019      	movs	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }
}
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b002      	add	sp, #8
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	fffdffff 	.word	0xfffdffff
 8005fe8:	fffeffff 	.word	0xfffeffff
 8005fec:	fffbffff 	.word	0xfffbffff
 8005ff0:	ffff7fff 	.word	0xffff7fff
 8005ff4:	ffffefff 	.word	0xffffefff
 8005ff8:	ffffdfff 	.word	0xffffdfff
 8005ffc:	ffefffff 	.word	0xffefffff
 8006000:	ff9fffff 	.word	0xff9fffff
 8006004:	fff7ffff 	.word	0xfff7ffff

08006008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	228c      	movs	r2, #140	; 0x8c
 8006014:	2100      	movs	r1, #0
 8006016:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006018:	f7fd f86a 	bl	80030f0 <HAL_GetTick>
 800601c:	0003      	movs	r3, r0
 800601e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2208      	movs	r2, #8
 8006028:	4013      	ands	r3, r2
 800602a:	2b08      	cmp	r3, #8
 800602c:	d10c      	bne.n	8006048 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2280      	movs	r2, #128	; 0x80
 8006032:	0391      	lsls	r1, r2, #14
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <UART_CheckIdleState+0x90>)
 8006038:	9200      	str	r2, [sp, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	f000 f82e 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8006040:	1e03      	subs	r3, r0, #0
 8006042:	d001      	beq.n	8006048 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e023      	b.n	8006090 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2204      	movs	r2, #4
 8006050:	4013      	ands	r3, r2
 8006052:	2b04      	cmp	r3, #4
 8006054:	d10c      	bne.n	8006070 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2280      	movs	r2, #128	; 0x80
 800605a:	03d1      	lsls	r1, r2, #15
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4a0e      	ldr	r2, [pc, #56]	; (8006098 <UART_CheckIdleState+0x90>)
 8006060:	9200      	str	r2, [sp, #0]
 8006062:	2200      	movs	r2, #0
 8006064:	f000 f81a 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8006068:	1e03      	subs	r3, r0, #0
 800606a:	d001      	beq.n	8006070 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e00f      	b.n	8006090 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2284      	movs	r2, #132	; 0x84
 8006074:	2120      	movs	r1, #32
 8006076:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2288      	movs	r2, #136	; 0x88
 800607c:	2120      	movs	r1, #32
 800607e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	2100      	movs	r1, #0
 800608c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	b004      	add	sp, #16
 8006096:	bd80      	pop	{r7, pc}
 8006098:	01ffffff 	.word	0x01ffffff

0800609c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b094      	sub	sp, #80	; 0x50
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	1dfb      	adds	r3, r7, #7
 80060aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	e0a7      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b0:	3301      	adds	r3, #1
 80060b2:	d100      	bne.n	80060b6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80060b4:	e0a3      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fd f81b 	bl	80030f0 <HAL_GetTick>
 80060ba:	0002      	movs	r2, r0
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <UART_WaitOnFlagUntilTimeout+0x30>
 80060c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d13f      	bne.n	800614c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060cc:	f3ef 8310 	mrs	r3, PRIMASK
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060d4:	647b      	str	r3, [r7, #68]	; 0x44
 80060d6:	2301      	movs	r3, #1
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	f383 8810 	msr	PRIMASK, r3
}
 80060e0:	46c0      	nop			; (mov r8, r8)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	494e      	ldr	r1, [pc, #312]	; (8006228 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80060ee:	400a      	ands	r2, r1
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	f383 8810 	msr	PRIMASK, r3
}
 80060fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	643b      	str	r3, [r7, #64]	; 0x40
 8006108:	2301      	movs	r3, #1
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f383 8810 	msr	PRIMASK, r3
}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2101      	movs	r1, #1
 8006120:	438a      	bics	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612a:	f383 8810 	msr	PRIMASK, r3
}
 800612e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2284      	movs	r2, #132	; 0x84
 8006134:	2120      	movs	r1, #32
 8006136:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2288      	movs	r2, #136	; 0x88
 800613c:	2120      	movs	r1, #32
 800613e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2280      	movs	r2, #128	; 0x80
 8006144:	2100      	movs	r1, #0
 8006146:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e069      	b.n	8006220 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2204      	movs	r2, #4
 8006154:	4013      	ands	r3, r2
 8006156:	d052      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69da      	ldr	r2, [r3, #28]
 800615e:	2380      	movs	r3, #128	; 0x80
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	401a      	ands	r2, r3
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	429a      	cmp	r2, r3
 800616a:	d148      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	0112      	lsls	r2, r2, #4
 8006174:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006176:	f3ef 8310 	mrs	r3, PRIMASK
 800617a:	613b      	str	r3, [r7, #16]
  return(result);
 800617c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800617e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006180:	2301      	movs	r3, #1
 8006182:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f383 8810 	msr	PRIMASK, r3
}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4924      	ldr	r1, [pc, #144]	; (8006228 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006198:	400a      	ands	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f383 8810 	msr	PRIMASK, r3
}
 80061a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a8:	f3ef 8310 	mrs	r3, PRIMASK
 80061ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80061ae:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061b2:	2301      	movs	r3, #1
 80061b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f383 8810 	msr	PRIMASK, r3
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2101      	movs	r1, #1
 80061ca:	438a      	bics	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
 80061ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	f383 8810 	msr	PRIMASK, r3
}
 80061d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2284      	movs	r2, #132	; 0x84
 80061de:	2120      	movs	r1, #32
 80061e0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2288      	movs	r2, #136	; 0x88
 80061e6:	2120      	movs	r1, #32
 80061e8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	228c      	movs	r2, #140	; 0x8c
 80061ee:	2120      	movs	r1, #32
 80061f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	2100      	movs	r1, #0
 80061f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e010      	b.n	8006220 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	4013      	ands	r3, r2
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	425a      	negs	r2, r3
 800620e:	4153      	adcs	r3, r2
 8006210:	b2db      	uxtb	r3, r3
 8006212:	001a      	movs	r2, r3
 8006214:	1dfb      	adds	r3, r7, #7
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d100      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0x182>
 800621c:	e747      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b014      	add	sp, #80	; 0x50
 8006226:	bd80      	pop	{r7, pc}
 8006228:	fffffe5f 	.word	0xfffffe5f

0800622c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	5c9b      	ldrb	r3, [r3, r2]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_UARTEx_DisableFifoMode+0x16>
 800623e:	2302      	movs	r3, #2
 8006240:	e027      	b.n	8006292 <HAL_UARTEx_DisableFifoMode+0x66>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2280      	movs	r2, #128	; 0x80
 8006246:	2101      	movs	r1, #1
 8006248:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2284      	movs	r2, #132	; 0x84
 800624e:	2124      	movs	r1, #36	; 0x24
 8006250:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2101      	movs	r1, #1
 8006266:	438a      	bics	r2, r1
 8006268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a0b      	ldr	r2, [pc, #44]	; (800629c <HAL_UARTEx_DisableFifoMode+0x70>)
 800626e:	4013      	ands	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2284      	movs	r2, #132	; 0x84
 8006284:	2120      	movs	r1, #32
 8006286:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	2100      	movs	r1, #0
 800628e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b004      	add	sp, #16
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	dfffffff 	.word	0xdfffffff

080062a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2280      	movs	r2, #128	; 0x80
 80062ae:	5c9b      	ldrb	r3, [r3, r2]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e02e      	b.n	8006316 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2280      	movs	r2, #128	; 0x80
 80062bc:	2101      	movs	r1, #1
 80062be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2284      	movs	r2, #132	; 0x84
 80062c4:	2124      	movs	r1, #36	; 0x24
 80062c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2101      	movs	r1, #1
 80062dc:	438a      	bics	r2, r1
 80062de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	08d9      	lsrs	r1, r3, #3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	0018      	movs	r0, r3
 80062f8:	f000 f854 	bl	80063a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2284      	movs	r2, #132	; 0x84
 8006308:	2120      	movs	r1, #32
 800630a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2280      	movs	r2, #128	; 0x80
 8006310:	2100      	movs	r1, #0
 8006312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	0018      	movs	r0, r3
 8006318:	46bd      	mov	sp, r7
 800631a:	b004      	add	sp, #16
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	5c9b      	ldrb	r3, [r3, r2]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e02f      	b.n	8006398 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2280      	movs	r2, #128	; 0x80
 800633c:	2101      	movs	r1, #1
 800633e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2284      	movs	r2, #132	; 0x84
 8006344:	2124      	movs	r1, #36	; 0x24
 8006346:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2101      	movs	r1, #1
 800635c:	438a      	bics	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4a0e      	ldr	r2, [pc, #56]	; (80063a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006368:	4013      	ands	r3, r2
 800636a:	0019      	movs	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f000 f813 	bl	80063a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2284      	movs	r2, #132	; 0x84
 800638a:	2120      	movs	r1, #32
 800638c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2280      	movs	r2, #128	; 0x80
 8006392:	2100      	movs	r1, #0
 8006394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	b004      	add	sp, #16
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	f1ffffff 	.word	0xf1ffffff

080063a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d108      	bne.n	80063c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	226a      	movs	r2, #106	; 0x6a
 80063b8:	2101      	movs	r1, #1
 80063ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2268      	movs	r2, #104	; 0x68
 80063c0:	2101      	movs	r1, #1
 80063c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063c4:	e043      	b.n	800644e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063c6:	260f      	movs	r6, #15
 80063c8:	19bb      	adds	r3, r7, r6
 80063ca:	2208      	movs	r2, #8
 80063cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ce:	200e      	movs	r0, #14
 80063d0:	183b      	adds	r3, r7, r0
 80063d2:	2208      	movs	r2, #8
 80063d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	0e5b      	lsrs	r3, r3, #25
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	240d      	movs	r4, #13
 80063e2:	193b      	adds	r3, r7, r4
 80063e4:	2107      	movs	r1, #7
 80063e6:	400a      	ands	r2, r1
 80063e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	0f5b      	lsrs	r3, r3, #29
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	250c      	movs	r5, #12
 80063f6:	197b      	adds	r3, r7, r5
 80063f8:	2107      	movs	r1, #7
 80063fa:	400a      	ands	r2, r1
 80063fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063fe:	183b      	adds	r3, r7, r0
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	197a      	adds	r2, r7, r5
 8006404:	7812      	ldrb	r2, [r2, #0]
 8006406:	4914      	ldr	r1, [pc, #80]	; (8006458 <UARTEx_SetNbDataToProcess+0xb4>)
 8006408:	5c8a      	ldrb	r2, [r1, r2]
 800640a:	435a      	muls	r2, r3
 800640c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800640e:	197b      	adds	r3, r7, r5
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	4a12      	ldr	r2, [pc, #72]	; (800645c <UARTEx_SetNbDataToProcess+0xb8>)
 8006414:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006416:	0019      	movs	r1, r3
 8006418:	f7f9 ff1c 	bl	8000254 <__divsi3>
 800641c:	0003      	movs	r3, r0
 800641e:	b299      	uxth	r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	226a      	movs	r2, #106	; 0x6a
 8006424:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006426:	19bb      	adds	r3, r7, r6
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	193a      	adds	r2, r7, r4
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	490a      	ldr	r1, [pc, #40]	; (8006458 <UARTEx_SetNbDataToProcess+0xb4>)
 8006430:	5c8a      	ldrb	r2, [r1, r2]
 8006432:	435a      	muls	r2, r3
 8006434:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006436:	193b      	adds	r3, r7, r4
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	4a08      	ldr	r2, [pc, #32]	; (800645c <UARTEx_SetNbDataToProcess+0xb8>)
 800643c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643e:	0019      	movs	r1, r3
 8006440:	f7f9 ff08 	bl	8000254 <__divsi3>
 8006444:	0003      	movs	r3, r0
 8006446:	b299      	uxth	r1, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2268      	movs	r2, #104	; 0x68
 800644c:	5299      	strh	r1, [r3, r2]
}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	46bd      	mov	sp, r7
 8006452:	b005      	add	sp, #20
 8006454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	0800b938 	.word	0x0800b938
 800645c:	0800b940 	.word	0x0800b940

08006460 <__NVIC_SetPriority>:
{
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	0002      	movs	r2, r0
 8006468:	6039      	str	r1, [r7, #0]
 800646a:	1dfb      	adds	r3, r7, #7
 800646c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800646e:	1dfb      	adds	r3, r7, #7
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b7f      	cmp	r3, #127	; 0x7f
 8006474:	d828      	bhi.n	80064c8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006476:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <__NVIC_SetPriority+0xd4>)
 8006478:	1dfb      	adds	r3, r7, #7
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b25b      	sxtb	r3, r3
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	33c0      	adds	r3, #192	; 0xc0
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	589b      	ldr	r3, [r3, r2]
 8006486:	1dfa      	adds	r2, r7, #7
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	0011      	movs	r1, r2
 800648c:	2203      	movs	r2, #3
 800648e:	400a      	ands	r2, r1
 8006490:	00d2      	lsls	r2, r2, #3
 8006492:	21ff      	movs	r1, #255	; 0xff
 8006494:	4091      	lsls	r1, r2
 8006496:	000a      	movs	r2, r1
 8006498:	43d2      	mvns	r2, r2
 800649a:	401a      	ands	r2, r3
 800649c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	019b      	lsls	r3, r3, #6
 80064a2:	22ff      	movs	r2, #255	; 0xff
 80064a4:	401a      	ands	r2, r3
 80064a6:	1dfb      	adds	r3, r7, #7
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	0018      	movs	r0, r3
 80064ac:	2303      	movs	r3, #3
 80064ae:	4003      	ands	r3, r0
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064b4:	481f      	ldr	r0, [pc, #124]	; (8006534 <__NVIC_SetPriority+0xd4>)
 80064b6:	1dfb      	adds	r3, r7, #7
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b25b      	sxtb	r3, r3
 80064bc:	089b      	lsrs	r3, r3, #2
 80064be:	430a      	orrs	r2, r1
 80064c0:	33c0      	adds	r3, #192	; 0xc0
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	501a      	str	r2, [r3, r0]
}
 80064c6:	e031      	b.n	800652c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064c8:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <__NVIC_SetPriority+0xd8>)
 80064ca:	1dfb      	adds	r3, r7, #7
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	0019      	movs	r1, r3
 80064d0:	230f      	movs	r3, #15
 80064d2:	400b      	ands	r3, r1
 80064d4:	3b08      	subs	r3, #8
 80064d6:	089b      	lsrs	r3, r3, #2
 80064d8:	3306      	adds	r3, #6
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	18d3      	adds	r3, r2, r3
 80064de:	3304      	adds	r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	1dfa      	adds	r2, r7, #7
 80064e4:	7812      	ldrb	r2, [r2, #0]
 80064e6:	0011      	movs	r1, r2
 80064e8:	2203      	movs	r2, #3
 80064ea:	400a      	ands	r2, r1
 80064ec:	00d2      	lsls	r2, r2, #3
 80064ee:	21ff      	movs	r1, #255	; 0xff
 80064f0:	4091      	lsls	r1, r2
 80064f2:	000a      	movs	r2, r1
 80064f4:	43d2      	mvns	r2, r2
 80064f6:	401a      	ands	r2, r3
 80064f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	019b      	lsls	r3, r3, #6
 80064fe:	22ff      	movs	r2, #255	; 0xff
 8006500:	401a      	ands	r2, r3
 8006502:	1dfb      	adds	r3, r7, #7
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	0018      	movs	r0, r3
 8006508:	2303      	movs	r3, #3
 800650a:	4003      	ands	r3, r0
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <__NVIC_SetPriority+0xd8>)
 8006512:	1dfb      	adds	r3, r7, #7
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	001c      	movs	r4, r3
 8006518:	230f      	movs	r3, #15
 800651a:	4023      	ands	r3, r4
 800651c:	3b08      	subs	r3, #8
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	430a      	orrs	r2, r1
 8006522:	3306      	adds	r3, #6
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	18c3      	adds	r3, r0, r3
 8006528:	3304      	adds	r3, #4
 800652a:	601a      	str	r2, [r3, #0]
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	46bd      	mov	sp, r7
 8006530:	b003      	add	sp, #12
 8006532:	bd90      	pop	{r4, r7, pc}
 8006534:	e000e100 	.word	0xe000e100
 8006538:	e000ed00 	.word	0xe000ed00

0800653c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006540:	2305      	movs	r3, #5
 8006542:	425b      	negs	r3, r3
 8006544:	2100      	movs	r1, #0
 8006546:	0018      	movs	r0, r3
 8006548:	f7ff ff8a 	bl	8006460 <__NVIC_SetPriority>
#endif
}
 800654c:	46c0      	nop			; (mov r8, r8)
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800655a:	f3ef 8305 	mrs	r3, IPSR
 800655e:	603b      	str	r3, [r7, #0]
  return(result);
 8006560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006566:	2306      	movs	r3, #6
 8006568:	425b      	negs	r3, r3
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	e00c      	b.n	8006588 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <osKernelInitialize+0x40>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d105      	bne.n	8006582 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <osKernelInitialize+0x40>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800657c:	2300      	movs	r3, #0
 800657e:	607b      	str	r3, [r7, #4]
 8006580:	e002      	b.n	8006588 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006582:	2301      	movs	r3, #1
 8006584:	425b      	negs	r3, r3
 8006586:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006588:	687b      	ldr	r3, [r7, #4]
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b002      	add	sp, #8
 8006590:	bd80      	pop	{r7, pc}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	20000208 	.word	0x20000208

08006598 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659e:	f3ef 8305 	mrs	r3, IPSR
 80065a2:	603b      	str	r3, [r7, #0]
  return(result);
 80065a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80065aa:	2306      	movs	r3, #6
 80065ac:	425b      	negs	r3, r3
 80065ae:	607b      	str	r3, [r7, #4]
 80065b0:	e010      	b.n	80065d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <osKernelStart+0x48>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d109      	bne.n	80065ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065ba:	f7ff ffbf 	bl	800653c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065be:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <osKernelStart+0x48>)
 80065c0:	2202      	movs	r2, #2
 80065c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065c4:	f000 ff6e 	bl	80074a4 <vTaskStartScheduler>
      stat = osOK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	e002      	b.n	80065d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065ce:	2301      	movs	r3, #1
 80065d0:	425b      	negs	r3, r3
 80065d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065d4:	687b      	ldr	r3, [r7, #4]
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	20000208 	.word	0x20000208

080065e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065e4:	b5b0      	push	{r4, r5, r7, lr}
 80065e6:	b08e      	sub	sp, #56	; 0x38
 80065e8:	af04      	add	r7, sp, #16
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f4:	f3ef 8305 	mrs	r3, IPSR
 80065f8:	617b      	str	r3, [r7, #20]
  return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d000      	beq.n	8006602 <osThreadNew+0x1e>
 8006600:	e081      	b.n	8006706 <osThreadNew+0x122>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d100      	bne.n	800660a <osThreadNew+0x26>
 8006608:	e07d      	b.n	8006706 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800660e:	2318      	movs	r3, #24
 8006610:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006616:	2301      	movs	r3, #1
 8006618:	425b      	negs	r3, r3
 800661a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d044      	beq.n	80066ac <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <osThreadNew+0x4c>
        name = attr->name;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <osThreadNew+0x70>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	2b38      	cmp	r3, #56	; 0x38
 8006648:	d804      	bhi.n	8006654 <osThreadNew+0x70>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	4013      	ands	r3, r2
 8006652:	d001      	beq.n	8006658 <osThreadNew+0x74>
        return (NULL);
 8006654:	2300      	movs	r3, #0
 8006656:	e057      	b.n	8006708 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	089b      	lsrs	r3, r3, #2
 8006666:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <osThreadNew+0xaa>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2b5b      	cmp	r3, #91	; 0x5b
 8006676:	d90a      	bls.n	800668e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800667c:	2b00      	cmp	r3, #0
 800667e:	d006      	beq.n	800668e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <osThreadNew+0xaa>
        mem = 1;
 8006688:	2301      	movs	r3, #1
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	e010      	b.n	80066b0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <osThreadNew+0xcc>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d108      	bne.n	80066b0 <osThreadNew+0xcc>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <osThreadNew+0xcc>
          mem = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	e001      	b.n	80066b0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d112      	bne.n	80066dc <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066be:	68bd      	ldr	r5, [r7, #8]
 80066c0:	6a3c      	ldr	r4, [r7, #32]
 80066c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	9201      	str	r2, [sp, #4]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	002b      	movs	r3, r5
 80066d0:	0022      	movs	r2, r4
 80066d2:	f000 fd3e 	bl	8007152 <xTaskCreateStatic>
 80066d6:	0003      	movs	r3, r0
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	e014      	b.n	8006706 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d111      	bne.n	8006706 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68bc      	ldr	r4, [r7, #8]
 80066e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	2310      	movs	r3, #16
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	0023      	movs	r3, r4
 80066f8:	f000 fd6f 	bl	80071da <xTaskCreate>
 80066fc:	0003      	movs	r3, r0
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <osThreadNew+0x122>
            hTask = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006706:	693b      	ldr	r3, [r7, #16]
}
 8006708:	0018      	movs	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	b00a      	add	sp, #40	; 0x28
 800670e:	bdb0      	pop	{r4, r5, r7, pc}

08006710 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006718:	f3ef 8305 	mrs	r3, IPSR
 800671c:	60bb      	str	r3, [r7, #8]
  return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <osDelay+0x1c>
    stat = osErrorISR;
 8006724:	2306      	movs	r3, #6
 8006726:	425b      	negs	r3, r3
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e008      	b.n	800673e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <osDelay+0x2e>
      vTaskDelay(ticks);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0018      	movs	r0, r3
 800673a:	f000 fe8d 	bl	8007458 <vTaskDelay>
    }
  }

  return (stat);
 800673e:	68fb      	ldr	r3, [r7, #12]
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b004      	add	sp, #16
 8006746:	bd80      	pop	{r7, pc}

08006748 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4a06      	ldr	r2, [pc, #24]	; (8006770 <vApplicationGetIdleTaskMemory+0x28>)
 8006758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4a05      	ldr	r2, [pc, #20]	; (8006774 <vApplicationGetIdleTaskMemory+0x2c>)
 800675e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2280      	movs	r2, #128	; 0x80
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	46bd      	mov	sp, r7
 800676a:	b004      	add	sp, #16
 800676c:	bd80      	pop	{r7, pc}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	2000020c 	.word	0x2000020c
 8006774:	20000268 	.word	0x20000268

08006778 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a06      	ldr	r2, [pc, #24]	; (80067a0 <vApplicationGetTimerTaskMemory+0x28>)
 8006788:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4a05      	ldr	r2, [pc, #20]	; (80067a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800678e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	0052      	lsls	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]
}
 8006798:	46c0      	nop			; (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	b004      	add	sp, #16
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000468 	.word	0x20000468
 80067a4:	200004c4 	.word	0x200004c4

080067a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3308      	adds	r3, #8
 80067b4:	001a      	movs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	4252      	negs	r2, r2
 80067c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3308      	adds	r3, #8
 80067c6:	001a      	movs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3308      	adds	r3, #8
 80067d0:	001a      	movs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	b002      	add	sp, #8
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b002      	add	sp, #8
 80067f8:	bd80      	pop	{r7, pc}

080067fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	46bd      	mov	sp, r7
 800683a:	b004      	add	sp, #16
 800683c:	bd80      	pop	{r7, pc}

0800683e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	3301      	adds	r3, #1
 8006852:	d103      	bne.n	800685c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e00c      	b.n	8006876 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3308      	adds	r3, #8
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e002      	b.n	800686a <vListInsert+0x2c>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d2f6      	bcs.n	8006864 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	601a      	str	r2, [r3, #0]
}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b004      	add	sp, #16
 80068a8:	bd80      	pop	{r7, pc}

080068aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6892      	ldr	r2, [r2, #8]
 80068c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6852      	ldr	r2, [r2, #4]
 80068ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d103      	bne.n	80068de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	1e5a      	subs	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
}
 80068f2:	0018      	movs	r0, r3
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b004      	add	sp, #16
 80068f8:	bd80      	pop	{r7, pc}

080068fa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <xQueueGenericReset+0x18>
 800690e:	b672      	cpsid	i
 8006910:	e7fe      	b.n	8006910 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006912:	f001 fe15 	bl	8008540 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	434b      	muls	r3, r1
 8006924:	18d2      	adds	r2, r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006940:	1e59      	subs	r1, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	434b      	muls	r3, r1
 8006948:	18d2      	adds	r2, r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2244      	movs	r2, #68	; 0x44
 8006952:	21ff      	movs	r1, #255	; 0xff
 8006954:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2245      	movs	r2, #69	; 0x45
 800695a:	21ff      	movs	r1, #255	; 0xff
 800695c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10d      	bne.n	8006980 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3310      	adds	r3, #16
 8006970:	0018      	movs	r0, r3
 8006972:	f000 ffd7 	bl	8007924 <xTaskRemoveFromEventList>
 8006976:	1e03      	subs	r3, r0, #0
 8006978:	d00c      	beq.n	8006994 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800697a:	f001 fdd1 	bl	8008520 <vPortYield>
 800697e:	e009      	b.n	8006994 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3310      	adds	r3, #16
 8006984:	0018      	movs	r0, r3
 8006986:	f7ff ff0f 	bl	80067a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3324      	adds	r3, #36	; 0x24
 800698e:	0018      	movs	r0, r3
 8006990:	f7ff ff0a 	bl	80067a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006994:	f001 fde6 	bl	8008564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006998:	2301      	movs	r3, #1
}
 800699a:	0018      	movs	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	b004      	add	sp, #16
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069a2:	b590      	push	{r4, r7, lr}
 80069a4:	b089      	sub	sp, #36	; 0x24
 80069a6:	af02      	add	r7, sp, #8
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <xQueueGenericCreateStatic+0x18>
 80069b6:	b672      	cpsid	i
 80069b8:	e7fe      	b.n	80069b8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <xQueueGenericCreateStatic+0x22>
 80069c0:	b672      	cpsid	i
 80069c2:	e7fe      	b.n	80069c2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <xQueueGenericCreateStatic+0x2e>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <xQueueGenericCreateStatic+0x32>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <xQueueGenericCreateStatic+0x34>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <xQueueGenericCreateStatic+0x3c>
 80069da:	b672      	cpsid	i
 80069dc:	e7fe      	b.n	80069dc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <xQueueGenericCreateStatic+0x48>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <xQueueGenericCreateStatic+0x4c>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <xQueueGenericCreateStatic+0x4e>
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <xQueueGenericCreateStatic+0x56>
 80069f4:	b672      	cpsid	i
 80069f6:	e7fe      	b.n	80069f6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069f8:	2350      	movs	r3, #80	; 0x50
 80069fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b50      	cmp	r3, #80	; 0x50
 8006a00:	d001      	beq.n	8006a06 <xQueueGenericCreateStatic+0x64>
 8006a02:	b672      	cpsid	i
 8006a04:	e7fe      	b.n	8006a04 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a06:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00e      	beq.n	8006a30 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2246      	movs	r2, #70	; 0x46
 8006a16:	2101      	movs	r1, #1
 8006a18:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a1a:	2328      	movs	r3, #40	; 0x28
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	781c      	ldrb	r4, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	0023      	movs	r3, r4
 8006a2c:	f000 f805 	bl	8006a3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a30:	697b      	ldr	r3, [r7, #20]
	}
 8006a32:	0018      	movs	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	b007      	add	sp, #28
 8006a38:	bd90      	pop	{r4, r7, pc}

08006a3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	001a      	movs	r2, r3
 8006a48:	1cfb      	adds	r3, r7, #3
 8006a4a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e002      	b.n	8006a60 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	0018      	movs	r0, r3
 8006a72:	f7ff ff42 	bl	80068fa <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	1cfa      	adds	r2, r7, #3
 8006a7a:	214c      	movs	r1, #76	; 0x4c
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b004      	add	sp, #16
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a96:	2300      	movs	r3, #0
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <xQueueGenericSend+0x20>
 8006aa4:	b672      	cpsid	i
 8006aa6:	e7fe      	b.n	8006aa6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <xQueueGenericSend+0x2e>
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <xQueueGenericSend+0x32>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <xQueueGenericSend+0x34>
 8006aba:	2300      	movs	r3, #0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <xQueueGenericSend+0x3c>
 8006ac0:	b672      	cpsid	i
 8006ac2:	e7fe      	b.n	8006ac2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGenericSend+0x4a>
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGenericSend+0x4e>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGenericSend+0x50>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <xQueueGenericSend+0x58>
 8006adc:	b672      	cpsid	i
 8006ade:	e7fe      	b.n	8006ade <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ae0:	f001 f8b2 	bl	8007c48 <xTaskGetSchedulerState>
 8006ae4:	1e03      	subs	r3, r0, #0
 8006ae6:	d102      	bne.n	8006aee <xQueueGenericSend+0x66>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <xQueueGenericSend+0x6a>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGenericSend+0x6c>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <xQueueGenericSend+0x74>
 8006af8:	b672      	cpsid	i
 8006afa:	e7fe      	b.n	8006afa <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006afc:	f001 fd20 	bl	8008540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d302      	bcc.n	8006b12 <xQueueGenericSend+0x8a>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d11e      	bne.n	8006b50 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f000 f9a2 	bl	8006e62 <prvCopyDataToQueue>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	3324      	adds	r3, #36	; 0x24
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f000 fef8 	bl	8007924 <xTaskRemoveFromEventList>
 8006b34:	1e03      	subs	r3, r0, #0
 8006b36:	d007      	beq.n	8006b48 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b38:	f001 fcf2 	bl	8008520 <vPortYield>
 8006b3c:	e004      	b.n	8006b48 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b44:	f001 fcec 	bl	8008520 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b48:	f001 fd0c 	bl	8008564 <vPortExitCritical>
				return pdPASS;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e05b      	b.n	8006c08 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b56:	f001 fd05 	bl	8008564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e054      	b.n	8006c08 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b64:	2314      	movs	r3, #20
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f000 ff37 	bl	80079dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b72:	f001 fcf7 	bl	8008564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b76:	f000 fce9 	bl	800754c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b7a:	f001 fce1 	bl	8008540 <vPortEnterCritical>
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	2244      	movs	r2, #68	; 0x44
 8006b82:	5c9b      	ldrb	r3, [r3, r2]
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	3301      	adds	r3, #1
 8006b88:	d103      	bne.n	8006b92 <xQueueGenericSend+0x10a>
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	2244      	movs	r2, #68	; 0x44
 8006b8e:	2100      	movs	r1, #0
 8006b90:	5499      	strb	r1, [r3, r2]
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	2245      	movs	r2, #69	; 0x45
 8006b96:	5c9b      	ldrb	r3, [r3, r2]
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	d103      	bne.n	8006ba6 <xQueueGenericSend+0x11e>
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	2245      	movs	r2, #69	; 0x45
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	5499      	strb	r1, [r3, r2]
 8006ba6:	f001 fcdd 	bl	8008564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006baa:	1d3a      	adds	r2, r7, #4
 8006bac:	2314      	movs	r3, #20
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	0011      	movs	r1, r2
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f000 ff26 	bl	8007a04 <xTaskCheckForTimeOut>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d11e      	bne.n	8006bfa <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f000 fa54 	bl	800706c <prvIsQueueFull>
 8006bc4:	1e03      	subs	r3, r0, #0
 8006bc6:	d011      	beq.n	8006bec <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	3310      	adds	r3, #16
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	0011      	movs	r1, r2
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f000 fe63 	bl	800789c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f000 f9d3 	bl	8006f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bde:	f000 fcc1 	bl	8007564 <xTaskResumeAll>
 8006be2:	1e03      	subs	r3, r0, #0
 8006be4:	d18a      	bne.n	8006afc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8006be6:	f001 fc9b 	bl	8008520 <vPortYield>
 8006bea:	e787      	b.n	8006afc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 f9c8 	bl	8006f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bf4:	f000 fcb6 	bl	8007564 <xTaskResumeAll>
 8006bf8:	e780      	b.n	8006afc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f000 f9c1 	bl	8006f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c02:	f000 fcaf 	bl	8007564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b00a      	add	sp, #40	; 0x28
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b08b      	sub	sp, #44	; 0x2c
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <xQueueGenericSendFromISR+0x1c>
 8006c28:	b672      	cpsid	i
 8006c2a:	e7fe      	b.n	8006c2a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <xQueueGenericSendFromISR+0x2a>
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <xQueueGenericSendFromISR+0x2e>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <xQueueGenericSendFromISR+0x30>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <xQueueGenericSendFromISR+0x38>
 8006c44:	b672      	cpsid	i
 8006c46:	e7fe      	b.n	8006c46 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSendFromISR+0x46>
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <xQueueGenericSendFromISR+0x4a>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <xQueueGenericSendFromISR+0x4c>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <xQueueGenericSendFromISR+0x54>
 8006c60:	b672      	cpsid	i
 8006c62:	e7fe      	b.n	8006c62 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c64:	f001 fc96 	bl	8008594 <ulSetInterruptMaskFromISR>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d302      	bcc.n	8006c7e <xQueueGenericSendFromISR+0x6e>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d131      	bne.n	8006ce2 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c7e:	241b      	movs	r4, #27
 8006c80:	193b      	adds	r3, r7, r4
 8006c82:	6a3a      	ldr	r2, [r7, #32]
 8006c84:	2145      	movs	r1, #69	; 0x45
 8006c86:	5c52      	ldrb	r2, [r2, r1]
 8006c88:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 f8e3 	bl	8006e62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c9c:	193b      	adds	r3, r7, r4
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	d111      	bne.n	8006cca <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d016      	beq.n	8006cdc <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	3324      	adds	r3, #36	; 0x24
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f000 fe36 	bl	8007924 <xTaskRemoveFromEventList>
 8006cb8:	1e03      	subs	r3, r0, #0
 8006cba:	d00f      	beq.n	8006cdc <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00c      	beq.n	8006cdc <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e008      	b.n	8006cdc <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cca:	231b      	movs	r3, #27
 8006ccc:	18fb      	adds	r3, r7, r3
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	b259      	sxtb	r1, r3
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	2245      	movs	r2, #69	; 0x45
 8006cda:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8006ce0:	e001      	b.n	8006ce6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f001 fc59 	bl	80085a0 <vClearInterruptMaskFromISR>

	return xReturn;
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b00b      	add	sp, #44	; 0x2c
 8006cf6:	bd90      	pop	{r4, r7, pc}

08006cf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <xQueueReceive+0x1e>
 8006d12:	b672      	cpsid	i
 8006d14:	e7fe      	b.n	8006d14 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <xQueueReceive+0x2c>
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <xQueueReceive+0x30>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <xQueueReceive+0x32>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <xQueueReceive+0x3a>
 8006d2e:	b672      	cpsid	i
 8006d30:	e7fe      	b.n	8006d30 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d32:	f000 ff89 	bl	8007c48 <xTaskGetSchedulerState>
 8006d36:	1e03      	subs	r3, r0, #0
 8006d38:	d102      	bne.n	8006d40 <xQueueReceive+0x48>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <xQueueReceive+0x4c>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <xQueueReceive+0x4e>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <xQueueReceive+0x56>
 8006d4a:	b672      	cpsid	i
 8006d4c:	e7fe      	b.n	8006d4c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d4e:	f001 fbf7 	bl	8008540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01a      	beq.n	8006d94 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	0011      	movs	r1, r2
 8006d64:	0018      	movs	r0, r3
 8006d66:	f000 f8e7 	bl	8006f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	1e5a      	subs	r2, r3, #1
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f000 fdd0 	bl	8007924 <xTaskRemoveFromEventList>
 8006d84:	1e03      	subs	r3, r0, #0
 8006d86:	d001      	beq.n	8006d8c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d88:	f001 fbca 	bl	8008520 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d8c:	f001 fbea 	bl	8008564 <vPortExitCritical>
				return pdPASS;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e062      	b.n	8006e5a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d9a:	f001 fbe3 	bl	8008564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e05b      	b.n	8006e5a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da8:	2314      	movs	r3, #20
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	0018      	movs	r0, r3
 8006dae:	f000 fe15 	bl	80079dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006db2:	2301      	movs	r3, #1
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db6:	f001 fbd5 	bl	8008564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dba:	f000 fbc7 	bl	800754c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dbe:	f001 fbbf 	bl	8008540 <vPortEnterCritical>
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	2244      	movs	r2, #68	; 0x44
 8006dc6:	5c9b      	ldrb	r3, [r3, r2]
 8006dc8:	b25b      	sxtb	r3, r3
 8006dca:	3301      	adds	r3, #1
 8006dcc:	d103      	bne.n	8006dd6 <xQueueReceive+0xde>
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	2244      	movs	r2, #68	; 0x44
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	5499      	strb	r1, [r3, r2]
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	2245      	movs	r2, #69	; 0x45
 8006dda:	5c9b      	ldrb	r3, [r3, r2]
 8006ddc:	b25b      	sxtb	r3, r3
 8006dde:	3301      	adds	r3, #1
 8006de0:	d103      	bne.n	8006dea <xQueueReceive+0xf2>
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	2245      	movs	r2, #69	; 0x45
 8006de6:	2100      	movs	r1, #0
 8006de8:	5499      	strb	r1, [r3, r2]
 8006dea:	f001 fbbb 	bl	8008564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dee:	1d3a      	adds	r2, r7, #4
 8006df0:	2314      	movs	r3, #20
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	0011      	movs	r1, r2
 8006df6:	0018      	movs	r0, r3
 8006df8:	f000 fe04 	bl	8007a04 <xTaskCheckForTimeOut>
 8006dfc:	1e03      	subs	r3, r0, #0
 8006dfe:	d11e      	bne.n	8006e3e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	0018      	movs	r0, r3
 8006e04:	f000 f91c 	bl	8007040 <prvIsQueueEmpty>
 8006e08:	1e03      	subs	r3, r0, #0
 8006e0a:	d011      	beq.n	8006e30 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	3324      	adds	r3, #36	; 0x24
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	0011      	movs	r1, r2
 8006e14:	0018      	movs	r0, r3
 8006e16:	f000 fd41 	bl	800789c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f000 f8b1 	bl	8006f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e22:	f000 fb9f 	bl	8007564 <xTaskResumeAll>
 8006e26:	1e03      	subs	r3, r0, #0
 8006e28:	d191      	bne.n	8006d4e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006e2a:	f001 fb79 	bl	8008520 <vPortYield>
 8006e2e:	e78e      	b.n	8006d4e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	0018      	movs	r0, r3
 8006e34:	f000 f8a6 	bl	8006f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e38:	f000 fb94 	bl	8007564 <xTaskResumeAll>
 8006e3c:	e787      	b.n	8006d4e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	0018      	movs	r0, r3
 8006e42:	f000 f89f 	bl	8006f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e46:	f000 fb8d 	bl	8007564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f000 f8f7 	bl	8007040 <prvIsQueueEmpty>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d100      	bne.n	8006e58 <xQueueReceive+0x160>
 8006e56:	e77a      	b.n	8006d4e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b00a      	add	sp, #40	; 0x28
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10e      	bne.n	8006e9e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d14e      	bne.n	8006f26 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f000 fef7 	bl	8007c80 <xTaskPriorityDisinherit>
 8006e92:	0003      	movs	r3, r0
 8006e94:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	e043      	b.n	8006f26 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d119      	bne.n	8006ed8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6858      	ldr	r0, [r3, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	0019      	movs	r1, r3
 8006eb0:	f001 fdba 	bl	8008a28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	18d2      	adds	r2, r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d32b      	bcc.n	8006f26 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	e026      	b.n	8006f26 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68d8      	ldr	r0, [r3, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	f001 fda0 	bl	8008a28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	425b      	negs	r3, r3
 8006ef2:	18d2      	adds	r2, r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d207      	bcs.n	8006f14 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	425b      	negs	r3, r3
 8006f0e:	18d2      	adds	r2, r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d105      	bne.n	8006f26 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f2e:	697b      	ldr	r3, [r7, #20]
}
 8006f30:	0018      	movs	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b006      	add	sp, #24
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	18d2      	adds	r2, r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d303      	bcc.n	8006f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68d9      	ldr	r1, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	0018      	movs	r0, r3
 8006f78:	f001 fd56 	bl	8008a28 <memcpy>
	}
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b002      	add	sp, #8
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f8c:	f001 fad8 	bl	8008540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f90:	230f      	movs	r3, #15
 8006f92:	18fb      	adds	r3, r7, r3
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	2145      	movs	r1, #69	; 0x45
 8006f98:	5c52      	ldrb	r2, [r2, r1]
 8006f9a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f9c:	e013      	b.n	8006fc6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d016      	beq.n	8006fd4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3324      	adds	r3, #36	; 0x24
 8006faa:	0018      	movs	r0, r3
 8006fac:	f000 fcba 	bl	8007924 <xTaskRemoveFromEventList>
 8006fb0:	1e03      	subs	r3, r0, #0
 8006fb2:	d001      	beq.n	8006fb8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fb4:	f000 fd76 	bl	8007aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fb8:	210f      	movs	r1, #15
 8006fba:	187b      	adds	r3, r7, r1
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fc6:	230f      	movs	r3, #15
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b25b      	sxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dce5      	bgt.n	8006f9e <prvUnlockQueue+0x1a>
 8006fd2:	e000      	b.n	8006fd6 <prvUnlockQueue+0x52>
					break;
 8006fd4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2245      	movs	r2, #69	; 0x45
 8006fda:	21ff      	movs	r1, #255	; 0xff
 8006fdc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006fde:	f001 fac1 	bl	8008564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fe2:	f001 faad 	bl	8008540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fe6:	230e      	movs	r3, #14
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	2144      	movs	r1, #68	; 0x44
 8006fee:	5c52      	ldrb	r2, [r2, r1]
 8006ff0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ff2:	e013      	b.n	800701c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3310      	adds	r3, #16
 8007000:	0018      	movs	r0, r3
 8007002:	f000 fc8f 	bl	8007924 <xTaskRemoveFromEventList>
 8007006:	1e03      	subs	r3, r0, #0
 8007008:	d001      	beq.n	800700e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800700a:	f000 fd4b 	bl	8007aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800700e:	210e      	movs	r1, #14
 8007010:	187b      	adds	r3, r7, r1
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	3b01      	subs	r3, #1
 8007016:	b2da      	uxtb	r2, r3
 8007018:	187b      	adds	r3, r7, r1
 800701a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800701c:	230e      	movs	r3, #14
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b25b      	sxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	dce5      	bgt.n	8006ff4 <prvUnlockQueue+0x70>
 8007028:	e000      	b.n	800702c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800702a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2244      	movs	r2, #68	; 0x44
 8007030:	21ff      	movs	r1, #255	; 0xff
 8007032:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007034:	f001 fa96 	bl	8008564 <vPortExitCritical>
}
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	46bd      	mov	sp, r7
 800703c:	b004      	add	sp, #16
 800703e:	bd80      	pop	{r7, pc}

08007040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007048:	f001 fa7a 	bl	8008540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e001      	b.n	800705e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800705e:	f001 fa81 	bl	8008564 <vPortExitCritical>

	return xReturn;
 8007062:	68fb      	ldr	r3, [r7, #12]
}
 8007064:	0018      	movs	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	b004      	add	sp, #16
 800706a:	bd80      	pop	{r7, pc}

0800706c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007074:	f001 fa64 	bl	8008540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007080:	429a      	cmp	r2, r3
 8007082:	d102      	bne.n	800708a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e001      	b.n	800708e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800708e:	f001 fa69 	bl	8008564 <vPortExitCritical>

	return xReturn;
 8007092:	68fb      	ldr	r3, [r7, #12]
}
 8007094:	0018      	movs	r0, r3
 8007096:	46bd      	mov	sp, r7
 8007098:	b004      	add	sp, #16
 800709a:	bd80      	pop	{r7, pc}

0800709c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	e015      	b.n	80070d8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070ac:	4b0e      	ldr	r3, [pc, #56]	; (80070e8 <vQueueAddToRegistry+0x4c>)
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	00d2      	lsls	r2, r2, #3
 80070b2:	58d3      	ldr	r3, [r2, r3]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10c      	bne.n	80070d2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <vQueueAddToRegistry+0x4c>)
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	00d2      	lsls	r2, r2, #3
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <vQueueAddToRegistry+0x4c>)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	18d3      	adds	r3, r2, r3
 80070ca:	3304      	adds	r3, #4
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070d0:	e006      	b.n	80070e0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b07      	cmp	r3, #7
 80070dc:	d9e6      	bls.n	80070ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	46c0      	nop			; (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b004      	add	sp, #16
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20001d14 	.word	0x20001d14

080070ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070fc:	f001 fa20 	bl	8008540 <vPortEnterCritical>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2244      	movs	r2, #68	; 0x44
 8007104:	5c9b      	ldrb	r3, [r3, r2]
 8007106:	b25b      	sxtb	r3, r3
 8007108:	3301      	adds	r3, #1
 800710a:	d103      	bne.n	8007114 <vQueueWaitForMessageRestricted+0x28>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2244      	movs	r2, #68	; 0x44
 8007110:	2100      	movs	r1, #0
 8007112:	5499      	strb	r1, [r3, r2]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2245      	movs	r2, #69	; 0x45
 8007118:	5c9b      	ldrb	r3, [r3, r2]
 800711a:	b25b      	sxtb	r3, r3
 800711c:	3301      	adds	r3, #1
 800711e:	d103      	bne.n	8007128 <vQueueWaitForMessageRestricted+0x3c>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2245      	movs	r2, #69	; 0x45
 8007124:	2100      	movs	r1, #0
 8007126:	5499      	strb	r1, [r3, r2]
 8007128:	f001 fa1c 	bl	8008564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3324      	adds	r3, #36	; 0x24
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	0018      	movs	r0, r3
 800713e:	f000 fbcb 	bl	80078d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	0018      	movs	r0, r3
 8007146:	f7ff ff1d 	bl	8006f84 <prvUnlockQueue>
	}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	46bd      	mov	sp, r7
 800714e:	b006      	add	sp, #24
 8007150:	bd80      	pop	{r7, pc}

08007152 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007152:	b590      	push	{r4, r7, lr}
 8007154:	b08d      	sub	sp, #52	; 0x34
 8007156:	af04      	add	r7, sp, #16
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <xTaskCreateStatic+0x18>
 8007166:	b672      	cpsid	i
 8007168:	e7fe      	b.n	8007168 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <xTaskCreateStatic+0x22>
 8007170:	b672      	cpsid	i
 8007172:	e7fe      	b.n	8007172 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007174:	235c      	movs	r3, #92	; 0x5c
 8007176:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b5c      	cmp	r3, #92	; 0x5c
 800717c:	d001      	beq.n	8007182 <xTaskCreateStatic+0x30>
 800717e:	b672      	cpsid	i
 8007180:	e7fe      	b.n	8007180 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007182:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	2b00      	cmp	r3, #0
 8007188:	d020      	beq.n	80071cc <xTaskCreateStatic+0x7a>
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01d      	beq.n	80071cc <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007198:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2259      	movs	r2, #89	; 0x59
 800719e:	2102      	movs	r1, #2
 80071a0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071a2:	683c      	ldr	r4, [r7, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	2318      	movs	r3, #24
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	0023      	movs	r3, r4
 80071be:	f000 f859 	bl	8007274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	0018      	movs	r0, r3
 80071c6:	f000 f8df 	bl	8007388 <prvAddNewTaskToReadyList>
 80071ca:	e001      	b.n	80071d0 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071d0:	69bb      	ldr	r3, [r7, #24]
	}
 80071d2:	0018      	movs	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b009      	add	sp, #36	; 0x24
 80071d8:	bd90      	pop	{r4, r7, pc}

080071da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071da:	b590      	push	{r4, r7, lr}
 80071dc:	b08d      	sub	sp, #52	; 0x34
 80071de:	af04      	add	r7, sp, #16
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	1dbb      	adds	r3, r7, #6
 80071e8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071ea:	1dbb      	adds	r3, r7, #6
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	0018      	movs	r0, r3
 80071f2:	f001 fa3d 	bl	8008670 <pvPortMalloc>
 80071f6:	0003      	movs	r3, r0
 80071f8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d010      	beq.n	8007222 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007200:	205c      	movs	r0, #92	; 0x5c
 8007202:	f001 fa35 	bl	8008670 <pvPortMalloc>
 8007206:	0003      	movs	r3, r0
 8007208:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	631a      	str	r2, [r3, #48]	; 0x30
 8007216:	e006      	b.n	8007226 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	0018      	movs	r0, r3
 800721c:	f001 fad4 	bl	80087c8 <vPortFree>
 8007220:	e001      	b.n	8007226 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01a      	beq.n	8007262 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2259      	movs	r2, #89	; 0x59
 8007230:	2100      	movs	r1, #0
 8007232:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007234:	1dbb      	adds	r3, r7, #6
 8007236:	881a      	ldrh	r2, [r3, #0]
 8007238:	683c      	ldr	r4, [r7, #0]
 800723a:	68b9      	ldr	r1, [r7, #8]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	2300      	movs	r3, #0
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	0023      	movs	r3, r4
 8007250:	f000 f810 	bl	8007274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	0018      	movs	r0, r3
 8007258:	f000 f896 	bl	8007388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800725c:	2301      	movs	r3, #1
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	e002      	b.n	8007268 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007262:	2301      	movs	r3, #1
 8007264:	425b      	negs	r3, r3
 8007266:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007268:	69bb      	ldr	r3, [r7, #24]
	}
 800726a:	0018      	movs	r0, r3
 800726c:	46bd      	mov	sp, r7
 800726e:	b009      	add	sp, #36	; 0x24
 8007270:	bd90      	pop	{r4, r7, pc}
	...

08007274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	001a      	movs	r2, r3
 800728c:	21a5      	movs	r1, #165	; 0xa5
 800728e:	f001 fbd4 	bl	8008a3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	493a      	ldr	r1, [pc, #232]	; (8007384 <prvInitialiseNewTask+0x110>)
 800729a:	468c      	mov	ip, r1
 800729c:	4463      	add	r3, ip
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	18d3      	adds	r3, r2, r3
 80072a2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2207      	movs	r2, #7
 80072a8:	4393      	bics	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2207      	movs	r2, #7
 80072b0:	4013      	ands	r3, r2
 80072b2:	d001      	beq.n	80072b8 <prvInitialiseNewTask+0x44>
 80072b4:	b672      	cpsid	i
 80072b6:	e7fe      	b.n	80072b6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d020      	beq.n	8007300 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e013      	b.n	80072ec <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	18d3      	adds	r3, r2, r3
 80072ca:	7818      	ldrb	r0, [r3, #0]
 80072cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ce:	2134      	movs	r1, #52	; 0x34
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	18d3      	adds	r3, r2, r3
 80072d4:	185b      	adds	r3, r3, r1
 80072d6:	1c02      	adds	r2, r0, #0
 80072d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	3301      	adds	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b0f      	cmp	r3, #15
 80072f0:	d9e8      	bls.n	80072c4 <prvInitialiseNewTask+0x50>
 80072f2:	e000      	b.n	80072f6 <prvInitialiseNewTask+0x82>
			{
				break;
 80072f4:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	2243      	movs	r2, #67	; 0x43
 80072fa:	2100      	movs	r1, #0
 80072fc:	5499      	strb	r1, [r3, r2]
 80072fe:	e003      	b.n	8007308 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	2234      	movs	r2, #52	; 0x34
 8007304:	2100      	movs	r1, #0
 8007306:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2b37      	cmp	r3, #55	; 0x37
 800730c:	d901      	bls.n	8007312 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800730e:	2337      	movs	r3, #55	; 0x37
 8007310:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	6a3a      	ldr	r2, [r7, #32]
 800731c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	2200      	movs	r2, #0
 8007322:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	3304      	adds	r3, #4
 8007328:	0018      	movs	r0, r3
 800732a:	f7ff fa5b 	bl	80067e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	3318      	adds	r3, #24
 8007332:	0018      	movs	r0, r3
 8007334:	f7ff fa56 	bl	80067e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800733c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	2238      	movs	r2, #56	; 0x38
 8007342:	1ad2      	subs	r2, r2, r3
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800734c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	2200      	movs	r2, #0
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	2258      	movs	r2, #88	; 0x58
 8007358:	2100      	movs	r1, #0
 800735a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	0018      	movs	r0, r3
 8007364:	f001 f84e 	bl	8008404 <pxPortInitialiseStack>
 8007368:	0002      	movs	r2, r0
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	46bd      	mov	sp, r7
 800737e:	b006      	add	sp, #24
 8007380:	bd80      	pop	{r7, pc}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	3fffffff 	.word	0x3fffffff

08007388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007390:	f001 f8d6 	bl	8008540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007394:	4b2a      	ldr	r3, [pc, #168]	; (8007440 <prvAddNewTaskToReadyList+0xb8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	4b29      	ldr	r3, [pc, #164]	; (8007440 <prvAddNewTaskToReadyList+0xb8>)
 800739c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800739e:	4b29      	ldr	r3, [pc, #164]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073a6:	4b27      	ldr	r3, [pc, #156]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073ac:	4b24      	ldr	r3, [pc, #144]	; (8007440 <prvAddNewTaskToReadyList+0xb8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d110      	bne.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073b4:	f000 fb90 	bl	8007ad8 <prvInitialiseTaskLists>
 80073b8:	e00d      	b.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <prvAddNewTaskToReadyList+0xc0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073c2:	4b20      	ldr	r3, [pc, #128]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d802      	bhi.n	80073d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073d0:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <prvAddNewTaskToReadyList+0xc4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	4b1b      	ldr	r3, [pc, #108]	; (800744c <prvAddNewTaskToReadyList+0xc4>)
 80073de:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073e0:	4b1a      	ldr	r3, [pc, #104]	; (800744c <prvAddNewTaskToReadyList+0xc4>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ec:	4b18      	ldr	r3, [pc, #96]	; (8007450 <prvAddNewTaskToReadyList+0xc8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <prvAddNewTaskToReadyList+0x74>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	4b15      	ldr	r3, [pc, #84]	; (8007450 <prvAddNewTaskToReadyList+0xc8>)
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	0013      	movs	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	189b      	adds	r3, r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4a12      	ldr	r2, [pc, #72]	; (8007454 <prvAddNewTaskToReadyList+0xcc>)
 800740a:	189a      	adds	r2, r3, r2
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	0019      	movs	r1, r3
 8007412:	0010      	movs	r0, r2
 8007414:	f7ff f9f1 	bl	80067fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007418:	f001 f8a4 	bl	8008564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <prvAddNewTaskToReadyList+0xc0>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007424:	4b07      	ldr	r3, [pc, #28]	; (8007444 <prvAddNewTaskToReadyList+0xbc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	429a      	cmp	r2, r3
 8007430:	d201      	bcs.n	8007436 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007432:	f001 f875 	bl	8008520 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	46bd      	mov	sp, r7
 800743a:	b002      	add	sp, #8
 800743c:	bd80      	pop	{r7, pc}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	20000d98 	.word	0x20000d98
 8007444:	200008c4 	.word	0x200008c4
 8007448:	20000da4 	.word	0x20000da4
 800744c:	20000db4 	.word	0x20000db4
 8007450:	20000da0 	.word	0x20000da0
 8007454:	200008c8 	.word	0x200008c8

08007458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d010      	beq.n	800748c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <vTaskDelay+0x48>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <vTaskDelay+0x1e>
 8007472:	b672      	cpsid	i
 8007474:	e7fe      	b.n	8007474 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007476:	f000 f869 	bl	800754c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2100      	movs	r1, #0
 800747e:	0018      	movs	r0, r3
 8007480:	f000 fc5a 	bl	8007d38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007484:	f000 f86e 	bl	8007564 <xTaskResumeAll>
 8007488:	0003      	movs	r3, r0
 800748a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007492:	f001 f845 	bl	8008520 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	46bd      	mov	sp, r7
 800749a:	b004      	add	sp, #16
 800749c:	bd80      	pop	{r7, pc}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	20000dc0 	.word	0x20000dc0

080074a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074b2:	003a      	movs	r2, r7
 80074b4:	1d39      	adds	r1, r7, #4
 80074b6:	2308      	movs	r3, #8
 80074b8:	18fb      	adds	r3, r7, r3
 80074ba:	0018      	movs	r0, r3
 80074bc:	f7ff f944 	bl	8006748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074c0:	683c      	ldr	r4, [r7, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	491b      	ldr	r1, [pc, #108]	; (8007534 <vTaskStartScheduler+0x90>)
 80074c8:	481b      	ldr	r0, [pc, #108]	; (8007538 <vTaskStartScheduler+0x94>)
 80074ca:	9202      	str	r2, [sp, #8]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	2300      	movs	r3, #0
 80074d4:	0022      	movs	r2, r4
 80074d6:	f7ff fe3c 	bl	8007152 <xTaskCreateStatic>
 80074da:	0002      	movs	r2, r0
 80074dc:	4b17      	ldr	r3, [pc, #92]	; (800753c <vTaskStartScheduler+0x98>)
 80074de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074e0:	4b16      	ldr	r3, [pc, #88]	; (800753c <vTaskStartScheduler+0x98>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074e8:	2301      	movs	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e001      	b.n	80074f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d103      	bne.n	8007500 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80074f8:	f000 fc72 	bl	8007de0 <xTimerCreateTimerTask>
 80074fc:	0003      	movs	r3, r0
 80074fe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d10d      	bne.n	8007522 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007506:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007508:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <vTaskStartScheduler+0x9c>)
 800750a:	2201      	movs	r2, #1
 800750c:	4252      	negs	r2, r2
 800750e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007510:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <vTaskStartScheduler+0xa0>)
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <vTaskStartScheduler+0xa4>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800751c:	f000 ffdc 	bl	80084d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007520:	e004      	b.n	800752c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	d101      	bne.n	800752c <vTaskStartScheduler+0x88>
 8007528:	b672      	cpsid	i
 800752a:	e7fe      	b.n	800752a <vTaskStartScheduler+0x86>
}
 800752c:	46c0      	nop			; (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b005      	add	sp, #20
 8007532:	bd90      	pop	{r4, r7, pc}
 8007534:	0800b804 	.word	0x0800b804
 8007538:	08007ab9 	.word	0x08007ab9
 800753c:	20000dbc 	.word	0x20000dbc
 8007540:	20000db8 	.word	0x20000db8
 8007544:	20000da4 	.word	0x20000da4
 8007548:	20000d9c 	.word	0x20000d9c

0800754c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007550:	4b03      	ldr	r3, [pc, #12]	; (8007560 <vTaskSuspendAll+0x14>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	4b02      	ldr	r3, [pc, #8]	; (8007560 <vTaskSuspendAll+0x14>)
 8007558:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000dc0 	.word	0x20000dc0

08007564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800756e:	2300      	movs	r3, #0
 8007570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007572:	4b3a      	ldr	r3, [pc, #232]	; (800765c <xTaskResumeAll+0xf8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <xTaskResumeAll+0x1a>
 800757a:	b672      	cpsid	i
 800757c:	e7fe      	b.n	800757c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800757e:	f000 ffdf 	bl	8008540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007582:	4b36      	ldr	r3, [pc, #216]	; (800765c <xTaskResumeAll+0xf8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	1e5a      	subs	r2, r3, #1
 8007588:	4b34      	ldr	r3, [pc, #208]	; (800765c <xTaskResumeAll+0xf8>)
 800758a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800758c:	4b33      	ldr	r3, [pc, #204]	; (800765c <xTaskResumeAll+0xf8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d15b      	bne.n	800764c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007594:	4b32      	ldr	r3, [pc, #200]	; (8007660 <xTaskResumeAll+0xfc>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d057      	beq.n	800764c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800759c:	e02f      	b.n	80075fe <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759e:	4b31      	ldr	r3, [pc, #196]	; (8007664 <xTaskResumeAll+0x100>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3318      	adds	r3, #24
 80075aa:	0018      	movs	r0, r3
 80075ac:	f7ff f97d 	bl	80068aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3304      	adds	r3, #4
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7ff f978 	bl	80068aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	4b2a      	ldr	r3, [pc, #168]	; (8007668 <xTaskResumeAll+0x104>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d903      	bls.n	80075ce <xTaskResumeAll+0x6a>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ca:	4b27      	ldr	r3, [pc, #156]	; (8007668 <xTaskResumeAll+0x104>)
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d2:	0013      	movs	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	189b      	adds	r3, r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4a24      	ldr	r2, [pc, #144]	; (800766c <xTaskResumeAll+0x108>)
 80075dc:	189a      	adds	r2, r3, r2
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3304      	adds	r3, #4
 80075e2:	0019      	movs	r1, r3
 80075e4:	0010      	movs	r0, r2
 80075e6:	f7ff f908 	bl	80067fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ee:	4b20      	ldr	r3, [pc, #128]	; (8007670 <xTaskResumeAll+0x10c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d302      	bcc.n	80075fe <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80075f8:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <xTaskResumeAll+0x110>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075fe:	4b19      	ldr	r3, [pc, #100]	; (8007664 <xTaskResumeAll+0x100>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1cb      	bne.n	800759e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800760c:	f000 fafe 	bl	8007c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007610:	4b19      	ldr	r3, [pc, #100]	; (8007678 <xTaskResumeAll+0x114>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00f      	beq.n	800763c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800761c:	f000 f83c 	bl	8007698 <xTaskIncrementTick>
 8007620:	1e03      	subs	r3, r0, #0
 8007622:	d002      	beq.n	800762a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <xTaskResumeAll+0x110>)
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3b01      	subs	r3, #1
 800762e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f2      	bne.n	800761c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <xTaskResumeAll+0x114>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800763c:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <xTaskResumeAll+0x110>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007648:	f000 ff6a 	bl	8008520 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800764c:	f000 ff8a 	bl	8008564 <vPortExitCritical>

	return xAlreadyYielded;
 8007650:	68bb      	ldr	r3, [r7, #8]
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b004      	add	sp, #16
 8007658:	bd80      	pop	{r7, pc}
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	20000dc0 	.word	0x20000dc0
 8007660:	20000d98 	.word	0x20000d98
 8007664:	20000d58 	.word	0x20000d58
 8007668:	20000da0 	.word	0x20000da0
 800766c:	200008c8 	.word	0x200008c8
 8007670:	200008c4 	.word	0x200008c4
 8007674:	20000dac 	.word	0x20000dac
 8007678:	20000da8 	.word	0x20000da8

0800767c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007682:	4b04      	ldr	r3, [pc, #16]	; (8007694 <xTaskGetTickCount+0x18>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007688:	687b      	ldr	r3, [r7, #4]
}
 800768a:	0018      	movs	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	b002      	add	sp, #8
 8007690:	bd80      	pop	{r7, pc}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	20000d9c 	.word	0x20000d9c

08007698 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a2:	4b4a      	ldr	r3, [pc, #296]	; (80077cc <xTaskIncrementTick+0x134>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d000      	beq.n	80076ac <xTaskIncrementTick+0x14>
 80076aa:	e084      	b.n	80077b6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076ac:	4b48      	ldr	r3, [pc, #288]	; (80077d0 <xTaskIncrementTick+0x138>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076b4:	4b46      	ldr	r3, [pc, #280]	; (80077d0 <xTaskIncrementTick+0x138>)
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d117      	bne.n	80076f0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80076c0:	4b44      	ldr	r3, [pc, #272]	; (80077d4 <xTaskIncrementTick+0x13c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <xTaskIncrementTick+0x36>
 80076ca:	b672      	cpsid	i
 80076cc:	e7fe      	b.n	80076cc <xTaskIncrementTick+0x34>
 80076ce:	4b41      	ldr	r3, [pc, #260]	; (80077d4 <xTaskIncrementTick+0x13c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	4b40      	ldr	r3, [pc, #256]	; (80077d8 <xTaskIncrementTick+0x140>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b3e      	ldr	r3, [pc, #248]	; (80077d4 <xTaskIncrementTick+0x13c>)
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	4b3e      	ldr	r3, [pc, #248]	; (80077d8 <xTaskIncrementTick+0x140>)
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	4b3e      	ldr	r3, [pc, #248]	; (80077dc <xTaskIncrementTick+0x144>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	4b3c      	ldr	r3, [pc, #240]	; (80077dc <xTaskIncrementTick+0x144>)
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f000 fa8e 	bl	8007c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076f0:	4b3b      	ldr	r3, [pc, #236]	; (80077e0 <xTaskIncrementTick+0x148>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d349      	bcc.n	800778e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076fa:	4b36      	ldr	r3, [pc, #216]	; (80077d4 <xTaskIncrementTick+0x13c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007704:	4b36      	ldr	r3, [pc, #216]	; (80077e0 <xTaskIncrementTick+0x148>)
 8007706:	2201      	movs	r2, #1
 8007708:	4252      	negs	r2, r2
 800770a:	601a      	str	r2, [r3, #0]
					break;
 800770c:	e03f      	b.n	800778e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770e:	4b31      	ldr	r3, [pc, #196]	; (80077d4 <xTaskIncrementTick+0x13c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d203      	bcs.n	800772e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <xTaskIncrementTick+0x148>)
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800772c:	e02f      	b.n	800778e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	3304      	adds	r3, #4
 8007732:	0018      	movs	r0, r3
 8007734:	f7ff f8b9 	bl	80068aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	3318      	adds	r3, #24
 8007744:	0018      	movs	r0, r3
 8007746:	f7ff f8b0 	bl	80068aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	4b25      	ldr	r3, [pc, #148]	; (80077e4 <xTaskIncrementTick+0x14c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d903      	bls.n	800775e <xTaskIncrementTick+0xc6>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775a:	4b22      	ldr	r3, [pc, #136]	; (80077e4 <xTaskIncrementTick+0x14c>)
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007762:	0013      	movs	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	189b      	adds	r3, r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4a1f      	ldr	r2, [pc, #124]	; (80077e8 <xTaskIncrementTick+0x150>)
 800776c:	189a      	adds	r2, r3, r2
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3304      	adds	r3, #4
 8007772:	0019      	movs	r1, r3
 8007774:	0010      	movs	r0, r2
 8007776:	f7ff f840 	bl	80067fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777e:	4b1b      	ldr	r3, [pc, #108]	; (80077ec <xTaskIncrementTick+0x154>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	429a      	cmp	r2, r3
 8007786:	d3b8      	bcc.n	80076fa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800778c:	e7b5      	b.n	80076fa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800778e:	4b17      	ldr	r3, [pc, #92]	; (80077ec <xTaskIncrementTick+0x154>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4914      	ldr	r1, [pc, #80]	; (80077e8 <xTaskIncrementTick+0x150>)
 8007796:	0013      	movs	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	189b      	adds	r3, r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	585b      	ldr	r3, [r3, r1]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d901      	bls.n	80077a8 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077a8:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <xTaskIncrementTick+0x158>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	e004      	b.n	80077c0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077b6:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <xTaskIncrementTick+0x15c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <xTaskIncrementTick+0x15c>)
 80077be:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077c0:	697b      	ldr	r3, [r7, #20]
}
 80077c2:	0018      	movs	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b006      	add	sp, #24
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	20000dc0 	.word	0x20000dc0
 80077d0:	20000d9c 	.word	0x20000d9c
 80077d4:	20000d50 	.word	0x20000d50
 80077d8:	20000d54 	.word	0x20000d54
 80077dc:	20000db0 	.word	0x20000db0
 80077e0:	20000db8 	.word	0x20000db8
 80077e4:	20000da0 	.word	0x20000da0
 80077e8:	200008c8 	.word	0x200008c8
 80077ec:	200008c4 	.word	0x200008c4
 80077f0:	20000dac 	.word	0x20000dac
 80077f4:	20000da8 	.word	0x20000da8

080077f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077fe:	4b22      	ldr	r3, [pc, #136]	; (8007888 <vTaskSwitchContext+0x90>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007806:	4b21      	ldr	r3, [pc, #132]	; (800788c <vTaskSwitchContext+0x94>)
 8007808:	2201      	movs	r2, #1
 800780a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800780c:	e037      	b.n	800787e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800780e:	4b1f      	ldr	r3, [pc, #124]	; (800788c <vTaskSwitchContext+0x94>)
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007814:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <vTaskSwitchContext+0x98>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	607b      	str	r3, [r7, #4]
 800781a:	e007      	b.n	800782c <vTaskSwitchContext+0x34>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <vTaskSwitchContext+0x2e>
 8007822:	b672      	cpsid	i
 8007824:	e7fe      	b.n	8007824 <vTaskSwitchContext+0x2c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3b01      	subs	r3, #1
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	4919      	ldr	r1, [pc, #100]	; (8007894 <vTaskSwitchContext+0x9c>)
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	0013      	movs	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	189b      	adds	r3, r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	585b      	ldr	r3, [r3, r1]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0ee      	beq.n	800781c <vTaskSwitchContext+0x24>
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	0013      	movs	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	189b      	adds	r3, r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4a12      	ldr	r2, [pc, #72]	; (8007894 <vTaskSwitchContext+0x9c>)
 800784a:	189b      	adds	r3, r3, r2
 800784c:	603b      	str	r3, [r7, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	605a      	str	r2, [r3, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	429a      	cmp	r2, r3
 8007862:	d104      	bne.n	800786e <vTaskSwitchContext+0x76>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	605a      	str	r2, [r3, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	4b08      	ldr	r3, [pc, #32]	; (8007898 <vTaskSwitchContext+0xa0>)
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <vTaskSwitchContext+0x98>)
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	46bd      	mov	sp, r7
 8007882:	b002      	add	sp, #8
 8007884:	bd80      	pop	{r7, pc}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	20000dc0 	.word	0x20000dc0
 800788c:	20000dac 	.word	0x20000dac
 8007890:	20000da0 	.word	0x20000da0
 8007894:	200008c8 	.word	0x200008c8
 8007898:	200008c4 	.word	0x200008c4

0800789c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <vTaskPlaceOnEventList+0x14>
 80078ac:	b672      	cpsid	i
 80078ae:	e7fe      	b.n	80078ae <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <vTaskPlaceOnEventList+0x38>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3318      	adds	r3, #24
 80078b6:	001a      	movs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	0011      	movs	r1, r2
 80078bc:	0018      	movs	r0, r3
 80078be:	f7fe ffbe 	bl	800683e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2101      	movs	r1, #1
 80078c6:	0018      	movs	r0, r3
 80078c8:	f000 fa36 	bl	8007d38 <prvAddCurrentTaskToDelayedList>
}
 80078cc:	46c0      	nop			; (mov r8, r8)
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b002      	add	sp, #8
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200008c4 	.word	0x200008c4

080078d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <vTaskPlaceOnEventListRestricted+0x16>
 80078ea:	b672      	cpsid	i
 80078ec:	e7fe      	b.n	80078ec <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078ee:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <vTaskPlaceOnEventListRestricted+0x48>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3318      	adds	r3, #24
 80078f4:	001a      	movs	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	0011      	movs	r1, r2
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7fe ff7d 	bl	80067fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007906:	2301      	movs	r3, #1
 8007908:	425b      	negs	r3, r3
 800790a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	0011      	movs	r1, r2
 8007912:	0018      	movs	r0, r3
 8007914:	f000 fa10 	bl	8007d38 <prvAddCurrentTaskToDelayedList>
	}
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b004      	add	sp, #16
 800791e:	bd80      	pop	{r7, pc}
 8007920:	200008c4 	.word	0x200008c4

08007924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <xTaskRemoveFromEventList+0x1a>
 800793a:	b672      	cpsid	i
 800793c:	e7fe      	b.n	800793c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	3318      	adds	r3, #24
 8007942:	0018      	movs	r0, r3
 8007944:	f7fe ffb1 	bl	80068aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007948:	4b1e      	ldr	r3, [pc, #120]	; (80079c4 <xTaskRemoveFromEventList+0xa0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11d      	bne.n	800798c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3304      	adds	r3, #4
 8007954:	0018      	movs	r0, r3
 8007956:	f7fe ffa8 	bl	80068aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <xTaskRemoveFromEventList+0xa4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d903      	bls.n	800796e <xTaskRemoveFromEventList+0x4a>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	4b17      	ldr	r3, [pc, #92]	; (80079c8 <xTaskRemoveFromEventList+0xa4>)
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	0013      	movs	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	189b      	adds	r3, r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4a14      	ldr	r2, [pc, #80]	; (80079cc <xTaskRemoveFromEventList+0xa8>)
 800797c:	189a      	adds	r2, r3, r2
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3304      	adds	r3, #4
 8007982:	0019      	movs	r1, r3
 8007984:	0010      	movs	r0, r2
 8007986:	f7fe ff38 	bl	80067fa <vListInsertEnd>
 800798a:	e007      	b.n	800799c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	3318      	adds	r3, #24
 8007990:	001a      	movs	r2, r3
 8007992:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <xTaskRemoveFromEventList+0xac>)
 8007994:	0011      	movs	r1, r2
 8007996:	0018      	movs	r0, r3
 8007998:	f7fe ff2f 	bl	80067fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4b0c      	ldr	r3, [pc, #48]	; (80079d4 <xTaskRemoveFromEventList+0xb0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d905      	bls.n	80079b6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079ae:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <xTaskRemoveFromEventList+0xb4>)
 80079b0:	2201      	movs	r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e001      	b.n	80079ba <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80079ba:	68fb      	ldr	r3, [r7, #12]
}
 80079bc:	0018      	movs	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	b004      	add	sp, #16
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20000dc0 	.word	0x20000dc0
 80079c8:	20000da0 	.word	0x20000da0
 80079cc:	200008c8 	.word	0x200008c8
 80079d0:	20000d58 	.word	0x20000d58
 80079d4:	200008c4 	.word	0x200008c4
 80079d8:	20000dac 	.word	0x20000dac

080079dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <vTaskInternalSetTimeOutState+0x20>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079ec:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <vTaskInternalSetTimeOutState+0x24>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	605a      	str	r2, [r3, #4]
}
 80079f4:	46c0      	nop			; (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b002      	add	sp, #8
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000db0 	.word	0x20000db0
 8007a00:	20000d9c 	.word	0x20000d9c

08007a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <xTaskCheckForTimeOut+0x14>
 8007a14:	b672      	cpsid	i
 8007a16:	e7fe      	b.n	8007a16 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <xTaskCheckForTimeOut+0x1e>
 8007a1e:	b672      	cpsid	i
 8007a20:	e7fe      	b.n	8007a20 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007a22:	f000 fd8d 	bl	8008540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a26:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <xTaskCheckForTimeOut+0x98>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	d102      	bne.n	8007a44 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e024      	b.n	8007a8e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <xTaskCheckForTimeOut+0x9c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d007      	beq.n	8007a60 <xTaskCheckForTimeOut+0x5c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d302      	bcc.n	8007a60 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e016      	b.n	8007a8e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d20c      	bcs.n	8007a84 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1ad2      	subs	r2, r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7ff ffaf 	bl	80079dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	e004      	b.n	8007a8e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007a8e:	f000 fd69 	bl	8008564 <vPortExitCritical>

	return xReturn;
 8007a92:	697b      	ldr	r3, [r7, #20]
}
 8007a94:	0018      	movs	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b006      	add	sp, #24
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000d9c 	.word	0x20000d9c
 8007aa0:	20000db0 	.word	0x20000db0

08007aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <vTaskMissedYield+0x10>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20000dac 	.word	0x20000dac

08007ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ac0:	f000 f84e 	bl	8007b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ac4:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <prvIdleTask+0x1c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d9f9      	bls.n	8007ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007acc:	f000 fd28 	bl	8008520 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007ad0:	e7f6      	b.n	8007ac0 <prvIdleTask+0x8>
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	200008c8 	.word	0x200008c8

08007ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ade:	2300      	movs	r3, #0
 8007ae0:	607b      	str	r3, [r7, #4]
 8007ae2:	e00c      	b.n	8007afe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	0013      	movs	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <prvInitialiseTaskLists+0x68>)
 8007af0:	189b      	adds	r3, r3, r2
 8007af2:	0018      	movs	r0, r3
 8007af4:	f7fe fe58 	bl	80067a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3301      	adds	r3, #1
 8007afc:	607b      	str	r3, [r7, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b37      	cmp	r3, #55	; 0x37
 8007b02:	d9ef      	bls.n	8007ae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b04:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <prvInitialiseTaskLists+0x6c>)
 8007b06:	0018      	movs	r0, r3
 8007b08:	f7fe fe4e 	bl	80067a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <prvInitialiseTaskLists+0x70>)
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f7fe fe4a 	bl	80067a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <prvInitialiseTaskLists+0x74>)
 8007b16:	0018      	movs	r0, r3
 8007b18:	f7fe fe46 	bl	80067a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b1c:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <prvInitialiseTaskLists+0x78>)
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7fe fe42 	bl	80067a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <prvInitialiseTaskLists+0x7c>)
 8007b26:	0018      	movs	r0, r3
 8007b28:	f7fe fe3e 	bl	80067a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvInitialiseTaskLists+0x80>)
 8007b2e:	4a05      	ldr	r2, [pc, #20]	; (8007b44 <prvInitialiseTaskLists+0x6c>)
 8007b30:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b32:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <prvInitialiseTaskLists+0x84>)
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <prvInitialiseTaskLists+0x70>)
 8007b36:	601a      	str	r2, [r3, #0]
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	200008c8 	.word	0x200008c8
 8007b44:	20000d28 	.word	0x20000d28
 8007b48:	20000d3c 	.word	0x20000d3c
 8007b4c:	20000d58 	.word	0x20000d58
 8007b50:	20000d6c 	.word	0x20000d6c
 8007b54:	20000d84 	.word	0x20000d84
 8007b58:	20000d50 	.word	0x20000d50
 8007b5c:	20000d54 	.word	0x20000d54

08007b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b66:	e01a      	b.n	8007b9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007b68:	f000 fcea 	bl	8008540 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6c:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <prvCheckTasksWaitingTermination+0x50>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3304      	adds	r3, #4
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f7fe fe96 	bl	80068aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <prvCheckTasksWaitingTermination+0x54>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	1e5a      	subs	r2, r3, #1
 8007b84:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <prvCheckTasksWaitingTermination+0x54>)
 8007b86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b88:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <prvCheckTasksWaitingTermination+0x58>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	1e5a      	subs	r2, r3, #1
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvCheckTasksWaitingTermination+0x58>)
 8007b90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007b92:	f000 fce7 	bl	8008564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f000 f80f 	bl	8007bbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <prvCheckTasksWaitingTermination+0x58>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e0      	bne.n	8007b68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	20000d6c 	.word	0x20000d6c
 8007bb4:	20000d98 	.word	0x20000d98
 8007bb8:	20000d80 	.word	0x20000d80

08007bbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2259      	movs	r2, #89	; 0x59
 8007bc8:	5c9b      	ldrb	r3, [r3, r2]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	f000 fdf8 	bl	80087c8 <vPortFree>
				vPortFree( pxTCB );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f000 fdf4 	bl	80087c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007be0:	e010      	b.n	8007c04 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2259      	movs	r2, #89	; 0x59
 8007be6:	5c9b      	ldrb	r3, [r3, r2]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d104      	bne.n	8007bf6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f000 fdea 	bl	80087c8 <vPortFree>
	}
 8007bf4:	e006      	b.n	8007c04 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2259      	movs	r2, #89	; 0x59
 8007bfa:	5c9b      	ldrb	r3, [r3, r2]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d001      	beq.n	8007c04 <prvDeleteTCB+0x48>
 8007c00:	b672      	cpsid	i
 8007c02:	e7fe      	b.n	8007c02 <prvDeleteTCB+0x46>
	}
 8007c04:	46c0      	nop			; (mov r8, r8)
 8007c06:	46bd      	mov	sp, r7
 8007c08:	b002      	add	sp, #8
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c12:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <prvResetNextTaskUnblockTime+0x34>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c1c:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <prvResetNextTaskUnblockTime+0x38>)
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4252      	negs	r2, r2
 8007c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c24:	e008      	b.n	8007c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c26:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <prvResetNextTaskUnblockTime+0x34>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <prvResetNextTaskUnblockTime+0x38>)
 8007c36:	601a      	str	r2, [r3, #0]
}
 8007c38:	46c0      	nop			; (mov r8, r8)
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	b002      	add	sp, #8
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000d50 	.word	0x20000d50
 8007c44:	20000db8 	.word	0x20000db8

08007c48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c4e:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <xTaskGetSchedulerState+0x30>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c56:	2301      	movs	r3, #1
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	e008      	b.n	8007c6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c5c:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <xTaskGetSchedulerState+0x34>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c64:	2302      	movs	r3, #2
 8007c66:	607b      	str	r3, [r7, #4]
 8007c68:	e001      	b.n	8007c6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c6e:	687b      	ldr	r3, [r7, #4]
	}
 8007c70:	0018      	movs	r0, r3
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b002      	add	sp, #8
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20000da4 	.word	0x20000da4
 8007c7c:	20000dc0 	.word	0x20000dc0

08007c80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d044      	beq.n	8007d20 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c96:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <xTaskPriorityDisinherit+0xac>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d001      	beq.n	8007ca4 <xTaskPriorityDisinherit+0x24>
 8007ca0:	b672      	cpsid	i
 8007ca2:	e7fe      	b.n	8007ca2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <xTaskPriorityDisinherit+0x30>
 8007cac:	b672      	cpsid	i
 8007cae:	e7fe      	b.n	8007cae <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	1e5a      	subs	r2, r3, #1
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d02c      	beq.n	8007d20 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d128      	bne.n	8007d20 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f7fe fde9 	bl	80068aa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	2238      	movs	r2, #56	; 0x38
 8007ce6:	1ad2      	subs	r2, r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <xTaskPriorityDisinherit+0xb0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d903      	bls.n	8007d00 <xTaskPriorityDisinherit+0x80>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <xTaskPriorityDisinherit+0xb0>)
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	0013      	movs	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	189b      	adds	r3, r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <xTaskPriorityDisinherit+0xb4>)
 8007d0e:	189a      	adds	r2, r3, r2
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	3304      	adds	r3, #4
 8007d14:	0019      	movs	r1, r3
 8007d16:	0010      	movs	r0, r2
 8007d18:	f7fe fd6f 	bl	80067fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d20:	68fb      	ldr	r3, [r7, #12]
	}
 8007d22:	0018      	movs	r0, r3
 8007d24:	46bd      	mov	sp, r7
 8007d26:	b004      	add	sp, #16
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	200008c4 	.word	0x200008c4
 8007d30:	20000da0 	.word	0x20000da0
 8007d34:	200008c8 	.word	0x200008c8

08007d38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d42:	4b21      	ldr	r3, [pc, #132]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d48:	4b20      	ldr	r3, [pc, #128]	; (8007dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f7fe fdab 	bl	80068aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3301      	adds	r3, #1
 8007d58:	d10b      	bne.n	8007d72 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d60:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	1d1a      	adds	r2, r3, #4
 8007d66:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d68:	0011      	movs	r1, r2
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f7fe fd45 	bl	80067fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d70:	e026      	b.n	8007dc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	18d3      	adds	r3, r2, r3
 8007d78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d7a:	4b14      	ldr	r3, [pc, #80]	; (8007dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d209      	bcs.n	8007d9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3304      	adds	r3, #4
 8007d94:	0019      	movs	r1, r3
 8007d96:	0010      	movs	r0, r2
 8007d98:	f7fe fd51 	bl	800683e <vListInsert>
}
 8007d9c:	e010      	b.n	8007dc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <prvAddCurrentTaskToDelayedList+0x94>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3304      	adds	r3, #4
 8007da8:	0019      	movs	r1, r3
 8007daa:	0010      	movs	r0, r2
 8007dac:	f7fe fd47 	bl	800683e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d202      	bcs.n	8007dc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dba:	4b08      	ldr	r3, [pc, #32]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	601a      	str	r2, [r3, #0]
}
 8007dc0:	46c0      	nop			; (mov r8, r8)
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b004      	add	sp, #16
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20000d9c 	.word	0x20000d9c
 8007dcc:	200008c4 	.word	0x200008c4
 8007dd0:	20000d84 	.word	0x20000d84
 8007dd4:	20000d54 	.word	0x20000d54
 8007dd8:	20000d50 	.word	0x20000d50
 8007ddc:	20000db8 	.word	0x20000db8

08007de0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007de0:	b590      	push	{r4, r7, lr}
 8007de2:	b089      	sub	sp, #36	; 0x24
 8007de4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dea:	f000 fac9 	bl	8008380 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <xTimerCreateTimerTask+0x6c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d020      	beq.n	8007e38 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dfe:	003a      	movs	r2, r7
 8007e00:	1d39      	adds	r1, r7, #4
 8007e02:	2308      	movs	r3, #8
 8007e04:	18fb      	adds	r3, r7, r3
 8007e06:	0018      	movs	r0, r3
 8007e08:	f7fe fcb6 	bl	8006778 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e0c:	683c      	ldr	r4, [r7, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	490f      	ldr	r1, [pc, #60]	; (8007e50 <xTimerCreateTimerTask+0x70>)
 8007e14:	480f      	ldr	r0, [pc, #60]	; (8007e54 <xTimerCreateTimerTask+0x74>)
 8007e16:	9202      	str	r2, [sp, #8]
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	0022      	movs	r2, r4
 8007e22:	f7ff f996 	bl	8007152 <xTaskCreateStatic>
 8007e26:	0002      	movs	r2, r0
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <xTimerCreateTimerTask+0x78>)
 8007e2a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <xTimerCreateTimerTask+0x78>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007e34:	2301      	movs	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <xTimerCreateTimerTask+0x62>
 8007e3e:	b672      	cpsid	i
 8007e40:	e7fe      	b.n	8007e40 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8007e42:	68fb      	ldr	r3, [r7, #12]
}
 8007e44:	0018      	movs	r0, r3
 8007e46:	46bd      	mov	sp, r7
 8007e48:	b005      	add	sp, #20
 8007e4a:	bd90      	pop	{r4, r7, pc}
 8007e4c:	20000df4 	.word	0x20000df4
 8007e50:	0800b80c 	.word	0x0800b80c
 8007e54:	08007f79 	.word	0x08007f79
 8007e58:	20000df8 	.word	0x20000df8

08007e5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e5c:	b590      	push	{r4, r7, lr}
 8007e5e:	b08b      	sub	sp, #44	; 0x2c
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <xTimerGenericCommand+0x1c>
 8007e74:	b672      	cpsid	i
 8007e76:	e7fe      	b.n	8007e76 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e78:	4b1c      	ldr	r3, [pc, #112]	; (8007eec <xTimerGenericCommand+0x90>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d030      	beq.n	8007ee2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e80:	2414      	movs	r4, #20
 8007e82:	193b      	adds	r3, r7, r4
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e88:	193b      	adds	r3, r7, r4
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e8e:	193b      	adds	r3, r7, r4
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	dc19      	bgt.n	8007ece <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e9a:	f7ff fed5 	bl	8007c48 <xTaskGetSchedulerState>
 8007e9e:	0003      	movs	r3, r0
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d109      	bne.n	8007eb8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <xTimerGenericCommand+0x90>)
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eaa:	1939      	adds	r1, r7, r4
 8007eac:	2300      	movs	r3, #0
 8007eae:	f7fe fdeb 	bl	8006a88 <xQueueGenericSend>
 8007eb2:	0003      	movs	r3, r0
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb6:	e014      	b.n	8007ee2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <xTimerGenericCommand+0x90>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	2314      	movs	r3, #20
 8007ebe:	18f9      	adds	r1, r7, r3
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f7fe fde0 	bl	8006a88 <xQueueGenericSend>
 8007ec8:	0003      	movs	r3, r0
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ecc:	e009      	b.n	8007ee2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <xTimerGenericCommand+0x90>)
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	2314      	movs	r3, #20
 8007ed6:	18f9      	adds	r1, r7, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f7fe fe99 	bl	8006c10 <xQueueGenericSendFromISR>
 8007ede:	0003      	movs	r3, r0
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	b00b      	add	sp, #44	; 0x2c
 8007eea:	bd90      	pop	{r4, r7, pc}
 8007eec:	20000df4 	.word	0x20000df4

08007ef0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007efa:	4b1e      	ldr	r3, [pc, #120]	; (8007f74 <prvProcessExpiredTimer+0x84>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3304      	adds	r3, #4
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f7fe fcce 	bl	80068aa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2228      	movs	r2, #40	; 0x28
 8007f12:	5c9b      	ldrb	r3, [r3, r2]
 8007f14:	001a      	movs	r2, r3
 8007f16:	2304      	movs	r3, #4
 8007f18:	4013      	ands	r3, r2
 8007f1a:	d019      	beq.n	8007f50 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	699a      	ldr	r2, [r3, #24]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	18d1      	adds	r1, r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f8c3 	bl	80080b4 <prvInsertTimerInActiveList>
 8007f2e:	1e03      	subs	r3, r0, #0
 8007f30:	d017      	beq.n	8007f62 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	2300      	movs	r3, #0
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	f7ff ff8d 	bl	8007e5c <xTimerGenericCommand>
 8007f42:	0003      	movs	r3, r0
 8007f44:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <prvProcessExpiredTimer+0x72>
 8007f4c:	b672      	cpsid	i
 8007f4e:	e7fe      	b.n	8007f4e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2228      	movs	r2, #40	; 0x28
 8007f54:	5c9b      	ldrb	r3, [r3, r2]
 8007f56:	2201      	movs	r2, #1
 8007f58:	4393      	bics	r3, r2
 8007f5a:	b2d9      	uxtb	r1, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2228      	movs	r2, #40	; 0x28
 8007f60:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	0010      	movs	r0, r2
 8007f6a:	4798      	blx	r3
}
 8007f6c:	46c0      	nop			; (mov r8, r8)
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b004      	add	sp, #16
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000dec 	.word	0x20000dec

08007f78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f80:	2308      	movs	r3, #8
 8007f82:	18fb      	adds	r3, r7, r3
 8007f84:	0018      	movs	r0, r3
 8007f86:	f000 f853 	bl	8008030 <prvGetNextExpireTime>
 8007f8a:	0003      	movs	r3, r0
 8007f8c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0011      	movs	r1, r2
 8007f94:	0018      	movs	r0, r3
 8007f96:	f000 f803 	bl	8007fa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f9a:	f000 f8cd 	bl	8008138 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f9e:	e7ef      	b.n	8007f80 <prvTimerTask+0x8>

08007fa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007faa:	f7ff facf 	bl	800754c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fae:	2308      	movs	r3, #8
 8007fb0:	18fb      	adds	r3, r7, r3
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f000 f85e 	bl	8008074 <prvSampleTimeNow>
 8007fb8:	0003      	movs	r3, r0
 8007fba:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d12b      	bne.n	800801a <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10c      	bne.n	8007fe2 <prvProcessTimerOrBlockTask+0x42>
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d808      	bhi.n	8007fe2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007fd0:	f7ff fac8 	bl	8007564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	0011      	movs	r1, r2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7ff ff88 	bl	8007ef0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fe0:	e01d      	b.n	800801e <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <prvProcessTimerOrBlockTask+0x88>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <prvProcessTimerOrBlockTask+0x56>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <prvProcessTimerOrBlockTask+0x58>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <prvProcessTimerOrBlockTask+0x8c>)
 8007ffc:	6818      	ldr	r0, [r3, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	0019      	movs	r1, r3
 8008008:	f7ff f870 	bl	80070ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800800c:	f7ff faaa 	bl	8007564 <xTaskResumeAll>
 8008010:	1e03      	subs	r3, r0, #0
 8008012:	d104      	bne.n	800801e <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8008014:	f000 fa84 	bl	8008520 <vPortYield>
}
 8008018:	e001      	b.n	800801e <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800801a:	f7ff faa3 	bl	8007564 <xTaskResumeAll>
}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	46bd      	mov	sp, r7
 8008022:	b004      	add	sp, #16
 8008024:	bd80      	pop	{r7, pc}
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	20000df0 	.word	0x20000df0
 800802c:	20000df4 	.word	0x20000df4

08008030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008038:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <prvGetNextExpireTime+0x40>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <prvGetNextExpireTime+0x16>
 8008042:	2201      	movs	r2, #1
 8008044:	e000      	b.n	8008048 <prvGetNextExpireTime+0x18>
 8008046:	2200      	movs	r2, #0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d105      	bne.n	8008060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <prvGetNextExpireTime+0x40>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	e001      	b.n	8008064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008064:	68fb      	ldr	r3, [r7, #12]
}
 8008066:	0018      	movs	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	b004      	add	sp, #16
 800806c:	bd80      	pop	{r7, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	20000dec 	.word	0x20000dec

08008074 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800807c:	f7ff fafe 	bl	800767c <xTaskGetTickCount>
 8008080:	0003      	movs	r3, r0
 8008082:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <prvSampleTimeNow+0x3c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	429a      	cmp	r2, r3
 800808c:	d205      	bcs.n	800809a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800808e:	f000 f919 	bl	80082c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e002      	b.n	80080a0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080a0:	4b03      	ldr	r3, [pc, #12]	; (80080b0 <prvSampleTimeNow+0x3c>)
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b004      	add	sp, #16
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000dfc 	.word	0x20000dfc

080080b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d812      	bhi.n	8008100 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	1ad2      	subs	r2, r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d302      	bcc.n	80080ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	e01b      	b.n	8008126 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ee:	4b10      	ldr	r3, [pc, #64]	; (8008130 <prvInsertTimerInActiveList+0x7c>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3304      	adds	r3, #4
 80080f6:	0019      	movs	r1, r3
 80080f8:	0010      	movs	r0, r2
 80080fa:	f7fe fba0 	bl	800683e <vListInsert>
 80080fe:	e012      	b.n	8008126 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d206      	bcs.n	8008116 <prvInsertTimerInActiveList+0x62>
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d302      	bcc.n	8008116 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	e007      	b.n	8008126 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <prvInsertTimerInActiveList+0x80>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3304      	adds	r3, #4
 800811e:	0019      	movs	r1, r3
 8008120:	0010      	movs	r0, r2
 8008122:	f7fe fb8c 	bl	800683e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008126:	697b      	ldr	r3, [r7, #20]
}
 8008128:	0018      	movs	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	b006      	add	sp, #24
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000df0 	.word	0x20000df0
 8008134:	20000dec 	.word	0x20000dec

08008138 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008138:	b590      	push	{r4, r7, lr}
 800813a:	b08d      	sub	sp, #52	; 0x34
 800813c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800813e:	e0ac      	b.n	800829a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008140:	2208      	movs	r2, #8
 8008142:	18bb      	adds	r3, r7, r2
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	da0f      	bge.n	800816a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800814a:	18bb      	adds	r3, r7, r2
 800814c:	3304      	adds	r3, #4
 800814e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <prvProcessReceivedCommands+0x22>
 8008156:	b672      	cpsid	i
 8008158:	e7fe      	b.n	8008158 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	6858      	ldr	r0, [r3, #4]
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	0019      	movs	r1, r3
 8008168:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800816a:	2208      	movs	r2, #8
 800816c:	18bb      	adds	r3, r7, r2
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da00      	bge.n	8008176 <prvProcessReceivedCommands+0x3e>
 8008174:	e090      	b.n	8008298 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008176:	18bb      	adds	r3, r7, r2
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d004      	beq.n	800818e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	3304      	adds	r3, #4
 8008188:	0018      	movs	r0, r3
 800818a:	f7fe fb8e 	bl	80068aa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	0018      	movs	r0, r3
 8008192:	f7ff ff6f 	bl	8008074 <prvSampleTimeNow>
 8008196:	0003      	movs	r3, r0
 8008198:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800819a:	2308      	movs	r3, #8
 800819c:	18fb      	adds	r3, r7, r3
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b09      	cmp	r3, #9
 80081a2:	d900      	bls.n	80081a6 <prvProcessReceivedCommands+0x6e>
 80081a4:	e079      	b.n	800829a <prvProcessReceivedCommands+0x162>
 80081a6:	009a      	lsls	r2, r3, #2
 80081a8:	4b44      	ldr	r3, [pc, #272]	; (80082bc <prvProcessReceivedCommands+0x184>)
 80081aa:	18d3      	adds	r3, r2, r3
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	2228      	movs	r2, #40	; 0x28
 80081b4:	5c9b      	ldrb	r3, [r3, r2]
 80081b6:	2201      	movs	r2, #1
 80081b8:	4313      	orrs	r3, r2
 80081ba:	b2d9      	uxtb	r1, r3
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	2228      	movs	r2, #40	; 0x28
 80081c0:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081c2:	2408      	movs	r4, #8
 80081c4:	193b      	adds	r3, r7, r4
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	18d1      	adds	r1, r2, r3
 80081ce:	193b      	adds	r3, r7, r4
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	6a38      	ldr	r0, [r7, #32]
 80081d6:	f7ff ff6d 	bl	80080b4 <prvInsertTimerInActiveList>
 80081da:	1e03      	subs	r3, r0, #0
 80081dc:	d05d      	beq.n	800829a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	6a3a      	ldr	r2, [r7, #32]
 80081e4:	0010      	movs	r0, r2
 80081e6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	2228      	movs	r2, #40	; 0x28
 80081ec:	5c9b      	ldrb	r3, [r3, r2]
 80081ee:	001a      	movs	r2, r3
 80081f0:	2304      	movs	r3, #4
 80081f2:	4013      	ands	r3, r2
 80081f4:	d051      	beq.n	800829a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081f6:	193b      	adds	r3, r7, r4
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	18d2      	adds	r2, r2, r3
 8008200:	6a38      	ldr	r0, [r7, #32]
 8008202:	2300      	movs	r3, #0
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	2100      	movs	r1, #0
 800820a:	f7ff fe27 	bl	8007e5c <xTimerGenericCommand>
 800820e:	0003      	movs	r3, r0
 8008210:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d140      	bne.n	800829a <prvProcessReceivedCommands+0x162>
 8008218:	b672      	cpsid	i
 800821a:	e7fe      	b.n	800821a <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	2228      	movs	r2, #40	; 0x28
 8008220:	5c9b      	ldrb	r3, [r3, r2]
 8008222:	2201      	movs	r2, #1
 8008224:	4393      	bics	r3, r2
 8008226:	b2d9      	uxtb	r1, r3
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	2228      	movs	r2, #40	; 0x28
 800822c:	5499      	strb	r1, [r3, r2]
					break;
 800822e:	e034      	b.n	800829a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	2228      	movs	r2, #40	; 0x28
 8008234:	5c9b      	ldrb	r3, [r3, r2]
 8008236:	2201      	movs	r2, #1
 8008238:	4313      	orrs	r3, r2
 800823a:	b2d9      	uxtb	r1, r3
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	2228      	movs	r2, #40	; 0x28
 8008240:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008242:	2308      	movs	r3, #8
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <prvProcessReceivedCommands+0x120>
 8008254:	b672      	cpsid	i
 8008256:	e7fe      	b.n	8008256 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	699a      	ldr	r2, [r3, #24]
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	18d1      	adds	r1, r2, r3
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	6a38      	ldr	r0, [r7, #32]
 8008266:	f7ff ff25 	bl	80080b4 <prvInsertTimerInActiveList>
					break;
 800826a:	e016      	b.n	800829a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	2228      	movs	r2, #40	; 0x28
 8008270:	5c9b      	ldrb	r3, [r3, r2]
 8008272:	001a      	movs	r2, r3
 8008274:	2302      	movs	r3, #2
 8008276:	4013      	ands	r3, r2
 8008278:	d104      	bne.n	8008284 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	0018      	movs	r0, r3
 800827e:	f000 faa3 	bl	80087c8 <vPortFree>
 8008282:	e00a      	b.n	800829a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	2228      	movs	r2, #40	; 0x28
 8008288:	5c9b      	ldrb	r3, [r3, r2]
 800828a:	2201      	movs	r2, #1
 800828c:	4393      	bics	r3, r2
 800828e:	b2d9      	uxtb	r1, r3
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	2228      	movs	r2, #40	; 0x28
 8008294:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008296:	e000      	b.n	800829a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008298:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <prvProcessReceivedCommands+0x188>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2208      	movs	r2, #8
 80082a0:	18b9      	adds	r1, r7, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	0018      	movs	r0, r3
 80082a6:	f7fe fd27 	bl	8006cf8 <xQueueReceive>
 80082aa:	1e03      	subs	r3, r0, #0
 80082ac:	d000      	beq.n	80082b0 <prvProcessReceivedCommands+0x178>
 80082ae:	e747      	b.n	8008140 <prvProcessReceivedCommands+0x8>
	}
}
 80082b0:	46c0      	nop			; (mov r8, r8)
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	46bd      	mov	sp, r7
 80082b6:	b00b      	add	sp, #44	; 0x2c
 80082b8:	bd90      	pop	{r4, r7, pc}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	0800b948 	.word	0x0800b948
 80082c0:	20000df4 	.word	0x20000df4

080082c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ca:	e041      	b.n	8008350 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082cc:	4b2a      	ldr	r3, [pc, #168]	; (8008378 <prvSwitchTimerLists+0xb4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d6:	4b28      	ldr	r3, [pc, #160]	; (8008378 <prvSwitchTimerLists+0xb4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3304      	adds	r3, #4
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fe fae0 	bl	80068aa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	0010      	movs	r0, r2
 80082f2:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2228      	movs	r2, #40	; 0x28
 80082f8:	5c9b      	ldrb	r3, [r3, r2]
 80082fa:	001a      	movs	r2, r3
 80082fc:	2304      	movs	r3, #4
 80082fe:	4013      	ands	r3, r2
 8008300:	d026      	beq.n	8008350 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	18d3      	adds	r3, r2, r3
 800830a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	429a      	cmp	r2, r3
 8008312:	d90e      	bls.n	8008332 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008320:	4b15      	ldr	r3, [pc, #84]	; (8008378 <prvSwitchTimerLists+0xb4>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3304      	adds	r3, #4
 8008328:	0019      	movs	r1, r3
 800832a:	0010      	movs	r0, r2
 800832c:	f7fe fa87 	bl	800683e <vListInsert>
 8008330:	e00e      	b.n	8008350 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	2300      	movs	r3, #0
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	2100      	movs	r1, #0
 800833e:	f7ff fd8d 	bl	8007e5c <xTimerGenericCommand>
 8008342:	0003      	movs	r3, r0
 8008344:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <prvSwitchTimerLists+0x8c>
 800834c:	b672      	cpsid	i
 800834e:	e7fe      	b.n	800834e <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008350:	4b09      	ldr	r3, [pc, #36]	; (8008378 <prvSwitchTimerLists+0xb4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1b8      	bne.n	80082cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <prvSwitchTimerLists+0xb4>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008360:	4b06      	ldr	r3, [pc, #24]	; (800837c <prvSwitchTimerLists+0xb8>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	4b04      	ldr	r3, [pc, #16]	; (8008378 <prvSwitchTimerLists+0xb4>)
 8008366:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <prvSwitchTimerLists+0xb8>)
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	601a      	str	r2, [r3, #0]
}
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	46bd      	mov	sp, r7
 8008372:	b006      	add	sp, #24
 8008374:	bd80      	pop	{r7, pc}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	20000dec 	.word	0x20000dec
 800837c:	20000df0 	.word	0x20000df0

08008380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008386:	f000 f8db 	bl	8008540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800838a:	4b16      	ldr	r3, [pc, #88]	; (80083e4 <prvCheckForValidListAndQueue+0x64>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d123      	bne.n	80083da <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8008392:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <prvCheckForValidListAndQueue+0x68>)
 8008394:	0018      	movs	r0, r3
 8008396:	f7fe fa07 	bl	80067a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <prvCheckForValidListAndQueue+0x6c>)
 800839c:	0018      	movs	r0, r3
 800839e:	f7fe fa03 	bl	80067a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <prvCheckForValidListAndQueue+0x70>)
 80083a4:	4a10      	ldr	r2, [pc, #64]	; (80083e8 <prvCheckForValidListAndQueue+0x68>)
 80083a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083a8:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <prvCheckForValidListAndQueue+0x74>)
 80083aa:	4a10      	ldr	r2, [pc, #64]	; (80083ec <prvCheckForValidListAndQueue+0x6c>)
 80083ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <prvCheckForValidListAndQueue+0x78>)
 80083b0:	4a12      	ldr	r2, [pc, #72]	; (80083fc <prvCheckForValidListAndQueue+0x7c>)
 80083b2:	2100      	movs	r1, #0
 80083b4:	9100      	str	r1, [sp, #0]
 80083b6:	2110      	movs	r1, #16
 80083b8:	200a      	movs	r0, #10
 80083ba:	f7fe faf2 	bl	80069a2 <xQueueGenericCreateStatic>
 80083be:	0002      	movs	r2, r0
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <prvCheckForValidListAndQueue+0x64>)
 80083c2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083c4:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <prvCheckForValidListAndQueue+0x64>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d006      	beq.n	80083da <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083cc:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <prvCheckForValidListAndQueue+0x64>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <prvCheckForValidListAndQueue+0x80>)
 80083d2:	0011      	movs	r1, r2
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7fe fe61 	bl	800709c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083da:	f000 f8c3 	bl	8008564 <vPortExitCritical>
}
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000df4 	.word	0x20000df4
 80083e8:	20000dc4 	.word	0x20000dc4
 80083ec:	20000dd8 	.word	0x20000dd8
 80083f0:	20000dec 	.word	0x20000dec
 80083f4:	20000df0 	.word	0x20000df0
 80083f8:	20000ea0 	.word	0x20000ea0
 80083fc:	20000e00 	.word	0x20000e00
 8008400:	0800b814 	.word	0x0800b814

08008404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3b04      	subs	r3, #4
 8008414:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2280      	movs	r2, #128	; 0x80
 800841a:	0452      	lsls	r2, r2, #17
 800841c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3b04      	subs	r3, #4
 8008422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3b04      	subs	r3, #4
 800842e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008430:	4a08      	ldr	r2, [pc, #32]	; (8008454 <pxPortInitialiseStack+0x50>)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3b14      	subs	r3, #20
 800843a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b20      	subs	r3, #32
 8008446:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008448:	68fb      	ldr	r3, [r7, #12]
}
 800844a:	0018      	movs	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	b004      	add	sp, #16
 8008450:	bd80      	pop	{r7, pc}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	08008459 	.word	0x08008459

08008458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800845e:	2300      	movs	r3, #0
 8008460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <prvTaskExitError+0x2c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	d001      	beq.n	800846e <prvTaskExitError+0x16>
 800846a:	b672      	cpsid	i
 800846c:	e7fe      	b.n	800846c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800846e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008470:	46c0      	nop			; (mov r8, r8)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0fc      	beq.n	8008472 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008478:	46c0      	nop			; (mov r8, r8)
 800847a:	46c0      	nop			; (mov r8, r8)
 800847c:	46bd      	mov	sp, r7
 800847e:	b002      	add	sp, #8
 8008480:	bd80      	pop	{r7, pc}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	20000014 	.word	0x20000014

08008488 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800848c:	46c0      	nop			; (mov r8, r8)
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

080084a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80084a0:	4a0b      	ldr	r2, [pc, #44]	; (80084d0 <pxCurrentTCBConst2>)
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	3020      	adds	r0, #32
 80084a8:	f380 8809 	msr	PSP, r0
 80084ac:	2002      	movs	r0, #2
 80084ae:	f380 8814 	msr	CONTROL, r0
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80084b8:	46ae      	mov	lr, r5
 80084ba:	bc08      	pop	{r3}
 80084bc:	bc04      	pop	{r2}
 80084be:	b662      	cpsie	i
 80084c0:	4718      	bx	r3
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	46c0      	nop			; (mov r8, r8)
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	46c0      	nop			; (mov r8, r8)
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	46c0      	nop			; (mov r8, r8)
 80084ce:	46c0      	nop			; (mov r8, r8)

080084d0 <pxCurrentTCBConst2>:
 80084d0:	200008c4 	.word	0x200008c4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80084d4:	46c0      	nop			; (mov r8, r8)
 80084d6:	46c0      	nop			; (mov r8, r8)

080084d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <xPortStartScheduler+0x40>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <xPortStartScheduler+0x40>)
 80084e2:	21ff      	movs	r1, #255	; 0xff
 80084e4:	0409      	lsls	r1, r1, #16
 80084e6:	430a      	orrs	r2, r1
 80084e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <xPortStartScheduler+0x40>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <xPortStartScheduler+0x40>)
 80084f0:	21ff      	movs	r1, #255	; 0xff
 80084f2:	0609      	lsls	r1, r1, #24
 80084f4:	430a      	orrs	r2, r1
 80084f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084f8:	f000 f898 	bl	800862c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084fc:	4b07      	ldr	r3, [pc, #28]	; (800851c <xPortStartScheduler+0x44>)
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008502:	f7ff ffcd 	bl	80084a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008506:	f7ff f977 	bl	80077f8 <vTaskSwitchContext>
	prvTaskExitError();
 800850a:	f7ff ffa5 	bl	8008458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800850e:	2300      	movs	r3, #0
}
 8008510:	0018      	movs	r0, r3
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	e000ed20 	.word	0xe000ed20
 800851c:	20000014 	.word	0x20000014

08008520 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <vPortYield+0x1c>)
 8008526:	2280      	movs	r2, #128	; 0x80
 8008528:	0552      	lsls	r2, r2, #21
 800852a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800852c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008530:	f3bf 8f6f 	isb	sy
}
 8008534:	46c0      	nop			; (mov r8, r8)
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	e000ed04 	.word	0xe000ed04

08008540 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8008544:	b672      	cpsid	i
	uxCriticalNesting++;
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <vPortEnterCritical+0x20>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <vPortEnterCritical+0x20>)
 800854e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008550:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008554:	f3bf 8f6f 	isb	sy
}
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	46c0      	nop			; (mov r8, r8)
 8008560:	20000014 	.word	0x20000014

08008564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <vPortExitCritical+0x2c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <vPortExitCritical+0x10>
 8008570:	b672      	cpsid	i
 8008572:	e7fe      	b.n	8008572 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <vPortExitCritical+0x2c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	1e5a      	subs	r2, r3, #1
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <vPortExitCritical+0x2c>)
 800857c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800857e:	4b04      	ldr	r3, [pc, #16]	; (8008590 <vPortExitCritical+0x2c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d100      	bne.n	8008588 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8008586:	b662      	cpsie	i
	}
}
 8008588:	46c0      	nop			; (mov r8, r8)
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	20000014 	.word	0x20000014

08008594 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008594:	f3ef 8010 	mrs	r0, PRIMASK
 8008598:	b672      	cpsid	i
 800859a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800859c:	46c0      	nop			; (mov r8, r8)
 800859e:	0018      	movs	r0, r3

080085a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80085a0:	f380 8810 	msr	PRIMASK, r0
 80085a4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80085a6:	46c0      	nop			; (mov r8, r8)
	...

080085b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085b0:	f3ef 8009 	mrs	r0, PSP
 80085b4:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <pxCurrentTCBConst>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	3820      	subs	r0, #32
 80085ba:	6010      	str	r0, [r2, #0]
 80085bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80085be:	4644      	mov	r4, r8
 80085c0:	464d      	mov	r5, r9
 80085c2:	4656      	mov	r6, sl
 80085c4:	465f      	mov	r7, fp
 80085c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80085c8:	b508      	push	{r3, lr}
 80085ca:	b672      	cpsid	i
 80085cc:	f7ff f914 	bl	80077f8 <vTaskSwitchContext>
 80085d0:	b662      	cpsie	i
 80085d2:	bc0c      	pop	{r2, r3}
 80085d4:	6811      	ldr	r1, [r2, #0]
 80085d6:	6808      	ldr	r0, [r1, #0]
 80085d8:	3010      	adds	r0, #16
 80085da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80085dc:	46a0      	mov	r8, r4
 80085de:	46a9      	mov	r9, r5
 80085e0:	46b2      	mov	sl, r6
 80085e2:	46bb      	mov	fp, r7
 80085e4:	f380 8809 	msr	PSP, r0
 80085e8:	3820      	subs	r0, #32
 80085ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80085ec:	4718      	bx	r3
 80085ee:	46c0      	nop			; (mov r8, r8)

080085f0 <pxCurrentTCBConst>:
 80085f0:	200008c4 	.word	0x200008c4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80085f4:	46c0      	nop			; (mov r8, r8)
 80085f6:	46c0      	nop			; (mov r8, r8)

080085f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80085fe:	f7ff ffc9 	bl	8008594 <ulSetInterruptMaskFromISR>
 8008602:	0003      	movs	r3, r0
 8008604:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008606:	f7ff f847 	bl	8007698 <xTaskIncrementTick>
 800860a:	1e03      	subs	r3, r0, #0
 800860c:	d003      	beq.n	8008616 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800860e:	4b06      	ldr	r3, [pc, #24]	; (8008628 <xPortSysTickHandler+0x30>)
 8008610:	2280      	movs	r2, #128	; 0x80
 8008612:	0552      	lsls	r2, r2, #21
 8008614:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	0018      	movs	r0, r3
 800861a:	f7ff ffc1 	bl	80085a0 <vClearInterruptMaskFromISR>
}
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	46bd      	mov	sp, r7
 8008622:	b002      	add	sp, #8
 8008624:	bd80      	pop	{r7, pc}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008630:	4b0b      	ldr	r3, [pc, #44]	; (8008660 <vPortSetupTimerInterrupt+0x34>)
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <vPortSetupTimerInterrupt+0x38>)
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800863c:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <vPortSetupTimerInterrupt+0x3c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	22fa      	movs	r2, #250	; 0xfa
 8008642:	0091      	lsls	r1, r2, #2
 8008644:	0018      	movs	r0, r3
 8008646:	f7f7 fd7b 	bl	8000140 <__udivsi3>
 800864a:	0003      	movs	r3, r0
 800864c:	001a      	movs	r2, r3
 800864e:	4b07      	ldr	r3, [pc, #28]	; (800866c <vPortSetupTimerInterrupt+0x40>)
 8008650:	3a01      	subs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008654:	4b02      	ldr	r3, [pc, #8]	; (8008660 <vPortSetupTimerInterrupt+0x34>)
 8008656:	2207      	movs	r2, #7
 8008658:	601a      	str	r2, [r3, #0]
}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	e000e010 	.word	0xe000e010
 8008664:	e000e018 	.word	0xe000e018
 8008668:	20000008 	.word	0x20000008
 800866c:	e000e014 	.word	0xe000e014

08008670 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800867c:	f7fe ff66 	bl	800754c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008680:	4b4b      	ldr	r3, [pc, #300]	; (80087b0 <pvPortMalloc+0x140>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008688:	f000 f8ec 	bl	8008864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800868c:	4b49      	ldr	r3, [pc, #292]	; (80087b4 <pvPortMalloc+0x144>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4013      	ands	r3, r2
 8008694:	d000      	beq.n	8008698 <pvPortMalloc+0x28>
 8008696:	e07e      	b.n	8008796 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d012      	beq.n	80086c4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800869e:	2208      	movs	r2, #8
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	189b      	adds	r3, r3, r2
 80086a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2207      	movs	r2, #7
 80086aa:	4013      	ands	r3, r2
 80086ac:	d00a      	beq.n	80086c4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2207      	movs	r2, #7
 80086b2:	4393      	bics	r3, r2
 80086b4:	3308      	adds	r3, #8
 80086b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2207      	movs	r2, #7
 80086bc:	4013      	ands	r3, r2
 80086be:	d001      	beq.n	80086c4 <pvPortMalloc+0x54>
 80086c0:	b672      	cpsid	i
 80086c2:	e7fe      	b.n	80086c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d065      	beq.n	8008796 <pvPortMalloc+0x126>
 80086ca:	4b3b      	ldr	r3, [pc, #236]	; (80087b8 <pvPortMalloc+0x148>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d860      	bhi.n	8008796 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086d4:	4b39      	ldr	r3, [pc, #228]	; (80087bc <pvPortMalloc+0x14c>)
 80086d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80086d8:	4b38      	ldr	r3, [pc, #224]	; (80087bc <pvPortMalloc+0x14c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086de:	e004      	b.n	80086ea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d903      	bls.n	80086fc <pvPortMalloc+0x8c>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f1      	bne.n	80086e0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086fc:	4b2c      	ldr	r3, [pc, #176]	; (80087b0 <pvPortMalloc+0x140>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	429a      	cmp	r2, r3
 8008704:	d047      	beq.n	8008796 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2208      	movs	r2, #8
 800870c:	189b      	adds	r3, r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	2308      	movs	r3, #8
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	429a      	cmp	r2, r3
 8008726:	d916      	bls.n	8008756 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	18d3      	adds	r3, r2, r3
 800872e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2207      	movs	r2, #7
 8008734:	4013      	ands	r3, r2
 8008736:	d001      	beq.n	800873c <pvPortMalloc+0xcc>
 8008738:	b672      	cpsid	i
 800873a:	e7fe      	b.n	800873a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	1ad2      	subs	r2, r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	0018      	movs	r0, r3
 8008752:	f000 f8e7 	bl	8008924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008756:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <pvPortMalloc+0x148>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	1ad2      	subs	r2, r2, r3
 8008760:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <pvPortMalloc+0x148>)
 8008762:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008764:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <pvPortMalloc+0x148>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <pvPortMalloc+0x150>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d203      	bcs.n	8008778 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008770:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <pvPortMalloc+0x148>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	4b12      	ldr	r3, [pc, #72]	; (80087c0 <pvPortMalloc+0x150>)
 8008776:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <pvPortMalloc+0x144>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	431a      	orrs	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800878c:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <pvPortMalloc+0x154>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	4b0c      	ldr	r3, [pc, #48]	; (80087c4 <pvPortMalloc+0x154>)
 8008794:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008796:	f7fe fee5 	bl	8007564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2207      	movs	r2, #7
 800879e:	4013      	ands	r3, r2
 80087a0:	d001      	beq.n	80087a6 <pvPortMalloc+0x136>
 80087a2:	b672      	cpsid	i
 80087a4:	e7fe      	b.n	80087a4 <pvPortMalloc+0x134>
	return pvReturn;
 80087a6:	68fb      	ldr	r3, [r7, #12]
}
 80087a8:	0018      	movs	r0, r3
 80087aa:	46bd      	mov	sp, r7
 80087ac:	b006      	add	sp, #24
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20001af8 	.word	0x20001af8
 80087b4:	20001b0c 	.word	0x20001b0c
 80087b8:	20001afc 	.word	0x20001afc
 80087bc:	20001af0 	.word	0x20001af0
 80087c0:	20001b00 	.word	0x20001b00
 80087c4:	20001b04 	.word	0x20001b04

080087c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d03a      	beq.n	8008850 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087da:	2308      	movs	r3, #8
 80087dc:	425b      	negs	r3, r3
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	18d3      	adds	r3, r2, r3
 80087e2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	4b1a      	ldr	r3, [pc, #104]	; (8008858 <vPortFree+0x90>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4013      	ands	r3, r2
 80087f2:	d101      	bne.n	80087f8 <vPortFree+0x30>
 80087f4:	b672      	cpsid	i
 80087f6:	e7fe      	b.n	80087f6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <vPortFree+0x3c>
 8008800:	b672      	cpsid	i
 8008802:	e7fe      	b.n	8008802 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	4b13      	ldr	r3, [pc, #76]	; (8008858 <vPortFree+0x90>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4013      	ands	r3, r2
 800880e:	d01f      	beq.n	8008850 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d11b      	bne.n	8008850 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <vPortFree+0x90>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	43db      	mvns	r3, r3
 8008822:	401a      	ands	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008828:	f7fe fe90 	bl	800754c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <vPortFree+0x94>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	18d2      	adds	r2, r2, r3
 8008836:	4b09      	ldr	r3, [pc, #36]	; (800885c <vPortFree+0x94>)
 8008838:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	0018      	movs	r0, r3
 800883e:	f000 f871 	bl	8008924 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008842:	4b07      	ldr	r3, [pc, #28]	; (8008860 <vPortFree+0x98>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <vPortFree+0x98>)
 800884a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800884c:	f7fe fe8a 	bl	8007564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008850:	46c0      	nop			; (mov r8, r8)
 8008852:	46bd      	mov	sp, r7
 8008854:	b004      	add	sp, #16
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20001b0c 	.word	0x20001b0c
 800885c:	20001afc 	.word	0x20001afc
 8008860:	20001b08 	.word	0x20001b08

08008864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800886a:	23c0      	movs	r3, #192	; 0xc0
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008870:	4b26      	ldr	r3, [pc, #152]	; (800890c <prvHeapInit+0xa8>)
 8008872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2207      	movs	r2, #7
 8008878:	4013      	ands	r3, r2
 800887a:	d00c      	beq.n	8008896 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3307      	adds	r3, #7
 8008880:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2207      	movs	r2, #7
 8008886:	4393      	bics	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	4b1e      	ldr	r3, [pc, #120]	; (800890c <prvHeapInit+0xa8>)
 8008892:	18d3      	adds	r3, r2, r3
 8008894:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800889a:	4b1d      	ldr	r3, [pc, #116]	; (8008910 <prvHeapInit+0xac>)
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088a0:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <prvHeapInit+0xac>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	18d3      	adds	r3, r2, r3
 80088ac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088ae:	2208      	movs	r2, #8
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2207      	movs	r2, #7
 80088ba:	4393      	bics	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4b14      	ldr	r3, [pc, #80]	; (8008914 <prvHeapInit+0xb0>)
 80088c2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80088c4:	4b13      	ldr	r3, [pc, #76]	; (8008914 <prvHeapInit+0xb0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2200      	movs	r2, #0
 80088ca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088cc:	4b11      	ldr	r3, [pc, #68]	; (8008914 <prvHeapInit+0xb0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	1ad2      	subs	r2, r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088e2:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <prvHeapInit+0xb0>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <prvHeapInit+0xb4>)
 80088f0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <prvHeapInit+0xb8>)
 80088f8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <prvHeapInit+0xbc>)
 80088fc:	2280      	movs	r2, #128	; 0x80
 80088fe:	0612      	lsls	r2, r2, #24
 8008900:	601a      	str	r2, [r3, #0]
}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	46bd      	mov	sp, r7
 8008906:	b004      	add	sp, #16
 8008908:	bd80      	pop	{r7, pc}
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	20000ef0 	.word	0x20000ef0
 8008910:	20001af0 	.word	0x20001af0
 8008914:	20001af8 	.word	0x20001af8
 8008918:	20001b00 	.word	0x20001b00
 800891c:	20001afc 	.word	0x20001afc
 8008920:	20001b0c 	.word	0x20001b0c

08008924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800892c:	4b27      	ldr	r3, [pc, #156]	; (80089cc <prvInsertBlockIntoFreeList+0xa8>)
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	e002      	b.n	8008938 <prvInsertBlockIntoFreeList+0x14>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	429a      	cmp	r2, r3
 8008940:	d8f7      	bhi.n	8008932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	18d3      	adds	r3, r2, r3
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d108      	bne.n	8008966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	18d2      	adds	r2, r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	18d2      	adds	r2, r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d118      	bne.n	80089ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <prvInsertBlockIntoFreeList+0xac>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d00d      	beq.n	80089a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	18d2      	adds	r2, r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e008      	b.n	80089b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <prvInsertBlockIntoFreeList+0xac>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e003      	b.n	80089b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d002      	beq.n	80089c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	46bd      	mov	sp, r7
 80089c6:	b004      	add	sp, #16
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	20001af0 	.word	0x20001af0
 80089d0:	20001af8 	.word	0x20001af8

080089d4 <__errno>:
 80089d4:	4b01      	ldr	r3, [pc, #4]	; (80089dc <__errno+0x8>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	4770      	bx	lr
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	20000018 	.word	0x20000018

080089e0 <__libc_init_array>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	2600      	movs	r6, #0
 80089e4:	4d0c      	ldr	r5, [pc, #48]	; (8008a18 <__libc_init_array+0x38>)
 80089e6:	4c0d      	ldr	r4, [pc, #52]	; (8008a1c <__libc_init_array+0x3c>)
 80089e8:	1b64      	subs	r4, r4, r5
 80089ea:	10a4      	asrs	r4, r4, #2
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	d109      	bne.n	8008a04 <__libc_init_array+0x24>
 80089f0:	2600      	movs	r6, #0
 80089f2:	f002 fe95 	bl	800b720 <_init>
 80089f6:	4d0a      	ldr	r5, [pc, #40]	; (8008a20 <__libc_init_array+0x40>)
 80089f8:	4c0a      	ldr	r4, [pc, #40]	; (8008a24 <__libc_init_array+0x44>)
 80089fa:	1b64      	subs	r4, r4, r5
 80089fc:	10a4      	asrs	r4, r4, #2
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	d105      	bne.n	8008a0e <__libc_init_array+0x2e>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	00b3      	lsls	r3, r6, #2
 8008a06:	58eb      	ldr	r3, [r5, r3]
 8008a08:	4798      	blx	r3
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7ee      	b.n	80089ec <__libc_init_array+0xc>
 8008a0e:	00b3      	lsls	r3, r6, #2
 8008a10:	58eb      	ldr	r3, [r5, r3]
 8008a12:	4798      	blx	r3
 8008a14:	3601      	adds	r6, #1
 8008a16:	e7f2      	b.n	80089fe <__libc_init_array+0x1e>
 8008a18:	0800bd5c 	.word	0x0800bd5c
 8008a1c:	0800bd5c 	.word	0x0800bd5c
 8008a20:	0800bd5c 	.word	0x0800bd5c
 8008a24:	0800bd60 	.word	0x0800bd60

08008a28 <memcpy>:
 8008a28:	2300      	movs	r3, #0
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d100      	bne.n	8008a32 <memcpy+0xa>
 8008a30:	bd10      	pop	{r4, pc}
 8008a32:	5ccc      	ldrb	r4, [r1, r3]
 8008a34:	54c4      	strb	r4, [r0, r3]
 8008a36:	3301      	adds	r3, #1
 8008a38:	e7f8      	b.n	8008a2c <memcpy+0x4>

08008a3a <memset>:
 8008a3a:	0003      	movs	r3, r0
 8008a3c:	1882      	adds	r2, r0, r2
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d100      	bne.n	8008a44 <memset+0xa>
 8008a42:	4770      	bx	lr
 8008a44:	7019      	strb	r1, [r3, #0]
 8008a46:	3301      	adds	r3, #1
 8008a48:	e7f9      	b.n	8008a3e <memset+0x4>

08008a4a <__cvt>:
 8008a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4c:	001e      	movs	r6, r3
 8008a4e:	2300      	movs	r3, #0
 8008a50:	0014      	movs	r4, r2
 8008a52:	b08b      	sub	sp, #44	; 0x2c
 8008a54:	429e      	cmp	r6, r3
 8008a56:	da04      	bge.n	8008a62 <__cvt+0x18>
 8008a58:	2180      	movs	r1, #128	; 0x80
 8008a5a:	0609      	lsls	r1, r1, #24
 8008a5c:	1873      	adds	r3, r6, r1
 8008a5e:	001e      	movs	r6, r3
 8008a60:	232d      	movs	r3, #45	; 0x2d
 8008a62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a64:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a66:	7013      	strb	r3, [r2, #0]
 8008a68:	2320      	movs	r3, #32
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	439f      	bics	r7, r3
 8008a6e:	2f46      	cmp	r7, #70	; 0x46
 8008a70:	d007      	beq.n	8008a82 <__cvt+0x38>
 8008a72:	003b      	movs	r3, r7
 8008a74:	3b45      	subs	r3, #69	; 0x45
 8008a76:	4259      	negs	r1, r3
 8008a78:	414b      	adcs	r3, r1
 8008a7a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a7c:	3a01      	subs	r2, #1
 8008a7e:	18cb      	adds	r3, r1, r3
 8008a80:	9310      	str	r3, [sp, #64]	; 0x40
 8008a82:	ab09      	add	r3, sp, #36	; 0x24
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	ab08      	add	r3, sp, #32
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a8c:	9200      	str	r2, [sp, #0]
 8008a8e:	9302      	str	r3, [sp, #8]
 8008a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a92:	0022      	movs	r2, r4
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	0033      	movs	r3, r6
 8008a98:	f000 fdca 	bl	8009630 <_dtoa_r>
 8008a9c:	0005      	movs	r5, r0
 8008a9e:	2f47      	cmp	r7, #71	; 0x47
 8008aa0:	d102      	bne.n	8008aa8 <__cvt+0x5e>
 8008aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008aa4:	07db      	lsls	r3, r3, #31
 8008aa6:	d528      	bpl.n	8008afa <__cvt+0xb0>
 8008aa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008aaa:	18eb      	adds	r3, r5, r3
 8008aac:	9307      	str	r3, [sp, #28]
 8008aae:	2f46      	cmp	r7, #70	; 0x46
 8008ab0:	d114      	bne.n	8008adc <__cvt+0x92>
 8008ab2:	782b      	ldrb	r3, [r5, #0]
 8008ab4:	2b30      	cmp	r3, #48	; 0x30
 8008ab6:	d10c      	bne.n	8008ad2 <__cvt+0x88>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2300      	movs	r3, #0
 8008abc:	0020      	movs	r0, r4
 8008abe:	0031      	movs	r1, r6
 8008ac0:	f7f7 fcc4 	bl	800044c <__aeabi_dcmpeq>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d104      	bne.n	8008ad2 <__cvt+0x88>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008acc:	1a9b      	subs	r3, r3, r2
 8008ace:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ad4:	9a07      	ldr	r2, [sp, #28]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	18d3      	adds	r3, r2, r3
 8008ada:	9307      	str	r3, [sp, #28]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2300      	movs	r3, #0
 8008ae0:	0020      	movs	r0, r4
 8008ae2:	0031      	movs	r1, r6
 8008ae4:	f7f7 fcb2 	bl	800044c <__aeabi_dcmpeq>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d001      	beq.n	8008af0 <__cvt+0xa6>
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	9309      	str	r3, [sp, #36]	; 0x24
 8008af0:	2230      	movs	r2, #48	; 0x30
 8008af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af4:	9907      	ldr	r1, [sp, #28]
 8008af6:	428b      	cmp	r3, r1
 8008af8:	d306      	bcc.n	8008b08 <__cvt+0xbe>
 8008afa:	0028      	movs	r0, r5
 8008afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b00:	1b5b      	subs	r3, r3, r5
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	b00b      	add	sp, #44	; 0x2c
 8008b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b08:	1c59      	adds	r1, r3, #1
 8008b0a:	9109      	str	r1, [sp, #36]	; 0x24
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	e7f0      	b.n	8008af2 <__cvt+0xa8>

08008b10 <__exponent>:
 8008b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b12:	1c83      	adds	r3, r0, #2
 8008b14:	b087      	sub	sp, #28
 8008b16:	9303      	str	r3, [sp, #12]
 8008b18:	0005      	movs	r5, r0
 8008b1a:	000c      	movs	r4, r1
 8008b1c:	232b      	movs	r3, #43	; 0x2b
 8008b1e:	7002      	strb	r2, [r0, #0]
 8008b20:	2900      	cmp	r1, #0
 8008b22:	da01      	bge.n	8008b28 <__exponent+0x18>
 8008b24:	424c      	negs	r4, r1
 8008b26:	3302      	adds	r3, #2
 8008b28:	706b      	strb	r3, [r5, #1]
 8008b2a:	2c09      	cmp	r4, #9
 8008b2c:	dd31      	ble.n	8008b92 <__exponent+0x82>
 8008b2e:	270a      	movs	r7, #10
 8008b30:	ab04      	add	r3, sp, #16
 8008b32:	1dde      	adds	r6, r3, #7
 8008b34:	0020      	movs	r0, r4
 8008b36:	0039      	movs	r1, r7
 8008b38:	9601      	str	r6, [sp, #4]
 8008b3a:	f7f7 fc71 	bl	8000420 <__aeabi_idivmod>
 8008b3e:	3e01      	subs	r6, #1
 8008b40:	3130      	adds	r1, #48	; 0x30
 8008b42:	0020      	movs	r0, r4
 8008b44:	7031      	strb	r1, [r6, #0]
 8008b46:	0039      	movs	r1, r7
 8008b48:	9402      	str	r4, [sp, #8]
 8008b4a:	f7f7 fb83 	bl	8000254 <__divsi3>
 8008b4e:	9b02      	ldr	r3, [sp, #8]
 8008b50:	0004      	movs	r4, r0
 8008b52:	2b63      	cmp	r3, #99	; 0x63
 8008b54:	dcee      	bgt.n	8008b34 <__exponent+0x24>
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	3430      	adds	r4, #48	; 0x30
 8008b5a:	1e9a      	subs	r2, r3, #2
 8008b5c:	0013      	movs	r3, r2
 8008b5e:	9903      	ldr	r1, [sp, #12]
 8008b60:	7014      	strb	r4, [r2, #0]
 8008b62:	a804      	add	r0, sp, #16
 8008b64:	3007      	adds	r0, #7
 8008b66:	4298      	cmp	r0, r3
 8008b68:	d80e      	bhi.n	8008b88 <__exponent+0x78>
 8008b6a:	ab04      	add	r3, sp, #16
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	2000      	movs	r0, #0
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d804      	bhi.n	8008b7e <__exponent+0x6e>
 8008b74:	ab04      	add	r3, sp, #16
 8008b76:	3009      	adds	r0, #9
 8008b78:	18c0      	adds	r0, r0, r3
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	1ac0      	subs	r0, r0, r3
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	1818      	adds	r0, r3, r0
 8008b82:	1b40      	subs	r0, r0, r5
 8008b84:	b007      	add	sp, #28
 8008b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b88:	7818      	ldrb	r0, [r3, #0]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	7008      	strb	r0, [r1, #0]
 8008b8e:	3101      	adds	r1, #1
 8008b90:	e7e7      	b.n	8008b62 <__exponent+0x52>
 8008b92:	2330      	movs	r3, #48	; 0x30
 8008b94:	18e4      	adds	r4, r4, r3
 8008b96:	70ab      	strb	r3, [r5, #2]
 8008b98:	1d28      	adds	r0, r5, #4
 8008b9a:	70ec      	strb	r4, [r5, #3]
 8008b9c:	e7f1      	b.n	8008b82 <__exponent+0x72>
	...

08008ba0 <_printf_float>:
 8008ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba2:	b095      	sub	sp, #84	; 0x54
 8008ba4:	000c      	movs	r4, r1
 8008ba6:	9208      	str	r2, [sp, #32]
 8008ba8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	0007      	movs	r7, r0
 8008bae:	f001 fd2b 	bl	800a608 <_localeconv_r>
 8008bb2:	6803      	ldr	r3, [r0, #0]
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bb8:	f7f7 faa6 	bl	8000108 <strlen>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9312      	str	r3, [sp, #72]	; 0x48
 8008bc0:	7e23      	ldrb	r3, [r4, #24]
 8008bc2:	2207      	movs	r2, #7
 8008bc4:	001e      	movs	r6, r3
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	900d      	str	r0, [sp, #52]	; 0x34
 8008bca:	930c      	str	r3, [sp, #48]	; 0x30
 8008bcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	05c9      	lsls	r1, r1, #23
 8008bd2:	d547      	bpl.n	8008c64 <_printf_float+0xc4>
 8008bd4:	189b      	adds	r3, r3, r2
 8008bd6:	4393      	bics	r3, r2
 8008bd8:	001a      	movs	r2, r3
 8008bda:	3208      	adds	r2, #8
 8008bdc:	602a      	str	r2, [r5, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	64a2      	str	r2, [r4, #72]	; 0x48
 8008be4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008be6:	2201      	movs	r2, #1
 8008be8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008bea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008bec:	930a      	str	r3, [sp, #40]	; 0x28
 8008bee:	006b      	lsls	r3, r5, #1
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	930e      	str	r3, [sp, #56]	; 0x38
 8008bf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008bf6:	4ba8      	ldr	r3, [pc, #672]	; (8008e98 <_printf_float+0x2f8>)
 8008bf8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008bfa:	4252      	negs	r2, r2
 8008bfc:	f7f9 faae 	bl	800215c <__aeabi_dcmpun>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d131      	bne.n	8008c68 <_printf_float+0xc8>
 8008c04:	2201      	movs	r2, #1
 8008c06:	4ba4      	ldr	r3, [pc, #656]	; (8008e98 <_printf_float+0x2f8>)
 8008c08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c0c:	4252      	negs	r2, r2
 8008c0e:	f7f7 fc2d 	bl	800046c <__aeabi_dcmple>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d128      	bne.n	8008c68 <_printf_float+0xc8>
 8008c16:	2200      	movs	r2, #0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	0029      	movs	r1, r5
 8008c1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c1e:	f7f7 fc1b 	bl	8000458 <__aeabi_dcmplt>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d003      	beq.n	8008c2e <_printf_float+0x8e>
 8008c26:	0023      	movs	r3, r4
 8008c28:	222d      	movs	r2, #45	; 0x2d
 8008c2a:	3343      	adds	r3, #67	; 0x43
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	4d9b      	ldr	r5, [pc, #620]	; (8008e9c <_printf_float+0x2fc>)
 8008c30:	2e47      	cmp	r6, #71	; 0x47
 8008c32:	d900      	bls.n	8008c36 <_printf_float+0x96>
 8008c34:	4d9a      	ldr	r5, [pc, #616]	; (8008ea0 <_printf_float+0x300>)
 8008c36:	2303      	movs	r3, #3
 8008c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	439a      	bics	r2, r3
 8008c40:	2300      	movs	r3, #0
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	930a      	str	r3, [sp, #40]	; 0x28
 8008c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c48:	0021      	movs	r1, r4
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	0038      	movs	r0, r7
 8008c4e:	9b08      	ldr	r3, [sp, #32]
 8008c50:	aa13      	add	r2, sp, #76	; 0x4c
 8008c52:	f000 f9f3 	bl	800903c <_printf_common>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d000      	beq.n	8008c5c <_printf_float+0xbc>
 8008c5a:	e09e      	b.n	8008d9a <_printf_float+0x1fa>
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	4240      	negs	r0, r0
 8008c60:	b015      	add	sp, #84	; 0x54
 8008c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c64:	3307      	adds	r3, #7
 8008c66:	e7b6      	b.n	8008bd6 <_printf_float+0x36>
 8008c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c6a:	002b      	movs	r3, r5
 8008c6c:	0010      	movs	r0, r2
 8008c6e:	0029      	movs	r1, r5
 8008c70:	f7f9 fa74 	bl	800215c <__aeabi_dcmpun>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d00a      	beq.n	8008c8e <_printf_float+0xee>
 8008c78:	2d00      	cmp	r5, #0
 8008c7a:	da03      	bge.n	8008c84 <_printf_float+0xe4>
 8008c7c:	0023      	movs	r3, r4
 8008c7e:	222d      	movs	r2, #45	; 0x2d
 8008c80:	3343      	adds	r3, #67	; 0x43
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	4d87      	ldr	r5, [pc, #540]	; (8008ea4 <_printf_float+0x304>)
 8008c86:	2e47      	cmp	r6, #71	; 0x47
 8008c88:	d9d5      	bls.n	8008c36 <_printf_float+0x96>
 8008c8a:	4d87      	ldr	r5, [pc, #540]	; (8008ea8 <_printf_float+0x308>)
 8008c8c:	e7d3      	b.n	8008c36 <_printf_float+0x96>
 8008c8e:	2220      	movs	r2, #32
 8008c90:	0031      	movs	r1, r6
 8008c92:	6863      	ldr	r3, [r4, #4]
 8008c94:	4391      	bics	r1, r2
 8008c96:	910e      	str	r1, [sp, #56]	; 0x38
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	d147      	bne.n	8008d2c <_printf_float+0x18c>
 8008c9c:	3307      	adds	r3, #7
 8008c9e:	6063      	str	r3, [r4, #4]
 8008ca0:	2380      	movs	r3, #128	; 0x80
 8008ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	2200      	movs	r2, #0
 8008caa:	9206      	str	r2, [sp, #24]
 8008cac:	aa12      	add	r2, sp, #72	; 0x48
 8008cae:	9205      	str	r2, [sp, #20]
 8008cb0:	aa11      	add	r2, sp, #68	; 0x44
 8008cb2:	9203      	str	r2, [sp, #12]
 8008cb4:	2223      	movs	r2, #35	; 0x23
 8008cb6:	a908      	add	r1, sp, #32
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	6863      	ldr	r3, [r4, #4]
 8008cbe:	1852      	adds	r2, r2, r1
 8008cc0:	9202      	str	r2, [sp, #8]
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	0038      	movs	r0, r7
 8008cc6:	002b      	movs	r3, r5
 8008cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cca:	9604      	str	r6, [sp, #16]
 8008ccc:	f7ff febd 	bl	8008a4a <__cvt>
 8008cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd2:	0005      	movs	r5, r0
 8008cd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cd6:	2b47      	cmp	r3, #71	; 0x47
 8008cd8:	d108      	bne.n	8008cec <_printf_float+0x14c>
 8008cda:	1ccb      	adds	r3, r1, #3
 8008cdc:	db02      	blt.n	8008ce4 <_printf_float+0x144>
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	dd46      	ble.n	8008d72 <_printf_float+0x1d2>
 8008ce4:	0033      	movs	r3, r6
 8008ce6:	3b02      	subs	r3, #2
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	001e      	movs	r6, r3
 8008cec:	2e65      	cmp	r6, #101	; 0x65
 8008cee:	d824      	bhi.n	8008d3a <_printf_float+0x19a>
 8008cf0:	0020      	movs	r0, r4
 8008cf2:	0032      	movs	r2, r6
 8008cf4:	3901      	subs	r1, #1
 8008cf6:	3050      	adds	r0, #80	; 0x50
 8008cf8:	9111      	str	r1, [sp, #68]	; 0x44
 8008cfa:	f7ff ff09 	bl	8008b10 <__exponent>
 8008cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d00:	900a      	str	r0, [sp, #40]	; 0x28
 8008d02:	1813      	adds	r3, r2, r0
 8008d04:	6123      	str	r3, [r4, #16]
 8008d06:	2a01      	cmp	r2, #1
 8008d08:	dc02      	bgt.n	8008d10 <_printf_float+0x170>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	07d2      	lsls	r2, r2, #31
 8008d0e:	d501      	bpl.n	8008d14 <_printf_float+0x174>
 8008d10:	3301      	adds	r3, #1
 8008d12:	6123      	str	r3, [r4, #16]
 8008d14:	2323      	movs	r3, #35	; 0x23
 8008d16:	aa08      	add	r2, sp, #32
 8008d18:	189b      	adds	r3, r3, r2
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d100      	bne.n	8008d22 <_printf_float+0x182>
 8008d20:	e791      	b.n	8008c46 <_printf_float+0xa6>
 8008d22:	0023      	movs	r3, r4
 8008d24:	222d      	movs	r2, #45	; 0x2d
 8008d26:	3343      	adds	r3, #67	; 0x43
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	e78c      	b.n	8008c46 <_printf_float+0xa6>
 8008d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d2e:	2a47      	cmp	r2, #71	; 0x47
 8008d30:	d1b6      	bne.n	8008ca0 <_printf_float+0x100>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1b4      	bne.n	8008ca0 <_printf_float+0x100>
 8008d36:	3301      	adds	r3, #1
 8008d38:	e7b1      	b.n	8008c9e <_printf_float+0xfe>
 8008d3a:	2e66      	cmp	r6, #102	; 0x66
 8008d3c:	d11b      	bne.n	8008d76 <_printf_float+0x1d6>
 8008d3e:	6863      	ldr	r3, [r4, #4]
 8008d40:	2900      	cmp	r1, #0
 8008d42:	dd0d      	ble.n	8008d60 <_printf_float+0x1c0>
 8008d44:	6121      	str	r1, [r4, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d102      	bne.n	8008d50 <_printf_float+0x1b0>
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	07d2      	lsls	r2, r2, #31
 8008d4e:	d502      	bpl.n	8008d56 <_printf_float+0x1b6>
 8008d50:	3301      	adds	r3, #1
 8008d52:	1859      	adds	r1, r3, r1
 8008d54:	6121      	str	r1, [r4, #16]
 8008d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d58:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d5e:	e7d9      	b.n	8008d14 <_printf_float+0x174>
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <_printf_float+0x1cc>
 8008d64:	2201      	movs	r2, #1
 8008d66:	6821      	ldr	r1, [r4, #0]
 8008d68:	4211      	tst	r1, r2
 8008d6a:	d000      	beq.n	8008d6e <_printf_float+0x1ce>
 8008d6c:	1c9a      	adds	r2, r3, #2
 8008d6e:	6122      	str	r2, [r4, #16]
 8008d70:	e7f1      	b.n	8008d56 <_printf_float+0x1b6>
 8008d72:	2367      	movs	r3, #103	; 0x67
 8008d74:	001e      	movs	r6, r3
 8008d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	db06      	blt.n	8008d8c <_printf_float+0x1ec>
 8008d7e:	6822      	ldr	r2, [r4, #0]
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	07d2      	lsls	r2, r2, #31
 8008d84:	d5e7      	bpl.n	8008d56 <_printf_float+0x1b6>
 8008d86:	3301      	adds	r3, #1
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	e7e4      	b.n	8008d56 <_printf_float+0x1b6>
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dc01      	bgt.n	8008d96 <_printf_float+0x1f6>
 8008d92:	1849      	adds	r1, r1, r1
 8008d94:	1ac9      	subs	r1, r1, r3
 8008d96:	1852      	adds	r2, r2, r1
 8008d98:	e7e9      	b.n	8008d6e <_printf_float+0x1ce>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	0553      	lsls	r3, r2, #21
 8008d9e:	d408      	bmi.n	8008db2 <_printf_float+0x212>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	002a      	movs	r2, r5
 8008da4:	0038      	movs	r0, r7
 8008da6:	9908      	ldr	r1, [sp, #32]
 8008da8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008daa:	47a8      	blx	r5
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d129      	bne.n	8008e04 <_printf_float+0x264>
 8008db0:	e754      	b.n	8008c5c <_printf_float+0xbc>
 8008db2:	2e65      	cmp	r6, #101	; 0x65
 8008db4:	d800      	bhi.n	8008db8 <_printf_float+0x218>
 8008db6:	e0ec      	b.n	8008f92 <_printf_float+0x3f2>
 8008db8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008dba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f7f7 fb44 	bl	800044c <__aeabi_dcmpeq>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d034      	beq.n	8008e32 <_printf_float+0x292>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	0038      	movs	r0, r7
 8008dcc:	4a37      	ldr	r2, [pc, #220]	; (8008eac <_printf_float+0x30c>)
 8008dce:	9908      	ldr	r1, [sp, #32]
 8008dd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dd2:	47a8      	blx	r5
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d100      	bne.n	8008dda <_printf_float+0x23a>
 8008dd8:	e740      	b.n	8008c5c <_printf_float+0xbc>
 8008dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dde:	4293      	cmp	r3, r2
 8008de0:	db02      	blt.n	8008de8 <_printf_float+0x248>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	07db      	lsls	r3, r3, #31
 8008de6:	d50d      	bpl.n	8008e04 <_printf_float+0x264>
 8008de8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008dea:	0038      	movs	r0, r7
 8008dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008df0:	9908      	ldr	r1, [sp, #32]
 8008df2:	47a8      	blx	r5
 8008df4:	2500      	movs	r5, #0
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d100      	bne.n	8008dfc <_printf_float+0x25c>
 8008dfa:	e72f      	b.n	8008c5c <_printf_float+0xbc>
 8008dfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	dc0a      	bgt.n	8008e1a <_printf_float+0x27a>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	079b      	lsls	r3, r3, #30
 8008e08:	d500      	bpl.n	8008e0c <_printf_float+0x26c>
 8008e0a:	e114      	b.n	8009036 <_printf_float+0x496>
 8008e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e0e:	68e0      	ldr	r0, [r4, #12]
 8008e10:	4298      	cmp	r0, r3
 8008e12:	db00      	blt.n	8008e16 <_printf_float+0x276>
 8008e14:	e724      	b.n	8008c60 <_printf_float+0xc0>
 8008e16:	0018      	movs	r0, r3
 8008e18:	e722      	b.n	8008c60 <_printf_float+0xc0>
 8008e1a:	0022      	movs	r2, r4
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	0038      	movs	r0, r7
 8008e20:	9908      	ldr	r1, [sp, #32]
 8008e22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e24:	321a      	adds	r2, #26
 8008e26:	47b0      	blx	r6
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d100      	bne.n	8008e2e <_printf_float+0x28e>
 8008e2c:	e716      	b.n	8008c5c <_printf_float+0xbc>
 8008e2e:	3501      	adds	r5, #1
 8008e30:	e7e4      	b.n	8008dfc <_printf_float+0x25c>
 8008e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dc3b      	bgt.n	8008eb0 <_printf_float+0x310>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	0038      	movs	r0, r7
 8008e3c:	4a1b      	ldr	r2, [pc, #108]	; (8008eac <_printf_float+0x30c>)
 8008e3e:	9908      	ldr	r1, [sp, #32]
 8008e40:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e42:	47b0      	blx	r6
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d100      	bne.n	8008e4a <_printf_float+0x2aa>
 8008e48:	e708      	b.n	8008c5c <_printf_float+0xbc>
 8008e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	d102      	bne.n	8008e58 <_printf_float+0x2b8>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	07db      	lsls	r3, r3, #31
 8008e56:	d5d5      	bpl.n	8008e04 <_printf_float+0x264>
 8008e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e5a:	0038      	movs	r0, r7
 8008e5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e5e:	9908      	ldr	r1, [sp, #32]
 8008e60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e62:	47b0      	blx	r6
 8008e64:	1c43      	adds	r3, r0, #1
 8008e66:	d100      	bne.n	8008e6a <_printf_float+0x2ca>
 8008e68:	e6f8      	b.n	8008c5c <_printf_float+0xbc>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e72:	425b      	negs	r3, r3
 8008e74:	4293      	cmp	r3, r2
 8008e76:	dc01      	bgt.n	8008e7c <_printf_float+0x2dc>
 8008e78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e7a:	e792      	b.n	8008da2 <_printf_float+0x202>
 8008e7c:	0022      	movs	r2, r4
 8008e7e:	2301      	movs	r3, #1
 8008e80:	0038      	movs	r0, r7
 8008e82:	9908      	ldr	r1, [sp, #32]
 8008e84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e86:	321a      	adds	r2, #26
 8008e88:	47b0      	blx	r6
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	d100      	bne.n	8008e90 <_printf_float+0x2f0>
 8008e8e:	e6e5      	b.n	8008c5c <_printf_float+0xbc>
 8008e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e92:	3301      	adds	r3, #1
 8008e94:	e7ea      	b.n	8008e6c <_printf_float+0x2cc>
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	7fefffff 	.word	0x7fefffff
 8008e9c:	0800b974 	.word	0x0800b974
 8008ea0:	0800b978 	.word	0x0800b978
 8008ea4:	0800b97c 	.word	0x0800b97c
 8008ea8:	0800b980 	.word	0x0800b980
 8008eac:	0800b984 	.word	0x0800b984
 8008eb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eb4:	920a      	str	r2, [sp, #40]	; 0x28
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	dd00      	ble.n	8008ebc <_printf_float+0x31c>
 8008eba:	930a      	str	r3, [sp, #40]	; 0x28
 8008ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dc3d      	bgt.n	8008f3e <_printf_float+0x39e>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	17db      	asrs	r3, r3, #31
 8008ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	dc36      	bgt.n	8008f50 <_printf_float+0x3b0>
 8008ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	db40      	blt.n	8008f6c <_printf_float+0x3cc>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	07db      	lsls	r3, r3, #31
 8008eee:	d43d      	bmi.n	8008f6c <_printf_float+0x3cc>
 8008ef0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ef4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	1a52      	subs	r2, r2, r1
 8008efa:	920a      	str	r2, [sp, #40]	; 0x28
 8008efc:	429a      	cmp	r2, r3
 8008efe:	dd00      	ble.n	8008f02 <_printf_float+0x362>
 8008f00:	930a      	str	r3, [sp, #40]	; 0x28
 8008f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dc3a      	bgt.n	8008f7e <_printf_float+0x3de>
 8008f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0a:	2500      	movs	r5, #0
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	17db      	asrs	r3, r3, #31
 8008f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f1c:	400a      	ands	r2, r1
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	42ab      	cmp	r3, r5
 8008f22:	dc00      	bgt.n	8008f26 <_printf_float+0x386>
 8008f24:	e76e      	b.n	8008e04 <_printf_float+0x264>
 8008f26:	0022      	movs	r2, r4
 8008f28:	2301      	movs	r3, #1
 8008f2a:	0038      	movs	r0, r7
 8008f2c:	9908      	ldr	r1, [sp, #32]
 8008f2e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f30:	321a      	adds	r2, #26
 8008f32:	47b0      	blx	r6
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d100      	bne.n	8008f3a <_printf_float+0x39a>
 8008f38:	e690      	b.n	8008c5c <_printf_float+0xbc>
 8008f3a:	3501      	adds	r5, #1
 8008f3c:	e7e9      	b.n	8008f12 <_printf_float+0x372>
 8008f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f40:	002a      	movs	r2, r5
 8008f42:	0038      	movs	r0, r7
 8008f44:	9908      	ldr	r1, [sp, #32]
 8008f46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f48:	47b0      	blx	r6
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	d1b9      	bne.n	8008ec2 <_printf_float+0x322>
 8008f4e:	e685      	b.n	8008c5c <_printf_float+0xbc>
 8008f50:	0022      	movs	r2, r4
 8008f52:	2301      	movs	r3, #1
 8008f54:	0038      	movs	r0, r7
 8008f56:	9908      	ldr	r1, [sp, #32]
 8008f58:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f5a:	321a      	adds	r2, #26
 8008f5c:	47b0      	blx	r6
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d100      	bne.n	8008f64 <_printf_float+0x3c4>
 8008f62:	e67b      	b.n	8008c5c <_printf_float+0xbc>
 8008f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f66:	3301      	adds	r3, #1
 8008f68:	930e      	str	r3, [sp, #56]	; 0x38
 8008f6a:	e7b0      	b.n	8008ece <_printf_float+0x32e>
 8008f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f6e:	0038      	movs	r0, r7
 8008f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f72:	9908      	ldr	r1, [sp, #32]
 8008f74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f76:	47b0      	blx	r6
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d1b9      	bne.n	8008ef0 <_printf_float+0x350>
 8008f7c:	e66e      	b.n	8008c5c <_printf_float+0xbc>
 8008f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f80:	0038      	movs	r0, r7
 8008f82:	18ea      	adds	r2, r5, r3
 8008f84:	9908      	ldr	r1, [sp, #32]
 8008f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f8a:	47a8      	blx	r5
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d1bb      	bne.n	8008f08 <_printf_float+0x368>
 8008f90:	e664      	b.n	8008c5c <_printf_float+0xbc>
 8008f92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	dc02      	bgt.n	8008f9e <_printf_float+0x3fe>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	421a      	tst	r2, r3
 8008f9c:	d038      	beq.n	8009010 <_printf_float+0x470>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	002a      	movs	r2, r5
 8008fa2:	0038      	movs	r0, r7
 8008fa4:	9908      	ldr	r1, [sp, #32]
 8008fa6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fa8:	47b0      	blx	r6
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d100      	bne.n	8008fb0 <_printf_float+0x410>
 8008fae:	e655      	b.n	8008c5c <_printf_float+0xbc>
 8008fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fb2:	0038      	movs	r0, r7
 8008fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fb6:	9908      	ldr	r1, [sp, #32]
 8008fb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fba:	47b0      	blx	r6
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d100      	bne.n	8008fc2 <_printf_float+0x422>
 8008fc0:	e64c      	b.n	8008c5c <_printf_float+0xbc>
 8008fc2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008fc4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f7f7 fa3f 	bl	800044c <__aeabi_dcmpeq>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d11c      	bne.n	800900c <_printf_float+0x46c>
 8008fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fd4:	1c6a      	adds	r2, r5, #1
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	0038      	movs	r0, r7
 8008fda:	9908      	ldr	r1, [sp, #32]
 8008fdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008fde:	47a8      	blx	r5
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d10f      	bne.n	8009004 <_printf_float+0x464>
 8008fe4:	e63a      	b.n	8008c5c <_printf_float+0xbc>
 8008fe6:	0022      	movs	r2, r4
 8008fe8:	2301      	movs	r3, #1
 8008fea:	0038      	movs	r0, r7
 8008fec:	9908      	ldr	r1, [sp, #32]
 8008fee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ff0:	321a      	adds	r2, #26
 8008ff2:	47b0      	blx	r6
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d100      	bne.n	8008ffa <_printf_float+0x45a>
 8008ff8:	e630      	b.n	8008c5c <_printf_float+0xbc>
 8008ffa:	3501      	adds	r5, #1
 8008ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ffe:	3b01      	subs	r3, #1
 8009000:	42ab      	cmp	r3, r5
 8009002:	dcf0      	bgt.n	8008fe6 <_printf_float+0x446>
 8009004:	0022      	movs	r2, r4
 8009006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009008:	3250      	adds	r2, #80	; 0x50
 800900a:	e6cb      	b.n	8008da4 <_printf_float+0x204>
 800900c:	2500      	movs	r5, #0
 800900e:	e7f5      	b.n	8008ffc <_printf_float+0x45c>
 8009010:	002a      	movs	r2, r5
 8009012:	e7e1      	b.n	8008fd8 <_printf_float+0x438>
 8009014:	0022      	movs	r2, r4
 8009016:	2301      	movs	r3, #1
 8009018:	0038      	movs	r0, r7
 800901a:	9908      	ldr	r1, [sp, #32]
 800901c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800901e:	3219      	adds	r2, #25
 8009020:	47b0      	blx	r6
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	d100      	bne.n	8009028 <_printf_float+0x488>
 8009026:	e619      	b.n	8008c5c <_printf_float+0xbc>
 8009028:	3501      	adds	r5, #1
 800902a:	68e3      	ldr	r3, [r4, #12]
 800902c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800902e:	1a9b      	subs	r3, r3, r2
 8009030:	42ab      	cmp	r3, r5
 8009032:	dcef      	bgt.n	8009014 <_printf_float+0x474>
 8009034:	e6ea      	b.n	8008e0c <_printf_float+0x26c>
 8009036:	2500      	movs	r5, #0
 8009038:	e7f7      	b.n	800902a <_printf_float+0x48a>
 800903a:	46c0      	nop			; (mov r8, r8)

0800903c <_printf_common>:
 800903c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800903e:	0015      	movs	r5, r2
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	688a      	ldr	r2, [r1, #8]
 8009044:	690b      	ldr	r3, [r1, #16]
 8009046:	000c      	movs	r4, r1
 8009048:	9000      	str	r0, [sp, #0]
 800904a:	4293      	cmp	r3, r2
 800904c:	da00      	bge.n	8009050 <_printf_common+0x14>
 800904e:	0013      	movs	r3, r2
 8009050:	0022      	movs	r2, r4
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	3243      	adds	r2, #67	; 0x43
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	2a00      	cmp	r2, #0
 800905a:	d001      	beq.n	8009060 <_printf_common+0x24>
 800905c:	3301      	adds	r3, #1
 800905e:	602b      	str	r3, [r5, #0]
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	069b      	lsls	r3, r3, #26
 8009064:	d502      	bpl.n	800906c <_printf_common+0x30>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	3302      	adds	r3, #2
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	2306      	movs	r3, #6
 8009070:	0017      	movs	r7, r2
 8009072:	401f      	ands	r7, r3
 8009074:	421a      	tst	r2, r3
 8009076:	d027      	beq.n	80090c8 <_printf_common+0x8c>
 8009078:	0023      	movs	r3, r4
 800907a:	3343      	adds	r3, #67	; 0x43
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	1e5a      	subs	r2, r3, #1
 8009080:	4193      	sbcs	r3, r2
 8009082:	6822      	ldr	r2, [r4, #0]
 8009084:	0692      	lsls	r2, r2, #26
 8009086:	d430      	bmi.n	80090ea <_printf_common+0xae>
 8009088:	0022      	movs	r2, r4
 800908a:	9901      	ldr	r1, [sp, #4]
 800908c:	9800      	ldr	r0, [sp, #0]
 800908e:	9e08      	ldr	r6, [sp, #32]
 8009090:	3243      	adds	r2, #67	; 0x43
 8009092:	47b0      	blx	r6
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d025      	beq.n	80090e4 <_printf_common+0xa8>
 8009098:	2306      	movs	r3, #6
 800909a:	6820      	ldr	r0, [r4, #0]
 800909c:	682a      	ldr	r2, [r5, #0]
 800909e:	68e1      	ldr	r1, [r4, #12]
 80090a0:	2500      	movs	r5, #0
 80090a2:	4003      	ands	r3, r0
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	d103      	bne.n	80090b0 <_printf_common+0x74>
 80090a8:	1a8d      	subs	r5, r1, r2
 80090aa:	43eb      	mvns	r3, r5
 80090ac:	17db      	asrs	r3, r3, #31
 80090ae:	401d      	ands	r5, r3
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	6922      	ldr	r2, [r4, #16]
 80090b4:	4293      	cmp	r3, r2
 80090b6:	dd01      	ble.n	80090bc <_printf_common+0x80>
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	18ed      	adds	r5, r5, r3
 80090bc:	2700      	movs	r7, #0
 80090be:	42bd      	cmp	r5, r7
 80090c0:	d120      	bne.n	8009104 <_printf_common+0xc8>
 80090c2:	2000      	movs	r0, #0
 80090c4:	e010      	b.n	80090e8 <_printf_common+0xac>
 80090c6:	3701      	adds	r7, #1
 80090c8:	68e3      	ldr	r3, [r4, #12]
 80090ca:	682a      	ldr	r2, [r5, #0]
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	42bb      	cmp	r3, r7
 80090d0:	ddd2      	ble.n	8009078 <_printf_common+0x3c>
 80090d2:	0022      	movs	r2, r4
 80090d4:	2301      	movs	r3, #1
 80090d6:	9901      	ldr	r1, [sp, #4]
 80090d8:	9800      	ldr	r0, [sp, #0]
 80090da:	9e08      	ldr	r6, [sp, #32]
 80090dc:	3219      	adds	r2, #25
 80090de:	47b0      	blx	r6
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d1f0      	bne.n	80090c6 <_printf_common+0x8a>
 80090e4:	2001      	movs	r0, #1
 80090e6:	4240      	negs	r0, r0
 80090e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ea:	2030      	movs	r0, #48	; 0x30
 80090ec:	18e1      	adds	r1, r4, r3
 80090ee:	3143      	adds	r1, #67	; 0x43
 80090f0:	7008      	strb	r0, [r1, #0]
 80090f2:	0021      	movs	r1, r4
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	3145      	adds	r1, #69	; 0x45
 80090f8:	7809      	ldrb	r1, [r1, #0]
 80090fa:	18a2      	adds	r2, r4, r2
 80090fc:	3243      	adds	r2, #67	; 0x43
 80090fe:	3302      	adds	r3, #2
 8009100:	7011      	strb	r1, [r2, #0]
 8009102:	e7c1      	b.n	8009088 <_printf_common+0x4c>
 8009104:	0022      	movs	r2, r4
 8009106:	2301      	movs	r3, #1
 8009108:	9901      	ldr	r1, [sp, #4]
 800910a:	9800      	ldr	r0, [sp, #0]
 800910c:	9e08      	ldr	r6, [sp, #32]
 800910e:	321a      	adds	r2, #26
 8009110:	47b0      	blx	r6
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d0e6      	beq.n	80090e4 <_printf_common+0xa8>
 8009116:	3701      	adds	r7, #1
 8009118:	e7d1      	b.n	80090be <_printf_common+0x82>
	...

0800911c <_printf_i>:
 800911c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800911e:	b08b      	sub	sp, #44	; 0x2c
 8009120:	9206      	str	r2, [sp, #24]
 8009122:	000a      	movs	r2, r1
 8009124:	3243      	adds	r2, #67	; 0x43
 8009126:	9307      	str	r3, [sp, #28]
 8009128:	9005      	str	r0, [sp, #20]
 800912a:	9204      	str	r2, [sp, #16]
 800912c:	7e0a      	ldrb	r2, [r1, #24]
 800912e:	000c      	movs	r4, r1
 8009130:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009132:	2a78      	cmp	r2, #120	; 0x78
 8009134:	d806      	bhi.n	8009144 <_printf_i+0x28>
 8009136:	2a62      	cmp	r2, #98	; 0x62
 8009138:	d808      	bhi.n	800914c <_printf_i+0x30>
 800913a:	2a00      	cmp	r2, #0
 800913c:	d100      	bne.n	8009140 <_printf_i+0x24>
 800913e:	e0c0      	b.n	80092c2 <_printf_i+0x1a6>
 8009140:	2a58      	cmp	r2, #88	; 0x58
 8009142:	d052      	beq.n	80091ea <_printf_i+0xce>
 8009144:	0026      	movs	r6, r4
 8009146:	3642      	adds	r6, #66	; 0x42
 8009148:	7032      	strb	r2, [r6, #0]
 800914a:	e022      	b.n	8009192 <_printf_i+0x76>
 800914c:	0010      	movs	r0, r2
 800914e:	3863      	subs	r0, #99	; 0x63
 8009150:	2815      	cmp	r0, #21
 8009152:	d8f7      	bhi.n	8009144 <_printf_i+0x28>
 8009154:	f7f6 ffea 	bl	800012c <__gnu_thumb1_case_shi>
 8009158:	001f0016 	.word	0x001f0016
 800915c:	fff6fff6 	.word	0xfff6fff6
 8009160:	fff6fff6 	.word	0xfff6fff6
 8009164:	fff6001f 	.word	0xfff6001f
 8009168:	fff6fff6 	.word	0xfff6fff6
 800916c:	00a8fff6 	.word	0x00a8fff6
 8009170:	009a0036 	.word	0x009a0036
 8009174:	fff6fff6 	.word	0xfff6fff6
 8009178:	fff600b9 	.word	0xfff600b9
 800917c:	fff60036 	.word	0xfff60036
 8009180:	009efff6 	.word	0x009efff6
 8009184:	0026      	movs	r6, r4
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	3642      	adds	r6, #66	; 0x42
 800918a:	1d11      	adds	r1, r2, #4
 800918c:	6019      	str	r1, [r3, #0]
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	7033      	strb	r3, [r6, #0]
 8009192:	2301      	movs	r3, #1
 8009194:	e0a7      	b.n	80092e6 <_printf_i+0x1ca>
 8009196:	6808      	ldr	r0, [r1, #0]
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	1d0a      	adds	r2, r1, #4
 800919c:	0605      	lsls	r5, r0, #24
 800919e:	d50b      	bpl.n	80091b8 <_printf_i+0x9c>
 80091a0:	680d      	ldr	r5, [r1, #0]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	da03      	bge.n	80091b0 <_printf_i+0x94>
 80091a8:	232d      	movs	r3, #45	; 0x2d
 80091aa:	9a04      	ldr	r2, [sp, #16]
 80091ac:	426d      	negs	r5, r5
 80091ae:	7013      	strb	r3, [r2, #0]
 80091b0:	4b61      	ldr	r3, [pc, #388]	; (8009338 <_printf_i+0x21c>)
 80091b2:	270a      	movs	r7, #10
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	e032      	b.n	800921e <_printf_i+0x102>
 80091b8:	680d      	ldr	r5, [r1, #0]
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	0641      	lsls	r1, r0, #25
 80091be:	d5f1      	bpl.n	80091a4 <_printf_i+0x88>
 80091c0:	b22d      	sxth	r5, r5
 80091c2:	e7ef      	b.n	80091a4 <_printf_i+0x88>
 80091c4:	680d      	ldr	r5, [r1, #0]
 80091c6:	6819      	ldr	r1, [r3, #0]
 80091c8:	1d08      	adds	r0, r1, #4
 80091ca:	6018      	str	r0, [r3, #0]
 80091cc:	062e      	lsls	r6, r5, #24
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0xb8>
 80091d0:	680d      	ldr	r5, [r1, #0]
 80091d2:	e003      	b.n	80091dc <_printf_i+0xc0>
 80091d4:	066d      	lsls	r5, r5, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0xb4>
 80091d8:	680d      	ldr	r5, [r1, #0]
 80091da:	b2ad      	uxth	r5, r5
 80091dc:	4b56      	ldr	r3, [pc, #344]	; (8009338 <_printf_i+0x21c>)
 80091de:	270a      	movs	r7, #10
 80091e0:	9303      	str	r3, [sp, #12]
 80091e2:	2a6f      	cmp	r2, #111	; 0x6f
 80091e4:	d117      	bne.n	8009216 <_printf_i+0xfa>
 80091e6:	2708      	movs	r7, #8
 80091e8:	e015      	b.n	8009216 <_printf_i+0xfa>
 80091ea:	3145      	adds	r1, #69	; 0x45
 80091ec:	700a      	strb	r2, [r1, #0]
 80091ee:	4a52      	ldr	r2, [pc, #328]	; (8009338 <_printf_i+0x21c>)
 80091f0:	9203      	str	r2, [sp, #12]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	6821      	ldr	r1, [r4, #0]
 80091f6:	ca20      	ldmia	r2!, {r5}
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	0608      	lsls	r0, r1, #24
 80091fc:	d550      	bpl.n	80092a0 <_printf_i+0x184>
 80091fe:	07cb      	lsls	r3, r1, #31
 8009200:	d502      	bpl.n	8009208 <_printf_i+0xec>
 8009202:	2320      	movs	r3, #32
 8009204:	4319      	orrs	r1, r3
 8009206:	6021      	str	r1, [r4, #0]
 8009208:	2710      	movs	r7, #16
 800920a:	2d00      	cmp	r5, #0
 800920c:	d103      	bne.n	8009216 <_printf_i+0xfa>
 800920e:	2320      	movs	r3, #32
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	439a      	bics	r2, r3
 8009214:	6022      	str	r2, [r4, #0]
 8009216:	0023      	movs	r3, r4
 8009218:	2200      	movs	r2, #0
 800921a:	3343      	adds	r3, #67	; 0x43
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	db03      	blt.n	800922e <_printf_i+0x112>
 8009226:	2204      	movs	r2, #4
 8009228:	6821      	ldr	r1, [r4, #0]
 800922a:	4391      	bics	r1, r2
 800922c:	6021      	str	r1, [r4, #0]
 800922e:	2d00      	cmp	r5, #0
 8009230:	d102      	bne.n	8009238 <_printf_i+0x11c>
 8009232:	9e04      	ldr	r6, [sp, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00c      	beq.n	8009252 <_printf_i+0x136>
 8009238:	9e04      	ldr	r6, [sp, #16]
 800923a:	0028      	movs	r0, r5
 800923c:	0039      	movs	r1, r7
 800923e:	f7f7 f805 	bl	800024c <__aeabi_uidivmod>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	3e01      	subs	r6, #1
 8009246:	5c5b      	ldrb	r3, [r3, r1]
 8009248:	7033      	strb	r3, [r6, #0]
 800924a:	002b      	movs	r3, r5
 800924c:	0005      	movs	r5, r0
 800924e:	429f      	cmp	r7, r3
 8009250:	d9f3      	bls.n	800923a <_printf_i+0x11e>
 8009252:	2f08      	cmp	r7, #8
 8009254:	d109      	bne.n	800926a <_printf_i+0x14e>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	07db      	lsls	r3, r3, #31
 800925a:	d506      	bpl.n	800926a <_printf_i+0x14e>
 800925c:	6863      	ldr	r3, [r4, #4]
 800925e:	6922      	ldr	r2, [r4, #16]
 8009260:	4293      	cmp	r3, r2
 8009262:	dc02      	bgt.n	800926a <_printf_i+0x14e>
 8009264:	2330      	movs	r3, #48	; 0x30
 8009266:	3e01      	subs	r6, #1
 8009268:	7033      	strb	r3, [r6, #0]
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	1b9b      	subs	r3, r3, r6
 800926e:	6123      	str	r3, [r4, #16]
 8009270:	9b07      	ldr	r3, [sp, #28]
 8009272:	0021      	movs	r1, r4
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	9805      	ldr	r0, [sp, #20]
 8009278:	9b06      	ldr	r3, [sp, #24]
 800927a:	aa09      	add	r2, sp, #36	; 0x24
 800927c:	f7ff fede 	bl	800903c <_printf_common>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d135      	bne.n	80092f0 <_printf_i+0x1d4>
 8009284:	2001      	movs	r0, #1
 8009286:	4240      	negs	r0, r0
 8009288:	b00b      	add	sp, #44	; 0x2c
 800928a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928c:	2220      	movs	r2, #32
 800928e:	6809      	ldr	r1, [r1, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	6022      	str	r2, [r4, #0]
 8009294:	0022      	movs	r2, r4
 8009296:	2178      	movs	r1, #120	; 0x78
 8009298:	3245      	adds	r2, #69	; 0x45
 800929a:	7011      	strb	r1, [r2, #0]
 800929c:	4a27      	ldr	r2, [pc, #156]	; (800933c <_printf_i+0x220>)
 800929e:	e7a7      	b.n	80091f0 <_printf_i+0xd4>
 80092a0:	0648      	lsls	r0, r1, #25
 80092a2:	d5ac      	bpl.n	80091fe <_printf_i+0xe2>
 80092a4:	b2ad      	uxth	r5, r5
 80092a6:	e7aa      	b.n	80091fe <_printf_i+0xe2>
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	680d      	ldr	r5, [r1, #0]
 80092ac:	1d10      	adds	r0, r2, #4
 80092ae:	6949      	ldr	r1, [r1, #20]
 80092b0:	6018      	str	r0, [r3, #0]
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	062e      	lsls	r6, r5, #24
 80092b6:	d501      	bpl.n	80092bc <_printf_i+0x1a0>
 80092b8:	6019      	str	r1, [r3, #0]
 80092ba:	e002      	b.n	80092c2 <_printf_i+0x1a6>
 80092bc:	066d      	lsls	r5, r5, #25
 80092be:	d5fb      	bpl.n	80092b8 <_printf_i+0x19c>
 80092c0:	8019      	strh	r1, [r3, #0]
 80092c2:	2300      	movs	r3, #0
 80092c4:	9e04      	ldr	r6, [sp, #16]
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	e7d2      	b.n	8009270 <_printf_i+0x154>
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	1d11      	adds	r1, r2, #4
 80092ce:	6019      	str	r1, [r3, #0]
 80092d0:	6816      	ldr	r6, [r2, #0]
 80092d2:	2100      	movs	r1, #0
 80092d4:	0030      	movs	r0, r6
 80092d6:	6862      	ldr	r2, [r4, #4]
 80092d8:	f001 fa14 	bl	800a704 <memchr>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d001      	beq.n	80092e4 <_printf_i+0x1c8>
 80092e0:	1b80      	subs	r0, r0, r6
 80092e2:	6060      	str	r0, [r4, #4]
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	6123      	str	r3, [r4, #16]
 80092e8:	2300      	movs	r3, #0
 80092ea:	9a04      	ldr	r2, [sp, #16]
 80092ec:	7013      	strb	r3, [r2, #0]
 80092ee:	e7bf      	b.n	8009270 <_printf_i+0x154>
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	0032      	movs	r2, r6
 80092f4:	9906      	ldr	r1, [sp, #24]
 80092f6:	9805      	ldr	r0, [sp, #20]
 80092f8:	9d07      	ldr	r5, [sp, #28]
 80092fa:	47a8      	blx	r5
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d0c1      	beq.n	8009284 <_printf_i+0x168>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	079b      	lsls	r3, r3, #30
 8009304:	d415      	bmi.n	8009332 <_printf_i+0x216>
 8009306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009308:	68e0      	ldr	r0, [r4, #12]
 800930a:	4298      	cmp	r0, r3
 800930c:	dabc      	bge.n	8009288 <_printf_i+0x16c>
 800930e:	0018      	movs	r0, r3
 8009310:	e7ba      	b.n	8009288 <_printf_i+0x16c>
 8009312:	0022      	movs	r2, r4
 8009314:	2301      	movs	r3, #1
 8009316:	9906      	ldr	r1, [sp, #24]
 8009318:	9805      	ldr	r0, [sp, #20]
 800931a:	9e07      	ldr	r6, [sp, #28]
 800931c:	3219      	adds	r2, #25
 800931e:	47b0      	blx	r6
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d0af      	beq.n	8009284 <_printf_i+0x168>
 8009324:	3501      	adds	r5, #1
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932a:	1a9b      	subs	r3, r3, r2
 800932c:	42ab      	cmp	r3, r5
 800932e:	dcf0      	bgt.n	8009312 <_printf_i+0x1f6>
 8009330:	e7e9      	b.n	8009306 <_printf_i+0x1ea>
 8009332:	2500      	movs	r5, #0
 8009334:	e7f7      	b.n	8009326 <_printf_i+0x20a>
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	0800b986 	.word	0x0800b986
 800933c:	0800b997 	.word	0x0800b997

08009340 <iprintf>:
 8009340:	b40f      	push	{r0, r1, r2, r3}
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <iprintf+0x30>)
 8009344:	b513      	push	{r0, r1, r4, lr}
 8009346:	681c      	ldr	r4, [r3, #0]
 8009348:	2c00      	cmp	r4, #0
 800934a:	d005      	beq.n	8009358 <iprintf+0x18>
 800934c:	69a3      	ldr	r3, [r4, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <iprintf+0x18>
 8009352:	0020      	movs	r0, r4
 8009354:	f001 f8b8 	bl	800a4c8 <__sinit>
 8009358:	ab05      	add	r3, sp, #20
 800935a:	0020      	movs	r0, r4
 800935c:	9a04      	ldr	r2, [sp, #16]
 800935e:	68a1      	ldr	r1, [r4, #8]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	f001 fe57 	bl	800b014 <_vfiprintf_r>
 8009366:	bc16      	pop	{r1, r2, r4}
 8009368:	bc08      	pop	{r3}
 800936a:	b004      	add	sp, #16
 800936c:	4718      	bx	r3
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	20000018 	.word	0x20000018

08009374 <setbuf>:
 8009374:	424a      	negs	r2, r1
 8009376:	414a      	adcs	r2, r1
 8009378:	2380      	movs	r3, #128	; 0x80
 800937a:	b510      	push	{r4, lr}
 800937c:	0052      	lsls	r2, r2, #1
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	f000 f802 	bl	8009388 <setvbuf>
 8009384:	bd10      	pop	{r4, pc}
	...

08009388 <setvbuf>:
 8009388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938a:	001d      	movs	r5, r3
 800938c:	4b5d      	ldr	r3, [pc, #372]	; (8009504 <setvbuf+0x17c>)
 800938e:	b085      	sub	sp, #20
 8009390:	681e      	ldr	r6, [r3, #0]
 8009392:	0004      	movs	r4, r0
 8009394:	000f      	movs	r7, r1
 8009396:	9200      	str	r2, [sp, #0]
 8009398:	2e00      	cmp	r6, #0
 800939a:	d005      	beq.n	80093a8 <setvbuf+0x20>
 800939c:	69b3      	ldr	r3, [r6, #24]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d102      	bne.n	80093a8 <setvbuf+0x20>
 80093a2:	0030      	movs	r0, r6
 80093a4:	f001 f890 	bl	800a4c8 <__sinit>
 80093a8:	4b57      	ldr	r3, [pc, #348]	; (8009508 <setvbuf+0x180>)
 80093aa:	429c      	cmp	r4, r3
 80093ac:	d161      	bne.n	8009472 <setvbuf+0xea>
 80093ae:	6874      	ldr	r4, [r6, #4]
 80093b0:	9b00      	ldr	r3, [sp, #0]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d005      	beq.n	80093c2 <setvbuf+0x3a>
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d900      	bls.n	80093bc <setvbuf+0x34>
 80093ba:	e09d      	b.n	80094f8 <setvbuf+0x170>
 80093bc:	2d00      	cmp	r5, #0
 80093be:	da00      	bge.n	80093c2 <setvbuf+0x3a>
 80093c0:	e09a      	b.n	80094f8 <setvbuf+0x170>
 80093c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093c4:	07db      	lsls	r3, r3, #31
 80093c6:	d405      	bmi.n	80093d4 <setvbuf+0x4c>
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	059b      	lsls	r3, r3, #22
 80093cc:	d402      	bmi.n	80093d4 <setvbuf+0x4c>
 80093ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093d0:	f001 f91f 	bl	800a612 <__retarget_lock_acquire_recursive>
 80093d4:	0021      	movs	r1, r4
 80093d6:	0030      	movs	r0, r6
 80093d8:	f000 ffd4 	bl	800a384 <_fflush_r>
 80093dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093de:	2900      	cmp	r1, #0
 80093e0:	d008      	beq.n	80093f4 <setvbuf+0x6c>
 80093e2:	0023      	movs	r3, r4
 80093e4:	3344      	adds	r3, #68	; 0x44
 80093e6:	4299      	cmp	r1, r3
 80093e8:	d002      	beq.n	80093f0 <setvbuf+0x68>
 80093ea:	0030      	movs	r0, r6
 80093ec:	f001 fd42 	bl	800ae74 <_free_r>
 80093f0:	2300      	movs	r3, #0
 80093f2:	6363      	str	r3, [r4, #52]	; 0x34
 80093f4:	2300      	movs	r3, #0
 80093f6:	61a3      	str	r3, [r4, #24]
 80093f8:	6063      	str	r3, [r4, #4]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	061b      	lsls	r3, r3, #24
 80093fe:	d503      	bpl.n	8009408 <setvbuf+0x80>
 8009400:	0030      	movs	r0, r6
 8009402:	6921      	ldr	r1, [r4, #16]
 8009404:	f001 fd36 	bl	800ae74 <_free_r>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	4a40      	ldr	r2, [pc, #256]	; (800950c <setvbuf+0x184>)
 800940c:	4013      	ands	r3, r2
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	9b00      	ldr	r3, [sp, #0]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d100      	bne.n	8009418 <setvbuf+0x90>
 8009416:	e069      	b.n	80094ec <setvbuf+0x164>
 8009418:	ab03      	add	r3, sp, #12
 800941a:	0021      	movs	r1, r4
 800941c:	0030      	movs	r0, r6
 800941e:	aa02      	add	r2, sp, #8
 8009420:	f001 f8fa 	bl	800a618 <__swhatbuf_r>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	4303      	orrs	r3, r0
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	2d00      	cmp	r5, #0
 800942c:	d12b      	bne.n	8009486 <setvbuf+0xfe>
 800942e:	9d02      	ldr	r5, [sp, #8]
 8009430:	0028      	movs	r0, r5
 8009432:	f001 f95d 	bl	800a6f0 <malloc>
 8009436:	1e07      	subs	r7, r0, #0
 8009438:	d153      	bne.n	80094e2 <setvbuf+0x15a>
 800943a:	9b02      	ldr	r3, [sp, #8]
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	42ab      	cmp	r3, r5
 8009440:	d149      	bne.n	80094d6 <setvbuf+0x14e>
 8009442:	2501      	movs	r5, #1
 8009444:	426d      	negs	r5, r5
 8009446:	2302      	movs	r3, #2
 8009448:	89a2      	ldrh	r2, [r4, #12]
 800944a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800944c:	4313      	orrs	r3, r2
 800944e:	2200      	movs	r2, #0
 8009450:	60a2      	str	r2, [r4, #8]
 8009452:	0022      	movs	r2, r4
 8009454:	3247      	adds	r2, #71	; 0x47
 8009456:	6022      	str	r2, [r4, #0]
 8009458:	6122      	str	r2, [r4, #16]
 800945a:	2201      	movs	r2, #1
 800945c:	b21b      	sxth	r3, r3
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	6162      	str	r2, [r4, #20]
 8009462:	4211      	tst	r1, r2
 8009464:	d134      	bne.n	80094d0 <setvbuf+0x148>
 8009466:	059b      	lsls	r3, r3, #22
 8009468:	d432      	bmi.n	80094d0 <setvbuf+0x148>
 800946a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800946c:	f001 f8d2 	bl	800a614 <__retarget_lock_release_recursive>
 8009470:	e02e      	b.n	80094d0 <setvbuf+0x148>
 8009472:	4b27      	ldr	r3, [pc, #156]	; (8009510 <setvbuf+0x188>)
 8009474:	429c      	cmp	r4, r3
 8009476:	d101      	bne.n	800947c <setvbuf+0xf4>
 8009478:	68b4      	ldr	r4, [r6, #8]
 800947a:	e799      	b.n	80093b0 <setvbuf+0x28>
 800947c:	4b25      	ldr	r3, [pc, #148]	; (8009514 <setvbuf+0x18c>)
 800947e:	429c      	cmp	r4, r3
 8009480:	d196      	bne.n	80093b0 <setvbuf+0x28>
 8009482:	68f4      	ldr	r4, [r6, #12]
 8009484:	e794      	b.n	80093b0 <setvbuf+0x28>
 8009486:	2f00      	cmp	r7, #0
 8009488:	d0d2      	beq.n	8009430 <setvbuf+0xa8>
 800948a:	69b3      	ldr	r3, [r6, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <setvbuf+0x10e>
 8009490:	0030      	movs	r0, r6
 8009492:	f001 f819 	bl	800a4c8 <__sinit>
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d102      	bne.n	80094a2 <setvbuf+0x11a>
 800949c:	89a2      	ldrh	r2, [r4, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	81a3      	strh	r3, [r4, #12]
 80094a2:	89a2      	ldrh	r2, [r4, #12]
 80094a4:	2308      	movs	r3, #8
 80094a6:	0011      	movs	r1, r2
 80094a8:	6027      	str	r7, [r4, #0]
 80094aa:	6127      	str	r7, [r4, #16]
 80094ac:	6165      	str	r5, [r4, #20]
 80094ae:	4019      	ands	r1, r3
 80094b0:	421a      	tst	r2, r3
 80094b2:	d01f      	beq.n	80094f4 <setvbuf+0x16c>
 80094b4:	07d3      	lsls	r3, r2, #31
 80094b6:	d51b      	bpl.n	80094f0 <setvbuf+0x168>
 80094b8:	2300      	movs	r3, #0
 80094ba:	426d      	negs	r5, r5
 80094bc:	60a3      	str	r3, [r4, #8]
 80094be:	61a5      	str	r5, [r4, #24]
 80094c0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80094c2:	2301      	movs	r3, #1
 80094c4:	000d      	movs	r5, r1
 80094c6:	401d      	ands	r5, r3
 80094c8:	4219      	tst	r1, r3
 80094ca:	d118      	bne.n	80094fe <setvbuf+0x176>
 80094cc:	0593      	lsls	r3, r2, #22
 80094ce:	d5cc      	bpl.n	800946a <setvbuf+0xe2>
 80094d0:	0028      	movs	r0, r5
 80094d2:	b005      	add	sp, #20
 80094d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d6:	9801      	ldr	r0, [sp, #4]
 80094d8:	f001 f90a 	bl	800a6f0 <malloc>
 80094dc:	9d01      	ldr	r5, [sp, #4]
 80094de:	1e07      	subs	r7, r0, #0
 80094e0:	d0af      	beq.n	8009442 <setvbuf+0xba>
 80094e2:	2380      	movs	r3, #128	; 0x80
 80094e4:	89a2      	ldrh	r2, [r4, #12]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	81a3      	strh	r3, [r4, #12]
 80094ea:	e7ce      	b.n	800948a <setvbuf+0x102>
 80094ec:	2500      	movs	r5, #0
 80094ee:	e7aa      	b.n	8009446 <setvbuf+0xbe>
 80094f0:	60a5      	str	r5, [r4, #8]
 80094f2:	e7e5      	b.n	80094c0 <setvbuf+0x138>
 80094f4:	60a1      	str	r1, [r4, #8]
 80094f6:	e7e3      	b.n	80094c0 <setvbuf+0x138>
 80094f8:	2501      	movs	r5, #1
 80094fa:	426d      	negs	r5, r5
 80094fc:	e7e8      	b.n	80094d0 <setvbuf+0x148>
 80094fe:	2500      	movs	r5, #0
 8009500:	e7e6      	b.n	80094d0 <setvbuf+0x148>
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	20000018 	.word	0x20000018
 8009508:	0800ba5c 	.word	0x0800ba5c
 800950c:	fffff35c 	.word	0xfffff35c
 8009510:	0800ba7c 	.word	0x0800ba7c
 8009514:	0800ba3c 	.word	0x0800ba3c

08009518 <quorem>:
 8009518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800951a:	0006      	movs	r6, r0
 800951c:	690d      	ldr	r5, [r1, #16]
 800951e:	6933      	ldr	r3, [r6, #16]
 8009520:	b087      	sub	sp, #28
 8009522:	2000      	movs	r0, #0
 8009524:	9102      	str	r1, [sp, #8]
 8009526:	42ab      	cmp	r3, r5
 8009528:	db6b      	blt.n	8009602 <quorem+0xea>
 800952a:	000b      	movs	r3, r1
 800952c:	3d01      	subs	r5, #1
 800952e:	00ac      	lsls	r4, r5, #2
 8009530:	3314      	adds	r3, #20
 8009532:	9305      	str	r3, [sp, #20]
 8009534:	191b      	adds	r3, r3, r4
 8009536:	9303      	str	r3, [sp, #12]
 8009538:	0033      	movs	r3, r6
 800953a:	3314      	adds	r3, #20
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	191c      	adds	r4, r3, r4
 8009540:	9b03      	ldr	r3, [sp, #12]
 8009542:	6827      	ldr	r7, [r4, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	0038      	movs	r0, r7
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	3301      	adds	r3, #1
 800954c:	0019      	movs	r1, r3
 800954e:	9304      	str	r3, [sp, #16]
 8009550:	f7f6 fdf6 	bl	8000140 <__udivsi3>
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	9000      	str	r0, [sp, #0]
 8009558:	429f      	cmp	r7, r3
 800955a:	d329      	bcc.n	80095b0 <quorem+0x98>
 800955c:	2300      	movs	r3, #0
 800955e:	469c      	mov	ip, r3
 8009560:	9801      	ldr	r0, [sp, #4]
 8009562:	9f05      	ldr	r7, [sp, #20]
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	cf08      	ldmia	r7!, {r3}
 8009568:	9a00      	ldr	r2, [sp, #0]
 800956a:	b299      	uxth	r1, r3
 800956c:	4351      	muls	r1, r2
 800956e:	0c1b      	lsrs	r3, r3, #16
 8009570:	4353      	muls	r3, r2
 8009572:	4461      	add	r1, ip
 8009574:	0c0a      	lsrs	r2, r1, #16
 8009576:	189b      	adds	r3, r3, r2
 8009578:	0c1a      	lsrs	r2, r3, #16
 800957a:	9305      	str	r3, [sp, #20]
 800957c:	6803      	ldr	r3, [r0, #0]
 800957e:	4694      	mov	ip, r2
 8009580:	b29a      	uxth	r2, r3
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	b289      	uxth	r1, r1
 8009586:	18d2      	adds	r2, r2, r3
 8009588:	6803      	ldr	r3, [r0, #0]
 800958a:	1a52      	subs	r2, r2, r1
 800958c:	0c19      	lsrs	r1, r3, #16
 800958e:	466b      	mov	r3, sp
 8009590:	8a9b      	ldrh	r3, [r3, #20]
 8009592:	1acb      	subs	r3, r1, r3
 8009594:	1411      	asrs	r1, r2, #16
 8009596:	185b      	adds	r3, r3, r1
 8009598:	1419      	asrs	r1, r3, #16
 800959a:	b292      	uxth	r2, r2
 800959c:	041b      	lsls	r3, r3, #16
 800959e:	431a      	orrs	r2, r3
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	9104      	str	r1, [sp, #16]
 80095a4:	c004      	stmia	r0!, {r2}
 80095a6:	42bb      	cmp	r3, r7
 80095a8:	d2dd      	bcs.n	8009566 <quorem+0x4e>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d02e      	beq.n	800960e <quorem+0xf6>
 80095b0:	0030      	movs	r0, r6
 80095b2:	9902      	ldr	r1, [sp, #8]
 80095b4:	f001 fb38 	bl	800ac28 <__mcmp>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	db21      	blt.n	8009600 <quorem+0xe8>
 80095bc:	0030      	movs	r0, r6
 80095be:	2400      	movs	r4, #0
 80095c0:	9b00      	ldr	r3, [sp, #0]
 80095c2:	9902      	ldr	r1, [sp, #8]
 80095c4:	3301      	adds	r3, #1
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	3014      	adds	r0, #20
 80095ca:	3114      	adds	r1, #20
 80095cc:	6802      	ldr	r2, [r0, #0]
 80095ce:	c908      	ldmia	r1!, {r3}
 80095d0:	b292      	uxth	r2, r2
 80095d2:	1914      	adds	r4, r2, r4
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	1aa2      	subs	r2, r4, r2
 80095d8:	6804      	ldr	r4, [r0, #0]
 80095da:	0c1b      	lsrs	r3, r3, #16
 80095dc:	0c24      	lsrs	r4, r4, #16
 80095de:	1ae3      	subs	r3, r4, r3
 80095e0:	1414      	asrs	r4, r2, #16
 80095e2:	191b      	adds	r3, r3, r4
 80095e4:	141c      	asrs	r4, r3, #16
 80095e6:	b292      	uxth	r2, r2
 80095e8:	041b      	lsls	r3, r3, #16
 80095ea:	4313      	orrs	r3, r2
 80095ec:	c008      	stmia	r0!, {r3}
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	428b      	cmp	r3, r1
 80095f2:	d2eb      	bcs.n	80095cc <quorem+0xb4>
 80095f4:	9a01      	ldr	r2, [sp, #4]
 80095f6:	00ab      	lsls	r3, r5, #2
 80095f8:	18d3      	adds	r3, r2, r3
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	d010      	beq.n	8009622 <quorem+0x10a>
 8009600:	9800      	ldr	r0, [sp, #0]
 8009602:	b007      	add	sp, #28
 8009604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <quorem+0xfe>
 800960c:	3d01      	subs	r5, #1
 800960e:	9b01      	ldr	r3, [sp, #4]
 8009610:	3c04      	subs	r4, #4
 8009612:	42a3      	cmp	r3, r4
 8009614:	d3f7      	bcc.n	8009606 <quorem+0xee>
 8009616:	6135      	str	r5, [r6, #16]
 8009618:	e7ca      	b.n	80095b0 <quorem+0x98>
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	2a00      	cmp	r2, #0
 800961e:	d104      	bne.n	800962a <quorem+0x112>
 8009620:	3d01      	subs	r5, #1
 8009622:	9a01      	ldr	r2, [sp, #4]
 8009624:	3b04      	subs	r3, #4
 8009626:	429a      	cmp	r2, r3
 8009628:	d3f7      	bcc.n	800961a <quorem+0x102>
 800962a:	6135      	str	r5, [r6, #16]
 800962c:	e7e8      	b.n	8009600 <quorem+0xe8>
	...

08009630 <_dtoa_r>:
 8009630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009632:	b09d      	sub	sp, #116	; 0x74
 8009634:	9202      	str	r2, [sp, #8]
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	9c03      	ldr	r4, [sp, #12]
 800963c:	930a      	str	r3, [sp, #40]	; 0x28
 800963e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009640:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009642:	0007      	movs	r7, r0
 8009644:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009646:	2c00      	cmp	r4, #0
 8009648:	d10e      	bne.n	8009668 <_dtoa_r+0x38>
 800964a:	2010      	movs	r0, #16
 800964c:	f001 f850 	bl	800a6f0 <malloc>
 8009650:	1e02      	subs	r2, r0, #0
 8009652:	6278      	str	r0, [r7, #36]	; 0x24
 8009654:	d104      	bne.n	8009660 <_dtoa_r+0x30>
 8009656:	21ea      	movs	r1, #234	; 0xea
 8009658:	4bc0      	ldr	r3, [pc, #768]	; (800995c <_dtoa_r+0x32c>)
 800965a:	48c1      	ldr	r0, [pc, #772]	; (8009960 <_dtoa_r+0x330>)
 800965c:	f001 ff54 	bl	800b508 <__assert_func>
 8009660:	6044      	str	r4, [r0, #4]
 8009662:	6084      	str	r4, [r0, #8]
 8009664:	6004      	str	r4, [r0, #0]
 8009666:	60c4      	str	r4, [r0, #12]
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	6819      	ldr	r1, [r3, #0]
 800966c:	2900      	cmp	r1, #0
 800966e:	d00a      	beq.n	8009686 <_dtoa_r+0x56>
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	2301      	movs	r3, #1
 8009674:	4093      	lsls	r3, r2
 8009676:	604a      	str	r2, [r1, #4]
 8009678:	608b      	str	r3, [r1, #8]
 800967a:	0038      	movs	r0, r7
 800967c:	f001 f892 	bl	800a7a4 <_Bfree>
 8009680:	2200      	movs	r2, #0
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	da21      	bge.n	80096d0 <_dtoa_r+0xa0>
 800968c:	2301      	movs	r3, #1
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	085b      	lsrs	r3, r3, #1
 8009696:	930b      	str	r3, [sp, #44]	; 0x2c
 8009698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800969a:	4bb2      	ldr	r3, [pc, #712]	; (8009964 <_dtoa_r+0x334>)
 800969c:	002a      	movs	r2, r5
 800969e:	9318      	str	r3, [sp, #96]	; 0x60
 80096a0:	401a      	ands	r2, r3
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d117      	bne.n	80096d6 <_dtoa_r+0xa6>
 80096a6:	4bb0      	ldr	r3, [pc, #704]	; (8009968 <_dtoa_r+0x338>)
 80096a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80096aa:	0328      	lsls	r0, r5, #12
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	9b02      	ldr	r3, [sp, #8]
 80096b0:	0b00      	lsrs	r0, r0, #12
 80096b2:	4318      	orrs	r0, r3
 80096b4:	d101      	bne.n	80096ba <_dtoa_r+0x8a>
 80096b6:	f000 fdc3 	bl	800a240 <_dtoa_r+0xc10>
 80096ba:	48ac      	ldr	r0, [pc, #688]	; (800996c <_dtoa_r+0x33c>)
 80096bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096be:	9005      	str	r0, [sp, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <_dtoa_r+0x9a>
 80096c4:	4baa      	ldr	r3, [pc, #680]	; (8009970 <_dtoa_r+0x340>)
 80096c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	9805      	ldr	r0, [sp, #20]
 80096cc:	b01d      	add	sp, #116	; 0x74
 80096ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d0:	2300      	movs	r3, #0
 80096d2:	602b      	str	r3, [r5, #0]
 80096d4:	e7e0      	b.n	8009698 <_dtoa_r+0x68>
 80096d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80096da:	9312      	str	r3, [sp, #72]	; 0x48
 80096dc:	9413      	str	r4, [sp, #76]	; 0x4c
 80096de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80096e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80096e2:	2200      	movs	r2, #0
 80096e4:	2300      	movs	r3, #0
 80096e6:	f7f6 feb1 	bl	800044c <__aeabi_dcmpeq>
 80096ea:	1e04      	subs	r4, r0, #0
 80096ec:	d00b      	beq.n	8009706 <_dtoa_r+0xd6>
 80096ee:	2301      	movs	r3, #1
 80096f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	4b9f      	ldr	r3, [pc, #636]	; (8009974 <_dtoa_r+0x344>)
 80096f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	d0e5      	beq.n	80096ca <_dtoa_r+0x9a>
 80096fe:	4a9e      	ldr	r2, [pc, #632]	; (8009978 <_dtoa_r+0x348>)
 8009700:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009702:	600a      	str	r2, [r1, #0]
 8009704:	e7e1      	b.n	80096ca <_dtoa_r+0x9a>
 8009706:	ab1a      	add	r3, sp, #104	; 0x68
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	ab1b      	add	r3, sp, #108	; 0x6c
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	0038      	movs	r0, r7
 8009710:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009712:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009714:	f001 fb3c 	bl	800ad90 <__d2b>
 8009718:	006e      	lsls	r6, r5, #1
 800971a:	9004      	str	r0, [sp, #16]
 800971c:	0d76      	lsrs	r6, r6, #21
 800971e:	d100      	bne.n	8009722 <_dtoa_r+0xf2>
 8009720:	e07c      	b.n	800981c <_dtoa_r+0x1ec>
 8009722:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009724:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009726:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009728:	4a94      	ldr	r2, [pc, #592]	; (800997c <_dtoa_r+0x34c>)
 800972a:	031b      	lsls	r3, r3, #12
 800972c:	0b1b      	lsrs	r3, r3, #12
 800972e:	431a      	orrs	r2, r3
 8009730:	0011      	movs	r1, r2
 8009732:	4b93      	ldr	r3, [pc, #588]	; (8009980 <_dtoa_r+0x350>)
 8009734:	9416      	str	r4, [sp, #88]	; 0x58
 8009736:	18f6      	adds	r6, r6, r3
 8009738:	2200      	movs	r2, #0
 800973a:	4b92      	ldr	r3, [pc, #584]	; (8009984 <_dtoa_r+0x354>)
 800973c:	f7f8 f97c 	bl	8001a38 <__aeabi_dsub>
 8009740:	4a91      	ldr	r2, [pc, #580]	; (8009988 <_dtoa_r+0x358>)
 8009742:	4b92      	ldr	r3, [pc, #584]	; (800998c <_dtoa_r+0x35c>)
 8009744:	f7f7 ff0c 	bl	8001560 <__aeabi_dmul>
 8009748:	4a91      	ldr	r2, [pc, #580]	; (8009990 <_dtoa_r+0x360>)
 800974a:	4b92      	ldr	r3, [pc, #584]	; (8009994 <_dtoa_r+0x364>)
 800974c:	f7f6 ff98 	bl	8000680 <__aeabi_dadd>
 8009750:	0004      	movs	r4, r0
 8009752:	0030      	movs	r0, r6
 8009754:	000d      	movs	r5, r1
 8009756:	f7f8 fd55 	bl	8002204 <__aeabi_i2d>
 800975a:	4a8f      	ldr	r2, [pc, #572]	; (8009998 <_dtoa_r+0x368>)
 800975c:	4b8f      	ldr	r3, [pc, #572]	; (800999c <_dtoa_r+0x36c>)
 800975e:	f7f7 feff 	bl	8001560 <__aeabi_dmul>
 8009762:	0002      	movs	r2, r0
 8009764:	000b      	movs	r3, r1
 8009766:	0020      	movs	r0, r4
 8009768:	0029      	movs	r1, r5
 800976a:	f7f6 ff89 	bl	8000680 <__aeabi_dadd>
 800976e:	0004      	movs	r4, r0
 8009770:	000d      	movs	r5, r1
 8009772:	f7f8 fd11 	bl	8002198 <__aeabi_d2iz>
 8009776:	2200      	movs	r2, #0
 8009778:	9002      	str	r0, [sp, #8]
 800977a:	2300      	movs	r3, #0
 800977c:	0020      	movs	r0, r4
 800977e:	0029      	movs	r1, r5
 8009780:	f7f6 fe6a 	bl	8000458 <__aeabi_dcmplt>
 8009784:	2800      	cmp	r0, #0
 8009786:	d00b      	beq.n	80097a0 <_dtoa_r+0x170>
 8009788:	9802      	ldr	r0, [sp, #8]
 800978a:	f7f8 fd3b 	bl	8002204 <__aeabi_i2d>
 800978e:	002b      	movs	r3, r5
 8009790:	0022      	movs	r2, r4
 8009792:	f7f6 fe5b 	bl	800044c <__aeabi_dcmpeq>
 8009796:	4243      	negs	r3, r0
 8009798:	4158      	adcs	r0, r3
 800979a:	9b02      	ldr	r3, [sp, #8]
 800979c:	1a1b      	subs	r3, r3, r0
 800979e:	9302      	str	r3, [sp, #8]
 80097a0:	2301      	movs	r3, #1
 80097a2:	9315      	str	r3, [sp, #84]	; 0x54
 80097a4:	9b02      	ldr	r3, [sp, #8]
 80097a6:	2b16      	cmp	r3, #22
 80097a8:	d80f      	bhi.n	80097ca <_dtoa_r+0x19a>
 80097aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80097ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80097ae:	00da      	lsls	r2, r3, #3
 80097b0:	4b7b      	ldr	r3, [pc, #492]	; (80099a0 <_dtoa_r+0x370>)
 80097b2:	189b      	adds	r3, r3, r2
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f7f6 fe4e 	bl	8000458 <__aeabi_dcmplt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d049      	beq.n	8009854 <_dtoa_r+0x224>
 80097c0:	9b02      	ldr	r3, [sp, #8]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	9302      	str	r3, [sp, #8]
 80097c6:	2300      	movs	r3, #0
 80097c8:	9315      	str	r3, [sp, #84]	; 0x54
 80097ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80097cc:	1b9e      	subs	r6, r3, r6
 80097ce:	2300      	movs	r3, #0
 80097d0:	9308      	str	r3, [sp, #32]
 80097d2:	0033      	movs	r3, r6
 80097d4:	3b01      	subs	r3, #1
 80097d6:	930d      	str	r3, [sp, #52]	; 0x34
 80097d8:	d504      	bpl.n	80097e4 <_dtoa_r+0x1b4>
 80097da:	2301      	movs	r3, #1
 80097dc:	1b9b      	subs	r3, r3, r6
 80097de:	9308      	str	r3, [sp, #32]
 80097e0:	2300      	movs	r3, #0
 80097e2:	930d      	str	r3, [sp, #52]	; 0x34
 80097e4:	9b02      	ldr	r3, [sp, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	db36      	blt.n	8009858 <_dtoa_r+0x228>
 80097ea:	9a02      	ldr	r2, [sp, #8]
 80097ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ee:	4694      	mov	ip, r2
 80097f0:	4463      	add	r3, ip
 80097f2:	930d      	str	r3, [sp, #52]	; 0x34
 80097f4:	2300      	movs	r3, #0
 80097f6:	9214      	str	r2, [sp, #80]	; 0x50
 80097f8:	930e      	str	r3, [sp, #56]	; 0x38
 80097fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097fc:	2401      	movs	r4, #1
 80097fe:	2b09      	cmp	r3, #9
 8009800:	d862      	bhi.n	80098c8 <_dtoa_r+0x298>
 8009802:	2b05      	cmp	r3, #5
 8009804:	dd02      	ble.n	800980c <_dtoa_r+0x1dc>
 8009806:	2400      	movs	r4, #0
 8009808:	3b04      	subs	r3, #4
 800980a:	9322      	str	r3, [sp, #136]	; 0x88
 800980c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800980e:	1e98      	subs	r0, r3, #2
 8009810:	2803      	cmp	r0, #3
 8009812:	d862      	bhi.n	80098da <_dtoa_r+0x2aa>
 8009814:	f7f6 fc80 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009818:	56343629 	.word	0x56343629
 800981c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800981e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009820:	189e      	adds	r6, r3, r2
 8009822:	4b60      	ldr	r3, [pc, #384]	; (80099a4 <_dtoa_r+0x374>)
 8009824:	18f2      	adds	r2, r6, r3
 8009826:	2a20      	cmp	r2, #32
 8009828:	dd0f      	ble.n	800984a <_dtoa_r+0x21a>
 800982a:	2340      	movs	r3, #64	; 0x40
 800982c:	1a9b      	subs	r3, r3, r2
 800982e:	409d      	lsls	r5, r3
 8009830:	4b5d      	ldr	r3, [pc, #372]	; (80099a8 <_dtoa_r+0x378>)
 8009832:	9802      	ldr	r0, [sp, #8]
 8009834:	18f3      	adds	r3, r6, r3
 8009836:	40d8      	lsrs	r0, r3
 8009838:	4328      	orrs	r0, r5
 800983a:	f7f8 fd13 	bl	8002264 <__aeabi_ui2d>
 800983e:	2301      	movs	r3, #1
 8009840:	4c5a      	ldr	r4, [pc, #360]	; (80099ac <_dtoa_r+0x37c>)
 8009842:	3e01      	subs	r6, #1
 8009844:	1909      	adds	r1, r1, r4
 8009846:	9316      	str	r3, [sp, #88]	; 0x58
 8009848:	e776      	b.n	8009738 <_dtoa_r+0x108>
 800984a:	2320      	movs	r3, #32
 800984c:	9802      	ldr	r0, [sp, #8]
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	4098      	lsls	r0, r3
 8009852:	e7f2      	b.n	800983a <_dtoa_r+0x20a>
 8009854:	9015      	str	r0, [sp, #84]	; 0x54
 8009856:	e7b8      	b.n	80097ca <_dtoa_r+0x19a>
 8009858:	9b08      	ldr	r3, [sp, #32]
 800985a:	9a02      	ldr	r2, [sp, #8]
 800985c:	1a9b      	subs	r3, r3, r2
 800985e:	9308      	str	r3, [sp, #32]
 8009860:	4253      	negs	r3, r2
 8009862:	930e      	str	r3, [sp, #56]	; 0x38
 8009864:	2300      	movs	r3, #0
 8009866:	9314      	str	r3, [sp, #80]	; 0x50
 8009868:	e7c7      	b.n	80097fa <_dtoa_r+0x1ca>
 800986a:	2300      	movs	r3, #0
 800986c:	930f      	str	r3, [sp, #60]	; 0x3c
 800986e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009870:	2b00      	cmp	r3, #0
 8009872:	dc36      	bgt.n	80098e2 <_dtoa_r+0x2b2>
 8009874:	2301      	movs	r3, #1
 8009876:	001a      	movs	r2, r3
 8009878:	930c      	str	r3, [sp, #48]	; 0x30
 800987a:	9306      	str	r3, [sp, #24]
 800987c:	9223      	str	r2, [sp, #140]	; 0x8c
 800987e:	e00d      	b.n	800989c <_dtoa_r+0x26c>
 8009880:	2301      	movs	r3, #1
 8009882:	e7f3      	b.n	800986c <_dtoa_r+0x23c>
 8009884:	2300      	movs	r3, #0
 8009886:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009888:	930f      	str	r3, [sp, #60]	; 0x3c
 800988a:	4694      	mov	ip, r2
 800988c:	9b02      	ldr	r3, [sp, #8]
 800988e:	4463      	add	r3, ip
 8009890:	930c      	str	r3, [sp, #48]	; 0x30
 8009892:	3301      	adds	r3, #1
 8009894:	9306      	str	r3, [sp, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	dc00      	bgt.n	800989c <_dtoa_r+0x26c>
 800989a:	2301      	movs	r3, #1
 800989c:	2200      	movs	r2, #0
 800989e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098a0:	6042      	str	r2, [r0, #4]
 80098a2:	3204      	adds	r2, #4
 80098a4:	0015      	movs	r5, r2
 80098a6:	3514      	adds	r5, #20
 80098a8:	6841      	ldr	r1, [r0, #4]
 80098aa:	429d      	cmp	r5, r3
 80098ac:	d91d      	bls.n	80098ea <_dtoa_r+0x2ba>
 80098ae:	0038      	movs	r0, r7
 80098b0:	f000 ff34 	bl	800a71c <_Balloc>
 80098b4:	9005      	str	r0, [sp, #20]
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d11b      	bne.n	80098f2 <_dtoa_r+0x2c2>
 80098ba:	21d5      	movs	r1, #213	; 0xd5
 80098bc:	0002      	movs	r2, r0
 80098be:	4b3c      	ldr	r3, [pc, #240]	; (80099b0 <_dtoa_r+0x380>)
 80098c0:	0049      	lsls	r1, r1, #1
 80098c2:	e6ca      	b.n	800965a <_dtoa_r+0x2a>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e7de      	b.n	8009886 <_dtoa_r+0x256>
 80098c8:	2300      	movs	r3, #0
 80098ca:	940f      	str	r4, [sp, #60]	; 0x3c
 80098cc:	9322      	str	r3, [sp, #136]	; 0x88
 80098ce:	3b01      	subs	r3, #1
 80098d0:	930c      	str	r3, [sp, #48]	; 0x30
 80098d2:	9306      	str	r3, [sp, #24]
 80098d4:	2200      	movs	r2, #0
 80098d6:	3313      	adds	r3, #19
 80098d8:	e7d0      	b.n	800987c <_dtoa_r+0x24c>
 80098da:	2301      	movs	r3, #1
 80098dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80098de:	3b02      	subs	r3, #2
 80098e0:	e7f6      	b.n	80098d0 <_dtoa_r+0x2a0>
 80098e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098e4:	930c      	str	r3, [sp, #48]	; 0x30
 80098e6:	9306      	str	r3, [sp, #24]
 80098e8:	e7d8      	b.n	800989c <_dtoa_r+0x26c>
 80098ea:	3101      	adds	r1, #1
 80098ec:	6041      	str	r1, [r0, #4]
 80098ee:	0052      	lsls	r2, r2, #1
 80098f0:	e7d8      	b.n	80098a4 <_dtoa_r+0x274>
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	9a05      	ldr	r2, [sp, #20]
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	9b06      	ldr	r3, [sp, #24]
 80098fa:	2b0e      	cmp	r3, #14
 80098fc:	d900      	bls.n	8009900 <_dtoa_r+0x2d0>
 80098fe:	e0eb      	b.n	8009ad8 <_dtoa_r+0x4a8>
 8009900:	2c00      	cmp	r4, #0
 8009902:	d100      	bne.n	8009906 <_dtoa_r+0x2d6>
 8009904:	e0e8      	b.n	8009ad8 <_dtoa_r+0x4a8>
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	dd68      	ble.n	80099de <_dtoa_r+0x3ae>
 800990c:	001a      	movs	r2, r3
 800990e:	210f      	movs	r1, #15
 8009910:	4b23      	ldr	r3, [pc, #140]	; (80099a0 <_dtoa_r+0x370>)
 8009912:	400a      	ands	r2, r1
 8009914:	00d2      	lsls	r2, r2, #3
 8009916:	189b      	adds	r3, r3, r2
 8009918:	681d      	ldr	r5, [r3, #0]
 800991a:	685e      	ldr	r6, [r3, #4]
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	111c      	asrs	r4, r3, #4
 8009920:	2302      	movs	r3, #2
 8009922:	9310      	str	r3, [sp, #64]	; 0x40
 8009924:	9b02      	ldr	r3, [sp, #8]
 8009926:	05db      	lsls	r3, r3, #23
 8009928:	d50b      	bpl.n	8009942 <_dtoa_r+0x312>
 800992a:	4b22      	ldr	r3, [pc, #136]	; (80099b4 <_dtoa_r+0x384>)
 800992c:	400c      	ands	r4, r1
 800992e:	6a1a      	ldr	r2, [r3, #32]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009934:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009936:	f7f7 fa0d 	bl	8000d54 <__aeabi_ddiv>
 800993a:	2303      	movs	r3, #3
 800993c:	900a      	str	r0, [sp, #40]	; 0x28
 800993e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009940:	9310      	str	r3, [sp, #64]	; 0x40
 8009942:	4b1c      	ldr	r3, [pc, #112]	; (80099b4 <_dtoa_r+0x384>)
 8009944:	9307      	str	r3, [sp, #28]
 8009946:	2c00      	cmp	r4, #0
 8009948:	d136      	bne.n	80099b8 <_dtoa_r+0x388>
 800994a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800994c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800994e:	002a      	movs	r2, r5
 8009950:	0033      	movs	r3, r6
 8009952:	f7f7 f9ff 	bl	8000d54 <__aeabi_ddiv>
 8009956:	900a      	str	r0, [sp, #40]	; 0x28
 8009958:	910b      	str	r1, [sp, #44]	; 0x2c
 800995a:	e05c      	b.n	8009a16 <_dtoa_r+0x3e6>
 800995c:	0800b9b5 	.word	0x0800b9b5
 8009960:	0800b9cc 	.word	0x0800b9cc
 8009964:	7ff00000 	.word	0x7ff00000
 8009968:	0000270f 	.word	0x0000270f
 800996c:	0800b9b1 	.word	0x0800b9b1
 8009970:	0800b9b4 	.word	0x0800b9b4
 8009974:	0800b984 	.word	0x0800b984
 8009978:	0800b985 	.word	0x0800b985
 800997c:	3ff00000 	.word	0x3ff00000
 8009980:	fffffc01 	.word	0xfffffc01
 8009984:	3ff80000 	.word	0x3ff80000
 8009988:	636f4361 	.word	0x636f4361
 800998c:	3fd287a7 	.word	0x3fd287a7
 8009990:	8b60c8b3 	.word	0x8b60c8b3
 8009994:	3fc68a28 	.word	0x3fc68a28
 8009998:	509f79fb 	.word	0x509f79fb
 800999c:	3fd34413 	.word	0x3fd34413
 80099a0:	0800bb28 	.word	0x0800bb28
 80099a4:	00000432 	.word	0x00000432
 80099a8:	00000412 	.word	0x00000412
 80099ac:	fe100000 	.word	0xfe100000
 80099b0:	0800ba2b 	.word	0x0800ba2b
 80099b4:	0800bb00 	.word	0x0800bb00
 80099b8:	2301      	movs	r3, #1
 80099ba:	421c      	tst	r4, r3
 80099bc:	d00b      	beq.n	80099d6 <_dtoa_r+0x3a6>
 80099be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099c0:	0028      	movs	r0, r5
 80099c2:	3301      	adds	r3, #1
 80099c4:	9310      	str	r3, [sp, #64]	; 0x40
 80099c6:	9b07      	ldr	r3, [sp, #28]
 80099c8:	0031      	movs	r1, r6
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f7f7 fdc7 	bl	8001560 <__aeabi_dmul>
 80099d2:	0005      	movs	r5, r0
 80099d4:	000e      	movs	r6, r1
 80099d6:	9b07      	ldr	r3, [sp, #28]
 80099d8:	1064      	asrs	r4, r4, #1
 80099da:	3308      	adds	r3, #8
 80099dc:	e7b2      	b.n	8009944 <_dtoa_r+0x314>
 80099de:	2302      	movs	r3, #2
 80099e0:	9310      	str	r3, [sp, #64]	; 0x40
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d016      	beq.n	8009a16 <_dtoa_r+0x3e6>
 80099e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80099ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80099ec:	425c      	negs	r4, r3
 80099ee:	230f      	movs	r3, #15
 80099f0:	4ab5      	ldr	r2, [pc, #724]	; (8009cc8 <_dtoa_r+0x698>)
 80099f2:	4023      	ands	r3, r4
 80099f4:	00db      	lsls	r3, r3, #3
 80099f6:	18d3      	adds	r3, r2, r3
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f7f7 fdb0 	bl	8001560 <__aeabi_dmul>
 8009a00:	2601      	movs	r6, #1
 8009a02:	2300      	movs	r3, #0
 8009a04:	900a      	str	r0, [sp, #40]	; 0x28
 8009a06:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a08:	4db0      	ldr	r5, [pc, #704]	; (8009ccc <_dtoa_r+0x69c>)
 8009a0a:	1124      	asrs	r4, r4, #4
 8009a0c:	2c00      	cmp	r4, #0
 8009a0e:	d000      	beq.n	8009a12 <_dtoa_r+0x3e2>
 8009a10:	e094      	b.n	8009b3c <_dtoa_r+0x50c>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d19f      	bne.n	8009956 <_dtoa_r+0x326>
 8009a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d100      	bne.n	8009a1e <_dtoa_r+0x3ee>
 8009a1c:	e09b      	b.n	8009b56 <_dtoa_r+0x526>
 8009a1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009a22:	2200      	movs	r2, #0
 8009a24:	0020      	movs	r0, r4
 8009a26:	0029      	movs	r1, r5
 8009a28:	4ba9      	ldr	r3, [pc, #676]	; (8009cd0 <_dtoa_r+0x6a0>)
 8009a2a:	f7f6 fd15 	bl	8000458 <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d100      	bne.n	8009a34 <_dtoa_r+0x404>
 8009a32:	e090      	b.n	8009b56 <_dtoa_r+0x526>
 8009a34:	9b06      	ldr	r3, [sp, #24]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d100      	bne.n	8009a3c <_dtoa_r+0x40c>
 8009a3a:	e08c      	b.n	8009b56 <_dtoa_r+0x526>
 8009a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dd46      	ble.n	8009ad0 <_dtoa_r+0x4a0>
 8009a42:	9b02      	ldr	r3, [sp, #8]
 8009a44:	2200      	movs	r2, #0
 8009a46:	0020      	movs	r0, r4
 8009a48:	0029      	movs	r1, r5
 8009a4a:	1e5e      	subs	r6, r3, #1
 8009a4c:	4ba1      	ldr	r3, [pc, #644]	; (8009cd4 <_dtoa_r+0x6a4>)
 8009a4e:	f7f7 fd87 	bl	8001560 <__aeabi_dmul>
 8009a52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a54:	900a      	str	r0, [sp, #40]	; 0x28
 8009a56:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a58:	3301      	adds	r3, #1
 8009a5a:	9310      	str	r3, [sp, #64]	; 0x40
 8009a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009a64:	9307      	str	r3, [sp, #28]
 8009a66:	f7f8 fbcd 	bl	8002204 <__aeabi_i2d>
 8009a6a:	0022      	movs	r2, r4
 8009a6c:	002b      	movs	r3, r5
 8009a6e:	f7f7 fd77 	bl	8001560 <__aeabi_dmul>
 8009a72:	2200      	movs	r2, #0
 8009a74:	4b98      	ldr	r3, [pc, #608]	; (8009cd8 <_dtoa_r+0x6a8>)
 8009a76:	f7f6 fe03 	bl	8000680 <__aeabi_dadd>
 8009a7a:	9010      	str	r0, [sp, #64]	; 0x40
 8009a7c:	9111      	str	r1, [sp, #68]	; 0x44
 8009a7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a82:	920a      	str	r2, [sp, #40]	; 0x28
 8009a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a86:	4a95      	ldr	r2, [pc, #596]	; (8009cdc <_dtoa_r+0x6ac>)
 8009a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a8a:	4694      	mov	ip, r2
 8009a8c:	4463      	add	r3, ip
 8009a8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a92:	9b07      	ldr	r3, [sp, #28]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d161      	bne.n	8009b5c <_dtoa_r+0x52c>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	0020      	movs	r0, r4
 8009a9c:	0029      	movs	r1, r5
 8009a9e:	4b90      	ldr	r3, [pc, #576]	; (8009ce0 <_dtoa_r+0x6b0>)
 8009aa0:	f7f7 ffca 	bl	8001a38 <__aeabi_dsub>
 8009aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aa8:	0004      	movs	r4, r0
 8009aaa:	000d      	movs	r5, r1
 8009aac:	f7f6 fce8 	bl	8000480 <__aeabi_dcmpgt>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d000      	beq.n	8009ab6 <_dtoa_r+0x486>
 8009ab4:	e2b5      	b.n	800a022 <_dtoa_r+0x9f2>
 8009ab6:	488b      	ldr	r0, [pc, #556]	; (8009ce4 <_dtoa_r+0x6b4>)
 8009ab8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009aba:	4684      	mov	ip, r0
 8009abc:	4461      	add	r1, ip
 8009abe:	000b      	movs	r3, r1
 8009ac0:	0020      	movs	r0, r4
 8009ac2:	0029      	movs	r1, r5
 8009ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac6:	f7f6 fcc7 	bl	8000458 <__aeabi_dcmplt>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d000      	beq.n	8009ad0 <_dtoa_r+0x4a0>
 8009ace:	e2a5      	b.n	800a01c <_dtoa_r+0x9ec>
 8009ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ad6:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	da00      	bge.n	8009ae0 <_dtoa_r+0x4b0>
 8009ade:	e171      	b.n	8009dc4 <_dtoa_r+0x794>
 8009ae0:	9a02      	ldr	r2, [sp, #8]
 8009ae2:	2a0e      	cmp	r2, #14
 8009ae4:	dd00      	ble.n	8009ae8 <_dtoa_r+0x4b8>
 8009ae6:	e16d      	b.n	8009dc4 <_dtoa_r+0x794>
 8009ae8:	4b77      	ldr	r3, [pc, #476]	; (8009cc8 <_dtoa_r+0x698>)
 8009aea:	00d2      	lsls	r2, r2, #3
 8009aec:	189b      	adds	r3, r3, r2
 8009aee:	685c      	ldr	r4, [r3, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	9308      	str	r3, [sp, #32]
 8009af4:	9409      	str	r4, [sp, #36]	; 0x24
 8009af6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	db00      	blt.n	8009afe <_dtoa_r+0x4ce>
 8009afc:	e0f6      	b.n	8009cec <_dtoa_r+0x6bc>
 8009afe:	9b06      	ldr	r3, [sp, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dd00      	ble.n	8009b06 <_dtoa_r+0x4d6>
 8009b04:	e0f2      	b.n	8009cec <_dtoa_r+0x6bc>
 8009b06:	d000      	beq.n	8009b0a <_dtoa_r+0x4da>
 8009b08:	e288      	b.n	800a01c <_dtoa_r+0x9ec>
 8009b0a:	9808      	ldr	r0, [sp, #32]
 8009b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4b73      	ldr	r3, [pc, #460]	; (8009ce0 <_dtoa_r+0x6b0>)
 8009b12:	f7f7 fd25 	bl	8001560 <__aeabi_dmul>
 8009b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b1a:	f7f6 fcbb 	bl	8000494 <__aeabi_dcmpge>
 8009b1e:	9e06      	ldr	r6, [sp, #24]
 8009b20:	0035      	movs	r5, r6
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d000      	beq.n	8009b28 <_dtoa_r+0x4f8>
 8009b26:	e25f      	b.n	8009fe8 <_dtoa_r+0x9b8>
 8009b28:	9b05      	ldr	r3, [sp, #20]
 8009b2a:	9a05      	ldr	r2, [sp, #20]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	9307      	str	r3, [sp, #28]
 8009b30:	2331      	movs	r3, #49	; 0x31
 8009b32:	7013      	strb	r3, [r2, #0]
 8009b34:	9b02      	ldr	r3, [sp, #8]
 8009b36:	3301      	adds	r3, #1
 8009b38:	9302      	str	r3, [sp, #8]
 8009b3a:	e25a      	b.n	8009ff2 <_dtoa_r+0x9c2>
 8009b3c:	4234      	tst	r4, r6
 8009b3e:	d007      	beq.n	8009b50 <_dtoa_r+0x520>
 8009b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b42:	3301      	adds	r3, #1
 8009b44:	9310      	str	r3, [sp, #64]	; 0x40
 8009b46:	682a      	ldr	r2, [r5, #0]
 8009b48:	686b      	ldr	r3, [r5, #4]
 8009b4a:	f7f7 fd09 	bl	8001560 <__aeabi_dmul>
 8009b4e:	0033      	movs	r3, r6
 8009b50:	1064      	asrs	r4, r4, #1
 8009b52:	3508      	adds	r5, #8
 8009b54:	e75a      	b.n	8009a0c <_dtoa_r+0x3dc>
 8009b56:	9e02      	ldr	r6, [sp, #8]
 8009b58:	9b06      	ldr	r3, [sp, #24]
 8009b5a:	e780      	b.n	8009a5e <_dtoa_r+0x42e>
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b60:	1e5a      	subs	r2, r3, #1
 8009b62:	4b59      	ldr	r3, [pc, #356]	; (8009cc8 <_dtoa_r+0x698>)
 8009b64:	00d2      	lsls	r2, r2, #3
 8009b66:	189b      	adds	r3, r3, r2
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d051      	beq.n	8009c14 <_dtoa_r+0x5e4>
 8009b70:	2000      	movs	r0, #0
 8009b72:	495d      	ldr	r1, [pc, #372]	; (8009ce8 <_dtoa_r+0x6b8>)
 8009b74:	f7f7 f8ee 	bl	8000d54 <__aeabi_ddiv>
 8009b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7c:	f7f7 ff5c 	bl	8001a38 <__aeabi_dsub>
 8009b80:	9a05      	ldr	r2, [sp, #20]
 8009b82:	9b05      	ldr	r3, [sp, #20]
 8009b84:	4694      	mov	ip, r2
 8009b86:	9310      	str	r3, [sp, #64]	; 0x40
 8009b88:	9b07      	ldr	r3, [sp, #28]
 8009b8a:	900a      	str	r0, [sp, #40]	; 0x28
 8009b8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b8e:	4463      	add	r3, ip
 8009b90:	9319      	str	r3, [sp, #100]	; 0x64
 8009b92:	0029      	movs	r1, r5
 8009b94:	0020      	movs	r0, r4
 8009b96:	f7f8 faff 	bl	8002198 <__aeabi_d2iz>
 8009b9a:	9017      	str	r0, [sp, #92]	; 0x5c
 8009b9c:	f7f8 fb32 	bl	8002204 <__aeabi_i2d>
 8009ba0:	0002      	movs	r2, r0
 8009ba2:	000b      	movs	r3, r1
 8009ba4:	0020      	movs	r0, r4
 8009ba6:	0029      	movs	r1, r5
 8009ba8:	f7f7 ff46 	bl	8001a38 <__aeabi_dsub>
 8009bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bb6:	0004      	movs	r4, r0
 8009bb8:	3330      	adds	r3, #48	; 0x30
 8009bba:	7013      	strb	r3, [r2, #0]
 8009bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc0:	000d      	movs	r5, r1
 8009bc2:	f7f6 fc49 	bl	8000458 <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d175      	bne.n	8009cb6 <_dtoa_r+0x686>
 8009bca:	0022      	movs	r2, r4
 8009bcc:	002b      	movs	r3, r5
 8009bce:	2000      	movs	r0, #0
 8009bd0:	493f      	ldr	r1, [pc, #252]	; (8009cd0 <_dtoa_r+0x6a0>)
 8009bd2:	f7f7 ff31 	bl	8001a38 <__aeabi_dsub>
 8009bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bda:	f7f6 fc3d 	bl	8000458 <__aeabi_dcmplt>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d000      	beq.n	8009be4 <_dtoa_r+0x5b4>
 8009be2:	e0d1      	b.n	8009d88 <_dtoa_r+0x758>
 8009be4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009be6:	9a07      	ldr	r2, [sp, #28]
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d100      	bne.n	8009bee <_dtoa_r+0x5be>
 8009bec:	e770      	b.n	8009ad0 <_dtoa_r+0x4a0>
 8009bee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4b37      	ldr	r3, [pc, #220]	; (8009cd4 <_dtoa_r+0x6a4>)
 8009bf6:	f7f7 fcb3 	bl	8001560 <__aeabi_dmul>
 8009bfa:	4b36      	ldr	r3, [pc, #216]	; (8009cd4 <_dtoa_r+0x6a4>)
 8009bfc:	900a      	str	r0, [sp, #40]	; 0x28
 8009bfe:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c00:	2200      	movs	r2, #0
 8009c02:	0020      	movs	r0, r4
 8009c04:	0029      	movs	r1, r5
 8009c06:	f7f7 fcab 	bl	8001560 <__aeabi_dmul>
 8009c0a:	9b07      	ldr	r3, [sp, #28]
 8009c0c:	0004      	movs	r4, r0
 8009c0e:	000d      	movs	r5, r1
 8009c10:	9310      	str	r3, [sp, #64]	; 0x40
 8009c12:	e7be      	b.n	8009b92 <_dtoa_r+0x562>
 8009c14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c18:	f7f7 fca2 	bl	8001560 <__aeabi_dmul>
 8009c1c:	9a05      	ldr	r2, [sp, #20]
 8009c1e:	9b05      	ldr	r3, [sp, #20]
 8009c20:	4694      	mov	ip, r2
 8009c22:	930a      	str	r3, [sp, #40]	; 0x28
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	9010      	str	r0, [sp, #64]	; 0x40
 8009c28:	9111      	str	r1, [sp, #68]	; 0x44
 8009c2a:	4463      	add	r3, ip
 8009c2c:	9319      	str	r3, [sp, #100]	; 0x64
 8009c2e:	0029      	movs	r1, r5
 8009c30:	0020      	movs	r0, r4
 8009c32:	f7f8 fab1 	bl	8002198 <__aeabi_d2iz>
 8009c36:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c38:	f7f8 fae4 	bl	8002204 <__aeabi_i2d>
 8009c3c:	0002      	movs	r2, r0
 8009c3e:	000b      	movs	r3, r1
 8009c40:	0020      	movs	r0, r4
 8009c42:	0029      	movs	r1, r5
 8009c44:	f7f7 fef8 	bl	8001a38 <__aeabi_dsub>
 8009c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c4c:	3330      	adds	r3, #48	; 0x30
 8009c4e:	7013      	strb	r3, [r2, #0]
 8009c50:	0013      	movs	r3, r2
 8009c52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c54:	3301      	adds	r3, #1
 8009c56:	0004      	movs	r4, r0
 8009c58:	000d      	movs	r5, r1
 8009c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d12c      	bne.n	8009cba <_dtoa_r+0x68a>
 8009c60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009c62:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c64:	9a05      	ldr	r2, [sp, #20]
 8009c66:	9b07      	ldr	r3, [sp, #28]
 8009c68:	4694      	mov	ip, r2
 8009c6a:	4463      	add	r3, ip
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <_dtoa_r+0x6b8>)
 8009c72:	f7f6 fd05 	bl	8000680 <__aeabi_dadd>
 8009c76:	0002      	movs	r2, r0
 8009c78:	000b      	movs	r3, r1
 8009c7a:	0020      	movs	r0, r4
 8009c7c:	0029      	movs	r1, r5
 8009c7e:	f7f6 fbff 	bl	8000480 <__aeabi_dcmpgt>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d000      	beq.n	8009c88 <_dtoa_r+0x658>
 8009c86:	e07f      	b.n	8009d88 <_dtoa_r+0x758>
 8009c88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	4916      	ldr	r1, [pc, #88]	; (8009ce8 <_dtoa_r+0x6b8>)
 8009c90:	f7f7 fed2 	bl	8001a38 <__aeabi_dsub>
 8009c94:	0002      	movs	r2, r0
 8009c96:	000b      	movs	r3, r1
 8009c98:	0020      	movs	r0, r4
 8009c9a:	0029      	movs	r1, r5
 8009c9c:	f7f6 fbdc 	bl	8000458 <__aeabi_dcmplt>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d100      	bne.n	8009ca6 <_dtoa_r+0x676>
 8009ca4:	e714      	b.n	8009ad0 <_dtoa_r+0x4a0>
 8009ca6:	9b07      	ldr	r3, [sp, #28]
 8009ca8:	001a      	movs	r2, r3
 8009caa:	3a01      	subs	r2, #1
 8009cac:	9207      	str	r2, [sp, #28]
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	2a30      	cmp	r2, #48	; 0x30
 8009cb2:	d0f8      	beq.n	8009ca6 <_dtoa_r+0x676>
 8009cb4:	9307      	str	r3, [sp, #28]
 8009cb6:	9602      	str	r6, [sp, #8]
 8009cb8:	e054      	b.n	8009d64 <_dtoa_r+0x734>
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <_dtoa_r+0x6a4>)
 8009cbe:	f7f7 fc4f 	bl	8001560 <__aeabi_dmul>
 8009cc2:	0004      	movs	r4, r0
 8009cc4:	000d      	movs	r5, r1
 8009cc6:	e7b2      	b.n	8009c2e <_dtoa_r+0x5fe>
 8009cc8:	0800bb28 	.word	0x0800bb28
 8009ccc:	0800bb00 	.word	0x0800bb00
 8009cd0:	3ff00000 	.word	0x3ff00000
 8009cd4:	40240000 	.word	0x40240000
 8009cd8:	401c0000 	.word	0x401c0000
 8009cdc:	fcc00000 	.word	0xfcc00000
 8009ce0:	40140000 	.word	0x40140000
 8009ce4:	7cc00000 	.word	0x7cc00000
 8009ce8:	3fe00000 	.word	0x3fe00000
 8009cec:	9b06      	ldr	r3, [sp, #24]
 8009cee:	9e05      	ldr	r6, [sp, #20]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	199b      	adds	r3, r3, r6
 8009cf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009cf6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8009cfa:	9a08      	ldr	r2, [sp, #32]
 8009cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfe:	0020      	movs	r0, r4
 8009d00:	0029      	movs	r1, r5
 8009d02:	f7f7 f827 	bl	8000d54 <__aeabi_ddiv>
 8009d06:	f7f8 fa47 	bl	8002198 <__aeabi_d2iz>
 8009d0a:	9006      	str	r0, [sp, #24]
 8009d0c:	f7f8 fa7a 	bl	8002204 <__aeabi_i2d>
 8009d10:	9a08      	ldr	r2, [sp, #32]
 8009d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d14:	f7f7 fc24 	bl	8001560 <__aeabi_dmul>
 8009d18:	0002      	movs	r2, r0
 8009d1a:	000b      	movs	r3, r1
 8009d1c:	0020      	movs	r0, r4
 8009d1e:	0029      	movs	r1, r5
 8009d20:	f7f7 fe8a 	bl	8001a38 <__aeabi_dsub>
 8009d24:	0033      	movs	r3, r6
 8009d26:	9a06      	ldr	r2, [sp, #24]
 8009d28:	3601      	adds	r6, #1
 8009d2a:	3230      	adds	r2, #48	; 0x30
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d30:	9607      	str	r6, [sp, #28]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d139      	bne.n	8009daa <_dtoa_r+0x77a>
 8009d36:	0002      	movs	r2, r0
 8009d38:	000b      	movs	r3, r1
 8009d3a:	f7f6 fca1 	bl	8000680 <__aeabi_dadd>
 8009d3e:	9a08      	ldr	r2, [sp, #32]
 8009d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d42:	0004      	movs	r4, r0
 8009d44:	000d      	movs	r5, r1
 8009d46:	f7f6 fb9b 	bl	8000480 <__aeabi_dcmpgt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d11b      	bne.n	8009d86 <_dtoa_r+0x756>
 8009d4e:	9a08      	ldr	r2, [sp, #32]
 8009d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d52:	0020      	movs	r0, r4
 8009d54:	0029      	movs	r1, r5
 8009d56:	f7f6 fb79 	bl	800044c <__aeabi_dcmpeq>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d002      	beq.n	8009d64 <_dtoa_r+0x734>
 8009d5e:	9b06      	ldr	r3, [sp, #24]
 8009d60:	07db      	lsls	r3, r3, #31
 8009d62:	d410      	bmi.n	8009d86 <_dtoa_r+0x756>
 8009d64:	0038      	movs	r0, r7
 8009d66:	9904      	ldr	r1, [sp, #16]
 8009d68:	f000 fd1c 	bl	800a7a4 <_Bfree>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	9a07      	ldr	r2, [sp, #28]
 8009d70:	9802      	ldr	r0, [sp, #8]
 8009d72:	7013      	strb	r3, [r2, #0]
 8009d74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d76:	3001      	adds	r0, #1
 8009d78:	6018      	str	r0, [r3, #0]
 8009d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d100      	bne.n	8009d82 <_dtoa_r+0x752>
 8009d80:	e4a3      	b.n	80096ca <_dtoa_r+0x9a>
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	e4a1      	b.n	80096ca <_dtoa_r+0x9a>
 8009d86:	9e02      	ldr	r6, [sp, #8]
 8009d88:	9b07      	ldr	r3, [sp, #28]
 8009d8a:	9307      	str	r3, [sp, #28]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	781a      	ldrb	r2, [r3, #0]
 8009d90:	2a39      	cmp	r2, #57	; 0x39
 8009d92:	d106      	bne.n	8009da2 <_dtoa_r+0x772>
 8009d94:	9a05      	ldr	r2, [sp, #20]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d1f7      	bne.n	8009d8a <_dtoa_r+0x75a>
 8009d9a:	2230      	movs	r2, #48	; 0x30
 8009d9c:	9905      	ldr	r1, [sp, #20]
 8009d9e:	3601      	adds	r6, #1
 8009da0:	700a      	strb	r2, [r1, #0]
 8009da2:	781a      	ldrb	r2, [r3, #0]
 8009da4:	3201      	adds	r2, #1
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e785      	b.n	8009cb6 <_dtoa_r+0x686>
 8009daa:	2200      	movs	r2, #0
 8009dac:	4bad      	ldr	r3, [pc, #692]	; (800a064 <_dtoa_r+0xa34>)
 8009dae:	f7f7 fbd7 	bl	8001560 <__aeabi_dmul>
 8009db2:	2200      	movs	r2, #0
 8009db4:	2300      	movs	r3, #0
 8009db6:	0004      	movs	r4, r0
 8009db8:	000d      	movs	r5, r1
 8009dba:	f7f6 fb47 	bl	800044c <__aeabi_dcmpeq>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d09b      	beq.n	8009cfa <_dtoa_r+0x6ca>
 8009dc2:	e7cf      	b.n	8009d64 <_dtoa_r+0x734>
 8009dc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	d100      	bne.n	8009dcc <_dtoa_r+0x79c>
 8009dca:	e082      	b.n	8009ed2 <_dtoa_r+0x8a2>
 8009dcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009dce:	2a01      	cmp	r2, #1
 8009dd0:	dc66      	bgt.n	8009ea0 <_dtoa_r+0x870>
 8009dd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	d05f      	beq.n	8009e98 <_dtoa_r+0x868>
 8009dd8:	4aa3      	ldr	r2, [pc, #652]	; (800a068 <_dtoa_r+0xa38>)
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009dde:	9c08      	ldr	r4, [sp, #32]
 8009de0:	9a08      	ldr	r2, [sp, #32]
 8009de2:	2101      	movs	r1, #1
 8009de4:	18d2      	adds	r2, r2, r3
 8009de6:	9208      	str	r2, [sp, #32]
 8009de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dea:	0038      	movs	r0, r7
 8009dec:	18d3      	adds	r3, r2, r3
 8009dee:	930d      	str	r3, [sp, #52]	; 0x34
 8009df0:	f000 fd88 	bl	800a904 <__i2b>
 8009df4:	0005      	movs	r5, r0
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	dd0e      	ble.n	8009e18 <_dtoa_r+0x7e8>
 8009dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dd0b      	ble.n	8009e18 <_dtoa_r+0x7e8>
 8009e00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e02:	0023      	movs	r3, r4
 8009e04:	4294      	cmp	r4, r2
 8009e06:	dd00      	ble.n	8009e0a <_dtoa_r+0x7da>
 8009e08:	0013      	movs	r3, r2
 8009e0a:	9a08      	ldr	r2, [sp, #32]
 8009e0c:	1ae4      	subs	r4, r4, r3
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	9208      	str	r2, [sp, #32]
 8009e12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	930d      	str	r3, [sp, #52]	; 0x34
 8009e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01f      	beq.n	8009e5e <_dtoa_r+0x82e>
 8009e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d05a      	beq.n	8009eda <_dtoa_r+0x8aa>
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	dd11      	ble.n	8009e4c <_dtoa_r+0x81c>
 8009e28:	0029      	movs	r1, r5
 8009e2a:	0032      	movs	r2, r6
 8009e2c:	0038      	movs	r0, r7
 8009e2e:	f000 fe2f 	bl	800aa90 <__pow5mult>
 8009e32:	9a04      	ldr	r2, [sp, #16]
 8009e34:	0001      	movs	r1, r0
 8009e36:	0005      	movs	r5, r0
 8009e38:	0038      	movs	r0, r7
 8009e3a:	f000 fd79 	bl	800a930 <__multiply>
 8009e3e:	9904      	ldr	r1, [sp, #16]
 8009e40:	9007      	str	r0, [sp, #28]
 8009e42:	0038      	movs	r0, r7
 8009e44:	f000 fcae 	bl	800a7a4 <_Bfree>
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e4e:	1b9a      	subs	r2, r3, r6
 8009e50:	42b3      	cmp	r3, r6
 8009e52:	d004      	beq.n	8009e5e <_dtoa_r+0x82e>
 8009e54:	0038      	movs	r0, r7
 8009e56:	9904      	ldr	r1, [sp, #16]
 8009e58:	f000 fe1a 	bl	800aa90 <__pow5mult>
 8009e5c:	9004      	str	r0, [sp, #16]
 8009e5e:	2101      	movs	r1, #1
 8009e60:	0038      	movs	r0, r7
 8009e62:	f000 fd4f 	bl	800a904 <__i2b>
 8009e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e68:	0006      	movs	r6, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dd37      	ble.n	8009ede <_dtoa_r+0x8ae>
 8009e6e:	001a      	movs	r2, r3
 8009e70:	0001      	movs	r1, r0
 8009e72:	0038      	movs	r0, r7
 8009e74:	f000 fe0c 	bl	800aa90 <__pow5mult>
 8009e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e7a:	0006      	movs	r6, r0
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	dd33      	ble.n	8009ee8 <_dtoa_r+0x8b8>
 8009e80:	2300      	movs	r3, #0
 8009e82:	9307      	str	r3, [sp, #28]
 8009e84:	6933      	ldr	r3, [r6, #16]
 8009e86:	3303      	adds	r3, #3
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	18f3      	adds	r3, r6, r3
 8009e8c:	6858      	ldr	r0, [r3, #4]
 8009e8e:	f000 fcf1 	bl	800a874 <__hi0bits>
 8009e92:	2320      	movs	r3, #32
 8009e94:	1a18      	subs	r0, r3, r0
 8009e96:	e03f      	b.n	8009f18 <_dtoa_r+0x8e8>
 8009e98:	2336      	movs	r3, #54	; 0x36
 8009e9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	e79d      	b.n	8009ddc <_dtoa_r+0x7ac>
 8009ea0:	9b06      	ldr	r3, [sp, #24]
 8009ea2:	1e5e      	subs	r6, r3, #1
 8009ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ea6:	42b3      	cmp	r3, r6
 8009ea8:	db08      	blt.n	8009ebc <_dtoa_r+0x88c>
 8009eaa:	1b9e      	subs	r6, r3, r6
 8009eac:	9b06      	ldr	r3, [sp, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da0c      	bge.n	8009ecc <_dtoa_r+0x89c>
 8009eb2:	9b08      	ldr	r3, [sp, #32]
 8009eb4:	9a06      	ldr	r2, [sp, #24]
 8009eb6:	1a9c      	subs	r4, r3, r2
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e791      	b.n	8009de0 <_dtoa_r+0x7b0>
 8009ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ebe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ec0:	1af3      	subs	r3, r6, r3
 8009ec2:	18d3      	adds	r3, r2, r3
 8009ec4:	960e      	str	r6, [sp, #56]	; 0x38
 8009ec6:	9314      	str	r3, [sp, #80]	; 0x50
 8009ec8:	2600      	movs	r6, #0
 8009eca:	e7ef      	b.n	8009eac <_dtoa_r+0x87c>
 8009ecc:	9c08      	ldr	r4, [sp, #32]
 8009ece:	9b06      	ldr	r3, [sp, #24]
 8009ed0:	e786      	b.n	8009de0 <_dtoa_r+0x7b0>
 8009ed2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009ed4:	9c08      	ldr	r4, [sp, #32]
 8009ed6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ed8:	e78d      	b.n	8009df6 <_dtoa_r+0x7c6>
 8009eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009edc:	e7ba      	b.n	8009e54 <_dtoa_r+0x824>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	9307      	str	r3, [sp, #28]
 8009ee2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	dc13      	bgt.n	8009f10 <_dtoa_r+0x8e0>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	9307      	str	r3, [sp, #28]
 8009eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10e      	bne.n	8009f10 <_dtoa_r+0x8e0>
 8009ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef4:	031b      	lsls	r3, r3, #12
 8009ef6:	d10b      	bne.n	8009f10 <_dtoa_r+0x8e0>
 8009ef8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009efa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009efc:	4213      	tst	r3, r2
 8009efe:	d007      	beq.n	8009f10 <_dtoa_r+0x8e0>
 8009f00:	9b08      	ldr	r3, [sp, #32]
 8009f02:	3301      	adds	r3, #1
 8009f04:	9308      	str	r3, [sp, #32]
 8009f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f08:	3301      	adds	r3, #1
 8009f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f12:	2001      	movs	r0, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1b5      	bne.n	8009e84 <_dtoa_r+0x854>
 8009f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1a:	221f      	movs	r2, #31
 8009f1c:	1818      	adds	r0, r3, r0
 8009f1e:	0003      	movs	r3, r0
 8009f20:	4013      	ands	r3, r2
 8009f22:	4210      	tst	r0, r2
 8009f24:	d046      	beq.n	8009fb4 <_dtoa_r+0x984>
 8009f26:	3201      	adds	r2, #1
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	2a04      	cmp	r2, #4
 8009f2c:	dd3f      	ble.n	8009fae <_dtoa_r+0x97e>
 8009f2e:	221c      	movs	r2, #28
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	9a08      	ldr	r2, [sp, #32]
 8009f34:	18e4      	adds	r4, r4, r3
 8009f36:	18d2      	adds	r2, r2, r3
 8009f38:	9208      	str	r2, [sp, #32]
 8009f3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f3c:	18d3      	adds	r3, r2, r3
 8009f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f40:	9b08      	ldr	r3, [sp, #32]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	dd05      	ble.n	8009f52 <_dtoa_r+0x922>
 8009f46:	001a      	movs	r2, r3
 8009f48:	0038      	movs	r0, r7
 8009f4a:	9904      	ldr	r1, [sp, #16]
 8009f4c:	f000 fdfc 	bl	800ab48 <__lshift>
 8009f50:	9004      	str	r0, [sp, #16]
 8009f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dd05      	ble.n	8009f64 <_dtoa_r+0x934>
 8009f58:	0031      	movs	r1, r6
 8009f5a:	001a      	movs	r2, r3
 8009f5c:	0038      	movs	r0, r7
 8009f5e:	f000 fdf3 	bl	800ab48 <__lshift>
 8009f62:	0006      	movs	r6, r0
 8009f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d026      	beq.n	8009fb8 <_dtoa_r+0x988>
 8009f6a:	0031      	movs	r1, r6
 8009f6c:	9804      	ldr	r0, [sp, #16]
 8009f6e:	f000 fe5b 	bl	800ac28 <__mcmp>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	da20      	bge.n	8009fb8 <_dtoa_r+0x988>
 8009f76:	9b02      	ldr	r3, [sp, #8]
 8009f78:	220a      	movs	r2, #10
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	9302      	str	r3, [sp, #8]
 8009f7e:	0038      	movs	r0, r7
 8009f80:	2300      	movs	r3, #0
 8009f82:	9904      	ldr	r1, [sp, #16]
 8009f84:	f000 fc32 	bl	800a7ec <__multadd>
 8009f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f8a:	9004      	str	r0, [sp, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d100      	bne.n	8009f92 <_dtoa_r+0x962>
 8009f90:	e160      	b.n	800a254 <_dtoa_r+0xc24>
 8009f92:	2300      	movs	r3, #0
 8009f94:	0029      	movs	r1, r5
 8009f96:	220a      	movs	r2, #10
 8009f98:	0038      	movs	r0, r7
 8009f9a:	f000 fc27 	bl	800a7ec <__multadd>
 8009f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa0:	0005      	movs	r5, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc47      	bgt.n	800a036 <_dtoa_r+0xa06>
 8009fa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	dc0d      	bgt.n	8009fc8 <_dtoa_r+0x998>
 8009fac:	e043      	b.n	800a036 <_dtoa_r+0xa06>
 8009fae:	2a04      	cmp	r2, #4
 8009fb0:	d0c6      	beq.n	8009f40 <_dtoa_r+0x910>
 8009fb2:	0013      	movs	r3, r2
 8009fb4:	331c      	adds	r3, #28
 8009fb6:	e7bc      	b.n	8009f32 <_dtoa_r+0x902>
 8009fb8:	9b06      	ldr	r3, [sp, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	dc35      	bgt.n	800a02a <_dtoa_r+0x9fa>
 8009fbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	dd32      	ble.n	800a02a <_dtoa_r+0x9fa>
 8009fc4:	9b06      	ldr	r3, [sp, #24]
 8009fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10c      	bne.n	8009fe8 <_dtoa_r+0x9b8>
 8009fce:	0031      	movs	r1, r6
 8009fd0:	2205      	movs	r2, #5
 8009fd2:	0038      	movs	r0, r7
 8009fd4:	f000 fc0a 	bl	800a7ec <__multadd>
 8009fd8:	0006      	movs	r6, r0
 8009fda:	0001      	movs	r1, r0
 8009fdc:	9804      	ldr	r0, [sp, #16]
 8009fde:	f000 fe23 	bl	800ac28 <__mcmp>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	dd00      	ble.n	8009fe8 <_dtoa_r+0x9b8>
 8009fe6:	e59f      	b.n	8009b28 <_dtoa_r+0x4f8>
 8009fe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009fea:	43db      	mvns	r3, r3
 8009fec:	9302      	str	r3, [sp, #8]
 8009fee:	9b05      	ldr	r3, [sp, #20]
 8009ff0:	9307      	str	r3, [sp, #28]
 8009ff2:	2400      	movs	r4, #0
 8009ff4:	0031      	movs	r1, r6
 8009ff6:	0038      	movs	r0, r7
 8009ff8:	f000 fbd4 	bl	800a7a4 <_Bfree>
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	d100      	bne.n	800a002 <_dtoa_r+0x9d2>
 800a000:	e6b0      	b.n	8009d64 <_dtoa_r+0x734>
 800a002:	2c00      	cmp	r4, #0
 800a004:	d005      	beq.n	800a012 <_dtoa_r+0x9e2>
 800a006:	42ac      	cmp	r4, r5
 800a008:	d003      	beq.n	800a012 <_dtoa_r+0x9e2>
 800a00a:	0021      	movs	r1, r4
 800a00c:	0038      	movs	r0, r7
 800a00e:	f000 fbc9 	bl	800a7a4 <_Bfree>
 800a012:	0029      	movs	r1, r5
 800a014:	0038      	movs	r0, r7
 800a016:	f000 fbc5 	bl	800a7a4 <_Bfree>
 800a01a:	e6a3      	b.n	8009d64 <_dtoa_r+0x734>
 800a01c:	2600      	movs	r6, #0
 800a01e:	0035      	movs	r5, r6
 800a020:	e7e2      	b.n	8009fe8 <_dtoa_r+0x9b8>
 800a022:	9602      	str	r6, [sp, #8]
 800a024:	9e07      	ldr	r6, [sp, #28]
 800a026:	0035      	movs	r5, r6
 800a028:	e57e      	b.n	8009b28 <_dtoa_r+0x4f8>
 800a02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d100      	bne.n	800a032 <_dtoa_r+0xa02>
 800a030:	e0c8      	b.n	800a1c4 <_dtoa_r+0xb94>
 800a032:	9b06      	ldr	r3, [sp, #24]
 800a034:	930c      	str	r3, [sp, #48]	; 0x30
 800a036:	2c00      	cmp	r4, #0
 800a038:	dd05      	ble.n	800a046 <_dtoa_r+0xa16>
 800a03a:	0029      	movs	r1, r5
 800a03c:	0022      	movs	r2, r4
 800a03e:	0038      	movs	r0, r7
 800a040:	f000 fd82 	bl	800ab48 <__lshift>
 800a044:	0005      	movs	r5, r0
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	0028      	movs	r0, r5
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d01f      	beq.n	800a08e <_dtoa_r+0xa5e>
 800a04e:	0038      	movs	r0, r7
 800a050:	6869      	ldr	r1, [r5, #4]
 800a052:	f000 fb63 	bl	800a71c <_Balloc>
 800a056:	1e04      	subs	r4, r0, #0
 800a058:	d10c      	bne.n	800a074 <_dtoa_r+0xa44>
 800a05a:	0002      	movs	r2, r0
 800a05c:	4b03      	ldr	r3, [pc, #12]	; (800a06c <_dtoa_r+0xa3c>)
 800a05e:	4904      	ldr	r1, [pc, #16]	; (800a070 <_dtoa_r+0xa40>)
 800a060:	f7ff fafb 	bl	800965a <_dtoa_r+0x2a>
 800a064:	40240000 	.word	0x40240000
 800a068:	00000433 	.word	0x00000433
 800a06c:	0800ba2b 	.word	0x0800ba2b
 800a070:	000002ea 	.word	0x000002ea
 800a074:	0029      	movs	r1, r5
 800a076:	692b      	ldr	r3, [r5, #16]
 800a078:	310c      	adds	r1, #12
 800a07a:	1c9a      	adds	r2, r3, #2
 800a07c:	0092      	lsls	r2, r2, #2
 800a07e:	300c      	adds	r0, #12
 800a080:	f7fe fcd2 	bl	8008a28 <memcpy>
 800a084:	2201      	movs	r2, #1
 800a086:	0021      	movs	r1, r4
 800a088:	0038      	movs	r0, r7
 800a08a:	f000 fd5d 	bl	800ab48 <__lshift>
 800a08e:	002c      	movs	r4, r5
 800a090:	0005      	movs	r5, r0
 800a092:	9b05      	ldr	r3, [sp, #20]
 800a094:	9308      	str	r3, [sp, #32]
 800a096:	0031      	movs	r1, r6
 800a098:	9804      	ldr	r0, [sp, #16]
 800a09a:	f7ff fa3d 	bl	8009518 <quorem>
 800a09e:	0003      	movs	r3, r0
 800a0a0:	0021      	movs	r1, r4
 800a0a2:	3330      	adds	r3, #48	; 0x30
 800a0a4:	900e      	str	r0, [sp, #56]	; 0x38
 800a0a6:	9804      	ldr	r0, [sp, #16]
 800a0a8:	9306      	str	r3, [sp, #24]
 800a0aa:	f000 fdbd 	bl	800ac28 <__mcmp>
 800a0ae:	002a      	movs	r2, r5
 800a0b0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a0b2:	0031      	movs	r1, r6
 800a0b4:	0038      	movs	r0, r7
 800a0b6:	f000 fdd3 	bl	800ac60 <__mdiff>
 800a0ba:	68c3      	ldr	r3, [r0, #12]
 800a0bc:	9007      	str	r0, [sp, #28]
 800a0be:	9310      	str	r3, [sp, #64]	; 0x40
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <_dtoa_r+0xaa4>
 800a0ca:	0001      	movs	r1, r0
 800a0cc:	9804      	ldr	r0, [sp, #16]
 800a0ce:	f000 fdab 	bl	800ac28 <__mcmp>
 800a0d2:	900d      	str	r0, [sp, #52]	; 0x34
 800a0d4:	0038      	movs	r0, r7
 800a0d6:	9907      	ldr	r1, [sp, #28]
 800a0d8:	f000 fb64 	bl	800a7a4 <_Bfree>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0e2:	4018      	ands	r0, r3
 800a0e4:	9b08      	ldr	r3, [sp, #32]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	9307      	str	r3, [sp, #28]
 800a0ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	4303      	orrs	r3, r0
 800a0f0:	d10c      	bne.n	800a10c <_dtoa_r+0xadc>
 800a0f2:	9b06      	ldr	r3, [sp, #24]
 800a0f4:	2b39      	cmp	r3, #57	; 0x39
 800a0f6:	d025      	beq.n	800a144 <_dtoa_r+0xb14>
 800a0f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	dd02      	ble.n	800a104 <_dtoa_r+0xad4>
 800a0fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a100:	3331      	adds	r3, #49	; 0x31
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	9a06      	ldr	r2, [sp, #24]
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e773      	b.n	8009ff4 <_dtoa_r+0x9c4>
 800a10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	db03      	blt.n	800a11a <_dtoa_r+0xaea>
 800a112:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a114:	4313      	orrs	r3, r2
 800a116:	4303      	orrs	r3, r0
 800a118:	d11f      	bne.n	800a15a <_dtoa_r+0xb2a>
 800a11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	ddf1      	ble.n	800a104 <_dtoa_r+0xad4>
 800a120:	9904      	ldr	r1, [sp, #16]
 800a122:	2201      	movs	r2, #1
 800a124:	0038      	movs	r0, r7
 800a126:	f000 fd0f 	bl	800ab48 <__lshift>
 800a12a:	0031      	movs	r1, r6
 800a12c:	9004      	str	r0, [sp, #16]
 800a12e:	f000 fd7b 	bl	800ac28 <__mcmp>
 800a132:	2800      	cmp	r0, #0
 800a134:	dc03      	bgt.n	800a13e <_dtoa_r+0xb0e>
 800a136:	d1e5      	bne.n	800a104 <_dtoa_r+0xad4>
 800a138:	9b06      	ldr	r3, [sp, #24]
 800a13a:	07db      	lsls	r3, r3, #31
 800a13c:	d5e2      	bpl.n	800a104 <_dtoa_r+0xad4>
 800a13e:	9b06      	ldr	r3, [sp, #24]
 800a140:	2b39      	cmp	r3, #57	; 0x39
 800a142:	d1dc      	bne.n	800a0fe <_dtoa_r+0xace>
 800a144:	2339      	movs	r3, #57	; 0x39
 800a146:	9a08      	ldr	r2, [sp, #32]
 800a148:	7013      	strb	r3, [r2, #0]
 800a14a:	9b07      	ldr	r3, [sp, #28]
 800a14c:	9307      	str	r3, [sp, #28]
 800a14e:	3b01      	subs	r3, #1
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	2a39      	cmp	r2, #57	; 0x39
 800a154:	d06c      	beq.n	800a230 <_dtoa_r+0xc00>
 800a156:	3201      	adds	r2, #1
 800a158:	e7d6      	b.n	800a108 <_dtoa_r+0xad8>
 800a15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd07      	ble.n	800a170 <_dtoa_r+0xb40>
 800a160:	9b06      	ldr	r3, [sp, #24]
 800a162:	2b39      	cmp	r3, #57	; 0x39
 800a164:	d0ee      	beq.n	800a144 <_dtoa_r+0xb14>
 800a166:	9b06      	ldr	r3, [sp, #24]
 800a168:	9a08      	ldr	r2, [sp, #32]
 800a16a:	3301      	adds	r3, #1
 800a16c:	7013      	strb	r3, [r2, #0]
 800a16e:	e741      	b.n	8009ff4 <_dtoa_r+0x9c4>
 800a170:	9b08      	ldr	r3, [sp, #32]
 800a172:	9a06      	ldr	r2, [sp, #24]
 800a174:	701a      	strb	r2, [r3, #0]
 800a176:	2301      	movs	r3, #1
 800a178:	9a05      	ldr	r2, [sp, #20]
 800a17a:	1a9b      	subs	r3, r3, r2
 800a17c:	9a08      	ldr	r2, [sp, #32]
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a182:	429a      	cmp	r2, r3
 800a184:	d03e      	beq.n	800a204 <_dtoa_r+0xbd4>
 800a186:	2300      	movs	r3, #0
 800a188:	220a      	movs	r2, #10
 800a18a:	9904      	ldr	r1, [sp, #16]
 800a18c:	0038      	movs	r0, r7
 800a18e:	f000 fb2d 	bl	800a7ec <__multadd>
 800a192:	2300      	movs	r3, #0
 800a194:	9004      	str	r0, [sp, #16]
 800a196:	220a      	movs	r2, #10
 800a198:	0021      	movs	r1, r4
 800a19a:	0038      	movs	r0, r7
 800a19c:	42ac      	cmp	r4, r5
 800a19e:	d106      	bne.n	800a1ae <_dtoa_r+0xb7e>
 800a1a0:	f000 fb24 	bl	800a7ec <__multadd>
 800a1a4:	0004      	movs	r4, r0
 800a1a6:	0005      	movs	r5, r0
 800a1a8:	9b07      	ldr	r3, [sp, #28]
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	e773      	b.n	800a096 <_dtoa_r+0xa66>
 800a1ae:	f000 fb1d 	bl	800a7ec <__multadd>
 800a1b2:	0029      	movs	r1, r5
 800a1b4:	0004      	movs	r4, r0
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	0038      	movs	r0, r7
 800a1bc:	f000 fb16 	bl	800a7ec <__multadd>
 800a1c0:	0005      	movs	r5, r0
 800a1c2:	e7f1      	b.n	800a1a8 <_dtoa_r+0xb78>
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1c8:	2400      	movs	r4, #0
 800a1ca:	0031      	movs	r1, r6
 800a1cc:	9804      	ldr	r0, [sp, #16]
 800a1ce:	f7ff f9a3 	bl	8009518 <quorem>
 800a1d2:	9b05      	ldr	r3, [sp, #20]
 800a1d4:	3030      	adds	r0, #48	; 0x30
 800a1d6:	5518      	strb	r0, [r3, r4]
 800a1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1da:	3401      	adds	r4, #1
 800a1dc:	9006      	str	r0, [sp, #24]
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	dd07      	ble.n	800a1f2 <_dtoa_r+0xbc2>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	220a      	movs	r2, #10
 800a1e6:	0038      	movs	r0, r7
 800a1e8:	9904      	ldr	r1, [sp, #16]
 800a1ea:	f000 faff 	bl	800a7ec <__multadd>
 800a1ee:	9004      	str	r0, [sp, #16]
 800a1f0:	e7eb      	b.n	800a1ca <_dtoa_r+0xb9a>
 800a1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	dd00      	ble.n	800a1fc <_dtoa_r+0xbcc>
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	2400      	movs	r4, #0
 800a1fe:	9b05      	ldr	r3, [sp, #20]
 800a200:	181b      	adds	r3, r3, r0
 800a202:	9307      	str	r3, [sp, #28]
 800a204:	9904      	ldr	r1, [sp, #16]
 800a206:	2201      	movs	r2, #1
 800a208:	0038      	movs	r0, r7
 800a20a:	f000 fc9d 	bl	800ab48 <__lshift>
 800a20e:	0031      	movs	r1, r6
 800a210:	9004      	str	r0, [sp, #16]
 800a212:	f000 fd09 	bl	800ac28 <__mcmp>
 800a216:	2800      	cmp	r0, #0
 800a218:	dc97      	bgt.n	800a14a <_dtoa_r+0xb1a>
 800a21a:	d102      	bne.n	800a222 <_dtoa_r+0xbf2>
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	07db      	lsls	r3, r3, #31
 800a220:	d493      	bmi.n	800a14a <_dtoa_r+0xb1a>
 800a222:	9b07      	ldr	r3, [sp, #28]
 800a224:	9307      	str	r3, [sp, #28]
 800a226:	3b01      	subs	r3, #1
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	2a30      	cmp	r2, #48	; 0x30
 800a22c:	d0fa      	beq.n	800a224 <_dtoa_r+0xbf4>
 800a22e:	e6e1      	b.n	8009ff4 <_dtoa_r+0x9c4>
 800a230:	9a05      	ldr	r2, [sp, #20]
 800a232:	429a      	cmp	r2, r3
 800a234:	d18a      	bne.n	800a14c <_dtoa_r+0xb1c>
 800a236:	9b02      	ldr	r3, [sp, #8]
 800a238:	3301      	adds	r3, #1
 800a23a:	9302      	str	r3, [sp, #8]
 800a23c:	2331      	movs	r3, #49	; 0x31
 800a23e:	e795      	b.n	800a16c <_dtoa_r+0xb3c>
 800a240:	4b08      	ldr	r3, [pc, #32]	; (800a264 <_dtoa_r+0xc34>)
 800a242:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	4b08      	ldr	r3, [pc, #32]	; (800a268 <_dtoa_r+0xc38>)
 800a248:	2a00      	cmp	r2, #0
 800a24a:	d001      	beq.n	800a250 <_dtoa_r+0xc20>
 800a24c:	f7ff fa3b 	bl	80096c6 <_dtoa_r+0x96>
 800a250:	f7ff fa3b 	bl	80096ca <_dtoa_r+0x9a>
 800a254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a256:	2b00      	cmp	r3, #0
 800a258:	dcb6      	bgt.n	800a1c8 <_dtoa_r+0xb98>
 800a25a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	dd00      	ble.n	800a262 <_dtoa_r+0xc32>
 800a260:	e6b2      	b.n	8009fc8 <_dtoa_r+0x998>
 800a262:	e7b1      	b.n	800a1c8 <_dtoa_r+0xb98>
 800a264:	0800b9a8 	.word	0x0800b9a8
 800a268:	0800b9b0 	.word	0x0800b9b0

0800a26c <__sflush_r>:
 800a26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26e:	898b      	ldrh	r3, [r1, #12]
 800a270:	0005      	movs	r5, r0
 800a272:	000c      	movs	r4, r1
 800a274:	071a      	lsls	r2, r3, #28
 800a276:	d45f      	bmi.n	800a338 <__sflush_r+0xcc>
 800a278:	684a      	ldr	r2, [r1, #4]
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	dc04      	bgt.n	800a288 <__sflush_r+0x1c>
 800a27e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a280:	2a00      	cmp	r2, #0
 800a282:	dc01      	bgt.n	800a288 <__sflush_r+0x1c>
 800a284:	2000      	movs	r0, #0
 800a286:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a288:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a28a:	2f00      	cmp	r7, #0
 800a28c:	d0fa      	beq.n	800a284 <__sflush_r+0x18>
 800a28e:	2200      	movs	r2, #0
 800a290:	2180      	movs	r1, #128	; 0x80
 800a292:	682e      	ldr	r6, [r5, #0]
 800a294:	602a      	str	r2, [r5, #0]
 800a296:	001a      	movs	r2, r3
 800a298:	0149      	lsls	r1, r1, #5
 800a29a:	400a      	ands	r2, r1
 800a29c:	420b      	tst	r3, r1
 800a29e:	d034      	beq.n	800a30a <__sflush_r+0x9e>
 800a2a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	075b      	lsls	r3, r3, #29
 800a2a6:	d506      	bpl.n	800a2b6 <__sflush_r+0x4a>
 800a2a8:	6863      	ldr	r3, [r4, #4]
 800a2aa:	1ac0      	subs	r0, r0, r3
 800a2ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <__sflush_r+0x4a>
 800a2b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2b4:	1ac0      	subs	r0, r0, r3
 800a2b6:	0002      	movs	r2, r0
 800a2b8:	6a21      	ldr	r1, [r4, #32]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	0028      	movs	r0, r5
 800a2be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a2c0:	47b8      	blx	r7
 800a2c2:	89a1      	ldrh	r1, [r4, #12]
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d106      	bne.n	800a2d6 <__sflush_r+0x6a>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	2b1d      	cmp	r3, #29
 800a2cc:	d831      	bhi.n	800a332 <__sflush_r+0xc6>
 800a2ce:	4a2c      	ldr	r2, [pc, #176]	; (800a380 <__sflush_r+0x114>)
 800a2d0:	40da      	lsrs	r2, r3
 800a2d2:	07d3      	lsls	r3, r2, #31
 800a2d4:	d52d      	bpl.n	800a332 <__sflush_r+0xc6>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	6063      	str	r3, [r4, #4]
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	04cb      	lsls	r3, r1, #19
 800a2e0:	d505      	bpl.n	800a2ee <__sflush_r+0x82>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d102      	bne.n	800a2ec <__sflush_r+0x80>
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d100      	bne.n	800a2ee <__sflush_r+0x82>
 800a2ec:	6560      	str	r0, [r4, #84]	; 0x54
 800a2ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f0:	602e      	str	r6, [r5, #0]
 800a2f2:	2900      	cmp	r1, #0
 800a2f4:	d0c6      	beq.n	800a284 <__sflush_r+0x18>
 800a2f6:	0023      	movs	r3, r4
 800a2f8:	3344      	adds	r3, #68	; 0x44
 800a2fa:	4299      	cmp	r1, r3
 800a2fc:	d002      	beq.n	800a304 <__sflush_r+0x98>
 800a2fe:	0028      	movs	r0, r5
 800a300:	f000 fdb8 	bl	800ae74 <_free_r>
 800a304:	2000      	movs	r0, #0
 800a306:	6360      	str	r0, [r4, #52]	; 0x34
 800a308:	e7bd      	b.n	800a286 <__sflush_r+0x1a>
 800a30a:	2301      	movs	r3, #1
 800a30c:	0028      	movs	r0, r5
 800a30e:	6a21      	ldr	r1, [r4, #32]
 800a310:	47b8      	blx	r7
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	d1c5      	bne.n	800a2a2 <__sflush_r+0x36>
 800a316:	682b      	ldr	r3, [r5, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0c2      	beq.n	800a2a2 <__sflush_r+0x36>
 800a31c:	2b1d      	cmp	r3, #29
 800a31e:	d001      	beq.n	800a324 <__sflush_r+0xb8>
 800a320:	2b16      	cmp	r3, #22
 800a322:	d101      	bne.n	800a328 <__sflush_r+0xbc>
 800a324:	602e      	str	r6, [r5, #0]
 800a326:	e7ad      	b.n	800a284 <__sflush_r+0x18>
 800a328:	2340      	movs	r3, #64	; 0x40
 800a32a:	89a2      	ldrh	r2, [r4, #12]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	e7a9      	b.n	800a286 <__sflush_r+0x1a>
 800a332:	2340      	movs	r3, #64	; 0x40
 800a334:	430b      	orrs	r3, r1
 800a336:	e7fa      	b.n	800a32e <__sflush_r+0xc2>
 800a338:	690f      	ldr	r7, [r1, #16]
 800a33a:	2f00      	cmp	r7, #0
 800a33c:	d0a2      	beq.n	800a284 <__sflush_r+0x18>
 800a33e:	680a      	ldr	r2, [r1, #0]
 800a340:	600f      	str	r7, [r1, #0]
 800a342:	1bd2      	subs	r2, r2, r7
 800a344:	9201      	str	r2, [sp, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	079b      	lsls	r3, r3, #30
 800a34a:	d100      	bne.n	800a34e <__sflush_r+0xe2>
 800a34c:	694a      	ldr	r2, [r1, #20]
 800a34e:	60a2      	str	r2, [r4, #8]
 800a350:	9b01      	ldr	r3, [sp, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	dc00      	bgt.n	800a358 <__sflush_r+0xec>
 800a356:	e795      	b.n	800a284 <__sflush_r+0x18>
 800a358:	003a      	movs	r2, r7
 800a35a:	0028      	movs	r0, r5
 800a35c:	9b01      	ldr	r3, [sp, #4]
 800a35e:	6a21      	ldr	r1, [r4, #32]
 800a360:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a362:	47b0      	blx	r6
 800a364:	2800      	cmp	r0, #0
 800a366:	dc06      	bgt.n	800a376 <__sflush_r+0x10a>
 800a368:	2340      	movs	r3, #64	; 0x40
 800a36a:	2001      	movs	r0, #1
 800a36c:	89a2      	ldrh	r2, [r4, #12]
 800a36e:	4240      	negs	r0, r0
 800a370:	4313      	orrs	r3, r2
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	e787      	b.n	800a286 <__sflush_r+0x1a>
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	183f      	adds	r7, r7, r0
 800a37a:	1a1b      	subs	r3, r3, r0
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	e7e7      	b.n	800a350 <__sflush_r+0xe4>
 800a380:	20400001 	.word	0x20400001

0800a384 <_fflush_r>:
 800a384:	690b      	ldr	r3, [r1, #16]
 800a386:	b570      	push	{r4, r5, r6, lr}
 800a388:	0005      	movs	r5, r0
 800a38a:	000c      	movs	r4, r1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d102      	bne.n	800a396 <_fflush_r+0x12>
 800a390:	2500      	movs	r5, #0
 800a392:	0028      	movs	r0, r5
 800a394:	bd70      	pop	{r4, r5, r6, pc}
 800a396:	2800      	cmp	r0, #0
 800a398:	d004      	beq.n	800a3a4 <_fflush_r+0x20>
 800a39a:	6983      	ldr	r3, [r0, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <_fflush_r+0x20>
 800a3a0:	f000 f892 	bl	800a4c8 <__sinit>
 800a3a4:	4b14      	ldr	r3, [pc, #80]	; (800a3f8 <_fflush_r+0x74>)
 800a3a6:	429c      	cmp	r4, r3
 800a3a8:	d11b      	bne.n	800a3e2 <_fflush_r+0x5e>
 800a3aa:	686c      	ldr	r4, [r5, #4]
 800a3ac:	220c      	movs	r2, #12
 800a3ae:	5ea3      	ldrsh	r3, [r4, r2]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0ed      	beq.n	800a390 <_fflush_r+0xc>
 800a3b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3b6:	07d2      	lsls	r2, r2, #31
 800a3b8:	d404      	bmi.n	800a3c4 <_fflush_r+0x40>
 800a3ba:	059b      	lsls	r3, r3, #22
 800a3bc:	d402      	bmi.n	800a3c4 <_fflush_r+0x40>
 800a3be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3c0:	f000 f927 	bl	800a612 <__retarget_lock_acquire_recursive>
 800a3c4:	0028      	movs	r0, r5
 800a3c6:	0021      	movs	r1, r4
 800a3c8:	f7ff ff50 	bl	800a26c <__sflush_r>
 800a3cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ce:	0005      	movs	r5, r0
 800a3d0:	07db      	lsls	r3, r3, #31
 800a3d2:	d4de      	bmi.n	800a392 <_fflush_r+0xe>
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	059b      	lsls	r3, r3, #22
 800a3d8:	d4db      	bmi.n	800a392 <_fflush_r+0xe>
 800a3da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3dc:	f000 f91a 	bl	800a614 <__retarget_lock_release_recursive>
 800a3e0:	e7d7      	b.n	800a392 <_fflush_r+0xe>
 800a3e2:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <_fflush_r+0x78>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	d101      	bne.n	800a3ec <_fflush_r+0x68>
 800a3e8:	68ac      	ldr	r4, [r5, #8]
 800a3ea:	e7df      	b.n	800a3ac <_fflush_r+0x28>
 800a3ec:	4b04      	ldr	r3, [pc, #16]	; (800a400 <_fflush_r+0x7c>)
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d1dc      	bne.n	800a3ac <_fflush_r+0x28>
 800a3f2:	68ec      	ldr	r4, [r5, #12]
 800a3f4:	e7da      	b.n	800a3ac <_fflush_r+0x28>
 800a3f6:	46c0      	nop			; (mov r8, r8)
 800a3f8:	0800ba5c 	.word	0x0800ba5c
 800a3fc:	0800ba7c 	.word	0x0800ba7c
 800a400:	0800ba3c 	.word	0x0800ba3c

0800a404 <std>:
 800a404:	2300      	movs	r3, #0
 800a406:	b510      	push	{r4, lr}
 800a408:	0004      	movs	r4, r0
 800a40a:	6003      	str	r3, [r0, #0]
 800a40c:	6043      	str	r3, [r0, #4]
 800a40e:	6083      	str	r3, [r0, #8]
 800a410:	8181      	strh	r1, [r0, #12]
 800a412:	6643      	str	r3, [r0, #100]	; 0x64
 800a414:	0019      	movs	r1, r3
 800a416:	81c2      	strh	r2, [r0, #14]
 800a418:	6103      	str	r3, [r0, #16]
 800a41a:	6143      	str	r3, [r0, #20]
 800a41c:	6183      	str	r3, [r0, #24]
 800a41e:	2208      	movs	r2, #8
 800a420:	305c      	adds	r0, #92	; 0x5c
 800a422:	f7fe fb0a 	bl	8008a3a <memset>
 800a426:	4b05      	ldr	r3, [pc, #20]	; (800a43c <std+0x38>)
 800a428:	6263      	str	r3, [r4, #36]	; 0x24
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <std+0x3c>)
 800a42c:	6224      	str	r4, [r4, #32]
 800a42e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a430:	4b04      	ldr	r3, [pc, #16]	; (800a444 <std+0x40>)
 800a432:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a434:	4b04      	ldr	r3, [pc, #16]	; (800a448 <std+0x44>)
 800a436:	6323      	str	r3, [r4, #48]	; 0x30
 800a438:	bd10      	pop	{r4, pc}
 800a43a:	46c0      	nop			; (mov r8, r8)
 800a43c:	0800b2ad 	.word	0x0800b2ad
 800a440:	0800b2d5 	.word	0x0800b2d5
 800a444:	0800b30d 	.word	0x0800b30d
 800a448:	0800b339 	.word	0x0800b339

0800a44c <_cleanup_r>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	4902      	ldr	r1, [pc, #8]	; (800a458 <_cleanup_r+0xc>)
 800a450:	f000 f8ba 	bl	800a5c8 <_fwalk_reent>
 800a454:	bd10      	pop	{r4, pc}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	0800a385 	.word	0x0800a385

0800a45c <__sfmoreglue>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	2568      	movs	r5, #104	; 0x68
 800a460:	1e4a      	subs	r2, r1, #1
 800a462:	4355      	muls	r5, r2
 800a464:	000e      	movs	r6, r1
 800a466:	0029      	movs	r1, r5
 800a468:	3174      	adds	r1, #116	; 0x74
 800a46a:	f000 fd4d 	bl	800af08 <_malloc_r>
 800a46e:	1e04      	subs	r4, r0, #0
 800a470:	d008      	beq.n	800a484 <__sfmoreglue+0x28>
 800a472:	2100      	movs	r1, #0
 800a474:	002a      	movs	r2, r5
 800a476:	6001      	str	r1, [r0, #0]
 800a478:	6046      	str	r6, [r0, #4]
 800a47a:	300c      	adds	r0, #12
 800a47c:	60a0      	str	r0, [r4, #8]
 800a47e:	3268      	adds	r2, #104	; 0x68
 800a480:	f7fe fadb 	bl	8008a3a <memset>
 800a484:	0020      	movs	r0, r4
 800a486:	bd70      	pop	{r4, r5, r6, pc}

0800a488 <__sfp_lock_acquire>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	4802      	ldr	r0, [pc, #8]	; (800a494 <__sfp_lock_acquire+0xc>)
 800a48c:	f000 f8c1 	bl	800a612 <__retarget_lock_acquire_recursive>
 800a490:	bd10      	pop	{r4, pc}
 800a492:	46c0      	nop			; (mov r8, r8)
 800a494:	20001d5c 	.word	0x20001d5c

0800a498 <__sfp_lock_release>:
 800a498:	b510      	push	{r4, lr}
 800a49a:	4802      	ldr	r0, [pc, #8]	; (800a4a4 <__sfp_lock_release+0xc>)
 800a49c:	f000 f8ba 	bl	800a614 <__retarget_lock_release_recursive>
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	20001d5c 	.word	0x20001d5c

0800a4a8 <__sinit_lock_acquire>:
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	4802      	ldr	r0, [pc, #8]	; (800a4b4 <__sinit_lock_acquire+0xc>)
 800a4ac:	f000 f8b1 	bl	800a612 <__retarget_lock_acquire_recursive>
 800a4b0:	bd10      	pop	{r4, pc}
 800a4b2:	46c0      	nop			; (mov r8, r8)
 800a4b4:	20001d57 	.word	0x20001d57

0800a4b8 <__sinit_lock_release>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	4802      	ldr	r0, [pc, #8]	; (800a4c4 <__sinit_lock_release+0xc>)
 800a4bc:	f000 f8aa 	bl	800a614 <__retarget_lock_release_recursive>
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	46c0      	nop			; (mov r8, r8)
 800a4c4:	20001d57 	.word	0x20001d57

0800a4c8 <__sinit>:
 800a4c8:	b513      	push	{r0, r1, r4, lr}
 800a4ca:	0004      	movs	r4, r0
 800a4cc:	f7ff ffec 	bl	800a4a8 <__sinit_lock_acquire>
 800a4d0:	69a3      	ldr	r3, [r4, #24]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <__sinit+0x14>
 800a4d6:	f7ff ffef 	bl	800a4b8 <__sinit_lock_release>
 800a4da:	bd13      	pop	{r0, r1, r4, pc}
 800a4dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800a4de:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a4e0:	6523      	str	r3, [r4, #80]	; 0x50
 800a4e2:	4b13      	ldr	r3, [pc, #76]	; (800a530 <__sinit+0x68>)
 800a4e4:	4a13      	ldr	r2, [pc, #76]	; (800a534 <__sinit+0x6c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4ea:	9301      	str	r3, [sp, #4]
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d101      	bne.n	800a4f4 <__sinit+0x2c>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	61a3      	str	r3, [r4, #24]
 800a4f4:	0020      	movs	r0, r4
 800a4f6:	f000 f81f 	bl	800a538 <__sfp>
 800a4fa:	6060      	str	r0, [r4, #4]
 800a4fc:	0020      	movs	r0, r4
 800a4fe:	f000 f81b 	bl	800a538 <__sfp>
 800a502:	60a0      	str	r0, [r4, #8]
 800a504:	0020      	movs	r0, r4
 800a506:	f000 f817 	bl	800a538 <__sfp>
 800a50a:	2200      	movs	r2, #0
 800a50c:	2104      	movs	r1, #4
 800a50e:	60e0      	str	r0, [r4, #12]
 800a510:	6860      	ldr	r0, [r4, #4]
 800a512:	f7ff ff77 	bl	800a404 <std>
 800a516:	2201      	movs	r2, #1
 800a518:	2109      	movs	r1, #9
 800a51a:	68a0      	ldr	r0, [r4, #8]
 800a51c:	f7ff ff72 	bl	800a404 <std>
 800a520:	2202      	movs	r2, #2
 800a522:	2112      	movs	r1, #18
 800a524:	68e0      	ldr	r0, [r4, #12]
 800a526:	f7ff ff6d 	bl	800a404 <std>
 800a52a:	2301      	movs	r3, #1
 800a52c:	61a3      	str	r3, [r4, #24]
 800a52e:	e7d2      	b.n	800a4d6 <__sinit+0xe>
 800a530:	0800b970 	.word	0x0800b970
 800a534:	0800a44d 	.word	0x0800a44d

0800a538 <__sfp>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	0007      	movs	r7, r0
 800a53c:	f7ff ffa4 	bl	800a488 <__sfp_lock_acquire>
 800a540:	4b1f      	ldr	r3, [pc, #124]	; (800a5c0 <__sfp+0x88>)
 800a542:	681e      	ldr	r6, [r3, #0]
 800a544:	69b3      	ldr	r3, [r6, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <__sfp+0x18>
 800a54a:	0030      	movs	r0, r6
 800a54c:	f7ff ffbc 	bl	800a4c8 <__sinit>
 800a550:	3648      	adds	r6, #72	; 0x48
 800a552:	68b4      	ldr	r4, [r6, #8]
 800a554:	6873      	ldr	r3, [r6, #4]
 800a556:	3b01      	subs	r3, #1
 800a558:	d504      	bpl.n	800a564 <__sfp+0x2c>
 800a55a:	6833      	ldr	r3, [r6, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d022      	beq.n	800a5a6 <__sfp+0x6e>
 800a560:	6836      	ldr	r6, [r6, #0]
 800a562:	e7f6      	b.n	800a552 <__sfp+0x1a>
 800a564:	220c      	movs	r2, #12
 800a566:	5ea5      	ldrsh	r5, [r4, r2]
 800a568:	2d00      	cmp	r5, #0
 800a56a:	d11a      	bne.n	800a5a2 <__sfp+0x6a>
 800a56c:	0020      	movs	r0, r4
 800a56e:	4b15      	ldr	r3, [pc, #84]	; (800a5c4 <__sfp+0x8c>)
 800a570:	3058      	adds	r0, #88	; 0x58
 800a572:	60e3      	str	r3, [r4, #12]
 800a574:	6665      	str	r5, [r4, #100]	; 0x64
 800a576:	f000 f84b 	bl	800a610 <__retarget_lock_init_recursive>
 800a57a:	f7ff ff8d 	bl	800a498 <__sfp_lock_release>
 800a57e:	0020      	movs	r0, r4
 800a580:	2208      	movs	r2, #8
 800a582:	0029      	movs	r1, r5
 800a584:	6025      	str	r5, [r4, #0]
 800a586:	60a5      	str	r5, [r4, #8]
 800a588:	6065      	str	r5, [r4, #4]
 800a58a:	6125      	str	r5, [r4, #16]
 800a58c:	6165      	str	r5, [r4, #20]
 800a58e:	61a5      	str	r5, [r4, #24]
 800a590:	305c      	adds	r0, #92	; 0x5c
 800a592:	f7fe fa52 	bl	8008a3a <memset>
 800a596:	6365      	str	r5, [r4, #52]	; 0x34
 800a598:	63a5      	str	r5, [r4, #56]	; 0x38
 800a59a:	64a5      	str	r5, [r4, #72]	; 0x48
 800a59c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a59e:	0020      	movs	r0, r4
 800a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a2:	3468      	adds	r4, #104	; 0x68
 800a5a4:	e7d7      	b.n	800a556 <__sfp+0x1e>
 800a5a6:	2104      	movs	r1, #4
 800a5a8:	0038      	movs	r0, r7
 800a5aa:	f7ff ff57 	bl	800a45c <__sfmoreglue>
 800a5ae:	1e04      	subs	r4, r0, #0
 800a5b0:	6030      	str	r0, [r6, #0]
 800a5b2:	d1d5      	bne.n	800a560 <__sfp+0x28>
 800a5b4:	f7ff ff70 	bl	800a498 <__sfp_lock_release>
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	e7ef      	b.n	800a59e <__sfp+0x66>
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	0800b970 	.word	0x0800b970
 800a5c4:	ffff0001 	.word	0xffff0001

0800a5c8 <_fwalk_reent>:
 800a5c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ca:	0004      	movs	r4, r0
 800a5cc:	0006      	movs	r6, r0
 800a5ce:	2700      	movs	r7, #0
 800a5d0:	9101      	str	r1, [sp, #4]
 800a5d2:	3448      	adds	r4, #72	; 0x48
 800a5d4:	6863      	ldr	r3, [r4, #4]
 800a5d6:	68a5      	ldr	r5, [r4, #8]
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	9b00      	ldr	r3, [sp, #0]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	d504      	bpl.n	800a5ec <_fwalk_reent+0x24>
 800a5e2:	6824      	ldr	r4, [r4, #0]
 800a5e4:	2c00      	cmp	r4, #0
 800a5e6:	d1f5      	bne.n	800a5d4 <_fwalk_reent+0xc>
 800a5e8:	0038      	movs	r0, r7
 800a5ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5ec:	89ab      	ldrh	r3, [r5, #12]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d908      	bls.n	800a604 <_fwalk_reent+0x3c>
 800a5f2:	220e      	movs	r2, #14
 800a5f4:	5eab      	ldrsh	r3, [r5, r2]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	d004      	beq.n	800a604 <_fwalk_reent+0x3c>
 800a5fa:	0029      	movs	r1, r5
 800a5fc:	0030      	movs	r0, r6
 800a5fe:	9b01      	ldr	r3, [sp, #4]
 800a600:	4798      	blx	r3
 800a602:	4307      	orrs	r7, r0
 800a604:	3568      	adds	r5, #104	; 0x68
 800a606:	e7e8      	b.n	800a5da <_fwalk_reent+0x12>

0800a608 <_localeconv_r>:
 800a608:	4800      	ldr	r0, [pc, #0]	; (800a60c <_localeconv_r+0x4>)
 800a60a:	4770      	bx	lr
 800a60c:	2000016c 	.word	0x2000016c

0800a610 <__retarget_lock_init_recursive>:
 800a610:	4770      	bx	lr

0800a612 <__retarget_lock_acquire_recursive>:
 800a612:	4770      	bx	lr

0800a614 <__retarget_lock_release_recursive>:
 800a614:	4770      	bx	lr
	...

0800a618 <__swhatbuf_r>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	000e      	movs	r6, r1
 800a61c:	001d      	movs	r5, r3
 800a61e:	230e      	movs	r3, #14
 800a620:	5ec9      	ldrsh	r1, [r1, r3]
 800a622:	0014      	movs	r4, r2
 800a624:	b096      	sub	sp, #88	; 0x58
 800a626:	2900      	cmp	r1, #0
 800a628:	da07      	bge.n	800a63a <__swhatbuf_r+0x22>
 800a62a:	2300      	movs	r3, #0
 800a62c:	602b      	str	r3, [r5, #0]
 800a62e:	89b3      	ldrh	r3, [r6, #12]
 800a630:	061b      	lsls	r3, r3, #24
 800a632:	d411      	bmi.n	800a658 <__swhatbuf_r+0x40>
 800a634:	2380      	movs	r3, #128	; 0x80
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	e00f      	b.n	800a65a <__swhatbuf_r+0x42>
 800a63a:	466a      	mov	r2, sp
 800a63c:	f000 ffa4 	bl	800b588 <_fstat_r>
 800a640:	2800      	cmp	r0, #0
 800a642:	dbf2      	blt.n	800a62a <__swhatbuf_r+0x12>
 800a644:	23f0      	movs	r3, #240	; 0xf0
 800a646:	9901      	ldr	r1, [sp, #4]
 800a648:	021b      	lsls	r3, r3, #8
 800a64a:	4019      	ands	r1, r3
 800a64c:	4b05      	ldr	r3, [pc, #20]	; (800a664 <__swhatbuf_r+0x4c>)
 800a64e:	18c9      	adds	r1, r1, r3
 800a650:	424b      	negs	r3, r1
 800a652:	4159      	adcs	r1, r3
 800a654:	6029      	str	r1, [r5, #0]
 800a656:	e7ed      	b.n	800a634 <__swhatbuf_r+0x1c>
 800a658:	2340      	movs	r3, #64	; 0x40
 800a65a:	2000      	movs	r0, #0
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	b016      	add	sp, #88	; 0x58
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	ffffe000 	.word	0xffffe000

0800a668 <__smakebuf_r>:
 800a668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a66a:	2602      	movs	r6, #2
 800a66c:	898b      	ldrh	r3, [r1, #12]
 800a66e:	0005      	movs	r5, r0
 800a670:	000c      	movs	r4, r1
 800a672:	4233      	tst	r3, r6
 800a674:	d006      	beq.n	800a684 <__smakebuf_r+0x1c>
 800a676:	0023      	movs	r3, r4
 800a678:	3347      	adds	r3, #71	; 0x47
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	6123      	str	r3, [r4, #16]
 800a67e:	2301      	movs	r3, #1
 800a680:	6163      	str	r3, [r4, #20]
 800a682:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a684:	466a      	mov	r2, sp
 800a686:	ab01      	add	r3, sp, #4
 800a688:	f7ff ffc6 	bl	800a618 <__swhatbuf_r>
 800a68c:	9900      	ldr	r1, [sp, #0]
 800a68e:	0007      	movs	r7, r0
 800a690:	0028      	movs	r0, r5
 800a692:	f000 fc39 	bl	800af08 <_malloc_r>
 800a696:	2800      	cmp	r0, #0
 800a698:	d108      	bne.n	800a6ac <__smakebuf_r+0x44>
 800a69a:	220c      	movs	r2, #12
 800a69c:	5ea3      	ldrsh	r3, [r4, r2]
 800a69e:	059a      	lsls	r2, r3, #22
 800a6a0:	d4ef      	bmi.n	800a682 <__smakebuf_r+0x1a>
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	4393      	bics	r3, r2
 800a6a6:	431e      	orrs	r6, r3
 800a6a8:	81a6      	strh	r6, [r4, #12]
 800a6aa:	e7e4      	b.n	800a676 <__smakebuf_r+0xe>
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <__smakebuf_r+0x84>)
 800a6ae:	62ab      	str	r3, [r5, #40]	; 0x28
 800a6b0:	2380      	movs	r3, #128	; 0x80
 800a6b2:	89a2      	ldrh	r2, [r4, #12]
 800a6b4:	6020      	str	r0, [r4, #0]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	9b00      	ldr	r3, [sp, #0]
 800a6bc:	6120      	str	r0, [r4, #16]
 800a6be:	6163      	str	r3, [r4, #20]
 800a6c0:	9b01      	ldr	r3, [sp, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <__smakebuf_r+0x7a>
 800a6c6:	0028      	movs	r0, r5
 800a6c8:	230e      	movs	r3, #14
 800a6ca:	5ee1      	ldrsh	r1, [r4, r3]
 800a6cc:	f000 ff6e 	bl	800b5ac <_isatty_r>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d006      	beq.n	800a6e2 <__smakebuf_r+0x7a>
 800a6d4:	2203      	movs	r2, #3
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	4393      	bics	r3, r2
 800a6da:	001a      	movs	r2, r3
 800a6dc:	2301      	movs	r3, #1
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	89a0      	ldrh	r0, [r4, #12]
 800a6e4:	4307      	orrs	r7, r0
 800a6e6:	81a7      	strh	r7, [r4, #12]
 800a6e8:	e7cb      	b.n	800a682 <__smakebuf_r+0x1a>
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	0800a44d 	.word	0x0800a44d

0800a6f0 <malloc>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4b03      	ldr	r3, [pc, #12]	; (800a700 <malloc+0x10>)
 800a6f4:	0001      	movs	r1, r0
 800a6f6:	6818      	ldr	r0, [r3, #0]
 800a6f8:	f000 fc06 	bl	800af08 <_malloc_r>
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	46c0      	nop			; (mov r8, r8)
 800a700:	20000018 	.word	0x20000018

0800a704 <memchr>:
 800a704:	b2c9      	uxtb	r1, r1
 800a706:	1882      	adds	r2, r0, r2
 800a708:	4290      	cmp	r0, r2
 800a70a:	d101      	bne.n	800a710 <memchr+0xc>
 800a70c:	2000      	movs	r0, #0
 800a70e:	4770      	bx	lr
 800a710:	7803      	ldrb	r3, [r0, #0]
 800a712:	428b      	cmp	r3, r1
 800a714:	d0fb      	beq.n	800a70e <memchr+0xa>
 800a716:	3001      	adds	r0, #1
 800a718:	e7f6      	b.n	800a708 <memchr+0x4>
	...

0800a71c <_Balloc>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a720:	0006      	movs	r6, r0
 800a722:	000c      	movs	r4, r1
 800a724:	2d00      	cmp	r5, #0
 800a726:	d10e      	bne.n	800a746 <_Balloc+0x2a>
 800a728:	2010      	movs	r0, #16
 800a72a:	f7ff ffe1 	bl	800a6f0 <malloc>
 800a72e:	1e02      	subs	r2, r0, #0
 800a730:	6270      	str	r0, [r6, #36]	; 0x24
 800a732:	d104      	bne.n	800a73e <_Balloc+0x22>
 800a734:	2166      	movs	r1, #102	; 0x66
 800a736:	4b19      	ldr	r3, [pc, #100]	; (800a79c <_Balloc+0x80>)
 800a738:	4819      	ldr	r0, [pc, #100]	; (800a7a0 <_Balloc+0x84>)
 800a73a:	f000 fee5 	bl	800b508 <__assert_func>
 800a73e:	6045      	str	r5, [r0, #4]
 800a740:	6085      	str	r5, [r0, #8]
 800a742:	6005      	str	r5, [r0, #0]
 800a744:	60c5      	str	r5, [r0, #12]
 800a746:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a748:	68eb      	ldr	r3, [r5, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d013      	beq.n	800a776 <_Balloc+0x5a>
 800a74e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a750:	00a2      	lsls	r2, r4, #2
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	189b      	adds	r3, r3, r2
 800a756:	6818      	ldr	r0, [r3, #0]
 800a758:	2800      	cmp	r0, #0
 800a75a:	d118      	bne.n	800a78e <_Balloc+0x72>
 800a75c:	2101      	movs	r1, #1
 800a75e:	000d      	movs	r5, r1
 800a760:	40a5      	lsls	r5, r4
 800a762:	1d6a      	adds	r2, r5, #5
 800a764:	0030      	movs	r0, r6
 800a766:	0092      	lsls	r2, r2, #2
 800a768:	f000 fb76 	bl	800ae58 <_calloc_r>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d00c      	beq.n	800a78a <_Balloc+0x6e>
 800a770:	6044      	str	r4, [r0, #4]
 800a772:	6085      	str	r5, [r0, #8]
 800a774:	e00d      	b.n	800a792 <_Balloc+0x76>
 800a776:	2221      	movs	r2, #33	; 0x21
 800a778:	2104      	movs	r1, #4
 800a77a:	0030      	movs	r0, r6
 800a77c:	f000 fb6c 	bl	800ae58 <_calloc_r>
 800a780:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a782:	60e8      	str	r0, [r5, #12]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e1      	bne.n	800a74e <_Balloc+0x32>
 800a78a:	2000      	movs	r0, #0
 800a78c:	bd70      	pop	{r4, r5, r6, pc}
 800a78e:	6802      	ldr	r2, [r0, #0]
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	2300      	movs	r3, #0
 800a794:	6103      	str	r3, [r0, #16]
 800a796:	60c3      	str	r3, [r0, #12]
 800a798:	e7f8      	b.n	800a78c <_Balloc+0x70>
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	0800b9b5 	.word	0x0800b9b5
 800a7a0:	0800ba9c 	.word	0x0800ba9c

0800a7a4 <_Bfree>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7a8:	0005      	movs	r5, r0
 800a7aa:	000c      	movs	r4, r1
 800a7ac:	2e00      	cmp	r6, #0
 800a7ae:	d10e      	bne.n	800a7ce <_Bfree+0x2a>
 800a7b0:	2010      	movs	r0, #16
 800a7b2:	f7ff ff9d 	bl	800a6f0 <malloc>
 800a7b6:	1e02      	subs	r2, r0, #0
 800a7b8:	6268      	str	r0, [r5, #36]	; 0x24
 800a7ba:	d104      	bne.n	800a7c6 <_Bfree+0x22>
 800a7bc:	218a      	movs	r1, #138	; 0x8a
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <_Bfree+0x40>)
 800a7c0:	4809      	ldr	r0, [pc, #36]	; (800a7e8 <_Bfree+0x44>)
 800a7c2:	f000 fea1 	bl	800b508 <__assert_func>
 800a7c6:	6046      	str	r6, [r0, #4]
 800a7c8:	6086      	str	r6, [r0, #8]
 800a7ca:	6006      	str	r6, [r0, #0]
 800a7cc:	60c6      	str	r6, [r0, #12]
 800a7ce:	2c00      	cmp	r4, #0
 800a7d0:	d007      	beq.n	800a7e2 <_Bfree+0x3e>
 800a7d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7d4:	6862      	ldr	r2, [r4, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	189b      	adds	r3, r3, r2
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	601c      	str	r4, [r3, #0]
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
 800a7e4:	0800b9b5 	.word	0x0800b9b5
 800a7e8:	0800ba9c 	.word	0x0800ba9c

0800a7ec <__multadd>:
 800a7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ee:	000e      	movs	r6, r1
 800a7f0:	9001      	str	r0, [sp, #4]
 800a7f2:	000c      	movs	r4, r1
 800a7f4:	001d      	movs	r5, r3
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	690f      	ldr	r7, [r1, #16]
 800a7fa:	3614      	adds	r6, #20
 800a7fc:	6833      	ldr	r3, [r6, #0]
 800a7fe:	3001      	adds	r0, #1
 800a800:	b299      	uxth	r1, r3
 800a802:	4351      	muls	r1, r2
 800a804:	0c1b      	lsrs	r3, r3, #16
 800a806:	4353      	muls	r3, r2
 800a808:	1949      	adds	r1, r1, r5
 800a80a:	0c0d      	lsrs	r5, r1, #16
 800a80c:	195b      	adds	r3, r3, r5
 800a80e:	0c1d      	lsrs	r5, r3, #16
 800a810:	b289      	uxth	r1, r1
 800a812:	041b      	lsls	r3, r3, #16
 800a814:	185b      	adds	r3, r3, r1
 800a816:	c608      	stmia	r6!, {r3}
 800a818:	4287      	cmp	r7, r0
 800a81a:	dcef      	bgt.n	800a7fc <__multadd+0x10>
 800a81c:	2d00      	cmp	r5, #0
 800a81e:	d022      	beq.n	800a866 <__multadd+0x7a>
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	42bb      	cmp	r3, r7
 800a824:	dc19      	bgt.n	800a85a <__multadd+0x6e>
 800a826:	6863      	ldr	r3, [r4, #4]
 800a828:	9801      	ldr	r0, [sp, #4]
 800a82a:	1c59      	adds	r1, r3, #1
 800a82c:	f7ff ff76 	bl	800a71c <_Balloc>
 800a830:	1e06      	subs	r6, r0, #0
 800a832:	d105      	bne.n	800a840 <__multadd+0x54>
 800a834:	0002      	movs	r2, r0
 800a836:	21b5      	movs	r1, #181	; 0xb5
 800a838:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <__multadd+0x80>)
 800a83a:	480d      	ldr	r0, [pc, #52]	; (800a870 <__multadd+0x84>)
 800a83c:	f000 fe64 	bl	800b508 <__assert_func>
 800a840:	0021      	movs	r1, r4
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	310c      	adds	r1, #12
 800a846:	1c9a      	adds	r2, r3, #2
 800a848:	0092      	lsls	r2, r2, #2
 800a84a:	300c      	adds	r0, #12
 800a84c:	f7fe f8ec 	bl	8008a28 <memcpy>
 800a850:	0021      	movs	r1, r4
 800a852:	9801      	ldr	r0, [sp, #4]
 800a854:	f7ff ffa6 	bl	800a7a4 <_Bfree>
 800a858:	0034      	movs	r4, r6
 800a85a:	1d3b      	adds	r3, r7, #4
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	18e3      	adds	r3, r4, r3
 800a860:	605d      	str	r5, [r3, #4]
 800a862:	1c7b      	adds	r3, r7, #1
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	0020      	movs	r0, r4
 800a868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	0800ba2b 	.word	0x0800ba2b
 800a870:	0800ba9c 	.word	0x0800ba9c

0800a874 <__hi0bits>:
 800a874:	0003      	movs	r3, r0
 800a876:	0c02      	lsrs	r2, r0, #16
 800a878:	2000      	movs	r0, #0
 800a87a:	4282      	cmp	r2, r0
 800a87c:	d101      	bne.n	800a882 <__hi0bits+0xe>
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	3010      	adds	r0, #16
 800a882:	0e1a      	lsrs	r2, r3, #24
 800a884:	d101      	bne.n	800a88a <__hi0bits+0x16>
 800a886:	3008      	adds	r0, #8
 800a888:	021b      	lsls	r3, r3, #8
 800a88a:	0f1a      	lsrs	r2, r3, #28
 800a88c:	d101      	bne.n	800a892 <__hi0bits+0x1e>
 800a88e:	3004      	adds	r0, #4
 800a890:	011b      	lsls	r3, r3, #4
 800a892:	0f9a      	lsrs	r2, r3, #30
 800a894:	d101      	bne.n	800a89a <__hi0bits+0x26>
 800a896:	3002      	adds	r0, #2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	db03      	blt.n	800a8a6 <__hi0bits+0x32>
 800a89e:	3001      	adds	r0, #1
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	d400      	bmi.n	800a8a6 <__hi0bits+0x32>
 800a8a4:	2020      	movs	r0, #32
 800a8a6:	4770      	bx	lr

0800a8a8 <__lo0bits>:
 800a8a8:	6803      	ldr	r3, [r0, #0]
 800a8aa:	0002      	movs	r2, r0
 800a8ac:	2107      	movs	r1, #7
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	4008      	ands	r0, r1
 800a8b2:	420b      	tst	r3, r1
 800a8b4:	d00d      	beq.n	800a8d2 <__lo0bits+0x2a>
 800a8b6:	3906      	subs	r1, #6
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	420b      	tst	r3, r1
 800a8bc:	d105      	bne.n	800a8ca <__lo0bits+0x22>
 800a8be:	3002      	adds	r0, #2
 800a8c0:	4203      	tst	r3, r0
 800a8c2:	d003      	beq.n	800a8cc <__lo0bits+0x24>
 800a8c4:	40cb      	lsrs	r3, r1
 800a8c6:	0008      	movs	r0, r1
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	4770      	bx	lr
 800a8cc:	089b      	lsrs	r3, r3, #2
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	e7fb      	b.n	800a8ca <__lo0bits+0x22>
 800a8d2:	b299      	uxth	r1, r3
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	d101      	bne.n	800a8dc <__lo0bits+0x34>
 800a8d8:	2010      	movs	r0, #16
 800a8da:	0c1b      	lsrs	r3, r3, #16
 800a8dc:	b2d9      	uxtb	r1, r3
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d101      	bne.n	800a8e6 <__lo0bits+0x3e>
 800a8e2:	3008      	adds	r0, #8
 800a8e4:	0a1b      	lsrs	r3, r3, #8
 800a8e6:	0719      	lsls	r1, r3, #28
 800a8e8:	d101      	bne.n	800a8ee <__lo0bits+0x46>
 800a8ea:	3004      	adds	r0, #4
 800a8ec:	091b      	lsrs	r3, r3, #4
 800a8ee:	0799      	lsls	r1, r3, #30
 800a8f0:	d101      	bne.n	800a8f6 <__lo0bits+0x4e>
 800a8f2:	3002      	adds	r0, #2
 800a8f4:	089b      	lsrs	r3, r3, #2
 800a8f6:	07d9      	lsls	r1, r3, #31
 800a8f8:	d4e9      	bmi.n	800a8ce <__lo0bits+0x26>
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	085b      	lsrs	r3, r3, #1
 800a8fe:	d1e6      	bne.n	800a8ce <__lo0bits+0x26>
 800a900:	2020      	movs	r0, #32
 800a902:	e7e2      	b.n	800a8ca <__lo0bits+0x22>

0800a904 <__i2b>:
 800a904:	b510      	push	{r4, lr}
 800a906:	000c      	movs	r4, r1
 800a908:	2101      	movs	r1, #1
 800a90a:	f7ff ff07 	bl	800a71c <_Balloc>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d106      	bne.n	800a920 <__i2b+0x1c>
 800a912:	21a0      	movs	r1, #160	; 0xa0
 800a914:	0002      	movs	r2, r0
 800a916:	4b04      	ldr	r3, [pc, #16]	; (800a928 <__i2b+0x24>)
 800a918:	4804      	ldr	r0, [pc, #16]	; (800a92c <__i2b+0x28>)
 800a91a:	0049      	lsls	r1, r1, #1
 800a91c:	f000 fdf4 	bl	800b508 <__assert_func>
 800a920:	2301      	movs	r3, #1
 800a922:	6144      	str	r4, [r0, #20]
 800a924:	6103      	str	r3, [r0, #16]
 800a926:	bd10      	pop	{r4, pc}
 800a928:	0800ba2b 	.word	0x0800ba2b
 800a92c:	0800ba9c 	.word	0x0800ba9c

0800a930 <__multiply>:
 800a930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a932:	690b      	ldr	r3, [r1, #16]
 800a934:	0014      	movs	r4, r2
 800a936:	6912      	ldr	r2, [r2, #16]
 800a938:	000d      	movs	r5, r1
 800a93a:	b089      	sub	sp, #36	; 0x24
 800a93c:	4293      	cmp	r3, r2
 800a93e:	da01      	bge.n	800a944 <__multiply+0x14>
 800a940:	0025      	movs	r5, r4
 800a942:	000c      	movs	r4, r1
 800a944:	692f      	ldr	r7, [r5, #16]
 800a946:	6926      	ldr	r6, [r4, #16]
 800a948:	6869      	ldr	r1, [r5, #4]
 800a94a:	19bb      	adds	r3, r7, r6
 800a94c:	9302      	str	r3, [sp, #8]
 800a94e:	68ab      	ldr	r3, [r5, #8]
 800a950:	19ba      	adds	r2, r7, r6
 800a952:	4293      	cmp	r3, r2
 800a954:	da00      	bge.n	800a958 <__multiply+0x28>
 800a956:	3101      	adds	r1, #1
 800a958:	f7ff fee0 	bl	800a71c <_Balloc>
 800a95c:	9001      	str	r0, [sp, #4]
 800a95e:	2800      	cmp	r0, #0
 800a960:	d106      	bne.n	800a970 <__multiply+0x40>
 800a962:	215e      	movs	r1, #94	; 0x5e
 800a964:	0002      	movs	r2, r0
 800a966:	4b48      	ldr	r3, [pc, #288]	; (800aa88 <__multiply+0x158>)
 800a968:	4848      	ldr	r0, [pc, #288]	; (800aa8c <__multiply+0x15c>)
 800a96a:	31ff      	adds	r1, #255	; 0xff
 800a96c:	f000 fdcc 	bl	800b508 <__assert_func>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	3314      	adds	r3, #20
 800a976:	469c      	mov	ip, r3
 800a978:	19bb      	adds	r3, r7, r6
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4463      	add	r3, ip
 800a97e:	9303      	str	r3, [sp, #12]
 800a980:	4663      	mov	r3, ip
 800a982:	9903      	ldr	r1, [sp, #12]
 800a984:	428b      	cmp	r3, r1
 800a986:	d32c      	bcc.n	800a9e2 <__multiply+0xb2>
 800a988:	002b      	movs	r3, r5
 800a98a:	0022      	movs	r2, r4
 800a98c:	3314      	adds	r3, #20
 800a98e:	00bf      	lsls	r7, r7, #2
 800a990:	3214      	adds	r2, #20
 800a992:	9306      	str	r3, [sp, #24]
 800a994:	00b6      	lsls	r6, r6, #2
 800a996:	19db      	adds	r3, r3, r7
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	1993      	adds	r3, r2, r6
 800a99c:	9307      	str	r3, [sp, #28]
 800a99e:	2304      	movs	r3, #4
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	002b      	movs	r3, r5
 800a9a4:	9904      	ldr	r1, [sp, #16]
 800a9a6:	3315      	adds	r3, #21
 800a9a8:	9200      	str	r2, [sp, #0]
 800a9aa:	4299      	cmp	r1, r3
 800a9ac:	d305      	bcc.n	800a9ba <__multiply+0x8a>
 800a9ae:	1b4b      	subs	r3, r1, r5
 800a9b0:	3b15      	subs	r3, #21
 800a9b2:	089b      	lsrs	r3, r3, #2
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	9305      	str	r3, [sp, #20]
 800a9ba:	9b07      	ldr	r3, [sp, #28]
 800a9bc:	9a00      	ldr	r2, [sp, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d311      	bcc.n	800a9e6 <__multiply+0xb6>
 800a9c2:	9b02      	ldr	r3, [sp, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd06      	ble.n	800a9d6 <__multiply+0xa6>
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	3b04      	subs	r3, #4
 800a9cc:	9303      	str	r3, [sp, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d054      	beq.n	800aa80 <__multiply+0x150>
 800a9d6:	9b01      	ldr	r3, [sp, #4]
 800a9d8:	9a02      	ldr	r2, [sp, #8]
 800a9da:	0018      	movs	r0, r3
 800a9dc:	611a      	str	r2, [r3, #16]
 800a9de:	b009      	add	sp, #36	; 0x24
 800a9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e2:	c304      	stmia	r3!, {r2}
 800a9e4:	e7cd      	b.n	800a982 <__multiply+0x52>
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	b298      	uxth	r0, r3
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d01c      	beq.n	800aa2a <__multiply+0xfa>
 800a9f0:	4667      	mov	r7, ip
 800a9f2:	2400      	movs	r4, #0
 800a9f4:	9e06      	ldr	r6, [sp, #24]
 800a9f6:	ce02      	ldmia	r6!, {r1}
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	b28b      	uxth	r3, r1
 800a9fc:	4343      	muls	r3, r0
 800a9fe:	0c09      	lsrs	r1, r1, #16
 800aa00:	4341      	muls	r1, r0
 800aa02:	b292      	uxth	r2, r2
 800aa04:	189b      	adds	r3, r3, r2
 800aa06:	191b      	adds	r3, r3, r4
 800aa08:	000c      	movs	r4, r1
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	0c11      	lsrs	r1, r2, #16
 800aa0e:	1861      	adds	r1, r4, r1
 800aa10:	0c1c      	lsrs	r4, r3, #16
 800aa12:	1909      	adds	r1, r1, r4
 800aa14:	0c0c      	lsrs	r4, r1, #16
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	0409      	lsls	r1, r1, #16
 800aa1a:	430b      	orrs	r3, r1
 800aa1c:	c708      	stmia	r7!, {r3}
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	42b3      	cmp	r3, r6
 800aa22:	d8e8      	bhi.n	800a9f6 <__multiply+0xc6>
 800aa24:	4663      	mov	r3, ip
 800aa26:	9a05      	ldr	r2, [sp, #20]
 800aa28:	509c      	str	r4, [r3, r2]
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	0c1e      	lsrs	r6, r3, #16
 800aa30:	d020      	beq.n	800aa74 <__multiply+0x144>
 800aa32:	4663      	mov	r3, ip
 800aa34:	002c      	movs	r4, r5
 800aa36:	4660      	mov	r0, ip
 800aa38:	2700      	movs	r7, #0
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3414      	adds	r4, #20
 800aa3e:	6822      	ldr	r2, [r4, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	b291      	uxth	r1, r2
 800aa44:	4371      	muls	r1, r6
 800aa46:	6802      	ldr	r2, [r0, #0]
 800aa48:	0c12      	lsrs	r2, r2, #16
 800aa4a:	1889      	adds	r1, r1, r2
 800aa4c:	19cf      	adds	r7, r1, r7
 800aa4e:	0439      	lsls	r1, r7, #16
 800aa50:	430b      	orrs	r3, r1
 800aa52:	6003      	str	r3, [r0, #0]
 800aa54:	cc02      	ldmia	r4!, {r1}
 800aa56:	6843      	ldr	r3, [r0, #4]
 800aa58:	0c09      	lsrs	r1, r1, #16
 800aa5a:	4371      	muls	r1, r6
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	0c3f      	lsrs	r7, r7, #16
 800aa60:	18cb      	adds	r3, r1, r3
 800aa62:	9a04      	ldr	r2, [sp, #16]
 800aa64:	19db      	adds	r3, r3, r7
 800aa66:	0c1f      	lsrs	r7, r3, #16
 800aa68:	3004      	adds	r0, #4
 800aa6a:	42a2      	cmp	r2, r4
 800aa6c:	d8e7      	bhi.n	800aa3e <__multiply+0x10e>
 800aa6e:	4662      	mov	r2, ip
 800aa70:	9905      	ldr	r1, [sp, #20]
 800aa72:	5053      	str	r3, [r2, r1]
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	3304      	adds	r3, #4
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	2304      	movs	r3, #4
 800aa7c:	449c      	add	ip, r3
 800aa7e:	e79c      	b.n	800a9ba <__multiply+0x8a>
 800aa80:	9b02      	ldr	r3, [sp, #8]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	9302      	str	r3, [sp, #8]
 800aa86:	e79c      	b.n	800a9c2 <__multiply+0x92>
 800aa88:	0800ba2b 	.word	0x0800ba2b
 800aa8c:	0800ba9c 	.word	0x0800ba9c

0800aa90 <__pow5mult>:
 800aa90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa92:	2303      	movs	r3, #3
 800aa94:	0015      	movs	r5, r2
 800aa96:	0007      	movs	r7, r0
 800aa98:	000e      	movs	r6, r1
 800aa9a:	401a      	ands	r2, r3
 800aa9c:	421d      	tst	r5, r3
 800aa9e:	d008      	beq.n	800aab2 <__pow5mult+0x22>
 800aaa0:	4925      	ldr	r1, [pc, #148]	; (800ab38 <__pow5mult+0xa8>)
 800aaa2:	3a01      	subs	r2, #1
 800aaa4:	0092      	lsls	r2, r2, #2
 800aaa6:	5852      	ldr	r2, [r2, r1]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	0031      	movs	r1, r6
 800aaac:	f7ff fe9e 	bl	800a7ec <__multadd>
 800aab0:	0006      	movs	r6, r0
 800aab2:	10ad      	asrs	r5, r5, #2
 800aab4:	d03d      	beq.n	800ab32 <__pow5mult+0xa2>
 800aab6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800aab8:	2c00      	cmp	r4, #0
 800aaba:	d10f      	bne.n	800aadc <__pow5mult+0x4c>
 800aabc:	2010      	movs	r0, #16
 800aabe:	f7ff fe17 	bl	800a6f0 <malloc>
 800aac2:	1e02      	subs	r2, r0, #0
 800aac4:	6278      	str	r0, [r7, #36]	; 0x24
 800aac6:	d105      	bne.n	800aad4 <__pow5mult+0x44>
 800aac8:	21d7      	movs	r1, #215	; 0xd7
 800aaca:	4b1c      	ldr	r3, [pc, #112]	; (800ab3c <__pow5mult+0xac>)
 800aacc:	481c      	ldr	r0, [pc, #112]	; (800ab40 <__pow5mult+0xb0>)
 800aace:	0049      	lsls	r1, r1, #1
 800aad0:	f000 fd1a 	bl	800b508 <__assert_func>
 800aad4:	6044      	str	r4, [r0, #4]
 800aad6:	6084      	str	r4, [r0, #8]
 800aad8:	6004      	str	r4, [r0, #0]
 800aada:	60c4      	str	r4, [r0, #12]
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	689c      	ldr	r4, [r3, #8]
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	2c00      	cmp	r4, #0
 800aae4:	d108      	bne.n	800aaf8 <__pow5mult+0x68>
 800aae6:	0038      	movs	r0, r7
 800aae8:	4916      	ldr	r1, [pc, #88]	; (800ab44 <__pow5mult+0xb4>)
 800aaea:	f7ff ff0b 	bl	800a904 <__i2b>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	0004      	movs	r4, r0
 800aaf2:	6098      	str	r0, [r3, #8]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	6003      	str	r3, [r0, #0]
 800aaf8:	2301      	movs	r3, #1
 800aafa:	421d      	tst	r5, r3
 800aafc:	d00a      	beq.n	800ab14 <__pow5mult+0x84>
 800aafe:	0031      	movs	r1, r6
 800ab00:	0022      	movs	r2, r4
 800ab02:	0038      	movs	r0, r7
 800ab04:	f7ff ff14 	bl	800a930 <__multiply>
 800ab08:	0031      	movs	r1, r6
 800ab0a:	9001      	str	r0, [sp, #4]
 800ab0c:	0038      	movs	r0, r7
 800ab0e:	f7ff fe49 	bl	800a7a4 <_Bfree>
 800ab12:	9e01      	ldr	r6, [sp, #4]
 800ab14:	106d      	asrs	r5, r5, #1
 800ab16:	d00c      	beq.n	800ab32 <__pow5mult+0xa2>
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d107      	bne.n	800ab2e <__pow5mult+0x9e>
 800ab1e:	0022      	movs	r2, r4
 800ab20:	0021      	movs	r1, r4
 800ab22:	0038      	movs	r0, r7
 800ab24:	f7ff ff04 	bl	800a930 <__multiply>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6020      	str	r0, [r4, #0]
 800ab2c:	6003      	str	r3, [r0, #0]
 800ab2e:	0004      	movs	r4, r0
 800ab30:	e7e2      	b.n	800aaf8 <__pow5mult+0x68>
 800ab32:	0030      	movs	r0, r6
 800ab34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	0800bbf0 	.word	0x0800bbf0
 800ab3c:	0800b9b5 	.word	0x0800b9b5
 800ab40:	0800ba9c 	.word	0x0800ba9c
 800ab44:	00000271 	.word	0x00000271

0800ab48 <__lshift>:
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	000c      	movs	r4, r1
 800ab4c:	0017      	movs	r7, r2
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	1155      	asrs	r5, r2, #5
 800ab52:	b087      	sub	sp, #28
 800ab54:	18eb      	adds	r3, r5, r3
 800ab56:	9302      	str	r3, [sp, #8]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	6849      	ldr	r1, [r1, #4]
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	9004      	str	r0, [sp, #16]
 800ab62:	9a01      	ldr	r2, [sp, #4]
 800ab64:	4293      	cmp	r3, r2
 800ab66:	db11      	blt.n	800ab8c <__lshift+0x44>
 800ab68:	9804      	ldr	r0, [sp, #16]
 800ab6a:	f7ff fdd7 	bl	800a71c <_Balloc>
 800ab6e:	0002      	movs	r2, r0
 800ab70:	2300      	movs	r3, #0
 800ab72:	3214      	adds	r2, #20
 800ab74:	0006      	movs	r6, r0
 800ab76:	0011      	movs	r1, r2
 800ab78:	9203      	str	r2, [sp, #12]
 800ab7a:	4298      	cmp	r0, r3
 800ab7c:	d10d      	bne.n	800ab9a <__lshift+0x52>
 800ab7e:	21da      	movs	r1, #218	; 0xda
 800ab80:	0002      	movs	r2, r0
 800ab82:	4b27      	ldr	r3, [pc, #156]	; (800ac20 <__lshift+0xd8>)
 800ab84:	4827      	ldr	r0, [pc, #156]	; (800ac24 <__lshift+0xdc>)
 800ab86:	31ff      	adds	r1, #255	; 0xff
 800ab88:	f000 fcbe 	bl	800b508 <__assert_func>
 800ab8c:	3101      	adds	r1, #1
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	e7e7      	b.n	800ab62 <__lshift+0x1a>
 800ab92:	2200      	movs	r2, #0
 800ab94:	0098      	lsls	r0, r3, #2
 800ab96:	500a      	str	r2, [r1, r0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	42ab      	cmp	r3, r5
 800ab9c:	dbf9      	blt.n	800ab92 <__lshift+0x4a>
 800ab9e:	43eb      	mvns	r3, r5
 800aba0:	17db      	asrs	r3, r3, #31
 800aba2:	401d      	ands	r5, r3
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	00ad      	lsls	r5, r5, #2
 800aba8:	211f      	movs	r1, #31
 800abaa:	0038      	movs	r0, r7
 800abac:	195d      	adds	r5, r3, r5
 800abae:	0023      	movs	r3, r4
 800abb0:	6922      	ldr	r2, [r4, #16]
 800abb2:	3314      	adds	r3, #20
 800abb4:	0092      	lsls	r2, r2, #2
 800abb6:	4008      	ands	r0, r1
 800abb8:	4684      	mov	ip, r0
 800abba:	189a      	adds	r2, r3, r2
 800abbc:	420f      	tst	r7, r1
 800abbe:	d02a      	beq.n	800ac16 <__lshift+0xce>
 800abc0:	3101      	adds	r1, #1
 800abc2:	1a09      	subs	r1, r1, r0
 800abc4:	9105      	str	r1, [sp, #20]
 800abc6:	2100      	movs	r1, #0
 800abc8:	9503      	str	r5, [sp, #12]
 800abca:	4667      	mov	r7, ip
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	40b8      	lsls	r0, r7
 800abd0:	4301      	orrs	r1, r0
 800abd2:	9803      	ldr	r0, [sp, #12]
 800abd4:	c002      	stmia	r0!, {r1}
 800abd6:	cb02      	ldmia	r3!, {r1}
 800abd8:	9003      	str	r0, [sp, #12]
 800abda:	9805      	ldr	r0, [sp, #20]
 800abdc:	40c1      	lsrs	r1, r0
 800abde:	429a      	cmp	r2, r3
 800abe0:	d8f3      	bhi.n	800abca <__lshift+0x82>
 800abe2:	0020      	movs	r0, r4
 800abe4:	3015      	adds	r0, #21
 800abe6:	2304      	movs	r3, #4
 800abe8:	4282      	cmp	r2, r0
 800abea:	d304      	bcc.n	800abf6 <__lshift+0xae>
 800abec:	1b13      	subs	r3, r2, r4
 800abee:	3b15      	subs	r3, #21
 800abf0:	089b      	lsrs	r3, r3, #2
 800abf2:	3301      	adds	r3, #1
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	50e9      	str	r1, [r5, r3]
 800abf8:	2900      	cmp	r1, #0
 800abfa:	d002      	beq.n	800ac02 <__lshift+0xba>
 800abfc:	9b02      	ldr	r3, [sp, #8]
 800abfe:	3302      	adds	r3, #2
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	9b01      	ldr	r3, [sp, #4]
 800ac04:	9804      	ldr	r0, [sp, #16]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	0021      	movs	r1, r4
 800ac0a:	6133      	str	r3, [r6, #16]
 800ac0c:	f7ff fdca 	bl	800a7a4 <_Bfree>
 800ac10:	0030      	movs	r0, r6
 800ac12:	b007      	add	sp, #28
 800ac14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac16:	cb02      	ldmia	r3!, {r1}
 800ac18:	c502      	stmia	r5!, {r1}
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d8fb      	bhi.n	800ac16 <__lshift+0xce>
 800ac1e:	e7f0      	b.n	800ac02 <__lshift+0xba>
 800ac20:	0800ba2b 	.word	0x0800ba2b
 800ac24:	0800ba9c 	.word	0x0800ba9c

0800ac28 <__mcmp>:
 800ac28:	6902      	ldr	r2, [r0, #16]
 800ac2a:	690b      	ldr	r3, [r1, #16]
 800ac2c:	b530      	push	{r4, r5, lr}
 800ac2e:	0004      	movs	r4, r0
 800ac30:	1ad0      	subs	r0, r2, r3
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d10d      	bne.n	800ac52 <__mcmp+0x2a>
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	3414      	adds	r4, #20
 800ac3a:	3114      	adds	r1, #20
 800ac3c:	18e2      	adds	r2, r4, r3
 800ac3e:	18c9      	adds	r1, r1, r3
 800ac40:	3a04      	subs	r2, #4
 800ac42:	3904      	subs	r1, #4
 800ac44:	6815      	ldr	r5, [r2, #0]
 800ac46:	680b      	ldr	r3, [r1, #0]
 800ac48:	429d      	cmp	r5, r3
 800ac4a:	d003      	beq.n	800ac54 <__mcmp+0x2c>
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	d303      	bcc.n	800ac5a <__mcmp+0x32>
 800ac52:	bd30      	pop	{r4, r5, pc}
 800ac54:	4294      	cmp	r4, r2
 800ac56:	d3f3      	bcc.n	800ac40 <__mcmp+0x18>
 800ac58:	e7fb      	b.n	800ac52 <__mcmp+0x2a>
 800ac5a:	4240      	negs	r0, r0
 800ac5c:	e7f9      	b.n	800ac52 <__mcmp+0x2a>
	...

0800ac60 <__mdiff>:
 800ac60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac62:	000e      	movs	r6, r1
 800ac64:	0007      	movs	r7, r0
 800ac66:	0011      	movs	r1, r2
 800ac68:	0030      	movs	r0, r6
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	0014      	movs	r4, r2
 800ac6e:	f7ff ffdb 	bl	800ac28 <__mcmp>
 800ac72:	1e05      	subs	r5, r0, #0
 800ac74:	d110      	bne.n	800ac98 <__mdiff+0x38>
 800ac76:	0001      	movs	r1, r0
 800ac78:	0038      	movs	r0, r7
 800ac7a:	f7ff fd4f 	bl	800a71c <_Balloc>
 800ac7e:	1e02      	subs	r2, r0, #0
 800ac80:	d104      	bne.n	800ac8c <__mdiff+0x2c>
 800ac82:	4b40      	ldr	r3, [pc, #256]	; (800ad84 <__mdiff+0x124>)
 800ac84:	4940      	ldr	r1, [pc, #256]	; (800ad88 <__mdiff+0x128>)
 800ac86:	4841      	ldr	r0, [pc, #260]	; (800ad8c <__mdiff+0x12c>)
 800ac88:	f000 fc3e 	bl	800b508 <__assert_func>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	6145      	str	r5, [r0, #20]
 800ac90:	6103      	str	r3, [r0, #16]
 800ac92:	0010      	movs	r0, r2
 800ac94:	b007      	add	sp, #28
 800ac96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac98:	2301      	movs	r3, #1
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	db04      	blt.n	800acaa <__mdiff+0x4a>
 800aca0:	0023      	movs	r3, r4
 800aca2:	0034      	movs	r4, r6
 800aca4:	001e      	movs	r6, r3
 800aca6:	2300      	movs	r3, #0
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	0038      	movs	r0, r7
 800acac:	6861      	ldr	r1, [r4, #4]
 800acae:	f7ff fd35 	bl	800a71c <_Balloc>
 800acb2:	1e02      	subs	r2, r0, #0
 800acb4:	d103      	bne.n	800acbe <__mdiff+0x5e>
 800acb6:	2190      	movs	r1, #144	; 0x90
 800acb8:	4b32      	ldr	r3, [pc, #200]	; (800ad84 <__mdiff+0x124>)
 800acba:	0089      	lsls	r1, r1, #2
 800acbc:	e7e3      	b.n	800ac86 <__mdiff+0x26>
 800acbe:	9b01      	ldr	r3, [sp, #4]
 800acc0:	2700      	movs	r7, #0
 800acc2:	60c3      	str	r3, [r0, #12]
 800acc4:	6920      	ldr	r0, [r4, #16]
 800acc6:	3414      	adds	r4, #20
 800acc8:	9401      	str	r4, [sp, #4]
 800acca:	9b01      	ldr	r3, [sp, #4]
 800accc:	0084      	lsls	r4, r0, #2
 800acce:	191b      	adds	r3, r3, r4
 800acd0:	0034      	movs	r4, r6
 800acd2:	9302      	str	r3, [sp, #8]
 800acd4:	6933      	ldr	r3, [r6, #16]
 800acd6:	3414      	adds	r4, #20
 800acd8:	0099      	lsls	r1, r3, #2
 800acda:	1863      	adds	r3, r4, r1
 800acdc:	9303      	str	r3, [sp, #12]
 800acde:	0013      	movs	r3, r2
 800ace0:	3314      	adds	r3, #20
 800ace2:	469c      	mov	ip, r3
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	9304      	str	r3, [sp, #16]
 800acea:	9b04      	ldr	r3, [sp, #16]
 800acec:	cc02      	ldmia	r4!, {r1}
 800acee:	cb20      	ldmia	r3!, {r5}
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	b2ab      	uxth	r3, r5
 800acf4:	19df      	adds	r7, r3, r7
 800acf6:	b28b      	uxth	r3, r1
 800acf8:	1afb      	subs	r3, r7, r3
 800acfa:	0c2d      	lsrs	r5, r5, #16
 800acfc:	0c09      	lsrs	r1, r1, #16
 800acfe:	1a69      	subs	r1, r5, r1
 800ad00:	141d      	asrs	r5, r3, #16
 800ad02:	1949      	adds	r1, r1, r5
 800ad04:	140f      	asrs	r7, r1, #16
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	0409      	lsls	r1, r1, #16
 800ad0a:	430b      	orrs	r3, r1
 800ad0c:	4661      	mov	r1, ip
 800ad0e:	c108      	stmia	r1!, {r3}
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	468c      	mov	ip, r1
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d8e8      	bhi.n	800acea <__mdiff+0x8a>
 800ad18:	0031      	movs	r1, r6
 800ad1a:	9c03      	ldr	r4, [sp, #12]
 800ad1c:	3115      	adds	r1, #21
 800ad1e:	2304      	movs	r3, #4
 800ad20:	428c      	cmp	r4, r1
 800ad22:	d304      	bcc.n	800ad2e <__mdiff+0xce>
 800ad24:	1ba3      	subs	r3, r4, r6
 800ad26:	3b15      	subs	r3, #21
 800ad28:	089b      	lsrs	r3, r3, #2
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	9901      	ldr	r1, [sp, #4]
 800ad30:	18cc      	adds	r4, r1, r3
 800ad32:	9905      	ldr	r1, [sp, #20]
 800ad34:	0026      	movs	r6, r4
 800ad36:	18cb      	adds	r3, r1, r3
 800ad38:	469c      	mov	ip, r3
 800ad3a:	9902      	ldr	r1, [sp, #8]
 800ad3c:	428e      	cmp	r6, r1
 800ad3e:	d310      	bcc.n	800ad62 <__mdiff+0x102>
 800ad40:	9e02      	ldr	r6, [sp, #8]
 800ad42:	1ee5      	subs	r5, r4, #3
 800ad44:	2100      	movs	r1, #0
 800ad46:	42ae      	cmp	r6, r5
 800ad48:	d304      	bcc.n	800ad54 <__mdiff+0xf4>
 800ad4a:	0031      	movs	r1, r6
 800ad4c:	3103      	adds	r1, #3
 800ad4e:	1b09      	subs	r1, r1, r4
 800ad50:	0889      	lsrs	r1, r1, #2
 800ad52:	0089      	lsls	r1, r1, #2
 800ad54:	185b      	adds	r3, r3, r1
 800ad56:	3b04      	subs	r3, #4
 800ad58:	6819      	ldr	r1, [r3, #0]
 800ad5a:	2900      	cmp	r1, #0
 800ad5c:	d00f      	beq.n	800ad7e <__mdiff+0x11e>
 800ad5e:	6110      	str	r0, [r2, #16]
 800ad60:	e797      	b.n	800ac92 <__mdiff+0x32>
 800ad62:	ce02      	ldmia	r6!, {r1}
 800ad64:	b28d      	uxth	r5, r1
 800ad66:	19ed      	adds	r5, r5, r7
 800ad68:	0c0f      	lsrs	r7, r1, #16
 800ad6a:	1429      	asrs	r1, r5, #16
 800ad6c:	1879      	adds	r1, r7, r1
 800ad6e:	140f      	asrs	r7, r1, #16
 800ad70:	b2ad      	uxth	r5, r5
 800ad72:	0409      	lsls	r1, r1, #16
 800ad74:	430d      	orrs	r5, r1
 800ad76:	4661      	mov	r1, ip
 800ad78:	c120      	stmia	r1!, {r5}
 800ad7a:	468c      	mov	ip, r1
 800ad7c:	e7dd      	b.n	800ad3a <__mdiff+0xda>
 800ad7e:	3801      	subs	r0, #1
 800ad80:	e7e9      	b.n	800ad56 <__mdiff+0xf6>
 800ad82:	46c0      	nop			; (mov r8, r8)
 800ad84:	0800ba2b 	.word	0x0800ba2b
 800ad88:	00000232 	.word	0x00000232
 800ad8c:	0800ba9c 	.word	0x0800ba9c

0800ad90 <__d2b>:
 800ad90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad92:	2101      	movs	r1, #1
 800ad94:	0014      	movs	r4, r2
 800ad96:	001e      	movs	r6, r3
 800ad98:	9f08      	ldr	r7, [sp, #32]
 800ad9a:	f7ff fcbf 	bl	800a71c <_Balloc>
 800ad9e:	1e05      	subs	r5, r0, #0
 800ada0:	d105      	bne.n	800adae <__d2b+0x1e>
 800ada2:	0002      	movs	r2, r0
 800ada4:	4b26      	ldr	r3, [pc, #152]	; (800ae40 <__d2b+0xb0>)
 800ada6:	4927      	ldr	r1, [pc, #156]	; (800ae44 <__d2b+0xb4>)
 800ada8:	4827      	ldr	r0, [pc, #156]	; (800ae48 <__d2b+0xb8>)
 800adaa:	f000 fbad 	bl	800b508 <__assert_func>
 800adae:	0333      	lsls	r3, r6, #12
 800adb0:	0076      	lsls	r6, r6, #1
 800adb2:	0b1b      	lsrs	r3, r3, #12
 800adb4:	0d76      	lsrs	r6, r6, #21
 800adb6:	d124      	bne.n	800ae02 <__d2b+0x72>
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	2c00      	cmp	r4, #0
 800adbc:	d027      	beq.n	800ae0e <__d2b+0x7e>
 800adbe:	4668      	mov	r0, sp
 800adc0:	9400      	str	r4, [sp, #0]
 800adc2:	f7ff fd71 	bl	800a8a8 <__lo0bits>
 800adc6:	9c00      	ldr	r4, [sp, #0]
 800adc8:	2800      	cmp	r0, #0
 800adca:	d01e      	beq.n	800ae0a <__d2b+0x7a>
 800adcc:	9b01      	ldr	r3, [sp, #4]
 800adce:	2120      	movs	r1, #32
 800add0:	001a      	movs	r2, r3
 800add2:	1a09      	subs	r1, r1, r0
 800add4:	408a      	lsls	r2, r1
 800add6:	40c3      	lsrs	r3, r0
 800add8:	4322      	orrs	r2, r4
 800adda:	616a      	str	r2, [r5, #20]
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	9c01      	ldr	r4, [sp, #4]
 800ade0:	61ac      	str	r4, [r5, #24]
 800ade2:	1e63      	subs	r3, r4, #1
 800ade4:	419c      	sbcs	r4, r3
 800ade6:	3401      	adds	r4, #1
 800ade8:	612c      	str	r4, [r5, #16]
 800adea:	2e00      	cmp	r6, #0
 800adec:	d018      	beq.n	800ae20 <__d2b+0x90>
 800adee:	4b17      	ldr	r3, [pc, #92]	; (800ae4c <__d2b+0xbc>)
 800adf0:	18f6      	adds	r6, r6, r3
 800adf2:	2335      	movs	r3, #53	; 0x35
 800adf4:	1836      	adds	r6, r6, r0
 800adf6:	1a18      	subs	r0, r3, r0
 800adf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfa:	603e      	str	r6, [r7, #0]
 800adfc:	6018      	str	r0, [r3, #0]
 800adfe:	0028      	movs	r0, r5
 800ae00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae02:	2280      	movs	r2, #128	; 0x80
 800ae04:	0352      	lsls	r2, r2, #13
 800ae06:	4313      	orrs	r3, r2
 800ae08:	e7d6      	b.n	800adb8 <__d2b+0x28>
 800ae0a:	616c      	str	r4, [r5, #20]
 800ae0c:	e7e7      	b.n	800adde <__d2b+0x4e>
 800ae0e:	a801      	add	r0, sp, #4
 800ae10:	f7ff fd4a 	bl	800a8a8 <__lo0bits>
 800ae14:	2401      	movs	r4, #1
 800ae16:	9b01      	ldr	r3, [sp, #4]
 800ae18:	612c      	str	r4, [r5, #16]
 800ae1a:	616b      	str	r3, [r5, #20]
 800ae1c:	3020      	adds	r0, #32
 800ae1e:	e7e4      	b.n	800adea <__d2b+0x5a>
 800ae20:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <__d2b+0xc0>)
 800ae22:	18c0      	adds	r0, r0, r3
 800ae24:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <__d2b+0xc4>)
 800ae26:	6038      	str	r0, [r7, #0]
 800ae28:	18e3      	adds	r3, r4, r3
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	18eb      	adds	r3, r5, r3
 800ae2e:	6958      	ldr	r0, [r3, #20]
 800ae30:	f7ff fd20 	bl	800a874 <__hi0bits>
 800ae34:	0164      	lsls	r4, r4, #5
 800ae36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae38:	1a24      	subs	r4, r4, r0
 800ae3a:	601c      	str	r4, [r3, #0]
 800ae3c:	e7df      	b.n	800adfe <__d2b+0x6e>
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	0800ba2b 	.word	0x0800ba2b
 800ae44:	0000030a 	.word	0x0000030a
 800ae48:	0800ba9c 	.word	0x0800ba9c
 800ae4c:	fffffbcd 	.word	0xfffffbcd
 800ae50:	fffffbce 	.word	0xfffffbce
 800ae54:	3fffffff 	.word	0x3fffffff

0800ae58 <_calloc_r>:
 800ae58:	434a      	muls	r2, r1
 800ae5a:	b570      	push	{r4, r5, r6, lr}
 800ae5c:	0011      	movs	r1, r2
 800ae5e:	0015      	movs	r5, r2
 800ae60:	f000 f852 	bl	800af08 <_malloc_r>
 800ae64:	1e04      	subs	r4, r0, #0
 800ae66:	d003      	beq.n	800ae70 <_calloc_r+0x18>
 800ae68:	002a      	movs	r2, r5
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	f7fd fde5 	bl	8008a3a <memset>
 800ae70:	0020      	movs	r0, r4
 800ae72:	bd70      	pop	{r4, r5, r6, pc}

0800ae74 <_free_r>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	0005      	movs	r5, r0
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	d010      	beq.n	800ae9e <_free_r+0x2a>
 800ae7c:	1f0c      	subs	r4, r1, #4
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	da00      	bge.n	800ae86 <_free_r+0x12>
 800ae84:	18e4      	adds	r4, r4, r3
 800ae86:	0028      	movs	r0, r5
 800ae88:	f000 fbc8 	bl	800b61c <__malloc_lock>
 800ae8c:	4a1d      	ldr	r2, [pc, #116]	; (800af04 <_free_r+0x90>)
 800ae8e:	6813      	ldr	r3, [r2, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d105      	bne.n	800aea0 <_free_r+0x2c>
 800ae94:	6063      	str	r3, [r4, #4]
 800ae96:	6014      	str	r4, [r2, #0]
 800ae98:	0028      	movs	r0, r5
 800ae9a:	f000 fbc7 	bl	800b62c <__malloc_unlock>
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d908      	bls.n	800aeb6 <_free_r+0x42>
 800aea4:	6821      	ldr	r1, [r4, #0]
 800aea6:	1860      	adds	r0, r4, r1
 800aea8:	4283      	cmp	r3, r0
 800aeaa:	d1f3      	bne.n	800ae94 <_free_r+0x20>
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	1841      	adds	r1, r0, r1
 800aeb2:	6021      	str	r1, [r4, #0]
 800aeb4:	e7ee      	b.n	800ae94 <_free_r+0x20>
 800aeb6:	001a      	movs	r2, r3
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <_free_r+0x4e>
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	d9f9      	bls.n	800aeb6 <_free_r+0x42>
 800aec2:	6811      	ldr	r1, [r2, #0]
 800aec4:	1850      	adds	r0, r2, r1
 800aec6:	42a0      	cmp	r0, r4
 800aec8:	d10b      	bne.n	800aee2 <_free_r+0x6e>
 800aeca:	6820      	ldr	r0, [r4, #0]
 800aecc:	1809      	adds	r1, r1, r0
 800aece:	1850      	adds	r0, r2, r1
 800aed0:	6011      	str	r1, [r2, #0]
 800aed2:	4283      	cmp	r3, r0
 800aed4:	d1e0      	bne.n	800ae98 <_free_r+0x24>
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	1841      	adds	r1, r0, r1
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	6053      	str	r3, [r2, #4]
 800aee0:	e7da      	b.n	800ae98 <_free_r+0x24>
 800aee2:	42a0      	cmp	r0, r4
 800aee4:	d902      	bls.n	800aeec <_free_r+0x78>
 800aee6:	230c      	movs	r3, #12
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	e7d5      	b.n	800ae98 <_free_r+0x24>
 800aeec:	6821      	ldr	r1, [r4, #0]
 800aeee:	1860      	adds	r0, r4, r1
 800aef0:	4283      	cmp	r3, r0
 800aef2:	d103      	bne.n	800aefc <_free_r+0x88>
 800aef4:	6818      	ldr	r0, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	1841      	adds	r1, r0, r1
 800aefa:	6021      	str	r1, [r4, #0]
 800aefc:	6063      	str	r3, [r4, #4]
 800aefe:	6054      	str	r4, [r2, #4]
 800af00:	e7ca      	b.n	800ae98 <_free_r+0x24>
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	20001b10 	.word	0x20001b10

0800af08 <_malloc_r>:
 800af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0a:	2303      	movs	r3, #3
 800af0c:	1ccd      	adds	r5, r1, #3
 800af0e:	439d      	bics	r5, r3
 800af10:	3508      	adds	r5, #8
 800af12:	0006      	movs	r6, r0
 800af14:	2d0c      	cmp	r5, #12
 800af16:	d21f      	bcs.n	800af58 <_malloc_r+0x50>
 800af18:	250c      	movs	r5, #12
 800af1a:	42a9      	cmp	r1, r5
 800af1c:	d81e      	bhi.n	800af5c <_malloc_r+0x54>
 800af1e:	0030      	movs	r0, r6
 800af20:	f000 fb7c 	bl	800b61c <__malloc_lock>
 800af24:	4925      	ldr	r1, [pc, #148]	; (800afbc <_malloc_r+0xb4>)
 800af26:	680a      	ldr	r2, [r1, #0]
 800af28:	0014      	movs	r4, r2
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	d11a      	bne.n	800af64 <_malloc_r+0x5c>
 800af2e:	4f24      	ldr	r7, [pc, #144]	; (800afc0 <_malloc_r+0xb8>)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d104      	bne.n	800af40 <_malloc_r+0x38>
 800af36:	0021      	movs	r1, r4
 800af38:	0030      	movs	r0, r6
 800af3a:	f000 f9a5 	bl	800b288 <_sbrk_r>
 800af3e:	6038      	str	r0, [r7, #0]
 800af40:	0029      	movs	r1, r5
 800af42:	0030      	movs	r0, r6
 800af44:	f000 f9a0 	bl	800b288 <_sbrk_r>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d12b      	bne.n	800afa4 <_malloc_r+0x9c>
 800af4c:	230c      	movs	r3, #12
 800af4e:	0030      	movs	r0, r6
 800af50:	6033      	str	r3, [r6, #0]
 800af52:	f000 fb6b 	bl	800b62c <__malloc_unlock>
 800af56:	e003      	b.n	800af60 <_malloc_r+0x58>
 800af58:	2d00      	cmp	r5, #0
 800af5a:	dade      	bge.n	800af1a <_malloc_r+0x12>
 800af5c:	230c      	movs	r3, #12
 800af5e:	6033      	str	r3, [r6, #0]
 800af60:	2000      	movs	r0, #0
 800af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	1b5b      	subs	r3, r3, r5
 800af68:	d419      	bmi.n	800af9e <_malloc_r+0x96>
 800af6a:	2b0b      	cmp	r3, #11
 800af6c:	d903      	bls.n	800af76 <_malloc_r+0x6e>
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	18e4      	adds	r4, r4, r3
 800af72:	6025      	str	r5, [r4, #0]
 800af74:	e003      	b.n	800af7e <_malloc_r+0x76>
 800af76:	6863      	ldr	r3, [r4, #4]
 800af78:	42a2      	cmp	r2, r4
 800af7a:	d10e      	bne.n	800af9a <_malloc_r+0x92>
 800af7c:	600b      	str	r3, [r1, #0]
 800af7e:	0030      	movs	r0, r6
 800af80:	f000 fb54 	bl	800b62c <__malloc_unlock>
 800af84:	0020      	movs	r0, r4
 800af86:	2207      	movs	r2, #7
 800af88:	300b      	adds	r0, #11
 800af8a:	1d23      	adds	r3, r4, #4
 800af8c:	4390      	bics	r0, r2
 800af8e:	1ac2      	subs	r2, r0, r3
 800af90:	4298      	cmp	r0, r3
 800af92:	d0e6      	beq.n	800af62 <_malloc_r+0x5a>
 800af94:	1a1b      	subs	r3, r3, r0
 800af96:	50a3      	str	r3, [r4, r2]
 800af98:	e7e3      	b.n	800af62 <_malloc_r+0x5a>
 800af9a:	6053      	str	r3, [r2, #4]
 800af9c:	e7ef      	b.n	800af7e <_malloc_r+0x76>
 800af9e:	0022      	movs	r2, r4
 800afa0:	6864      	ldr	r4, [r4, #4]
 800afa2:	e7c2      	b.n	800af2a <_malloc_r+0x22>
 800afa4:	2303      	movs	r3, #3
 800afa6:	1cc4      	adds	r4, r0, #3
 800afa8:	439c      	bics	r4, r3
 800afaa:	42a0      	cmp	r0, r4
 800afac:	d0e1      	beq.n	800af72 <_malloc_r+0x6a>
 800afae:	1a21      	subs	r1, r4, r0
 800afb0:	0030      	movs	r0, r6
 800afb2:	f000 f969 	bl	800b288 <_sbrk_r>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d1db      	bne.n	800af72 <_malloc_r+0x6a>
 800afba:	e7c7      	b.n	800af4c <_malloc_r+0x44>
 800afbc:	20001b10 	.word	0x20001b10
 800afc0:	20001b14 	.word	0x20001b14

0800afc4 <__sfputc_r>:
 800afc4:	6893      	ldr	r3, [r2, #8]
 800afc6:	b510      	push	{r4, lr}
 800afc8:	3b01      	subs	r3, #1
 800afca:	6093      	str	r3, [r2, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da04      	bge.n	800afda <__sfputc_r+0x16>
 800afd0:	6994      	ldr	r4, [r2, #24]
 800afd2:	42a3      	cmp	r3, r4
 800afd4:	db07      	blt.n	800afe6 <__sfputc_r+0x22>
 800afd6:	290a      	cmp	r1, #10
 800afd8:	d005      	beq.n	800afe6 <__sfputc_r+0x22>
 800afda:	6813      	ldr	r3, [r2, #0]
 800afdc:	1c58      	adds	r0, r3, #1
 800afde:	6010      	str	r0, [r2, #0]
 800afe0:	7019      	strb	r1, [r3, #0]
 800afe2:	0008      	movs	r0, r1
 800afe4:	bd10      	pop	{r4, pc}
 800afe6:	f000 f9ad 	bl	800b344 <__swbuf_r>
 800afea:	0001      	movs	r1, r0
 800afec:	e7f9      	b.n	800afe2 <__sfputc_r+0x1e>

0800afee <__sfputs_r>:
 800afee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff0:	0006      	movs	r6, r0
 800aff2:	000f      	movs	r7, r1
 800aff4:	0014      	movs	r4, r2
 800aff6:	18d5      	adds	r5, r2, r3
 800aff8:	42ac      	cmp	r4, r5
 800affa:	d101      	bne.n	800b000 <__sfputs_r+0x12>
 800affc:	2000      	movs	r0, #0
 800affe:	e007      	b.n	800b010 <__sfputs_r+0x22>
 800b000:	7821      	ldrb	r1, [r4, #0]
 800b002:	003a      	movs	r2, r7
 800b004:	0030      	movs	r0, r6
 800b006:	f7ff ffdd 	bl	800afc4 <__sfputc_r>
 800b00a:	3401      	adds	r4, #1
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d1f3      	bne.n	800aff8 <__sfputs_r+0xa>
 800b010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b014 <_vfiprintf_r>:
 800b014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b016:	b0a1      	sub	sp, #132	; 0x84
 800b018:	0006      	movs	r6, r0
 800b01a:	000c      	movs	r4, r1
 800b01c:	001f      	movs	r7, r3
 800b01e:	9203      	str	r2, [sp, #12]
 800b020:	2800      	cmp	r0, #0
 800b022:	d004      	beq.n	800b02e <_vfiprintf_r+0x1a>
 800b024:	6983      	ldr	r3, [r0, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <_vfiprintf_r+0x1a>
 800b02a:	f7ff fa4d 	bl	800a4c8 <__sinit>
 800b02e:	4b8e      	ldr	r3, [pc, #568]	; (800b268 <_vfiprintf_r+0x254>)
 800b030:	429c      	cmp	r4, r3
 800b032:	d11c      	bne.n	800b06e <_vfiprintf_r+0x5a>
 800b034:	6874      	ldr	r4, [r6, #4]
 800b036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b038:	07db      	lsls	r3, r3, #31
 800b03a:	d405      	bmi.n	800b048 <_vfiprintf_r+0x34>
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	059b      	lsls	r3, r3, #22
 800b040:	d402      	bmi.n	800b048 <_vfiprintf_r+0x34>
 800b042:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b044:	f7ff fae5 	bl	800a612 <__retarget_lock_acquire_recursive>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	071b      	lsls	r3, r3, #28
 800b04c:	d502      	bpl.n	800b054 <_vfiprintf_r+0x40>
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d11d      	bne.n	800b090 <_vfiprintf_r+0x7c>
 800b054:	0021      	movs	r1, r4
 800b056:	0030      	movs	r0, r6
 800b058:	f000 f9de 	bl	800b418 <__swsetup_r>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d017      	beq.n	800b090 <_vfiprintf_r+0x7c>
 800b060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b062:	07db      	lsls	r3, r3, #31
 800b064:	d50d      	bpl.n	800b082 <_vfiprintf_r+0x6e>
 800b066:	2001      	movs	r0, #1
 800b068:	4240      	negs	r0, r0
 800b06a:	b021      	add	sp, #132	; 0x84
 800b06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06e:	4b7f      	ldr	r3, [pc, #508]	; (800b26c <_vfiprintf_r+0x258>)
 800b070:	429c      	cmp	r4, r3
 800b072:	d101      	bne.n	800b078 <_vfiprintf_r+0x64>
 800b074:	68b4      	ldr	r4, [r6, #8]
 800b076:	e7de      	b.n	800b036 <_vfiprintf_r+0x22>
 800b078:	4b7d      	ldr	r3, [pc, #500]	; (800b270 <_vfiprintf_r+0x25c>)
 800b07a:	429c      	cmp	r4, r3
 800b07c:	d1db      	bne.n	800b036 <_vfiprintf_r+0x22>
 800b07e:	68f4      	ldr	r4, [r6, #12]
 800b080:	e7d9      	b.n	800b036 <_vfiprintf_r+0x22>
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	059b      	lsls	r3, r3, #22
 800b086:	d4ee      	bmi.n	800b066 <_vfiprintf_r+0x52>
 800b088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b08a:	f7ff fac3 	bl	800a614 <__retarget_lock_release_recursive>
 800b08e:	e7ea      	b.n	800b066 <_vfiprintf_r+0x52>
 800b090:	2300      	movs	r3, #0
 800b092:	ad08      	add	r5, sp, #32
 800b094:	616b      	str	r3, [r5, #20]
 800b096:	3320      	adds	r3, #32
 800b098:	766b      	strb	r3, [r5, #25]
 800b09a:	3310      	adds	r3, #16
 800b09c:	76ab      	strb	r3, [r5, #26]
 800b09e:	9707      	str	r7, [sp, #28]
 800b0a0:	9f03      	ldr	r7, [sp, #12]
 800b0a2:	783b      	ldrb	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <_vfiprintf_r+0x98>
 800b0a8:	2b25      	cmp	r3, #37	; 0x25
 800b0aa:	d14e      	bne.n	800b14a <_vfiprintf_r+0x136>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	1afb      	subs	r3, r7, r3
 800b0b0:	9305      	str	r3, [sp, #20]
 800b0b2:	9b03      	ldr	r3, [sp, #12]
 800b0b4:	429f      	cmp	r7, r3
 800b0b6:	d00d      	beq.n	800b0d4 <_vfiprintf_r+0xc0>
 800b0b8:	9b05      	ldr	r3, [sp, #20]
 800b0ba:	0021      	movs	r1, r4
 800b0bc:	0030      	movs	r0, r6
 800b0be:	9a03      	ldr	r2, [sp, #12]
 800b0c0:	f7ff ff95 	bl	800afee <__sfputs_r>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d100      	bne.n	800b0ca <_vfiprintf_r+0xb6>
 800b0c8:	e0b5      	b.n	800b236 <_vfiprintf_r+0x222>
 800b0ca:	696a      	ldr	r2, [r5, #20]
 800b0cc:	9b05      	ldr	r3, [sp, #20]
 800b0ce:	4694      	mov	ip, r2
 800b0d0:	4463      	add	r3, ip
 800b0d2:	616b      	str	r3, [r5, #20]
 800b0d4:	783b      	ldrb	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d100      	bne.n	800b0dc <_vfiprintf_r+0xc8>
 800b0da:	e0ac      	b.n	800b236 <_vfiprintf_r+0x222>
 800b0dc:	2201      	movs	r2, #1
 800b0de:	1c7b      	adds	r3, r7, #1
 800b0e0:	9303      	str	r3, [sp, #12]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4252      	negs	r2, r2
 800b0e6:	606a      	str	r2, [r5, #4]
 800b0e8:	a904      	add	r1, sp, #16
 800b0ea:	3254      	adds	r2, #84	; 0x54
 800b0ec:	1852      	adds	r2, r2, r1
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	60eb      	str	r3, [r5, #12]
 800b0f2:	60ab      	str	r3, [r5, #8]
 800b0f4:	7013      	strb	r3, [r2, #0]
 800b0f6:	65ab      	str	r3, [r5, #88]	; 0x58
 800b0f8:	9b03      	ldr	r3, [sp, #12]
 800b0fa:	2205      	movs	r2, #5
 800b0fc:	7819      	ldrb	r1, [r3, #0]
 800b0fe:	485d      	ldr	r0, [pc, #372]	; (800b274 <_vfiprintf_r+0x260>)
 800b100:	f7ff fb00 	bl	800a704 <memchr>
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	1c5f      	adds	r7, r3, #1
 800b108:	2800      	cmp	r0, #0
 800b10a:	d120      	bne.n	800b14e <_vfiprintf_r+0x13a>
 800b10c:	682a      	ldr	r2, [r5, #0]
 800b10e:	06d3      	lsls	r3, r2, #27
 800b110:	d504      	bpl.n	800b11c <_vfiprintf_r+0x108>
 800b112:	2353      	movs	r3, #83	; 0x53
 800b114:	a904      	add	r1, sp, #16
 800b116:	185b      	adds	r3, r3, r1
 800b118:	2120      	movs	r1, #32
 800b11a:	7019      	strb	r1, [r3, #0]
 800b11c:	0713      	lsls	r3, r2, #28
 800b11e:	d504      	bpl.n	800b12a <_vfiprintf_r+0x116>
 800b120:	2353      	movs	r3, #83	; 0x53
 800b122:	a904      	add	r1, sp, #16
 800b124:	185b      	adds	r3, r3, r1
 800b126:	212b      	movs	r1, #43	; 0x2b
 800b128:	7019      	strb	r1, [r3, #0]
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b2a      	cmp	r3, #42	; 0x2a
 800b130:	d016      	beq.n	800b160 <_vfiprintf_r+0x14c>
 800b132:	2100      	movs	r1, #0
 800b134:	68eb      	ldr	r3, [r5, #12]
 800b136:	9f03      	ldr	r7, [sp, #12]
 800b138:	783a      	ldrb	r2, [r7, #0]
 800b13a:	1c78      	adds	r0, r7, #1
 800b13c:	3a30      	subs	r2, #48	; 0x30
 800b13e:	4684      	mov	ip, r0
 800b140:	2a09      	cmp	r2, #9
 800b142:	d94f      	bls.n	800b1e4 <_vfiprintf_r+0x1d0>
 800b144:	2900      	cmp	r1, #0
 800b146:	d111      	bne.n	800b16c <_vfiprintf_r+0x158>
 800b148:	e017      	b.n	800b17a <_vfiprintf_r+0x166>
 800b14a:	3701      	adds	r7, #1
 800b14c:	e7a9      	b.n	800b0a2 <_vfiprintf_r+0x8e>
 800b14e:	4b49      	ldr	r3, [pc, #292]	; (800b274 <_vfiprintf_r+0x260>)
 800b150:	682a      	ldr	r2, [r5, #0]
 800b152:	1ac0      	subs	r0, r0, r3
 800b154:	2301      	movs	r3, #1
 800b156:	4083      	lsls	r3, r0
 800b158:	4313      	orrs	r3, r2
 800b15a:	602b      	str	r3, [r5, #0]
 800b15c:	9703      	str	r7, [sp, #12]
 800b15e:	e7cb      	b.n	800b0f8 <_vfiprintf_r+0xe4>
 800b160:	9b07      	ldr	r3, [sp, #28]
 800b162:	1d19      	adds	r1, r3, #4
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	9107      	str	r1, [sp, #28]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	db01      	blt.n	800b170 <_vfiprintf_r+0x15c>
 800b16c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b16e:	e004      	b.n	800b17a <_vfiprintf_r+0x166>
 800b170:	425b      	negs	r3, r3
 800b172:	60eb      	str	r3, [r5, #12]
 800b174:	2302      	movs	r3, #2
 800b176:	4313      	orrs	r3, r2
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	783b      	ldrb	r3, [r7, #0]
 800b17c:	2b2e      	cmp	r3, #46	; 0x2e
 800b17e:	d10a      	bne.n	800b196 <_vfiprintf_r+0x182>
 800b180:	787b      	ldrb	r3, [r7, #1]
 800b182:	2b2a      	cmp	r3, #42	; 0x2a
 800b184:	d137      	bne.n	800b1f6 <_vfiprintf_r+0x1e2>
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	3702      	adds	r7, #2
 800b18a:	1d1a      	adds	r2, r3, #4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9207      	str	r2, [sp, #28]
 800b190:	2b00      	cmp	r3, #0
 800b192:	db2d      	blt.n	800b1f0 <_vfiprintf_r+0x1dc>
 800b194:	9309      	str	r3, [sp, #36]	; 0x24
 800b196:	2203      	movs	r2, #3
 800b198:	7839      	ldrb	r1, [r7, #0]
 800b19a:	4837      	ldr	r0, [pc, #220]	; (800b278 <_vfiprintf_r+0x264>)
 800b19c:	f7ff fab2 	bl	800a704 <memchr>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d007      	beq.n	800b1b4 <_vfiprintf_r+0x1a0>
 800b1a4:	4b34      	ldr	r3, [pc, #208]	; (800b278 <_vfiprintf_r+0x264>)
 800b1a6:	682a      	ldr	r2, [r5, #0]
 800b1a8:	1ac0      	subs	r0, r0, r3
 800b1aa:	2340      	movs	r3, #64	; 0x40
 800b1ac:	4083      	lsls	r3, r0
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	3701      	adds	r7, #1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	7839      	ldrb	r1, [r7, #0]
 800b1b6:	1c7b      	adds	r3, r7, #1
 800b1b8:	2206      	movs	r2, #6
 800b1ba:	4830      	ldr	r0, [pc, #192]	; (800b27c <_vfiprintf_r+0x268>)
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	7629      	strb	r1, [r5, #24]
 800b1c0:	f7ff faa0 	bl	800a704 <memchr>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d045      	beq.n	800b254 <_vfiprintf_r+0x240>
 800b1c8:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <_vfiprintf_r+0x26c>)
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d127      	bne.n	800b21e <_vfiprintf_r+0x20a>
 800b1ce:	2207      	movs	r2, #7
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	3307      	adds	r3, #7
 800b1d4:	4393      	bics	r3, r2
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	9307      	str	r3, [sp, #28]
 800b1da:	696b      	ldr	r3, [r5, #20]
 800b1dc:	9a04      	ldr	r2, [sp, #16]
 800b1de:	189b      	adds	r3, r3, r2
 800b1e0:	616b      	str	r3, [r5, #20]
 800b1e2:	e75d      	b.n	800b0a0 <_vfiprintf_r+0x8c>
 800b1e4:	210a      	movs	r1, #10
 800b1e6:	434b      	muls	r3, r1
 800b1e8:	4667      	mov	r7, ip
 800b1ea:	189b      	adds	r3, r3, r2
 800b1ec:	3909      	subs	r1, #9
 800b1ee:	e7a3      	b.n	800b138 <_vfiprintf_r+0x124>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	425b      	negs	r3, r3
 800b1f4:	e7ce      	b.n	800b194 <_vfiprintf_r+0x180>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	001a      	movs	r2, r3
 800b1fa:	3701      	adds	r7, #1
 800b1fc:	606b      	str	r3, [r5, #4]
 800b1fe:	7839      	ldrb	r1, [r7, #0]
 800b200:	1c78      	adds	r0, r7, #1
 800b202:	3930      	subs	r1, #48	; 0x30
 800b204:	4684      	mov	ip, r0
 800b206:	2909      	cmp	r1, #9
 800b208:	d903      	bls.n	800b212 <_vfiprintf_r+0x1fe>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0c3      	beq.n	800b196 <_vfiprintf_r+0x182>
 800b20e:	9209      	str	r2, [sp, #36]	; 0x24
 800b210:	e7c1      	b.n	800b196 <_vfiprintf_r+0x182>
 800b212:	230a      	movs	r3, #10
 800b214:	435a      	muls	r2, r3
 800b216:	4667      	mov	r7, ip
 800b218:	1852      	adds	r2, r2, r1
 800b21a:	3b09      	subs	r3, #9
 800b21c:	e7ef      	b.n	800b1fe <_vfiprintf_r+0x1ea>
 800b21e:	ab07      	add	r3, sp, #28
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	0022      	movs	r2, r4
 800b224:	0029      	movs	r1, r5
 800b226:	0030      	movs	r0, r6
 800b228:	4b16      	ldr	r3, [pc, #88]	; (800b284 <_vfiprintf_r+0x270>)
 800b22a:	f7fd fcb9 	bl	8008ba0 <_printf_float>
 800b22e:	9004      	str	r0, [sp, #16]
 800b230:	9b04      	ldr	r3, [sp, #16]
 800b232:	3301      	adds	r3, #1
 800b234:	d1d1      	bne.n	800b1da <_vfiprintf_r+0x1c6>
 800b236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b238:	07db      	lsls	r3, r3, #31
 800b23a:	d405      	bmi.n	800b248 <_vfiprintf_r+0x234>
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	059b      	lsls	r3, r3, #22
 800b240:	d402      	bmi.n	800b248 <_vfiprintf_r+0x234>
 800b242:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b244:	f7ff f9e6 	bl	800a614 <__retarget_lock_release_recursive>
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	065b      	lsls	r3, r3, #25
 800b24c:	d500      	bpl.n	800b250 <_vfiprintf_r+0x23c>
 800b24e:	e70a      	b.n	800b066 <_vfiprintf_r+0x52>
 800b250:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b252:	e70a      	b.n	800b06a <_vfiprintf_r+0x56>
 800b254:	ab07      	add	r3, sp, #28
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	0022      	movs	r2, r4
 800b25a:	0029      	movs	r1, r5
 800b25c:	0030      	movs	r0, r6
 800b25e:	4b09      	ldr	r3, [pc, #36]	; (800b284 <_vfiprintf_r+0x270>)
 800b260:	f7fd ff5c 	bl	800911c <_printf_i>
 800b264:	e7e3      	b.n	800b22e <_vfiprintf_r+0x21a>
 800b266:	46c0      	nop			; (mov r8, r8)
 800b268:	0800ba5c 	.word	0x0800ba5c
 800b26c:	0800ba7c 	.word	0x0800ba7c
 800b270:	0800ba3c 	.word	0x0800ba3c
 800b274:	0800bbfc 	.word	0x0800bbfc
 800b278:	0800bc02 	.word	0x0800bc02
 800b27c:	0800bc06 	.word	0x0800bc06
 800b280:	08008ba1 	.word	0x08008ba1
 800b284:	0800afef 	.word	0x0800afef

0800b288 <_sbrk_r>:
 800b288:	2300      	movs	r3, #0
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	4d06      	ldr	r5, [pc, #24]	; (800b2a8 <_sbrk_r+0x20>)
 800b28e:	0004      	movs	r4, r0
 800b290:	0008      	movs	r0, r1
 800b292:	602b      	str	r3, [r5, #0]
 800b294:	f7f7 fe4a 	bl	8002f2c <_sbrk>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d103      	bne.n	800b2a4 <_sbrk_r+0x1c>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d000      	beq.n	800b2a4 <_sbrk_r+0x1c>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	bd70      	pop	{r4, r5, r6, pc}
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	20001d60 	.word	0x20001d60

0800b2ac <__sread>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	000c      	movs	r4, r1
 800b2b0:	250e      	movs	r5, #14
 800b2b2:	5f49      	ldrsh	r1, [r1, r5]
 800b2b4:	f000 f9c2 	bl	800b63c <_read_r>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	db03      	blt.n	800b2c4 <__sread+0x18>
 800b2bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b2be:	181b      	adds	r3, r3, r0
 800b2c0:	6563      	str	r3, [r4, #84]	; 0x54
 800b2c2:	bd70      	pop	{r4, r5, r6, pc}
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	4a02      	ldr	r2, [pc, #8]	; (800b2d0 <__sread+0x24>)
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	e7f9      	b.n	800b2c2 <__sread+0x16>
 800b2ce:	46c0      	nop			; (mov r8, r8)
 800b2d0:	ffffefff 	.word	0xffffefff

0800b2d4 <__swrite>:
 800b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d6:	001f      	movs	r7, r3
 800b2d8:	898b      	ldrh	r3, [r1, #12]
 800b2da:	0005      	movs	r5, r0
 800b2dc:	000c      	movs	r4, r1
 800b2de:	0016      	movs	r6, r2
 800b2e0:	05db      	lsls	r3, r3, #23
 800b2e2:	d505      	bpl.n	800b2f0 <__swrite+0x1c>
 800b2e4:	230e      	movs	r3, #14
 800b2e6:	5ec9      	ldrsh	r1, [r1, r3]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	f000 f970 	bl	800b5d0 <_lseek_r>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	4a05      	ldr	r2, [pc, #20]	; (800b308 <__swrite+0x34>)
 800b2f4:	0028      	movs	r0, r5
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	0032      	movs	r2, r6
 800b2fc:	230e      	movs	r3, #14
 800b2fe:	5ee1      	ldrsh	r1, [r4, r3]
 800b300:	003b      	movs	r3, r7
 800b302:	f000 f875 	bl	800b3f0 <_write_r>
 800b306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b308:	ffffefff 	.word	0xffffefff

0800b30c <__sseek>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	000c      	movs	r4, r1
 800b310:	250e      	movs	r5, #14
 800b312:	5f49      	ldrsh	r1, [r1, r5]
 800b314:	f000 f95c 	bl	800b5d0 <_lseek_r>
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	1c42      	adds	r2, r0, #1
 800b31c:	d103      	bne.n	800b326 <__sseek+0x1a>
 800b31e:	4a05      	ldr	r2, [pc, #20]	; (800b334 <__sseek+0x28>)
 800b320:	4013      	ands	r3, r2
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	bd70      	pop	{r4, r5, r6, pc}
 800b326:	2280      	movs	r2, #128	; 0x80
 800b328:	0152      	lsls	r2, r2, #5
 800b32a:	4313      	orrs	r3, r2
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	6560      	str	r0, [r4, #84]	; 0x54
 800b330:	e7f8      	b.n	800b324 <__sseek+0x18>
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	ffffefff 	.word	0xffffefff

0800b338 <__sclose>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	230e      	movs	r3, #14
 800b33c:	5ec9      	ldrsh	r1, [r1, r3]
 800b33e:	f000 f901 	bl	800b544 <_close_r>
 800b342:	bd10      	pop	{r4, pc}

0800b344 <__swbuf_r>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	0005      	movs	r5, r0
 800b348:	000e      	movs	r6, r1
 800b34a:	0014      	movs	r4, r2
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d004      	beq.n	800b35a <__swbuf_r+0x16>
 800b350:	6983      	ldr	r3, [r0, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <__swbuf_r+0x16>
 800b356:	f7ff f8b7 	bl	800a4c8 <__sinit>
 800b35a:	4b22      	ldr	r3, [pc, #136]	; (800b3e4 <__swbuf_r+0xa0>)
 800b35c:	429c      	cmp	r4, r3
 800b35e:	d12e      	bne.n	800b3be <__swbuf_r+0x7a>
 800b360:	686c      	ldr	r4, [r5, #4]
 800b362:	69a3      	ldr	r3, [r4, #24]
 800b364:	60a3      	str	r3, [r4, #8]
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	071b      	lsls	r3, r3, #28
 800b36a:	d532      	bpl.n	800b3d2 <__swbuf_r+0x8e>
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d02f      	beq.n	800b3d2 <__swbuf_r+0x8e>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	6922      	ldr	r2, [r4, #16]
 800b376:	b2f7      	uxtb	r7, r6
 800b378:	1a98      	subs	r0, r3, r2
 800b37a:	6963      	ldr	r3, [r4, #20]
 800b37c:	b2f6      	uxtb	r6, r6
 800b37e:	4283      	cmp	r3, r0
 800b380:	dc05      	bgt.n	800b38e <__swbuf_r+0x4a>
 800b382:	0021      	movs	r1, r4
 800b384:	0028      	movs	r0, r5
 800b386:	f7fe fffd 	bl	800a384 <_fflush_r>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d127      	bne.n	800b3de <__swbuf_r+0x9a>
 800b38e:	68a3      	ldr	r3, [r4, #8]
 800b390:	3001      	adds	r0, #1
 800b392:	3b01      	subs	r3, #1
 800b394:	60a3      	str	r3, [r4, #8]
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	6022      	str	r2, [r4, #0]
 800b39c:	701f      	strb	r7, [r3, #0]
 800b39e:	6963      	ldr	r3, [r4, #20]
 800b3a0:	4283      	cmp	r3, r0
 800b3a2:	d004      	beq.n	800b3ae <__swbuf_r+0x6a>
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	07db      	lsls	r3, r3, #31
 800b3a8:	d507      	bpl.n	800b3ba <__swbuf_r+0x76>
 800b3aa:	2e0a      	cmp	r6, #10
 800b3ac:	d105      	bne.n	800b3ba <__swbuf_r+0x76>
 800b3ae:	0021      	movs	r1, r4
 800b3b0:	0028      	movs	r0, r5
 800b3b2:	f7fe ffe7 	bl	800a384 <_fflush_r>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d111      	bne.n	800b3de <__swbuf_r+0x9a>
 800b3ba:	0030      	movs	r0, r6
 800b3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3be:	4b0a      	ldr	r3, [pc, #40]	; (800b3e8 <__swbuf_r+0xa4>)
 800b3c0:	429c      	cmp	r4, r3
 800b3c2:	d101      	bne.n	800b3c8 <__swbuf_r+0x84>
 800b3c4:	68ac      	ldr	r4, [r5, #8]
 800b3c6:	e7cc      	b.n	800b362 <__swbuf_r+0x1e>
 800b3c8:	4b08      	ldr	r3, [pc, #32]	; (800b3ec <__swbuf_r+0xa8>)
 800b3ca:	429c      	cmp	r4, r3
 800b3cc:	d1c9      	bne.n	800b362 <__swbuf_r+0x1e>
 800b3ce:	68ec      	ldr	r4, [r5, #12]
 800b3d0:	e7c7      	b.n	800b362 <__swbuf_r+0x1e>
 800b3d2:	0021      	movs	r1, r4
 800b3d4:	0028      	movs	r0, r5
 800b3d6:	f000 f81f 	bl	800b418 <__swsetup_r>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d0c9      	beq.n	800b372 <__swbuf_r+0x2e>
 800b3de:	2601      	movs	r6, #1
 800b3e0:	4276      	negs	r6, r6
 800b3e2:	e7ea      	b.n	800b3ba <__swbuf_r+0x76>
 800b3e4:	0800ba5c 	.word	0x0800ba5c
 800b3e8:	0800ba7c 	.word	0x0800ba7c
 800b3ec:	0800ba3c 	.word	0x0800ba3c

0800b3f0 <_write_r>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	0004      	movs	r4, r0
 800b3f4:	0008      	movs	r0, r1
 800b3f6:	0011      	movs	r1, r2
 800b3f8:	001a      	movs	r2, r3
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4d05      	ldr	r5, [pc, #20]	; (800b414 <_write_r+0x24>)
 800b3fe:	602b      	str	r3, [r5, #0]
 800b400:	f7f7 fd4b 	bl	8002e9a <_write>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d103      	bne.n	800b410 <_write_r+0x20>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d000      	beq.n	800b410 <_write_r+0x20>
 800b40e:	6023      	str	r3, [r4, #0]
 800b410:	bd70      	pop	{r4, r5, r6, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	20001d60 	.word	0x20001d60

0800b418 <__swsetup_r>:
 800b418:	4b37      	ldr	r3, [pc, #220]	; (800b4f8 <__swsetup_r+0xe0>)
 800b41a:	b570      	push	{r4, r5, r6, lr}
 800b41c:	681d      	ldr	r5, [r3, #0]
 800b41e:	0006      	movs	r6, r0
 800b420:	000c      	movs	r4, r1
 800b422:	2d00      	cmp	r5, #0
 800b424:	d005      	beq.n	800b432 <__swsetup_r+0x1a>
 800b426:	69ab      	ldr	r3, [r5, #24]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <__swsetup_r+0x1a>
 800b42c:	0028      	movs	r0, r5
 800b42e:	f7ff f84b 	bl	800a4c8 <__sinit>
 800b432:	4b32      	ldr	r3, [pc, #200]	; (800b4fc <__swsetup_r+0xe4>)
 800b434:	429c      	cmp	r4, r3
 800b436:	d10f      	bne.n	800b458 <__swsetup_r+0x40>
 800b438:	686c      	ldr	r4, [r5, #4]
 800b43a:	230c      	movs	r3, #12
 800b43c:	5ee2      	ldrsh	r2, [r4, r3]
 800b43e:	b293      	uxth	r3, r2
 800b440:	0711      	lsls	r1, r2, #28
 800b442:	d42d      	bmi.n	800b4a0 <__swsetup_r+0x88>
 800b444:	06d9      	lsls	r1, r3, #27
 800b446:	d411      	bmi.n	800b46c <__swsetup_r+0x54>
 800b448:	2309      	movs	r3, #9
 800b44a:	2001      	movs	r0, #1
 800b44c:	6033      	str	r3, [r6, #0]
 800b44e:	3337      	adds	r3, #55	; 0x37
 800b450:	4313      	orrs	r3, r2
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	4240      	negs	r0, r0
 800b456:	bd70      	pop	{r4, r5, r6, pc}
 800b458:	4b29      	ldr	r3, [pc, #164]	; (800b500 <__swsetup_r+0xe8>)
 800b45a:	429c      	cmp	r4, r3
 800b45c:	d101      	bne.n	800b462 <__swsetup_r+0x4a>
 800b45e:	68ac      	ldr	r4, [r5, #8]
 800b460:	e7eb      	b.n	800b43a <__swsetup_r+0x22>
 800b462:	4b28      	ldr	r3, [pc, #160]	; (800b504 <__swsetup_r+0xec>)
 800b464:	429c      	cmp	r4, r3
 800b466:	d1e8      	bne.n	800b43a <__swsetup_r+0x22>
 800b468:	68ec      	ldr	r4, [r5, #12]
 800b46a:	e7e6      	b.n	800b43a <__swsetup_r+0x22>
 800b46c:	075b      	lsls	r3, r3, #29
 800b46e:	d513      	bpl.n	800b498 <__swsetup_r+0x80>
 800b470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b472:	2900      	cmp	r1, #0
 800b474:	d008      	beq.n	800b488 <__swsetup_r+0x70>
 800b476:	0023      	movs	r3, r4
 800b478:	3344      	adds	r3, #68	; 0x44
 800b47a:	4299      	cmp	r1, r3
 800b47c:	d002      	beq.n	800b484 <__swsetup_r+0x6c>
 800b47e:	0030      	movs	r0, r6
 800b480:	f7ff fcf8 	bl	800ae74 <_free_r>
 800b484:	2300      	movs	r3, #0
 800b486:	6363      	str	r3, [r4, #52]	; 0x34
 800b488:	2224      	movs	r2, #36	; 0x24
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	4393      	bics	r3, r2
 800b48e:	81a3      	strh	r3, [r4, #12]
 800b490:	2300      	movs	r3, #0
 800b492:	6063      	str	r3, [r4, #4]
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	6023      	str	r3, [r4, #0]
 800b498:	2308      	movs	r3, #8
 800b49a:	89a2      	ldrh	r2, [r4, #12]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10b      	bne.n	800b4be <__swsetup_r+0xa6>
 800b4a6:	21a0      	movs	r1, #160	; 0xa0
 800b4a8:	2280      	movs	r2, #128	; 0x80
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	0089      	lsls	r1, r1, #2
 800b4ae:	0092      	lsls	r2, r2, #2
 800b4b0:	400b      	ands	r3, r1
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d003      	beq.n	800b4be <__swsetup_r+0xa6>
 800b4b6:	0021      	movs	r1, r4
 800b4b8:	0030      	movs	r0, r6
 800b4ba:	f7ff f8d5 	bl	800a668 <__smakebuf_r>
 800b4be:	220c      	movs	r2, #12
 800b4c0:	5ea3      	ldrsh	r3, [r4, r2]
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	001a      	movs	r2, r3
 800b4c6:	b299      	uxth	r1, r3
 800b4c8:	4002      	ands	r2, r0
 800b4ca:	4203      	tst	r3, r0
 800b4cc:	d00f      	beq.n	800b4ee <__swsetup_r+0xd6>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	60a2      	str	r2, [r4, #8]
 800b4d2:	6962      	ldr	r2, [r4, #20]
 800b4d4:	4252      	negs	r2, r2
 800b4d6:	61a2      	str	r2, [r4, #24]
 800b4d8:	2000      	movs	r0, #0
 800b4da:	6922      	ldr	r2, [r4, #16]
 800b4dc:	4282      	cmp	r2, r0
 800b4de:	d1ba      	bne.n	800b456 <__swsetup_r+0x3e>
 800b4e0:	060a      	lsls	r2, r1, #24
 800b4e2:	d5b8      	bpl.n	800b456 <__swsetup_r+0x3e>
 800b4e4:	2240      	movs	r2, #64	; 0x40
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	81a3      	strh	r3, [r4, #12]
 800b4ea:	3801      	subs	r0, #1
 800b4ec:	e7b3      	b.n	800b456 <__swsetup_r+0x3e>
 800b4ee:	0788      	lsls	r0, r1, #30
 800b4f0:	d400      	bmi.n	800b4f4 <__swsetup_r+0xdc>
 800b4f2:	6962      	ldr	r2, [r4, #20]
 800b4f4:	60a2      	str	r2, [r4, #8]
 800b4f6:	e7ef      	b.n	800b4d8 <__swsetup_r+0xc0>
 800b4f8:	20000018 	.word	0x20000018
 800b4fc:	0800ba5c 	.word	0x0800ba5c
 800b500:	0800ba7c 	.word	0x0800ba7c
 800b504:	0800ba3c 	.word	0x0800ba3c

0800b508 <__assert_func>:
 800b508:	b530      	push	{r4, r5, lr}
 800b50a:	0014      	movs	r4, r2
 800b50c:	001a      	movs	r2, r3
 800b50e:	4b09      	ldr	r3, [pc, #36]	; (800b534 <__assert_func+0x2c>)
 800b510:	0005      	movs	r5, r0
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	b085      	sub	sp, #20
 800b516:	68d8      	ldr	r0, [r3, #12]
 800b518:	4b07      	ldr	r3, [pc, #28]	; (800b538 <__assert_func+0x30>)
 800b51a:	2c00      	cmp	r4, #0
 800b51c:	d101      	bne.n	800b522 <__assert_func+0x1a>
 800b51e:	4b07      	ldr	r3, [pc, #28]	; (800b53c <__assert_func+0x34>)
 800b520:	001c      	movs	r4, r3
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	9100      	str	r1, [sp, #0]
 800b526:	002b      	movs	r3, r5
 800b528:	4905      	ldr	r1, [pc, #20]	; (800b540 <__assert_func+0x38>)
 800b52a:	9402      	str	r4, [sp, #8]
 800b52c:	f000 f81c 	bl	800b568 <fiprintf>
 800b530:	f000 f8a5 	bl	800b67e <abort>
 800b534:	20000018 	.word	0x20000018
 800b538:	0800bc0d 	.word	0x0800bc0d
 800b53c:	0800bc48 	.word	0x0800bc48
 800b540:	0800bc1a 	.word	0x0800bc1a

0800b544 <_close_r>:
 800b544:	2300      	movs	r3, #0
 800b546:	b570      	push	{r4, r5, r6, lr}
 800b548:	4d06      	ldr	r5, [pc, #24]	; (800b564 <_close_r+0x20>)
 800b54a:	0004      	movs	r4, r0
 800b54c:	0008      	movs	r0, r1
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	f7f7 fcbf 	bl	8002ed2 <_close>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d103      	bne.n	800b560 <_close_r+0x1c>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d000      	beq.n	800b560 <_close_r+0x1c>
 800b55e:	6023      	str	r3, [r4, #0]
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	46c0      	nop			; (mov r8, r8)
 800b564:	20001d60 	.word	0x20001d60

0800b568 <fiprintf>:
 800b568:	b40e      	push	{r1, r2, r3}
 800b56a:	b503      	push	{r0, r1, lr}
 800b56c:	0001      	movs	r1, r0
 800b56e:	ab03      	add	r3, sp, #12
 800b570:	4804      	ldr	r0, [pc, #16]	; (800b584 <fiprintf+0x1c>)
 800b572:	cb04      	ldmia	r3!, {r2}
 800b574:	6800      	ldr	r0, [r0, #0]
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	f7ff fd4c 	bl	800b014 <_vfiprintf_r>
 800b57c:	b002      	add	sp, #8
 800b57e:	bc08      	pop	{r3}
 800b580:	b003      	add	sp, #12
 800b582:	4718      	bx	r3
 800b584:	20000018 	.word	0x20000018

0800b588 <_fstat_r>:
 800b588:	2300      	movs	r3, #0
 800b58a:	b570      	push	{r4, r5, r6, lr}
 800b58c:	4d06      	ldr	r5, [pc, #24]	; (800b5a8 <_fstat_r+0x20>)
 800b58e:	0004      	movs	r4, r0
 800b590:	0008      	movs	r0, r1
 800b592:	0011      	movs	r1, r2
 800b594:	602b      	str	r3, [r5, #0]
 800b596:	f7f7 fca6 	bl	8002ee6 <_fstat>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	d103      	bne.n	800b5a6 <_fstat_r+0x1e>
 800b59e:	682b      	ldr	r3, [r5, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d000      	beq.n	800b5a6 <_fstat_r+0x1e>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	20001d60 	.word	0x20001d60

0800b5ac <_isatty_r>:
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	b570      	push	{r4, r5, r6, lr}
 800b5b0:	4d06      	ldr	r5, [pc, #24]	; (800b5cc <_isatty_r+0x20>)
 800b5b2:	0004      	movs	r4, r0
 800b5b4:	0008      	movs	r0, r1
 800b5b6:	602b      	str	r3, [r5, #0]
 800b5b8:	f7f7 fca3 	bl	8002f02 <_isatty>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d103      	bne.n	800b5c8 <_isatty_r+0x1c>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d000      	beq.n	800b5c8 <_isatty_r+0x1c>
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	20001d60 	.word	0x20001d60

0800b5d0 <_lseek_r>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	0004      	movs	r4, r0
 800b5d4:	0008      	movs	r0, r1
 800b5d6:	0011      	movs	r1, r2
 800b5d8:	001a      	movs	r2, r3
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4d05      	ldr	r5, [pc, #20]	; (800b5f4 <_lseek_r+0x24>)
 800b5de:	602b      	str	r3, [r5, #0]
 800b5e0:	f7f7 fc98 	bl	8002f14 <_lseek>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d103      	bne.n	800b5f0 <_lseek_r+0x20>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d000      	beq.n	800b5f0 <_lseek_r+0x20>
 800b5ee:	6023      	str	r3, [r4, #0]
 800b5f0:	bd70      	pop	{r4, r5, r6, pc}
 800b5f2:	46c0      	nop			; (mov r8, r8)
 800b5f4:	20001d60 	.word	0x20001d60

0800b5f8 <__ascii_mbtowc>:
 800b5f8:	b082      	sub	sp, #8
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	d100      	bne.n	800b600 <__ascii_mbtowc+0x8>
 800b5fe:	a901      	add	r1, sp, #4
 800b600:	1e10      	subs	r0, r2, #0
 800b602:	d006      	beq.n	800b612 <__ascii_mbtowc+0x1a>
 800b604:	2b00      	cmp	r3, #0
 800b606:	d006      	beq.n	800b616 <__ascii_mbtowc+0x1e>
 800b608:	7813      	ldrb	r3, [r2, #0]
 800b60a:	600b      	str	r3, [r1, #0]
 800b60c:	7810      	ldrb	r0, [r2, #0]
 800b60e:	1e43      	subs	r3, r0, #1
 800b610:	4198      	sbcs	r0, r3
 800b612:	b002      	add	sp, #8
 800b614:	4770      	bx	lr
 800b616:	2002      	movs	r0, #2
 800b618:	4240      	negs	r0, r0
 800b61a:	e7fa      	b.n	800b612 <__ascii_mbtowc+0x1a>

0800b61c <__malloc_lock>:
 800b61c:	b510      	push	{r4, lr}
 800b61e:	4802      	ldr	r0, [pc, #8]	; (800b628 <__malloc_lock+0xc>)
 800b620:	f7fe fff7 	bl	800a612 <__retarget_lock_acquire_recursive>
 800b624:	bd10      	pop	{r4, pc}
 800b626:	46c0      	nop			; (mov r8, r8)
 800b628:	20001d58 	.word	0x20001d58

0800b62c <__malloc_unlock>:
 800b62c:	b510      	push	{r4, lr}
 800b62e:	4802      	ldr	r0, [pc, #8]	; (800b638 <__malloc_unlock+0xc>)
 800b630:	f7fe fff0 	bl	800a614 <__retarget_lock_release_recursive>
 800b634:	bd10      	pop	{r4, pc}
 800b636:	46c0      	nop			; (mov r8, r8)
 800b638:	20001d58 	.word	0x20001d58

0800b63c <_read_r>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	0004      	movs	r4, r0
 800b640:	0008      	movs	r0, r1
 800b642:	0011      	movs	r1, r2
 800b644:	001a      	movs	r2, r3
 800b646:	2300      	movs	r3, #0
 800b648:	4d05      	ldr	r5, [pc, #20]	; (800b660 <_read_r+0x24>)
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f7 fc08 	bl	8002e60 <_read>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d103      	bne.n	800b65c <_read_r+0x20>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d000      	beq.n	800b65c <_read_r+0x20>
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	bd70      	pop	{r4, r5, r6, pc}
 800b65e:	46c0      	nop			; (mov r8, r8)
 800b660:	20001d60 	.word	0x20001d60

0800b664 <__ascii_wctomb>:
 800b664:	0003      	movs	r3, r0
 800b666:	1e08      	subs	r0, r1, #0
 800b668:	d005      	beq.n	800b676 <__ascii_wctomb+0x12>
 800b66a:	2aff      	cmp	r2, #255	; 0xff
 800b66c:	d904      	bls.n	800b678 <__ascii_wctomb+0x14>
 800b66e:	228a      	movs	r2, #138	; 0x8a
 800b670:	2001      	movs	r0, #1
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	4240      	negs	r0, r0
 800b676:	4770      	bx	lr
 800b678:	2001      	movs	r0, #1
 800b67a:	700a      	strb	r2, [r1, #0]
 800b67c:	e7fb      	b.n	800b676 <__ascii_wctomb+0x12>

0800b67e <abort>:
 800b67e:	2006      	movs	r0, #6
 800b680:	b510      	push	{r4, lr}
 800b682:	f000 f82d 	bl	800b6e0 <raise>
 800b686:	2001      	movs	r0, #1
 800b688:	f7f7 fbde 	bl	8002e48 <_exit>

0800b68c <_raise_r>:
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	0004      	movs	r4, r0
 800b690:	000d      	movs	r5, r1
 800b692:	291f      	cmp	r1, #31
 800b694:	d904      	bls.n	800b6a0 <_raise_r+0x14>
 800b696:	2316      	movs	r3, #22
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	2001      	movs	r0, #1
 800b69c:	4240      	negs	r0, r0
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d004      	beq.n	800b6b0 <_raise_r+0x24>
 800b6a6:	008a      	lsls	r2, r1, #2
 800b6a8:	189b      	adds	r3, r3, r2
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	2a00      	cmp	r2, #0
 800b6ae:	d108      	bne.n	800b6c2 <_raise_r+0x36>
 800b6b0:	0020      	movs	r0, r4
 800b6b2:	f000 f831 	bl	800b718 <_getpid_r>
 800b6b6:	002a      	movs	r2, r5
 800b6b8:	0001      	movs	r1, r0
 800b6ba:	0020      	movs	r0, r4
 800b6bc:	f000 f81a 	bl	800b6f4 <_kill_r>
 800b6c0:	e7ed      	b.n	800b69e <_raise_r+0x12>
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	2a01      	cmp	r2, #1
 800b6c6:	d0ea      	beq.n	800b69e <_raise_r+0x12>
 800b6c8:	1c51      	adds	r1, r2, #1
 800b6ca:	d103      	bne.n	800b6d4 <_raise_r+0x48>
 800b6cc:	2316      	movs	r3, #22
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	e7e4      	b.n	800b69e <_raise_r+0x12>
 800b6d4:	2400      	movs	r4, #0
 800b6d6:	0028      	movs	r0, r5
 800b6d8:	601c      	str	r4, [r3, #0]
 800b6da:	4790      	blx	r2
 800b6dc:	0020      	movs	r0, r4
 800b6de:	e7de      	b.n	800b69e <_raise_r+0x12>

0800b6e0 <raise>:
 800b6e0:	b510      	push	{r4, lr}
 800b6e2:	4b03      	ldr	r3, [pc, #12]	; (800b6f0 <raise+0x10>)
 800b6e4:	0001      	movs	r1, r0
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	f7ff ffd0 	bl	800b68c <_raise_r>
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	46c0      	nop			; (mov r8, r8)
 800b6f0:	20000018 	.word	0x20000018

0800b6f4 <_kill_r>:
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	b570      	push	{r4, r5, r6, lr}
 800b6f8:	4d06      	ldr	r5, [pc, #24]	; (800b714 <_kill_r+0x20>)
 800b6fa:	0004      	movs	r4, r0
 800b6fc:	0008      	movs	r0, r1
 800b6fe:	0011      	movs	r1, r2
 800b700:	602b      	str	r3, [r5, #0]
 800b702:	f7f7 fb91 	bl	8002e28 <_kill>
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	d103      	bne.n	800b712 <_kill_r+0x1e>
 800b70a:	682b      	ldr	r3, [r5, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d000      	beq.n	800b712 <_kill_r+0x1e>
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	20001d60 	.word	0x20001d60

0800b718 <_getpid_r>:
 800b718:	b510      	push	{r4, lr}
 800b71a:	f7f7 fb7f 	bl	8002e1c <_getpid>
 800b71e:	bd10      	pop	{r4, pc}

0800b720 <_init>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	46c0      	nop			; (mov r8, r8)
 800b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b726:	bc08      	pop	{r3}
 800b728:	469e      	mov	lr, r3
 800b72a:	4770      	bx	lr

0800b72c <_fini>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	46c0      	nop			; (mov r8, r8)
 800b730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b732:	bc08      	pop	{r3}
 800b734:	469e      	mov	lr, r3
 800b736:	4770      	bx	lr
