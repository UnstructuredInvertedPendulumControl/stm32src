
WIPNAENAE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800cba0  0800cba0  0001cba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d204  0800d204  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d204  0800d204  0001d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d20c  0800d20c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d20c  0800d20c  0001d20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d210  0800d210  0001d210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  200001e0  0800d3f4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001dbc  0800d3f4  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026609  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004581  00000000  00000000  00046811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  0004ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b70  00000000  00000000  0004cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c48e  00000000  00000000  0004e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a52  00000000  00000000  0006aaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba95a  00000000  00000000  0008b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145e5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b90  00000000  00000000  00145eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cb88 	.word	0x0800cb88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800cb88 	.word	0x0800cb88

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f81f 	bl	8001480 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff69 	bl	8001324 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f811 	bl	8001480 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f807 	bl	8001480 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff8b 	bl	800139c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff81 	bl	800139c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f001 fef0 	bl	80022ec <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f001 feeb 	bl	80022ec <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_dadd>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	46d6      	mov	lr, sl
 8000686:	4646      	mov	r6, r8
 8000688:	000d      	movs	r5, r1
 800068a:	0001      	movs	r1, r0
 800068c:	0018      	movs	r0, r3
 800068e:	b5c0      	push	{r6, r7, lr}
 8000690:	0017      	movs	r7, r2
 8000692:	032b      	lsls	r3, r5, #12
 8000694:	0a5a      	lsrs	r2, r3, #9
 8000696:	0f4b      	lsrs	r3, r1, #29
 8000698:	4313      	orrs	r3, r2
 800069a:	00ca      	lsls	r2, r1, #3
 800069c:	4691      	mov	r9, r2
 800069e:	0302      	lsls	r2, r0, #12
 80006a0:	006e      	lsls	r6, r5, #1
 80006a2:	0041      	lsls	r1, r0, #1
 80006a4:	0a52      	lsrs	r2, r2, #9
 80006a6:	0fec      	lsrs	r4, r5, #31
 80006a8:	0f7d      	lsrs	r5, r7, #29
 80006aa:	4315      	orrs	r5, r2
 80006ac:	0d76      	lsrs	r6, r6, #21
 80006ae:	0d49      	lsrs	r1, r1, #21
 80006b0:	0fc0      	lsrs	r0, r0, #31
 80006b2:	4682      	mov	sl, r0
 80006b4:	46ac      	mov	ip, r5
 80006b6:	00ff      	lsls	r7, r7, #3
 80006b8:	1a72      	subs	r2, r6, r1
 80006ba:	4284      	cmp	r4, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x40>
 80006be:	e098      	b.n	80007f2 <__aeabi_dadd+0x172>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x46>
 80006c4:	e081      	b.n	80007ca <__aeabi_dadd+0x14a>
 80006c6:	2900      	cmp	r1, #0
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x4c>
 80006ca:	e0b6      	b.n	800083a <__aeabi_dadd+0x1ba>
 80006cc:	49c9      	ldr	r1, [pc, #804]	; (80009f4 <__aeabi_dadd+0x374>)
 80006ce:	428e      	cmp	r6, r1
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x54>
 80006d2:	e172      	b.n	80009ba <__aeabi_dadd+0x33a>
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0028      	movs	r0, r5
 80006d8:	0409      	lsls	r1, r1, #16
 80006da:	4308      	orrs	r0, r1
 80006dc:	4684      	mov	ip, r0
 80006de:	2a38      	cmp	r2, #56	; 0x38
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x64>
 80006e2:	e15e      	b.n	80009a2 <__aeabi_dadd+0x322>
 80006e4:	2a1f      	cmp	r2, #31
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dadd+0x6a>
 80006e8:	e1ee      	b.n	8000ac8 <__aeabi_dadd+0x448>
 80006ea:	2020      	movs	r0, #32
 80006ec:	0039      	movs	r1, r7
 80006ee:	4665      	mov	r5, ip
 80006f0:	1a80      	subs	r0, r0, r2
 80006f2:	4087      	lsls	r7, r0
 80006f4:	40d1      	lsrs	r1, r2
 80006f6:	4085      	lsls	r5, r0
 80006f8:	430d      	orrs	r5, r1
 80006fa:	0039      	movs	r1, r7
 80006fc:	1e4f      	subs	r7, r1, #1
 80006fe:	41b9      	sbcs	r1, r7
 8000700:	4667      	mov	r7, ip
 8000702:	40d7      	lsrs	r7, r2
 8000704:	4329      	orrs	r1, r5
 8000706:	1bdb      	subs	r3, r3, r7
 8000708:	464a      	mov	r2, r9
 800070a:	1a55      	subs	r5, r2, r1
 800070c:	45a9      	cmp	r9, r5
 800070e:	4189      	sbcs	r1, r1
 8000710:	4249      	negs	r1, r1
 8000712:	1a5b      	subs	r3, r3, r1
 8000714:	4698      	mov	r8, r3
 8000716:	4643      	mov	r3, r8
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	d400      	bmi.n	800071e <__aeabi_dadd+0x9e>
 800071c:	e0cc      	b.n	80008b8 <__aeabi_dadd+0x238>
 800071e:	4643      	mov	r3, r8
 8000720:	025b      	lsls	r3, r3, #9
 8000722:	0a5b      	lsrs	r3, r3, #9
 8000724:	4698      	mov	r8, r3
 8000726:	4643      	mov	r3, r8
 8000728:	2b00      	cmp	r3, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0xae>
 800072c:	e12c      	b.n	8000988 <__aeabi_dadd+0x308>
 800072e:	4640      	mov	r0, r8
 8000730:	f001 fdbe 	bl	80022b0 <__clzsi2>
 8000734:	0001      	movs	r1, r0
 8000736:	3908      	subs	r1, #8
 8000738:	2220      	movs	r2, #32
 800073a:	0028      	movs	r0, r5
 800073c:	4643      	mov	r3, r8
 800073e:	1a52      	subs	r2, r2, r1
 8000740:	408b      	lsls	r3, r1
 8000742:	40d0      	lsrs	r0, r2
 8000744:	408d      	lsls	r5, r1
 8000746:	4303      	orrs	r3, r0
 8000748:	428e      	cmp	r6, r1
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0xce>
 800074c:	e117      	b.n	800097e <__aeabi_dadd+0x2fe>
 800074e:	1b8e      	subs	r6, r1, r6
 8000750:	1c72      	adds	r2, r6, #1
 8000752:	2a1f      	cmp	r2, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xd8>
 8000756:	e1a7      	b.n	8000aa8 <__aeabi_dadd+0x428>
 8000758:	2120      	movs	r1, #32
 800075a:	0018      	movs	r0, r3
 800075c:	002e      	movs	r6, r5
 800075e:	1a89      	subs	r1, r1, r2
 8000760:	408d      	lsls	r5, r1
 8000762:	4088      	lsls	r0, r1
 8000764:	40d6      	lsrs	r6, r2
 8000766:	40d3      	lsrs	r3, r2
 8000768:	1e69      	subs	r1, r5, #1
 800076a:	418d      	sbcs	r5, r1
 800076c:	4330      	orrs	r0, r6
 800076e:	4698      	mov	r8, r3
 8000770:	2600      	movs	r6, #0
 8000772:	4305      	orrs	r5, r0
 8000774:	076b      	lsls	r3, r5, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000778:	230f      	movs	r3, #15
 800077a:	402b      	ands	r3, r5
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000780:	1d2b      	adds	r3, r5, #4
 8000782:	42ab      	cmp	r3, r5
 8000784:	41ad      	sbcs	r5, r5
 8000786:	426d      	negs	r5, r5
 8000788:	44a8      	add	r8, r5
 800078a:	001d      	movs	r5, r3
 800078c:	4643      	mov	r3, r8
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x114>
 8000792:	e094      	b.n	80008be <__aeabi_dadd+0x23e>
 8000794:	4b97      	ldr	r3, [pc, #604]	; (80009f4 <__aeabi_dadd+0x374>)
 8000796:	1c72      	adds	r2, r6, #1
 8000798:	429a      	cmp	r2, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x11e>
 800079c:	e09d      	b.n	80008da <__aeabi_dadd+0x25a>
 800079e:	4641      	mov	r1, r8
 80007a0:	4b95      	ldr	r3, [pc, #596]	; (80009f8 <__aeabi_dadd+0x378>)
 80007a2:	08ed      	lsrs	r5, r5, #3
 80007a4:	4019      	ands	r1, r3
 80007a6:	000b      	movs	r3, r1
 80007a8:	0552      	lsls	r2, r2, #21
 80007aa:	0749      	lsls	r1, r1, #29
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	4329      	orrs	r1, r5
 80007b0:	0b1b      	lsrs	r3, r3, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	4313      	orrs	r3, r2
 80007b8:	07e4      	lsls	r4, r4, #31
 80007ba:	4323      	orrs	r3, r4
 80007bc:	0008      	movs	r0, r1
 80007be:	0019      	movs	r1, r3
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d043      	beq.n	8000856 <__aeabi_dadd+0x1d6>
 80007ce:	1b8a      	subs	r2, r1, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x156>
 80007d4:	e12a      	b.n	8000a2c <__aeabi_dadd+0x3ac>
 80007d6:	464c      	mov	r4, r9
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x15e>
 80007dc:	e1d1      	b.n	8000b82 <__aeabi_dadd+0x502>
 80007de:	1e54      	subs	r4, r2, #1
 80007e0:	2a01      	cmp	r2, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x166>
 80007e4:	e21f      	b.n	8000c26 <__aeabi_dadd+0x5a6>
 80007e6:	4d83      	ldr	r5, [pc, #524]	; (80009f4 <__aeabi_dadd+0x374>)
 80007e8:	42aa      	cmp	r2, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x16e>
 80007ec:	e272      	b.n	8000cd4 <__aeabi_dadd+0x654>
 80007ee:	0022      	movs	r2, r4
 80007f0:	e123      	b.n	8000a3a <__aeabi_dadd+0x3ba>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x178>
 80007f6:	e098      	b.n	800092a <__aeabi_dadd+0x2aa>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d042      	beq.n	8000882 <__aeabi_dadd+0x202>
 80007fc:	497d      	ldr	r1, [pc, #500]	; (80009f4 <__aeabi_dadd+0x374>)
 80007fe:	428e      	cmp	r6, r1
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x184>
 8000802:	e0da      	b.n	80009ba <__aeabi_dadd+0x33a>
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0028      	movs	r0, r5
 8000808:	0409      	lsls	r1, r1, #16
 800080a:	4308      	orrs	r0, r1
 800080c:	4684      	mov	ip, r0
 800080e:	2a38      	cmp	r2, #56	; 0x38
 8000810:	dd00      	ble.n	8000814 <__aeabi_dadd+0x194>
 8000812:	e129      	b.n	8000a68 <__aeabi_dadd+0x3e8>
 8000814:	2a1f      	cmp	r2, #31
 8000816:	dc00      	bgt.n	800081a <__aeabi_dadd+0x19a>
 8000818:	e187      	b.n	8000b2a <__aeabi_dadd+0x4aa>
 800081a:	0011      	movs	r1, r2
 800081c:	4665      	mov	r5, ip
 800081e:	3920      	subs	r1, #32
 8000820:	40cd      	lsrs	r5, r1
 8000822:	2a20      	cmp	r2, #32
 8000824:	d004      	beq.n	8000830 <__aeabi_dadd+0x1b0>
 8000826:	2040      	movs	r0, #64	; 0x40
 8000828:	4661      	mov	r1, ip
 800082a:	1a82      	subs	r2, r0, r2
 800082c:	4091      	lsls	r1, r2
 800082e:	430f      	orrs	r7, r1
 8000830:	0039      	movs	r1, r7
 8000832:	1e4f      	subs	r7, r1, #1
 8000834:	41b9      	sbcs	r1, r7
 8000836:	430d      	orrs	r5, r1
 8000838:	e11b      	b.n	8000a72 <__aeabi_dadd+0x3f2>
 800083a:	0029      	movs	r1, r5
 800083c:	4339      	orrs	r1, r7
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x1c2>
 8000840:	e0b5      	b.n	80009ae <__aeabi_dadd+0x32e>
 8000842:	1e51      	subs	r1, r2, #1
 8000844:	2a01      	cmp	r2, #1
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x1ca>
 8000848:	e1ab      	b.n	8000ba2 <__aeabi_dadd+0x522>
 800084a:	486a      	ldr	r0, [pc, #424]	; (80009f4 <__aeabi_dadd+0x374>)
 800084c:	4282      	cmp	r2, r0
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x1d2>
 8000850:	e1b2      	b.n	8000bb8 <__aeabi_dadd+0x538>
 8000852:	000a      	movs	r2, r1
 8000854:	e743      	b.n	80006de <__aeabi_dadd+0x5e>
 8000856:	4969      	ldr	r1, [pc, #420]	; (80009fc <__aeabi_dadd+0x37c>)
 8000858:	1c75      	adds	r5, r6, #1
 800085a:	420d      	tst	r5, r1
 800085c:	d000      	beq.n	8000860 <__aeabi_dadd+0x1e0>
 800085e:	e0cf      	b.n	8000a00 <__aeabi_dadd+0x380>
 8000860:	2e00      	cmp	r6, #0
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1e6>
 8000864:	e193      	b.n	8000b8e <__aeabi_dadd+0x50e>
 8000866:	4649      	mov	r1, r9
 8000868:	4319      	orrs	r1, r3
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x1ee>
 800086c:	e1d1      	b.n	8000c12 <__aeabi_dadd+0x592>
 800086e:	4661      	mov	r1, ip
 8000870:	4339      	orrs	r1, r7
 8000872:	d000      	beq.n	8000876 <__aeabi_dadd+0x1f6>
 8000874:	e1e3      	b.n	8000c3e <__aeabi_dadd+0x5be>
 8000876:	4649      	mov	r1, r9
 8000878:	0758      	lsls	r0, r3, #29
 800087a:	08c9      	lsrs	r1, r1, #3
 800087c:	4301      	orrs	r1, r0
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	e026      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000882:	0029      	movs	r1, r5
 8000884:	4339      	orrs	r1, r7
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x20a>
 8000888:	e091      	b.n	80009ae <__aeabi_dadd+0x32e>
 800088a:	1e51      	subs	r1, r2, #1
 800088c:	2a01      	cmp	r2, #1
 800088e:	d005      	beq.n	800089c <__aeabi_dadd+0x21c>
 8000890:	4858      	ldr	r0, [pc, #352]	; (80009f4 <__aeabi_dadd+0x374>)
 8000892:	4282      	cmp	r2, r0
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x218>
 8000896:	e18f      	b.n	8000bb8 <__aeabi_dadd+0x538>
 8000898:	000a      	movs	r2, r1
 800089a:	e7b8      	b.n	800080e <__aeabi_dadd+0x18e>
 800089c:	003d      	movs	r5, r7
 800089e:	444d      	add	r5, r9
 80008a0:	454d      	cmp	r5, r9
 80008a2:	4189      	sbcs	r1, r1
 80008a4:	4463      	add	r3, ip
 80008a6:	4698      	mov	r8, r3
 80008a8:	4249      	negs	r1, r1
 80008aa:	4488      	add	r8, r1
 80008ac:	4643      	mov	r3, r8
 80008ae:	2602      	movs	r6, #2
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	d500      	bpl.n	80008b6 <__aeabi_dadd+0x236>
 80008b4:	e0eb      	b.n	8000a8e <__aeabi_dadd+0x40e>
 80008b6:	3e01      	subs	r6, #1
 80008b8:	076b      	lsls	r3, r5, #29
 80008ba:	d000      	beq.n	80008be <__aeabi_dadd+0x23e>
 80008bc:	e75c      	b.n	8000778 <__aeabi_dadd+0xf8>
 80008be:	4643      	mov	r3, r8
 80008c0:	08e9      	lsrs	r1, r5, #3
 80008c2:	075a      	lsls	r2, r3, #29
 80008c4:	4311      	orrs	r1, r2
 80008c6:	0032      	movs	r2, r6
 80008c8:	08db      	lsrs	r3, r3, #3
 80008ca:	484a      	ldr	r0, [pc, #296]	; (80009f4 <__aeabi_dadd+0x374>)
 80008cc:	4282      	cmp	r2, r0
 80008ce:	d021      	beq.n	8000914 <__aeabi_dadd+0x294>
 80008d0:	031b      	lsls	r3, r3, #12
 80008d2:	0552      	lsls	r2, r2, #21
 80008d4:	0b1b      	lsrs	r3, r3, #12
 80008d6:	0d52      	lsrs	r2, r2, #21
 80008d8:	e76c      	b.n	80007b4 <__aeabi_dadd+0x134>
 80008da:	2300      	movs	r3, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	e769      	b.n	80007b4 <__aeabi_dadd+0x134>
 80008e0:	002a      	movs	r2, r5
 80008e2:	433a      	orrs	r2, r7
 80008e4:	d069      	beq.n	80009ba <__aeabi_dadd+0x33a>
 80008e6:	464a      	mov	r2, r9
 80008e8:	0758      	lsls	r0, r3, #29
 80008ea:	08d1      	lsrs	r1, r2, #3
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	031b      	lsls	r3, r3, #12
 80008f2:	4308      	orrs	r0, r1
 80008f4:	421a      	tst	r2, r3
 80008f6:	d007      	beq.n	8000908 <__aeabi_dadd+0x288>
 80008f8:	0029      	movs	r1, r5
 80008fa:	08ed      	lsrs	r5, r5, #3
 80008fc:	421d      	tst	r5, r3
 80008fe:	d103      	bne.n	8000908 <__aeabi_dadd+0x288>
 8000900:	002a      	movs	r2, r5
 8000902:	08ff      	lsrs	r7, r7, #3
 8000904:	0748      	lsls	r0, r1, #29
 8000906:	4338      	orrs	r0, r7
 8000908:	0f43      	lsrs	r3, r0, #29
 800090a:	00c1      	lsls	r1, r0, #3
 800090c:	075b      	lsls	r3, r3, #29
 800090e:	08c9      	lsrs	r1, r1, #3
 8000910:	4319      	orrs	r1, r3
 8000912:	0013      	movs	r3, r2
 8000914:	000a      	movs	r2, r1
 8000916:	431a      	orrs	r2, r3
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x29c>
 800091a:	e213      	b.n	8000d44 <__aeabi_dadd+0x6c4>
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0312      	lsls	r2, r2, #12
 8000920:	4313      	orrs	r3, r2
 8000922:	031b      	lsls	r3, r3, #12
 8000924:	4a33      	ldr	r2, [pc, #204]	; (80009f4 <__aeabi_dadd+0x374>)
 8000926:	0b1b      	lsrs	r3, r3, #12
 8000928:	e744      	b.n	80007b4 <__aeabi_dadd+0x134>
 800092a:	2a00      	cmp	r2, #0
 800092c:	d04b      	beq.n	80009c6 <__aeabi_dadd+0x346>
 800092e:	1b8a      	subs	r2, r1, r6
 8000930:	2e00      	cmp	r6, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x2b6>
 8000934:	e0e7      	b.n	8000b06 <__aeabi_dadd+0x486>
 8000936:	482f      	ldr	r0, [pc, #188]	; (80009f4 <__aeabi_dadd+0x374>)
 8000938:	4281      	cmp	r1, r0
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x2be>
 800093c:	e195      	b.n	8000c6a <__aeabi_dadd+0x5ea>
 800093e:	2080      	movs	r0, #128	; 0x80
 8000940:	0400      	lsls	r0, r0, #16
 8000942:	4303      	orrs	r3, r0
 8000944:	2a38      	cmp	r2, #56	; 0x38
 8000946:	dd00      	ble.n	800094a <__aeabi_dadd+0x2ca>
 8000948:	e143      	b.n	8000bd2 <__aeabi_dadd+0x552>
 800094a:	2a1f      	cmp	r2, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x2d0>
 800094e:	e1db      	b.n	8000d08 <__aeabi_dadd+0x688>
 8000950:	2020      	movs	r0, #32
 8000952:	001d      	movs	r5, r3
 8000954:	464e      	mov	r6, r9
 8000956:	1a80      	subs	r0, r0, r2
 8000958:	4085      	lsls	r5, r0
 800095a:	40d6      	lsrs	r6, r2
 800095c:	4335      	orrs	r5, r6
 800095e:	464e      	mov	r6, r9
 8000960:	4086      	lsls	r6, r0
 8000962:	0030      	movs	r0, r6
 8000964:	40d3      	lsrs	r3, r2
 8000966:	1e46      	subs	r6, r0, #1
 8000968:	41b0      	sbcs	r0, r6
 800096a:	449c      	add	ip, r3
 800096c:	4305      	orrs	r5, r0
 800096e:	19ed      	adds	r5, r5, r7
 8000970:	42bd      	cmp	r5, r7
 8000972:	419b      	sbcs	r3, r3
 8000974:	425b      	negs	r3, r3
 8000976:	4463      	add	r3, ip
 8000978:	4698      	mov	r8, r3
 800097a:	000e      	movs	r6, r1
 800097c:	e07f      	b.n	8000a7e <__aeabi_dadd+0x3fe>
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <__aeabi_dadd+0x378>)
 8000980:	1a76      	subs	r6, r6, r1
 8000982:	4013      	ands	r3, r2
 8000984:	4698      	mov	r8, r3
 8000986:	e6f5      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000988:	0028      	movs	r0, r5
 800098a:	f001 fc91 	bl	80022b0 <__clzsi2>
 800098e:	0001      	movs	r1, r0
 8000990:	3118      	adds	r1, #24
 8000992:	291f      	cmp	r1, #31
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dadd+0x318>
 8000996:	e6cf      	b.n	8000738 <__aeabi_dadd+0xb8>
 8000998:	002b      	movs	r3, r5
 800099a:	3808      	subs	r0, #8
 800099c:	4083      	lsls	r3, r0
 800099e:	2500      	movs	r5, #0
 80009a0:	e6d2      	b.n	8000748 <__aeabi_dadd+0xc8>
 80009a2:	4662      	mov	r2, ip
 80009a4:	433a      	orrs	r2, r7
 80009a6:	0011      	movs	r1, r2
 80009a8:	1e4f      	subs	r7, r1, #1
 80009aa:	41b9      	sbcs	r1, r7
 80009ac:	e6ac      	b.n	8000708 <__aeabi_dadd+0x88>
 80009ae:	4649      	mov	r1, r9
 80009b0:	0758      	lsls	r0, r3, #29
 80009b2:	08c9      	lsrs	r1, r1, #3
 80009b4:	4301      	orrs	r1, r0
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	e787      	b.n	80008ca <__aeabi_dadd+0x24a>
 80009ba:	4649      	mov	r1, r9
 80009bc:	075a      	lsls	r2, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	4311      	orrs	r1, r2
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	e7a6      	b.n	8000914 <__aeabi_dadd+0x294>
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <__aeabi_dadd+0x37c>)
 80009c8:	1c70      	adds	r0, r6, #1
 80009ca:	4208      	tst	r0, r1
 80009cc:	d000      	beq.n	80009d0 <__aeabi_dadd+0x350>
 80009ce:	e0bb      	b.n	8000b48 <__aeabi_dadd+0x4c8>
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x356>
 80009d4:	e114      	b.n	8000c00 <__aeabi_dadd+0x580>
 80009d6:	4649      	mov	r1, r9
 80009d8:	4319      	orrs	r1, r3
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x35e>
 80009dc:	e175      	b.n	8000cca <__aeabi_dadd+0x64a>
 80009de:	0029      	movs	r1, r5
 80009e0:	4339      	orrs	r1, r7
 80009e2:	d000      	beq.n	80009e6 <__aeabi_dadd+0x366>
 80009e4:	e17e      	b.n	8000ce4 <__aeabi_dadd+0x664>
 80009e6:	4649      	mov	r1, r9
 80009e8:	0758      	lsls	r0, r3, #29
 80009ea:	08c9      	lsrs	r1, r1, #3
 80009ec:	4301      	orrs	r1, r0
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	e76e      	b.n	80008d0 <__aeabi_dadd+0x250>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	000007ff 	.word	0x000007ff
 80009f8:	ff7fffff 	.word	0xff7fffff
 80009fc:	000007fe 	.word	0x000007fe
 8000a00:	4649      	mov	r1, r9
 8000a02:	1bcd      	subs	r5, r1, r7
 8000a04:	4661      	mov	r1, ip
 8000a06:	1a58      	subs	r0, r3, r1
 8000a08:	45a9      	cmp	r9, r5
 8000a0a:	4189      	sbcs	r1, r1
 8000a0c:	4249      	negs	r1, r1
 8000a0e:	4688      	mov	r8, r1
 8000a10:	0001      	movs	r1, r0
 8000a12:	4640      	mov	r0, r8
 8000a14:	1a09      	subs	r1, r1, r0
 8000a16:	4688      	mov	r8, r1
 8000a18:	0209      	lsls	r1, r1, #8
 8000a1a:	d500      	bpl.n	8000a1e <__aeabi_dadd+0x39e>
 8000a1c:	e0a6      	b.n	8000b6c <__aeabi_dadd+0x4ec>
 8000a1e:	4641      	mov	r1, r8
 8000a20:	4329      	orrs	r1, r5
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dadd+0x3a6>
 8000a24:	e67f      	b.n	8000726 <__aeabi_dadd+0xa6>
 8000a26:	2300      	movs	r3, #0
 8000a28:	2400      	movs	r4, #0
 8000a2a:	e751      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000a2c:	4cc7      	ldr	r4, [pc, #796]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000a2e:	42a1      	cmp	r1, r4
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x3b4>
 8000a32:	e0c7      	b.n	8000bc4 <__aeabi_dadd+0x544>
 8000a34:	2480      	movs	r4, #128	; 0x80
 8000a36:	0424      	lsls	r4, r4, #16
 8000a38:	4323      	orrs	r3, r4
 8000a3a:	2a38      	cmp	r2, #56	; 0x38
 8000a3c:	dc54      	bgt.n	8000ae8 <__aeabi_dadd+0x468>
 8000a3e:	2a1f      	cmp	r2, #31
 8000a40:	dd00      	ble.n	8000a44 <__aeabi_dadd+0x3c4>
 8000a42:	e0cc      	b.n	8000bde <__aeabi_dadd+0x55e>
 8000a44:	2420      	movs	r4, #32
 8000a46:	4648      	mov	r0, r9
 8000a48:	1aa4      	subs	r4, r4, r2
 8000a4a:	001d      	movs	r5, r3
 8000a4c:	464e      	mov	r6, r9
 8000a4e:	40a0      	lsls	r0, r4
 8000a50:	40d6      	lsrs	r6, r2
 8000a52:	40a5      	lsls	r5, r4
 8000a54:	0004      	movs	r4, r0
 8000a56:	40d3      	lsrs	r3, r2
 8000a58:	4662      	mov	r2, ip
 8000a5a:	4335      	orrs	r5, r6
 8000a5c:	1e66      	subs	r6, r4, #1
 8000a5e:	41b4      	sbcs	r4, r6
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	469c      	mov	ip, r3
 8000a64:	4325      	orrs	r5, r4
 8000a66:	e044      	b.n	8000af2 <__aeabi_dadd+0x472>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	433a      	orrs	r2, r7
 8000a6c:	0015      	movs	r5, r2
 8000a6e:	1e6f      	subs	r7, r5, #1
 8000a70:	41bd      	sbcs	r5, r7
 8000a72:	444d      	add	r5, r9
 8000a74:	454d      	cmp	r5, r9
 8000a76:	4189      	sbcs	r1, r1
 8000a78:	4249      	negs	r1, r1
 8000a7a:	4688      	mov	r8, r1
 8000a7c:	4498      	add	r8, r3
 8000a7e:	4643      	mov	r3, r8
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	d400      	bmi.n	8000a86 <__aeabi_dadd+0x406>
 8000a84:	e718      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000a86:	4bb1      	ldr	r3, [pc, #708]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000a88:	3601      	adds	r6, #1
 8000a8a:	429e      	cmp	r6, r3
 8000a8c:	d049      	beq.n	8000b22 <__aeabi_dadd+0x4a2>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	4baf      	ldr	r3, [pc, #700]	; (8000d50 <__aeabi_dadd+0x6d0>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	401a      	ands	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	086a      	lsrs	r2, r5, #1
 8000a9a:	400d      	ands	r5, r1
 8000a9c:	4315      	orrs	r5, r2
 8000a9e:	07d9      	lsls	r1, r3, #31
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	4698      	mov	r8, r3
 8000aa4:	430d      	orrs	r5, r1
 8000aa6:	e665      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	3e1f      	subs	r6, #31
 8000aac:	40f0      	lsrs	r0, r6
 8000aae:	2a20      	cmp	r2, #32
 8000ab0:	d003      	beq.n	8000aba <__aeabi_dadd+0x43a>
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	431d      	orrs	r5, r3
 8000aba:	1e69      	subs	r1, r5, #1
 8000abc:	418d      	sbcs	r5, r1
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	4305      	orrs	r5, r0
 8000ac6:	e6f7      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000ac8:	0011      	movs	r1, r2
 8000aca:	4665      	mov	r5, ip
 8000acc:	3920      	subs	r1, #32
 8000ace:	40cd      	lsrs	r5, r1
 8000ad0:	2a20      	cmp	r2, #32
 8000ad2:	d004      	beq.n	8000ade <__aeabi_dadd+0x45e>
 8000ad4:	2040      	movs	r0, #64	; 0x40
 8000ad6:	4661      	mov	r1, ip
 8000ad8:	1a82      	subs	r2, r0, r2
 8000ada:	4091      	lsls	r1, r2
 8000adc:	430f      	orrs	r7, r1
 8000ade:	0039      	movs	r1, r7
 8000ae0:	1e4f      	subs	r7, r1, #1
 8000ae2:	41b9      	sbcs	r1, r7
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	e60f      	b.n	8000708 <__aeabi_dadd+0x88>
 8000ae8:	464a      	mov	r2, r9
 8000aea:	4313      	orrs	r3, r2
 8000aec:	001d      	movs	r5, r3
 8000aee:	1e6b      	subs	r3, r5, #1
 8000af0:	419d      	sbcs	r5, r3
 8000af2:	1b7d      	subs	r5, r7, r5
 8000af4:	42af      	cmp	r7, r5
 8000af6:	419b      	sbcs	r3, r3
 8000af8:	4662      	mov	r2, ip
 8000afa:	425b      	negs	r3, r3
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	4698      	mov	r8, r3
 8000b00:	4654      	mov	r4, sl
 8000b02:	000e      	movs	r6, r1
 8000b04:	e607      	b.n	8000716 <__aeabi_dadd+0x96>
 8000b06:	4648      	mov	r0, r9
 8000b08:	4318      	orrs	r0, r3
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x48e>
 8000b0c:	e0b3      	b.n	8000c76 <__aeabi_dadd+0x5f6>
 8000b0e:	1e50      	subs	r0, r2, #1
 8000b10:	2a01      	cmp	r2, #1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x496>
 8000b14:	e10d      	b.n	8000d32 <__aeabi_dadd+0x6b2>
 8000b16:	4d8d      	ldr	r5, [pc, #564]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000b18:	42aa      	cmp	r2, r5
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x49e>
 8000b1c:	e0a5      	b.n	8000c6a <__aeabi_dadd+0x5ea>
 8000b1e:	0002      	movs	r2, r0
 8000b20:	e710      	b.n	8000944 <__aeabi_dadd+0x2c4>
 8000b22:	0032      	movs	r2, r6
 8000b24:	2300      	movs	r3, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	e644      	b.n	80007b4 <__aeabi_dadd+0x134>
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	0038      	movs	r0, r7
 8000b2e:	1a89      	subs	r1, r1, r2
 8000b30:	4665      	mov	r5, ip
 8000b32:	408f      	lsls	r7, r1
 8000b34:	408d      	lsls	r5, r1
 8000b36:	40d0      	lsrs	r0, r2
 8000b38:	1e79      	subs	r1, r7, #1
 8000b3a:	418f      	sbcs	r7, r1
 8000b3c:	4305      	orrs	r5, r0
 8000b3e:	433d      	orrs	r5, r7
 8000b40:	4667      	mov	r7, ip
 8000b42:	40d7      	lsrs	r7, r2
 8000b44:	19db      	adds	r3, r3, r7
 8000b46:	e794      	b.n	8000a72 <__aeabi_dadd+0x3f2>
 8000b48:	4a80      	ldr	r2, [pc, #512]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x4d0>
 8000b4e:	e0ec      	b.n	8000d2a <__aeabi_dadd+0x6aa>
 8000b50:	0039      	movs	r1, r7
 8000b52:	4449      	add	r1, r9
 8000b54:	4549      	cmp	r1, r9
 8000b56:	4192      	sbcs	r2, r2
 8000b58:	4463      	add	r3, ip
 8000b5a:	4252      	negs	r2, r2
 8000b5c:	189b      	adds	r3, r3, r2
 8000b5e:	07dd      	lsls	r5, r3, #31
 8000b60:	0849      	lsrs	r1, r1, #1
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	0006      	movs	r6, r0
 8000b68:	430d      	orrs	r5, r1
 8000b6a:	e6a5      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1abd      	subs	r5, r7, r2
 8000b70:	42af      	cmp	r7, r5
 8000b72:	4189      	sbcs	r1, r1
 8000b74:	4662      	mov	r2, ip
 8000b76:	4249      	negs	r1, r1
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	1a5b      	subs	r3, r3, r1
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	4654      	mov	r4, sl
 8000b80:	e5d1      	b.n	8000726 <__aeabi_dadd+0xa6>
 8000b82:	076c      	lsls	r4, r5, #29
 8000b84:	08f9      	lsrs	r1, r7, #3
 8000b86:	4321      	orrs	r1, r4
 8000b88:	08eb      	lsrs	r3, r5, #3
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	e69d      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	431a      	orrs	r2, r3
 8000b92:	d175      	bne.n	8000c80 <__aeabi_dadd+0x600>
 8000b94:	4661      	mov	r1, ip
 8000b96:	4339      	orrs	r1, r7
 8000b98:	d114      	bne.n	8000bc4 <__aeabi_dadd+0x544>
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	2400      	movs	r4, #0
 8000b9e:	031b      	lsls	r3, r3, #12
 8000ba0:	e6bc      	b.n	800091c <__aeabi_dadd+0x29c>
 8000ba2:	464a      	mov	r2, r9
 8000ba4:	1bd5      	subs	r5, r2, r7
 8000ba6:	45a9      	cmp	r9, r5
 8000ba8:	4189      	sbcs	r1, r1
 8000baa:	4662      	mov	r2, ip
 8000bac:	4249      	negs	r1, r1
 8000bae:	1a9b      	subs	r3, r3, r2
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	2601      	movs	r6, #1
 8000bb6:	e5ae      	b.n	8000716 <__aeabi_dadd+0x96>
 8000bb8:	464a      	mov	r2, r9
 8000bba:	08d1      	lsrs	r1, r2, #3
 8000bbc:	075a      	lsls	r2, r3, #29
 8000bbe:	4311      	orrs	r1, r2
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	e6a7      	b.n	8000914 <__aeabi_dadd+0x294>
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	08f9      	lsrs	r1, r7, #3
 8000bc8:	075a      	lsls	r2, r3, #29
 8000bca:	4654      	mov	r4, sl
 8000bcc:	4311      	orrs	r1, r2
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	e6a0      	b.n	8000914 <__aeabi_dadd+0x294>
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	001d      	movs	r5, r3
 8000bd8:	1e6b      	subs	r3, r5, #1
 8000bda:	419d      	sbcs	r5, r3
 8000bdc:	e6c7      	b.n	800096e <__aeabi_dadd+0x2ee>
 8000bde:	0014      	movs	r4, r2
 8000be0:	001e      	movs	r6, r3
 8000be2:	3c20      	subs	r4, #32
 8000be4:	40e6      	lsrs	r6, r4
 8000be6:	2a20      	cmp	r2, #32
 8000be8:	d005      	beq.n	8000bf6 <__aeabi_dadd+0x576>
 8000bea:	2440      	movs	r4, #64	; 0x40
 8000bec:	1aa2      	subs	r2, r4, r2
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	464a      	mov	r2, r9
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	4691      	mov	r9, r2
 8000bf6:	464d      	mov	r5, r9
 8000bf8:	1e6b      	subs	r3, r5, #1
 8000bfa:	419d      	sbcs	r5, r3
 8000bfc:	4335      	orrs	r5, r6
 8000bfe:	e778      	b.n	8000af2 <__aeabi_dadd+0x472>
 8000c00:	464a      	mov	r2, r9
 8000c02:	431a      	orrs	r2, r3
 8000c04:	d000      	beq.n	8000c08 <__aeabi_dadd+0x588>
 8000c06:	e66b      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000c08:	076b      	lsls	r3, r5, #29
 8000c0a:	08f9      	lsrs	r1, r7, #3
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	08eb      	lsrs	r3, r5, #3
 8000c10:	e680      	b.n	8000914 <__aeabi_dadd+0x294>
 8000c12:	4661      	mov	r1, ip
 8000c14:	4339      	orrs	r1, r7
 8000c16:	d054      	beq.n	8000cc2 <__aeabi_dadd+0x642>
 8000c18:	4663      	mov	r3, ip
 8000c1a:	08f9      	lsrs	r1, r7, #3
 8000c1c:	075c      	lsls	r4, r3, #29
 8000c1e:	4321      	orrs	r1, r4
 8000c20:	08db      	lsrs	r3, r3, #3
 8000c22:	0004      	movs	r4, r0
 8000c24:	e654      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000c26:	464a      	mov	r2, r9
 8000c28:	1abd      	subs	r5, r7, r2
 8000c2a:	42af      	cmp	r7, r5
 8000c2c:	4189      	sbcs	r1, r1
 8000c2e:	4662      	mov	r2, ip
 8000c30:	4249      	negs	r1, r1
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	4698      	mov	r8, r3
 8000c38:	0004      	movs	r4, r0
 8000c3a:	2601      	movs	r6, #1
 8000c3c:	e56b      	b.n	8000716 <__aeabi_dadd+0x96>
 8000c3e:	464a      	mov	r2, r9
 8000c40:	1bd5      	subs	r5, r2, r7
 8000c42:	45a9      	cmp	r9, r5
 8000c44:	4189      	sbcs	r1, r1
 8000c46:	4662      	mov	r2, ip
 8000c48:	4249      	negs	r1, r1
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	1a52      	subs	r2, r2, r1
 8000c4e:	4690      	mov	r8, r2
 8000c50:	0212      	lsls	r2, r2, #8
 8000c52:	d532      	bpl.n	8000cba <__aeabi_dadd+0x63a>
 8000c54:	464a      	mov	r2, r9
 8000c56:	1abd      	subs	r5, r7, r2
 8000c58:	42af      	cmp	r7, r5
 8000c5a:	4189      	sbcs	r1, r1
 8000c5c:	4662      	mov	r2, ip
 8000c5e:	4249      	negs	r1, r1
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	1a5b      	subs	r3, r3, r1
 8000c64:	4698      	mov	r8, r3
 8000c66:	0004      	movs	r4, r0
 8000c68:	e584      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000c6a:	4663      	mov	r3, ip
 8000c6c:	08f9      	lsrs	r1, r7, #3
 8000c6e:	075a      	lsls	r2, r3, #29
 8000c70:	4311      	orrs	r1, r2
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	e64e      	b.n	8000914 <__aeabi_dadd+0x294>
 8000c76:	08f9      	lsrs	r1, r7, #3
 8000c78:	0768      	lsls	r0, r5, #29
 8000c7a:	4301      	orrs	r1, r0
 8000c7c:	08eb      	lsrs	r3, r5, #3
 8000c7e:	e624      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000c80:	4662      	mov	r2, ip
 8000c82:	433a      	orrs	r2, r7
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x608>
 8000c86:	e698      	b.n	80009ba <__aeabi_dadd+0x33a>
 8000c88:	464a      	mov	r2, r9
 8000c8a:	08d1      	lsrs	r1, r2, #3
 8000c8c:	075a      	lsls	r2, r3, #29
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	031b      	lsls	r3, r3, #12
 8000c96:	421a      	tst	r2, r3
 8000c98:	d008      	beq.n	8000cac <__aeabi_dadd+0x62c>
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	08c5      	lsrs	r5, r0, #3
 8000c9e:	421d      	tst	r5, r3
 8000ca0:	d104      	bne.n	8000cac <__aeabi_dadd+0x62c>
 8000ca2:	4654      	mov	r4, sl
 8000ca4:	002a      	movs	r2, r5
 8000ca6:	08f9      	lsrs	r1, r7, #3
 8000ca8:	0743      	lsls	r3, r0, #29
 8000caa:	4319      	orrs	r1, r3
 8000cac:	0f4b      	lsrs	r3, r1, #29
 8000cae:	00c9      	lsls	r1, r1, #3
 8000cb0:	075b      	lsls	r3, r3, #29
 8000cb2:	08c9      	lsrs	r1, r1, #3
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	e62c      	b.n	8000914 <__aeabi_dadd+0x294>
 8000cba:	4641      	mov	r1, r8
 8000cbc:	4329      	orrs	r1, r5
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_dadd+0x642>
 8000cc0:	e5fa      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	e602      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000cca:	076b      	lsls	r3, r5, #29
 8000ccc:	08f9      	lsrs	r1, r7, #3
 8000cce:	4319      	orrs	r1, r3
 8000cd0:	08eb      	lsrs	r3, r5, #3
 8000cd2:	e5fd      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000cd4:	4663      	mov	r3, ip
 8000cd6:	08f9      	lsrs	r1, r7, #3
 8000cd8:	075b      	lsls	r3, r3, #29
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	4663      	mov	r3, ip
 8000cde:	0004      	movs	r4, r0
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	e617      	b.n	8000914 <__aeabi_dadd+0x294>
 8000ce4:	003d      	movs	r5, r7
 8000ce6:	444d      	add	r5, r9
 8000ce8:	4463      	add	r3, ip
 8000cea:	454d      	cmp	r5, r9
 8000cec:	4189      	sbcs	r1, r1
 8000cee:	4698      	mov	r8, r3
 8000cf0:	4249      	negs	r1, r1
 8000cf2:	4488      	add	r8, r1
 8000cf4:	4643      	mov	r3, r8
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	d400      	bmi.n	8000cfc <__aeabi_dadd+0x67c>
 8000cfa:	e5dd      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000cfc:	4642      	mov	r2, r8
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <__aeabi_dadd+0x6d0>)
 8000d00:	2601      	movs	r6, #1
 8000d02:	401a      	ands	r2, r3
 8000d04:	4690      	mov	r8, r2
 8000d06:	e5d7      	b.n	80008b8 <__aeabi_dadd+0x238>
 8000d08:	0010      	movs	r0, r2
 8000d0a:	001e      	movs	r6, r3
 8000d0c:	3820      	subs	r0, #32
 8000d0e:	40c6      	lsrs	r6, r0
 8000d10:	2a20      	cmp	r2, #32
 8000d12:	d005      	beq.n	8000d20 <__aeabi_dadd+0x6a0>
 8000d14:	2040      	movs	r0, #64	; 0x40
 8000d16:	1a82      	subs	r2, r0, r2
 8000d18:	4093      	lsls	r3, r2
 8000d1a:	464a      	mov	r2, r9
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	4691      	mov	r9, r2
 8000d20:	464d      	mov	r5, r9
 8000d22:	1e6b      	subs	r3, r5, #1
 8000d24:	419d      	sbcs	r5, r3
 8000d26:	4335      	orrs	r5, r6
 8000d28:	e621      	b.n	800096e <__aeabi_dadd+0x2ee>
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x134>
 8000d32:	464a      	mov	r2, r9
 8000d34:	19d5      	adds	r5, r2, r7
 8000d36:	42bd      	cmp	r5, r7
 8000d38:	4189      	sbcs	r1, r1
 8000d3a:	4463      	add	r3, ip
 8000d3c:	4698      	mov	r8, r3
 8000d3e:	4249      	negs	r1, r1
 8000d40:	4488      	add	r8, r1
 8000d42:	e5b3      	b.n	80008ac <__aeabi_dadd+0x22c>
 8000d44:	2100      	movs	r1, #0
 8000d46:	4a01      	ldr	r2, [pc, #4]	; (8000d4c <__aeabi_dadd+0x6cc>)
 8000d48:	000b      	movs	r3, r1
 8000d4a:	e533      	b.n	80007b4 <__aeabi_dadd+0x134>
 8000d4c:	000007ff 	.word	0x000007ff
 8000d50:	ff7fffff 	.word	0xff7fffff

08000d54 <__aeabi_ddiv>:
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4657      	mov	r7, sl
 8000d58:	464e      	mov	r6, r9
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	b5e0      	push	{r5, r6, r7, lr}
 8000d60:	4681      	mov	r9, r0
 8000d62:	0005      	movs	r5, r0
 8000d64:	030c      	lsls	r4, r1, #12
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	4692      	mov	sl, r2
 8000d6a:	001f      	movs	r7, r3
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	0b24      	lsrs	r4, r4, #12
 8000d70:	0d40      	lsrs	r0, r0, #21
 8000d72:	0fce      	lsrs	r6, r1, #31
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d059      	beq.n	8000e2c <__aeabi_ddiv+0xd8>
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x2c>
 8000d7e:	e098      	b.n	8000eb2 <__aeabi_ddiv+0x15e>
 8000d80:	0f6b      	lsrs	r3, r5, #29
 8000d82:	00e4      	lsls	r4, r4, #3
 8000d84:	431c      	orrs	r4, r3
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	4323      	orrs	r3, r4
 8000d8c:	4698      	mov	r8, r3
 8000d8e:	4b83      	ldr	r3, [pc, #524]	; (8000f9c <__aeabi_ddiv+0x248>)
 8000d90:	00ed      	lsls	r5, r5, #3
 8000d92:	469b      	mov	fp, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	4699      	mov	r9, r3
 8000d98:	4483      	add	fp, r0
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	033c      	lsls	r4, r7, #12
 8000d9e:	007b      	lsls	r3, r7, #1
 8000da0:	4650      	mov	r0, sl
 8000da2:	0b24      	lsrs	r4, r4, #12
 8000da4:	0d5b      	lsrs	r3, r3, #21
 8000da6:	0fff      	lsrs	r7, r7, #31
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d067      	beq.n	8000e7c <__aeabi_ddiv+0x128>
 8000dac:	4a7a      	ldr	r2, [pc, #488]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d018      	beq.n	8000de4 <__aeabi_ddiv+0x90>
 8000db2:	497a      	ldr	r1, [pc, #488]	; (8000f9c <__aeabi_ddiv+0x248>)
 8000db4:	0f42      	lsrs	r2, r0, #29
 8000db6:	468c      	mov	ip, r1
 8000db8:	00e4      	lsls	r4, r4, #3
 8000dba:	4659      	mov	r1, fp
 8000dbc:	4314      	orrs	r4, r2
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	4463      	add	r3, ip
 8000dc2:	0412      	lsls	r2, r2, #16
 8000dc4:	1acb      	subs	r3, r1, r3
 8000dc6:	4314      	orrs	r4, r2
 8000dc8:	469b      	mov	fp, r3
 8000dca:	00c2      	lsls	r2, r0, #3
 8000dcc:	2000      	movs	r0, #0
 8000dce:	0033      	movs	r3, r6
 8000dd0:	407b      	eors	r3, r7
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d900      	bls.n	8000ddc <__aeabi_ddiv+0x88>
 8000dda:	e0ef      	b.n	8000fbc <__aeabi_ddiv+0x268>
 8000ddc:	4970      	ldr	r1, [pc, #448]	; (8000fa0 <__aeabi_ddiv+0x24c>)
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	58cb      	ldr	r3, [r1, r3]
 8000de2:	469f      	mov	pc, r3
 8000de4:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <__aeabi_ddiv+0x250>)
 8000de6:	4652      	mov	r2, sl
 8000de8:	469c      	mov	ip, r3
 8000dea:	4322      	orrs	r2, r4
 8000dec:	44e3      	add	fp, ip
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_ddiv+0xa0>
 8000df2:	e095      	b.n	8000f20 <__aeabi_ddiv+0x1cc>
 8000df4:	4649      	mov	r1, r9
 8000df6:	2302      	movs	r3, #2
 8000df8:	4319      	orrs	r1, r3
 8000dfa:	4689      	mov	r9, r1
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	2002      	movs	r0, #2
 8000e00:	e7e5      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000e02:	2300      	movs	r3, #0
 8000e04:	2400      	movs	r4, #0
 8000e06:	2500      	movs	r5, #0
 8000e08:	4652      	mov	r2, sl
 8000e0a:	051b      	lsls	r3, r3, #20
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	07d2      	lsls	r2, r2, #31
 8000e10:	4313      	orrs	r3, r2
 8000e12:	0028      	movs	r0, r5
 8000e14:	0019      	movs	r1, r3
 8000e16:	b005      	add	sp, #20
 8000e18:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1a:	46bb      	mov	fp, r7
 8000e1c:	46b2      	mov	sl, r6
 8000e1e:	46a9      	mov	r9, r5
 8000e20:	46a0      	mov	r8, r4
 8000e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e24:	2400      	movs	r4, #0
 8000e26:	2500      	movs	r5, #0
 8000e28:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000e2a:	e7ed      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	4698      	mov	r8, r3
 8000e32:	d100      	bne.n	8000e36 <__aeabi_ddiv+0xe2>
 8000e34:	e089      	b.n	8000f4a <__aeabi_ddiv+0x1f6>
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0xe8>
 8000e3a:	e1e0      	b.n	80011fe <__aeabi_ddiv+0x4aa>
 8000e3c:	0020      	movs	r0, r4
 8000e3e:	f001 fa37 	bl	80022b0 <__clzsi2>
 8000e42:	0001      	movs	r1, r0
 8000e44:	0002      	movs	r2, r0
 8000e46:	390b      	subs	r1, #11
 8000e48:	231d      	movs	r3, #29
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	0010      	movs	r0, r2
 8000e50:	40d9      	lsrs	r1, r3
 8000e52:	3808      	subs	r0, #8
 8000e54:	4084      	lsls	r4, r0
 8000e56:	000b      	movs	r3, r1
 8000e58:	464d      	mov	r5, r9
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	4085      	lsls	r5, r0
 8000e60:	4851      	ldr	r0, [pc, #324]	; (8000fa8 <__aeabi_ddiv+0x254>)
 8000e62:	033c      	lsls	r4, r7, #12
 8000e64:	1a83      	subs	r3, r0, r2
 8000e66:	469b      	mov	fp, r3
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	007b      	lsls	r3, r7, #1
 8000e70:	4650      	mov	r0, sl
 8000e72:	0b24      	lsrs	r4, r4, #12
 8000e74:	0d5b      	lsrs	r3, r3, #21
 8000e76:	0fff      	lsrs	r7, r7, #31
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d197      	bne.n	8000dac <__aeabi_ddiv+0x58>
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	4322      	orrs	r2, r4
 8000e80:	d055      	beq.n	8000f2e <__aeabi_ddiv+0x1da>
 8000e82:	2c00      	cmp	r4, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_ddiv+0x134>
 8000e86:	e1ca      	b.n	800121e <__aeabi_ddiv+0x4ca>
 8000e88:	0020      	movs	r0, r4
 8000e8a:	f001 fa11 	bl	80022b0 <__clzsi2>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	3a0b      	subs	r2, #11
 8000e92:	231d      	movs	r3, #29
 8000e94:	0001      	movs	r1, r0
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	4652      	mov	r2, sl
 8000e9a:	3908      	subs	r1, #8
 8000e9c:	40da      	lsrs	r2, r3
 8000e9e:	408c      	lsls	r4, r1
 8000ea0:	4314      	orrs	r4, r2
 8000ea2:	4652      	mov	r2, sl
 8000ea4:	408a      	lsls	r2, r1
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <__aeabi_ddiv+0x258>)
 8000ea8:	4458      	add	r0, fp
 8000eaa:	469b      	mov	fp, r3
 8000eac:	4483      	add	fp, r0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e78d      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	d140      	bne.n	8000f3c <__aeabi_ddiv+0x1e8>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	3b06      	subs	r3, #6
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	4683      	mov	fp, r0
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	e769      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000ec8:	46b2      	mov	sl, r6
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d0a9      	beq.n	8000e24 <__aeabi_ddiv+0xd0>
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_ddiv+0x182>
 8000ed4:	e211      	b.n	80012fa <__aeabi_ddiv+0x5a6>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d093      	beq.n	8000e02 <__aeabi_ddiv+0xae>
 8000eda:	4a35      	ldr	r2, [pc, #212]	; (8000fb0 <__aeabi_ddiv+0x25c>)
 8000edc:	445a      	add	r2, fp
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	dc00      	bgt.n	8000ee4 <__aeabi_ddiv+0x190>
 8000ee2:	e13c      	b.n	800115e <__aeabi_ddiv+0x40a>
 8000ee4:	076b      	lsls	r3, r5, #29
 8000ee6:	d000      	beq.n	8000eea <__aeabi_ddiv+0x196>
 8000ee8:	e1a7      	b.n	800123a <__aeabi_ddiv+0x4e6>
 8000eea:	08ed      	lsrs	r5, r5, #3
 8000eec:	4643      	mov	r3, r8
 8000eee:	01db      	lsls	r3, r3, #7
 8000ef0:	d506      	bpl.n	8000f00 <__aeabi_ddiv+0x1ac>
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <__aeabi_ddiv+0x260>)
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	4690      	mov	r8, r2
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	445a      	add	r2, fp
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <__aeabi_ddiv+0x264>)
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dc8e      	bgt.n	8000e24 <__aeabi_ddiv+0xd0>
 8000f06:	4643      	mov	r3, r8
 8000f08:	0552      	lsls	r2, r2, #21
 8000f0a:	0758      	lsls	r0, r3, #29
 8000f0c:	025c      	lsls	r4, r3, #9
 8000f0e:	4305      	orrs	r5, r0
 8000f10:	0b24      	lsrs	r4, r4, #12
 8000f12:	0d53      	lsrs	r3, r2, #21
 8000f14:	e778      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f16:	46ba      	mov	sl, r7
 8000f18:	46a0      	mov	r8, r4
 8000f1a:	0015      	movs	r5, r2
 8000f1c:	9000      	str	r0, [sp, #0]
 8000f1e:	e7d4      	b.n	8000eca <__aeabi_ddiv+0x176>
 8000f20:	464a      	mov	r2, r9
 8000f22:	2303      	movs	r3, #3
 8000f24:	431a      	orrs	r2, r3
 8000f26:	4691      	mov	r9, r2
 8000f28:	2003      	movs	r0, #3
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	e74f      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000f2e:	4649      	mov	r1, r9
 8000f30:	2301      	movs	r3, #1
 8000f32:	4319      	orrs	r1, r3
 8000f34:	4689      	mov	r9, r1
 8000f36:	2400      	movs	r4, #0
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e748      	b.n	8000dce <__aeabi_ddiv+0x7a>
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	4699      	mov	r9, r3
 8000f40:	3b09      	subs	r3, #9
 8000f42:	46a0      	mov	r8, r4
 8000f44:	4683      	mov	fp, r0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	e728      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	2300      	movs	r3, #0
 8000f50:	469b      	mov	fp, r3
 8000f52:	3301      	adds	r3, #1
 8000f54:	2500      	movs	r5, #0
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	e720      	b.n	8000d9c <__aeabi_ddiv+0x48>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	469a      	mov	sl, r3
 8000f60:	2500      	movs	r5, #0
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	e74f      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	4641      	mov	r1, r8
 8000f6c:	031b      	lsls	r3, r3, #12
 8000f6e:	4219      	tst	r1, r3
 8000f70:	d008      	beq.n	8000f84 <__aeabi_ddiv+0x230>
 8000f72:	421c      	tst	r4, r3
 8000f74:	d106      	bne.n	8000f84 <__aeabi_ddiv+0x230>
 8000f76:	431c      	orrs	r4, r3
 8000f78:	0324      	lsls	r4, r4, #12
 8000f7a:	46ba      	mov	sl, r7
 8000f7c:	0015      	movs	r5, r2
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000f80:	0b24      	lsrs	r4, r4, #12
 8000f82:	e741      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f84:	2480      	movs	r4, #128	; 0x80
 8000f86:	4643      	mov	r3, r8
 8000f88:	0324      	lsls	r4, r4, #12
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	46b2      	mov	sl, r6
 8000f90:	4b01      	ldr	r3, [pc, #4]	; (8000f98 <__aeabi_ddiv+0x244>)
 8000f92:	0b24      	lsrs	r4, r4, #12
 8000f94:	e738      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	000007ff 	.word	0x000007ff
 8000f9c:	fffffc01 	.word	0xfffffc01
 8000fa0:	0800cc78 	.word	0x0800cc78
 8000fa4:	fffff801 	.word	0xfffff801
 8000fa8:	fffffc0d 	.word	0xfffffc0d
 8000fac:	000003f3 	.word	0x000003f3
 8000fb0:	000003ff 	.word	0x000003ff
 8000fb4:	feffffff 	.word	0xfeffffff
 8000fb8:	000007fe 	.word	0x000007fe
 8000fbc:	4544      	cmp	r4, r8
 8000fbe:	d200      	bcs.n	8000fc2 <__aeabi_ddiv+0x26e>
 8000fc0:	e116      	b.n	80011f0 <__aeabi_ddiv+0x49c>
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x272>
 8000fc4:	e111      	b.n	80011ea <__aeabi_ddiv+0x496>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	425b      	negs	r3, r3
 8000fca:	469c      	mov	ip, r3
 8000fcc:	002e      	movs	r6, r5
 8000fce:	4640      	mov	r0, r8
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	44e3      	add	fp, ip
 8000fd4:	0223      	lsls	r3, r4, #8
 8000fd6:	0e14      	lsrs	r4, r2, #24
 8000fd8:	431c      	orrs	r4, r3
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	4699      	mov	r9, r3
 8000fde:	0423      	lsls	r3, r4, #16
 8000fe0:	0c1f      	lsrs	r7, r3, #16
 8000fe2:	0212      	lsls	r2, r2, #8
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	9200      	str	r2, [sp, #0]
 8000fe8:	9701      	str	r7, [sp, #4]
 8000fea:	f7ff f92f 	bl	800024c <__aeabi_uidivmod>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	437a      	muls	r2, r7
 8000ff2:	040b      	lsls	r3, r1, #16
 8000ff4:	0c31      	lsrs	r1, r6, #16
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	4319      	orrs	r1, r3
 8000ffa:	428a      	cmp	r2, r1
 8000ffc:	d90b      	bls.n	8001016 <__aeabi_ddiv+0x2c2>
 8000ffe:	2301      	movs	r3, #1
 8001000:	425b      	negs	r3, r3
 8001002:	469c      	mov	ip, r3
 8001004:	1909      	adds	r1, r1, r4
 8001006:	44e0      	add	r8, ip
 8001008:	428c      	cmp	r4, r1
 800100a:	d804      	bhi.n	8001016 <__aeabi_ddiv+0x2c2>
 800100c:	428a      	cmp	r2, r1
 800100e:	d902      	bls.n	8001016 <__aeabi_ddiv+0x2c2>
 8001010:	1e83      	subs	r3, r0, #2
 8001012:	4698      	mov	r8, r3
 8001014:	1909      	adds	r1, r1, r4
 8001016:	1a88      	subs	r0, r1, r2
 8001018:	4649      	mov	r1, r9
 800101a:	f7ff f917 	bl	800024c <__aeabi_uidivmod>
 800101e:	0409      	lsls	r1, r1, #16
 8001020:	468c      	mov	ip, r1
 8001022:	0431      	lsls	r1, r6, #16
 8001024:	4666      	mov	r6, ip
 8001026:	9a01      	ldr	r2, [sp, #4]
 8001028:	0c09      	lsrs	r1, r1, #16
 800102a:	4342      	muls	r2, r0
 800102c:	0003      	movs	r3, r0
 800102e:	4331      	orrs	r1, r6
 8001030:	428a      	cmp	r2, r1
 8001032:	d904      	bls.n	800103e <__aeabi_ddiv+0x2ea>
 8001034:	1909      	adds	r1, r1, r4
 8001036:	3b01      	subs	r3, #1
 8001038:	428c      	cmp	r4, r1
 800103a:	d800      	bhi.n	800103e <__aeabi_ddiv+0x2ea>
 800103c:	e111      	b.n	8001262 <__aeabi_ddiv+0x50e>
 800103e:	1a89      	subs	r1, r1, r2
 8001040:	4642      	mov	r2, r8
 8001042:	9e00      	ldr	r6, [sp, #0]
 8001044:	0412      	lsls	r2, r2, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	0c33      	lsrs	r3, r6, #16
 800104a:	001f      	movs	r7, r3
 800104c:	0c10      	lsrs	r0, r2, #16
 800104e:	4690      	mov	r8, r2
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	0413      	lsls	r3, r2, #16
 8001054:	0432      	lsls	r2, r6, #16
 8001056:	0c16      	lsrs	r6, r2, #16
 8001058:	0032      	movs	r2, r6
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	435a      	muls	r2, r3
 800105e:	9603      	str	r6, [sp, #12]
 8001060:	437b      	muls	r3, r7
 8001062:	4346      	muls	r6, r0
 8001064:	4378      	muls	r0, r7
 8001066:	0c17      	lsrs	r7, r2, #16
 8001068:	46bc      	mov	ip, r7
 800106a:	199b      	adds	r3, r3, r6
 800106c:	4463      	add	r3, ip
 800106e:	429e      	cmp	r6, r3
 8001070:	d903      	bls.n	800107a <__aeabi_ddiv+0x326>
 8001072:	2680      	movs	r6, #128	; 0x80
 8001074:	0276      	lsls	r6, r6, #9
 8001076:	46b4      	mov	ip, r6
 8001078:	4460      	add	r0, ip
 800107a:	0c1e      	lsrs	r6, r3, #16
 800107c:	1830      	adds	r0, r6, r0
 800107e:	0416      	lsls	r6, r2, #16
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	0c36      	lsrs	r6, r6, #16
 8001084:	199e      	adds	r6, r3, r6
 8001086:	4281      	cmp	r1, r0
 8001088:	d200      	bcs.n	800108c <__aeabi_ddiv+0x338>
 800108a:	e09c      	b.n	80011c6 <__aeabi_ddiv+0x472>
 800108c:	d100      	bne.n	8001090 <__aeabi_ddiv+0x33c>
 800108e:	e097      	b.n	80011c0 <__aeabi_ddiv+0x46c>
 8001090:	1bae      	subs	r6, r5, r6
 8001092:	1a09      	subs	r1, r1, r0
 8001094:	42b5      	cmp	r5, r6
 8001096:	4180      	sbcs	r0, r0
 8001098:	4240      	negs	r0, r0
 800109a:	1a08      	subs	r0, r1, r0
 800109c:	4284      	cmp	r4, r0
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x34e>
 80010a0:	e111      	b.n	80012c6 <__aeabi_ddiv+0x572>
 80010a2:	4649      	mov	r1, r9
 80010a4:	f7ff f8d2 	bl	800024c <__aeabi_uidivmod>
 80010a8:	9a01      	ldr	r2, [sp, #4]
 80010aa:	040b      	lsls	r3, r1, #16
 80010ac:	4342      	muls	r2, r0
 80010ae:	0c31      	lsrs	r1, r6, #16
 80010b0:	0005      	movs	r5, r0
 80010b2:	4319      	orrs	r1, r3
 80010b4:	428a      	cmp	r2, r1
 80010b6:	d907      	bls.n	80010c8 <__aeabi_ddiv+0x374>
 80010b8:	1909      	adds	r1, r1, r4
 80010ba:	3d01      	subs	r5, #1
 80010bc:	428c      	cmp	r4, r1
 80010be:	d803      	bhi.n	80010c8 <__aeabi_ddiv+0x374>
 80010c0:	428a      	cmp	r2, r1
 80010c2:	d901      	bls.n	80010c8 <__aeabi_ddiv+0x374>
 80010c4:	1e85      	subs	r5, r0, #2
 80010c6:	1909      	adds	r1, r1, r4
 80010c8:	1a88      	subs	r0, r1, r2
 80010ca:	4649      	mov	r1, r9
 80010cc:	f7ff f8be 	bl	800024c <__aeabi_uidivmod>
 80010d0:	0409      	lsls	r1, r1, #16
 80010d2:	468c      	mov	ip, r1
 80010d4:	0431      	lsls	r1, r6, #16
 80010d6:	4666      	mov	r6, ip
 80010d8:	9a01      	ldr	r2, [sp, #4]
 80010da:	0c09      	lsrs	r1, r1, #16
 80010dc:	4342      	muls	r2, r0
 80010de:	0003      	movs	r3, r0
 80010e0:	4331      	orrs	r1, r6
 80010e2:	428a      	cmp	r2, r1
 80010e4:	d907      	bls.n	80010f6 <__aeabi_ddiv+0x3a2>
 80010e6:	1909      	adds	r1, r1, r4
 80010e8:	3b01      	subs	r3, #1
 80010ea:	428c      	cmp	r4, r1
 80010ec:	d803      	bhi.n	80010f6 <__aeabi_ddiv+0x3a2>
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d901      	bls.n	80010f6 <__aeabi_ddiv+0x3a2>
 80010f2:	1e83      	subs	r3, r0, #2
 80010f4:	1909      	adds	r1, r1, r4
 80010f6:	9e03      	ldr	r6, [sp, #12]
 80010f8:	1a89      	subs	r1, r1, r2
 80010fa:	0032      	movs	r2, r6
 80010fc:	042d      	lsls	r5, r5, #16
 80010fe:	431d      	orrs	r5, r3
 8001100:	9f02      	ldr	r7, [sp, #8]
 8001102:	042b      	lsls	r3, r5, #16
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	435a      	muls	r2, r3
 8001108:	437b      	muls	r3, r7
 800110a:	469c      	mov	ip, r3
 800110c:	0c28      	lsrs	r0, r5, #16
 800110e:	4346      	muls	r6, r0
 8001110:	0c13      	lsrs	r3, r2, #16
 8001112:	44b4      	add	ip, r6
 8001114:	4463      	add	r3, ip
 8001116:	4378      	muls	r0, r7
 8001118:	429e      	cmp	r6, r3
 800111a:	d903      	bls.n	8001124 <__aeabi_ddiv+0x3d0>
 800111c:	2680      	movs	r6, #128	; 0x80
 800111e:	0276      	lsls	r6, r6, #9
 8001120:	46b4      	mov	ip, r6
 8001122:	4460      	add	r0, ip
 8001124:	0c1e      	lsrs	r6, r3, #16
 8001126:	0412      	lsls	r2, r2, #16
 8001128:	041b      	lsls	r3, r3, #16
 800112a:	0c12      	lsrs	r2, r2, #16
 800112c:	1830      	adds	r0, r6, r0
 800112e:	189b      	adds	r3, r3, r2
 8001130:	4281      	cmp	r1, r0
 8001132:	d306      	bcc.n	8001142 <__aeabi_ddiv+0x3ee>
 8001134:	d002      	beq.n	800113c <__aeabi_ddiv+0x3e8>
 8001136:	2301      	movs	r3, #1
 8001138:	431d      	orrs	r5, r3
 800113a:	e6ce      	b.n	8000eda <__aeabi_ddiv+0x186>
 800113c:	2b00      	cmp	r3, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x3ee>
 8001140:	e6cb      	b.n	8000eda <__aeabi_ddiv+0x186>
 8001142:	1861      	adds	r1, r4, r1
 8001144:	1e6e      	subs	r6, r5, #1
 8001146:	42a1      	cmp	r1, r4
 8001148:	d200      	bcs.n	800114c <__aeabi_ddiv+0x3f8>
 800114a:	e0a4      	b.n	8001296 <__aeabi_ddiv+0x542>
 800114c:	4281      	cmp	r1, r0
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0x3fe>
 8001150:	e0c9      	b.n	80012e6 <__aeabi_ddiv+0x592>
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x402>
 8001154:	e0d9      	b.n	800130a <__aeabi_ddiv+0x5b6>
 8001156:	0035      	movs	r5, r6
 8001158:	e7ed      	b.n	8001136 <__aeabi_ddiv+0x3e2>
 800115a:	2501      	movs	r5, #1
 800115c:	426d      	negs	r5, r5
 800115e:	2101      	movs	r1, #1
 8001160:	1a89      	subs	r1, r1, r2
 8001162:	2938      	cmp	r1, #56	; 0x38
 8001164:	dd00      	ble.n	8001168 <__aeabi_ddiv+0x414>
 8001166:	e64c      	b.n	8000e02 <__aeabi_ddiv+0xae>
 8001168:	291f      	cmp	r1, #31
 800116a:	dc00      	bgt.n	800116e <__aeabi_ddiv+0x41a>
 800116c:	e07f      	b.n	800126e <__aeabi_ddiv+0x51a>
 800116e:	231f      	movs	r3, #31
 8001170:	425b      	negs	r3, r3
 8001172:	1a9a      	subs	r2, r3, r2
 8001174:	4643      	mov	r3, r8
 8001176:	40d3      	lsrs	r3, r2
 8001178:	2920      	cmp	r1, #32
 800117a:	d004      	beq.n	8001186 <__aeabi_ddiv+0x432>
 800117c:	4644      	mov	r4, r8
 800117e:	4a65      	ldr	r2, [pc, #404]	; (8001314 <__aeabi_ddiv+0x5c0>)
 8001180:	445a      	add	r2, fp
 8001182:	4094      	lsls	r4, r2
 8001184:	4325      	orrs	r5, r4
 8001186:	1e6a      	subs	r2, r5, #1
 8001188:	4195      	sbcs	r5, r2
 800118a:	2207      	movs	r2, #7
 800118c:	432b      	orrs	r3, r5
 800118e:	0015      	movs	r5, r2
 8001190:	2400      	movs	r4, #0
 8001192:	401d      	ands	r5, r3
 8001194:	421a      	tst	r2, r3
 8001196:	d100      	bne.n	800119a <__aeabi_ddiv+0x446>
 8001198:	e0a1      	b.n	80012de <__aeabi_ddiv+0x58a>
 800119a:	220f      	movs	r2, #15
 800119c:	2400      	movs	r4, #0
 800119e:	401a      	ands	r2, r3
 80011a0:	2a04      	cmp	r2, #4
 80011a2:	d100      	bne.n	80011a6 <__aeabi_ddiv+0x452>
 80011a4:	e098      	b.n	80012d8 <__aeabi_ddiv+0x584>
 80011a6:	1d1a      	adds	r2, r3, #4
 80011a8:	429a      	cmp	r2, r3
 80011aa:	419b      	sbcs	r3, r3
 80011ac:	425b      	negs	r3, r3
 80011ae:	18e4      	adds	r4, r4, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	0222      	lsls	r2, r4, #8
 80011b4:	d400      	bmi.n	80011b8 <__aeabi_ddiv+0x464>
 80011b6:	e08f      	b.n	80012d8 <__aeabi_ddiv+0x584>
 80011b8:	2301      	movs	r3, #1
 80011ba:	2400      	movs	r4, #0
 80011bc:	2500      	movs	r5, #0
 80011be:	e623      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 80011c0:	42b5      	cmp	r5, r6
 80011c2:	d300      	bcc.n	80011c6 <__aeabi_ddiv+0x472>
 80011c4:	e764      	b.n	8001090 <__aeabi_ddiv+0x33c>
 80011c6:	4643      	mov	r3, r8
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	9b00      	ldr	r3, [sp, #0]
 80011cc:	469c      	mov	ip, r3
 80011ce:	4465      	add	r5, ip
 80011d0:	001f      	movs	r7, r3
 80011d2:	429d      	cmp	r5, r3
 80011d4:	419b      	sbcs	r3, r3
 80011d6:	425b      	negs	r3, r3
 80011d8:	191b      	adds	r3, r3, r4
 80011da:	18c9      	adds	r1, r1, r3
 80011dc:	428c      	cmp	r4, r1
 80011de:	d23a      	bcs.n	8001256 <__aeabi_ddiv+0x502>
 80011e0:	4288      	cmp	r0, r1
 80011e2:	d863      	bhi.n	80012ac <__aeabi_ddiv+0x558>
 80011e4:	d060      	beq.n	80012a8 <__aeabi_ddiv+0x554>
 80011e6:	4690      	mov	r8, r2
 80011e8:	e752      	b.n	8001090 <__aeabi_ddiv+0x33c>
 80011ea:	42aa      	cmp	r2, r5
 80011ec:	d900      	bls.n	80011f0 <__aeabi_ddiv+0x49c>
 80011ee:	e6ea      	b.n	8000fc6 <__aeabi_ddiv+0x272>
 80011f0:	4643      	mov	r3, r8
 80011f2:	07de      	lsls	r6, r3, #31
 80011f4:	0858      	lsrs	r0, r3, #1
 80011f6:	086b      	lsrs	r3, r5, #1
 80011f8:	431e      	orrs	r6, r3
 80011fa:	07ed      	lsls	r5, r5, #31
 80011fc:	e6ea      	b.n	8000fd4 <__aeabi_ddiv+0x280>
 80011fe:	4648      	mov	r0, r9
 8001200:	f001 f856 	bl	80022b0 <__clzsi2>
 8001204:	0001      	movs	r1, r0
 8001206:	0002      	movs	r2, r0
 8001208:	3115      	adds	r1, #21
 800120a:	3220      	adds	r2, #32
 800120c:	291c      	cmp	r1, #28
 800120e:	dc00      	bgt.n	8001212 <__aeabi_ddiv+0x4be>
 8001210:	e61a      	b.n	8000e48 <__aeabi_ddiv+0xf4>
 8001212:	464b      	mov	r3, r9
 8001214:	3808      	subs	r0, #8
 8001216:	4083      	lsls	r3, r0
 8001218:	2500      	movs	r5, #0
 800121a:	4698      	mov	r8, r3
 800121c:	e620      	b.n	8000e60 <__aeabi_ddiv+0x10c>
 800121e:	f001 f847 	bl	80022b0 <__clzsi2>
 8001222:	0003      	movs	r3, r0
 8001224:	001a      	movs	r2, r3
 8001226:	3215      	adds	r2, #21
 8001228:	3020      	adds	r0, #32
 800122a:	2a1c      	cmp	r2, #28
 800122c:	dc00      	bgt.n	8001230 <__aeabi_ddiv+0x4dc>
 800122e:	e630      	b.n	8000e92 <__aeabi_ddiv+0x13e>
 8001230:	4654      	mov	r4, sl
 8001232:	3b08      	subs	r3, #8
 8001234:	2200      	movs	r2, #0
 8001236:	409c      	lsls	r4, r3
 8001238:	e635      	b.n	8000ea6 <__aeabi_ddiv+0x152>
 800123a:	230f      	movs	r3, #15
 800123c:	402b      	ands	r3, r5
 800123e:	2b04      	cmp	r3, #4
 8001240:	d100      	bne.n	8001244 <__aeabi_ddiv+0x4f0>
 8001242:	e652      	b.n	8000eea <__aeabi_ddiv+0x196>
 8001244:	2305      	movs	r3, #5
 8001246:	425b      	negs	r3, r3
 8001248:	42ab      	cmp	r3, r5
 800124a:	419b      	sbcs	r3, r3
 800124c:	3504      	adds	r5, #4
 800124e:	425b      	negs	r3, r3
 8001250:	08ed      	lsrs	r5, r5, #3
 8001252:	4498      	add	r8, r3
 8001254:	e64a      	b.n	8000eec <__aeabi_ddiv+0x198>
 8001256:	428c      	cmp	r4, r1
 8001258:	d1c5      	bne.n	80011e6 <__aeabi_ddiv+0x492>
 800125a:	42af      	cmp	r7, r5
 800125c:	d9c0      	bls.n	80011e0 <__aeabi_ddiv+0x48c>
 800125e:	4690      	mov	r8, r2
 8001260:	e716      	b.n	8001090 <__aeabi_ddiv+0x33c>
 8001262:	428a      	cmp	r2, r1
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x514>
 8001266:	e6ea      	b.n	800103e <__aeabi_ddiv+0x2ea>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1909      	adds	r1, r1, r4
 800126c:	e6e7      	b.n	800103e <__aeabi_ddiv+0x2ea>
 800126e:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <__aeabi_ddiv+0x5c4>)
 8001270:	0028      	movs	r0, r5
 8001272:	445a      	add	r2, fp
 8001274:	4643      	mov	r3, r8
 8001276:	4095      	lsls	r5, r2
 8001278:	4093      	lsls	r3, r2
 800127a:	40c8      	lsrs	r0, r1
 800127c:	1e6a      	subs	r2, r5, #1
 800127e:	4195      	sbcs	r5, r2
 8001280:	4644      	mov	r4, r8
 8001282:	4303      	orrs	r3, r0
 8001284:	432b      	orrs	r3, r5
 8001286:	40cc      	lsrs	r4, r1
 8001288:	075a      	lsls	r2, r3, #29
 800128a:	d092      	beq.n	80011b2 <__aeabi_ddiv+0x45e>
 800128c:	220f      	movs	r2, #15
 800128e:	401a      	ands	r2, r3
 8001290:	2a04      	cmp	r2, #4
 8001292:	d188      	bne.n	80011a6 <__aeabi_ddiv+0x452>
 8001294:	e78d      	b.n	80011b2 <__aeabi_ddiv+0x45e>
 8001296:	0035      	movs	r5, r6
 8001298:	4281      	cmp	r1, r0
 800129a:	d000      	beq.n	800129e <__aeabi_ddiv+0x54a>
 800129c:	e74b      	b.n	8001136 <__aeabi_ddiv+0x3e2>
 800129e:	9a00      	ldr	r2, [sp, #0]
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x552>
 80012a4:	e747      	b.n	8001136 <__aeabi_ddiv+0x3e2>
 80012a6:	e618      	b.n	8000eda <__aeabi_ddiv+0x186>
 80012a8:	42ae      	cmp	r6, r5
 80012aa:	d99c      	bls.n	80011e6 <__aeabi_ddiv+0x492>
 80012ac:	2302      	movs	r3, #2
 80012ae:	425b      	negs	r3, r3
 80012b0:	469c      	mov	ip, r3
 80012b2:	9b00      	ldr	r3, [sp, #0]
 80012b4:	44e0      	add	r8, ip
 80012b6:	469c      	mov	ip, r3
 80012b8:	4465      	add	r5, ip
 80012ba:	429d      	cmp	r5, r3
 80012bc:	419b      	sbcs	r3, r3
 80012be:	425b      	negs	r3, r3
 80012c0:	191b      	adds	r3, r3, r4
 80012c2:	18c9      	adds	r1, r1, r3
 80012c4:	e6e4      	b.n	8001090 <__aeabi_ddiv+0x33c>
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <__aeabi_ddiv+0x5c8>)
 80012c8:	445a      	add	r2, fp
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	dc00      	bgt.n	80012d0 <__aeabi_ddiv+0x57c>
 80012ce:	e744      	b.n	800115a <__aeabi_ddiv+0x406>
 80012d0:	2301      	movs	r3, #1
 80012d2:	2500      	movs	r5, #0
 80012d4:	4498      	add	r8, r3
 80012d6:	e609      	b.n	8000eec <__aeabi_ddiv+0x198>
 80012d8:	0765      	lsls	r5, r4, #29
 80012da:	0264      	lsls	r4, r4, #9
 80012dc:	0b24      	lsrs	r4, r4, #12
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	431d      	orrs	r5, r3
 80012e2:	2300      	movs	r3, #0
 80012e4:	e590      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 80012e6:	9e00      	ldr	r6, [sp, #0]
 80012e8:	3d02      	subs	r5, #2
 80012ea:	0072      	lsls	r2, r6, #1
 80012ec:	42b2      	cmp	r2, r6
 80012ee:	41bf      	sbcs	r7, r7
 80012f0:	427f      	negs	r7, r7
 80012f2:	193c      	adds	r4, r7, r4
 80012f4:	1909      	adds	r1, r1, r4
 80012f6:	9200      	str	r2, [sp, #0]
 80012f8:	e7ce      	b.n	8001298 <__aeabi_ddiv+0x544>
 80012fa:	2480      	movs	r4, #128	; 0x80
 80012fc:	4643      	mov	r3, r8
 80012fe:	0324      	lsls	r4, r4, #12
 8001300:	431c      	orrs	r4, r3
 8001302:	0324      	lsls	r4, r4, #12
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <__aeabi_ddiv+0x5cc>)
 8001306:	0b24      	lsrs	r4, r4, #12
 8001308:	e57e      	b.n	8000e08 <__aeabi_ddiv+0xb4>
 800130a:	9a00      	ldr	r2, [sp, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d3ea      	bcc.n	80012e6 <__aeabi_ddiv+0x592>
 8001310:	0035      	movs	r5, r6
 8001312:	e7c4      	b.n	800129e <__aeabi_ddiv+0x54a>
 8001314:	0000043e 	.word	0x0000043e
 8001318:	0000041e 	.word	0x0000041e
 800131c:	000003ff 	.word	0x000003ff
 8001320:	000007ff 	.word	0x000007ff

08001324 <__eqdf2>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	464f      	mov	r7, r9
 8001328:	4646      	mov	r6, r8
 800132a:	46d6      	mov	lr, sl
 800132c:	4694      	mov	ip, r2
 800132e:	4691      	mov	r9, r2
 8001330:	031a      	lsls	r2, r3, #12
 8001332:	0b12      	lsrs	r2, r2, #12
 8001334:	4d18      	ldr	r5, [pc, #96]	; (8001398 <__eqdf2+0x74>)
 8001336:	b5c0      	push	{r6, r7, lr}
 8001338:	004c      	lsls	r4, r1, #1
 800133a:	030f      	lsls	r7, r1, #12
 800133c:	4692      	mov	sl, r2
 800133e:	005a      	lsls	r2, r3, #1
 8001340:	0006      	movs	r6, r0
 8001342:	4680      	mov	r8, r0
 8001344:	0b3f      	lsrs	r7, r7, #12
 8001346:	2001      	movs	r0, #1
 8001348:	0d64      	lsrs	r4, r4, #21
 800134a:	0fc9      	lsrs	r1, r1, #31
 800134c:	0d52      	lsrs	r2, r2, #21
 800134e:	0fdb      	lsrs	r3, r3, #31
 8001350:	42ac      	cmp	r4, r5
 8001352:	d00a      	beq.n	800136a <__eqdf2+0x46>
 8001354:	42aa      	cmp	r2, r5
 8001356:	d003      	beq.n	8001360 <__eqdf2+0x3c>
 8001358:	4294      	cmp	r4, r2
 800135a:	d101      	bne.n	8001360 <__eqdf2+0x3c>
 800135c:	4557      	cmp	r7, sl
 800135e:	d00d      	beq.n	800137c <__eqdf2+0x58>
 8001360:	bce0      	pop	{r5, r6, r7}
 8001362:	46ba      	mov	sl, r7
 8001364:	46b1      	mov	r9, r6
 8001366:	46a8      	mov	r8, r5
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136a:	003d      	movs	r5, r7
 800136c:	4335      	orrs	r5, r6
 800136e:	d1f7      	bne.n	8001360 <__eqdf2+0x3c>
 8001370:	42a2      	cmp	r2, r4
 8001372:	d1f5      	bne.n	8001360 <__eqdf2+0x3c>
 8001374:	4652      	mov	r2, sl
 8001376:	4665      	mov	r5, ip
 8001378:	432a      	orrs	r2, r5
 800137a:	d1f1      	bne.n	8001360 <__eqdf2+0x3c>
 800137c:	2001      	movs	r0, #1
 800137e:	45c8      	cmp	r8, r9
 8001380:	d1ee      	bne.n	8001360 <__eqdf2+0x3c>
 8001382:	4299      	cmp	r1, r3
 8001384:	d006      	beq.n	8001394 <__eqdf2+0x70>
 8001386:	2c00      	cmp	r4, #0
 8001388:	d1ea      	bne.n	8001360 <__eqdf2+0x3c>
 800138a:	433e      	orrs	r6, r7
 800138c:	0030      	movs	r0, r6
 800138e:	1e46      	subs	r6, r0, #1
 8001390:	41b0      	sbcs	r0, r6
 8001392:	e7e5      	b.n	8001360 <__eqdf2+0x3c>
 8001394:	2000      	movs	r0, #0
 8001396:	e7e3      	b.n	8001360 <__eqdf2+0x3c>
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	464e      	mov	r6, r9
 80013a0:	4645      	mov	r5, r8
 80013a2:	4657      	mov	r7, sl
 80013a4:	46de      	mov	lr, fp
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	0016      	movs	r6, r2
 80013ae:	031b      	lsls	r3, r3, #12
 80013b0:	0b1b      	lsrs	r3, r3, #12
 80013b2:	4d32      	ldr	r5, [pc, #200]	; (800147c <__gedf2+0xe0>)
 80013b4:	030f      	lsls	r7, r1, #12
 80013b6:	004a      	lsls	r2, r1, #1
 80013b8:	4699      	mov	r9, r3
 80013ba:	0043      	lsls	r3, r0, #1
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d029      	beq.n	8001422 <__gedf2+0x86>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d018      	beq.n	8001404 <__gedf2+0x68>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d12a      	bne.n	800142c <__gedf2+0x90>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	46a3      	mov	fp, r4
 80013da:	4265      	negs	r5, r4
 80013dc:	4165      	adcs	r5, r4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <__gedf2+0x4c>
 80013e2:	464c      	mov	r4, r9
 80013e4:	4326      	orrs	r6, r4
 80013e6:	d027      	beq.n	8001438 <__gedf2+0x9c>
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	d115      	bne.n	8001418 <__gedf2+0x7c>
 80013ec:	4281      	cmp	r1, r0
 80013ee:	d028      	beq.n	8001442 <__gedf2+0xa6>
 80013f0:	2002      	movs	r0, #2
 80013f2:	3901      	subs	r1, #1
 80013f4:	4008      	ands	r0, r1
 80013f6:	3801      	subs	r0, #1
 80013f8:	bcf0      	pop	{r4, r5, r6, r7}
 80013fa:	46bb      	mov	fp, r7
 80013fc:	46b2      	mov	sl, r6
 80013fe:	46a9      	mov	r9, r5
 8001400:	46a0      	mov	r8, r4
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	464d      	mov	r5, r9
 8001406:	432e      	orrs	r6, r5
 8001408:	d12f      	bne.n	800146a <__gedf2+0xce>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d1ee      	bne.n	80013ec <__gedf2+0x50>
 800140e:	433c      	orrs	r4, r7
 8001410:	4265      	negs	r5, r4
 8001412:	4165      	adcs	r5, r4
 8001414:	2d00      	cmp	r5, #0
 8001416:	d0e9      	beq.n	80013ec <__gedf2+0x50>
 8001418:	2800      	cmp	r0, #0
 800141a:	d1ed      	bne.n	80013f8 <__gedf2+0x5c>
 800141c:	2001      	movs	r0, #1
 800141e:	4240      	negs	r0, r0
 8001420:	e7ea      	b.n	80013f8 <__gedf2+0x5c>
 8001422:	003d      	movs	r5, r7
 8001424:	4325      	orrs	r5, r4
 8001426:	d120      	bne.n	800146a <__gedf2+0xce>
 8001428:	4293      	cmp	r3, r2
 800142a:	d0eb      	beq.n	8001404 <__gedf2+0x68>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1dd      	bne.n	80013ec <__gedf2+0x50>
 8001430:	464c      	mov	r4, r9
 8001432:	4326      	orrs	r6, r4
 8001434:	d1da      	bne.n	80013ec <__gedf2+0x50>
 8001436:	e7db      	b.n	80013f0 <__gedf2+0x54>
 8001438:	465b      	mov	r3, fp
 800143a:	2000      	movs	r0, #0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0db      	beq.n	80013f8 <__gedf2+0x5c>
 8001440:	e7d6      	b.n	80013f0 <__gedf2+0x54>
 8001442:	429a      	cmp	r2, r3
 8001444:	dc0a      	bgt.n	800145c <__gedf2+0xc0>
 8001446:	dbe7      	blt.n	8001418 <__gedf2+0x7c>
 8001448:	454f      	cmp	r7, r9
 800144a:	d8d1      	bhi.n	80013f0 <__gedf2+0x54>
 800144c:	d010      	beq.n	8001470 <__gedf2+0xd4>
 800144e:	2000      	movs	r0, #0
 8001450:	454f      	cmp	r7, r9
 8001452:	d2d1      	bcs.n	80013f8 <__gedf2+0x5c>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0e1      	beq.n	800141c <__gedf2+0x80>
 8001458:	0008      	movs	r0, r1
 800145a:	e7cd      	b.n	80013f8 <__gedf2+0x5c>
 800145c:	4243      	negs	r3, r0
 800145e:	4158      	adcs	r0, r3
 8001460:	2302      	movs	r3, #2
 8001462:	4240      	negs	r0, r0
 8001464:	4018      	ands	r0, r3
 8001466:	3801      	subs	r0, #1
 8001468:	e7c6      	b.n	80013f8 <__gedf2+0x5c>
 800146a:	2002      	movs	r0, #2
 800146c:	4240      	negs	r0, r0
 800146e:	e7c3      	b.n	80013f8 <__gedf2+0x5c>
 8001470:	45c4      	cmp	ip, r8
 8001472:	d8bd      	bhi.n	80013f0 <__gedf2+0x54>
 8001474:	2000      	movs	r0, #0
 8001476:	45c4      	cmp	ip, r8
 8001478:	d2be      	bcs.n	80013f8 <__gedf2+0x5c>
 800147a:	e7eb      	b.n	8001454 <__gedf2+0xb8>
 800147c:	000007ff 	.word	0x000007ff

08001480 <__ledf2>:
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	464e      	mov	r6, r9
 8001484:	4645      	mov	r5, r8
 8001486:	4657      	mov	r7, sl
 8001488:	46de      	mov	lr, fp
 800148a:	0004      	movs	r4, r0
 800148c:	0018      	movs	r0, r3
 800148e:	b5e0      	push	{r5, r6, r7, lr}
 8001490:	0016      	movs	r6, r2
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	0b1b      	lsrs	r3, r3, #12
 8001496:	4d31      	ldr	r5, [pc, #196]	; (800155c <__ledf2+0xdc>)
 8001498:	030f      	lsls	r7, r1, #12
 800149a:	004a      	lsls	r2, r1, #1
 800149c:	4699      	mov	r9, r3
 800149e:	0043      	lsls	r3, r0, #1
 80014a0:	46a4      	mov	ip, r4
 80014a2:	46b0      	mov	r8, r6
 80014a4:	0b3f      	lsrs	r7, r7, #12
 80014a6:	0d52      	lsrs	r2, r2, #21
 80014a8:	0fc9      	lsrs	r1, r1, #31
 80014aa:	0d5b      	lsrs	r3, r3, #21
 80014ac:	0fc0      	lsrs	r0, r0, #31
 80014ae:	42aa      	cmp	r2, r5
 80014b0:	d011      	beq.n	80014d6 <__ledf2+0x56>
 80014b2:	42ab      	cmp	r3, r5
 80014b4:	d014      	beq.n	80014e0 <__ledf2+0x60>
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d12f      	bne.n	800151a <__ledf2+0x9a>
 80014ba:	433c      	orrs	r4, r7
 80014bc:	46a3      	mov	fp, r4
 80014be:	4265      	negs	r5, r4
 80014c0:	4165      	adcs	r5, r4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d114      	bne.n	80014f0 <__ledf2+0x70>
 80014c6:	464c      	mov	r4, r9
 80014c8:	4326      	orrs	r6, r4
 80014ca:	d111      	bne.n	80014f0 <__ledf2+0x70>
 80014cc:	465b      	mov	r3, fp
 80014ce:	2000      	movs	r0, #0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d017      	beq.n	8001504 <__ledf2+0x84>
 80014d4:	e010      	b.n	80014f8 <__ledf2+0x78>
 80014d6:	003d      	movs	r5, r7
 80014d8:	4325      	orrs	r5, r4
 80014da:	d112      	bne.n	8001502 <__ledf2+0x82>
 80014dc:	4293      	cmp	r3, r2
 80014de:	d11c      	bne.n	800151a <__ledf2+0x9a>
 80014e0:	464d      	mov	r5, r9
 80014e2:	432e      	orrs	r6, r5
 80014e4:	d10d      	bne.n	8001502 <__ledf2+0x82>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d104      	bne.n	80014f4 <__ledf2+0x74>
 80014ea:	433c      	orrs	r4, r7
 80014ec:	4265      	negs	r5, r4
 80014ee:	4165      	adcs	r5, r4
 80014f0:	2d00      	cmp	r5, #0
 80014f2:	d10d      	bne.n	8001510 <__ledf2+0x90>
 80014f4:	4281      	cmp	r1, r0
 80014f6:	d016      	beq.n	8001526 <__ledf2+0xa6>
 80014f8:	2002      	movs	r0, #2
 80014fa:	3901      	subs	r1, #1
 80014fc:	4008      	ands	r0, r1
 80014fe:	3801      	subs	r0, #1
 8001500:	e000      	b.n	8001504 <__ledf2+0x84>
 8001502:	2002      	movs	r0, #2
 8001504:	bcf0      	pop	{r4, r5, r6, r7}
 8001506:	46bb      	mov	fp, r7
 8001508:	46b2      	mov	sl, r6
 800150a:	46a9      	mov	r9, r5
 800150c:	46a0      	mov	r8, r4
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001510:	2800      	cmp	r0, #0
 8001512:	d1f7      	bne.n	8001504 <__ledf2+0x84>
 8001514:	2001      	movs	r0, #1
 8001516:	4240      	negs	r0, r0
 8001518:	e7f4      	b.n	8001504 <__ledf2+0x84>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ea      	bne.n	80014f4 <__ledf2+0x74>
 800151e:	464c      	mov	r4, r9
 8001520:	4326      	orrs	r6, r4
 8001522:	d1e7      	bne.n	80014f4 <__ledf2+0x74>
 8001524:	e7e8      	b.n	80014f8 <__ledf2+0x78>
 8001526:	429a      	cmp	r2, r3
 8001528:	dd06      	ble.n	8001538 <__ledf2+0xb8>
 800152a:	4243      	negs	r3, r0
 800152c:	4158      	adcs	r0, r3
 800152e:	2302      	movs	r3, #2
 8001530:	4240      	negs	r0, r0
 8001532:	4018      	ands	r0, r3
 8001534:	3801      	subs	r0, #1
 8001536:	e7e5      	b.n	8001504 <__ledf2+0x84>
 8001538:	429a      	cmp	r2, r3
 800153a:	dbe9      	blt.n	8001510 <__ledf2+0x90>
 800153c:	454f      	cmp	r7, r9
 800153e:	d8db      	bhi.n	80014f8 <__ledf2+0x78>
 8001540:	d006      	beq.n	8001550 <__ledf2+0xd0>
 8001542:	2000      	movs	r0, #0
 8001544:	454f      	cmp	r7, r9
 8001546:	d2dd      	bcs.n	8001504 <__ledf2+0x84>
 8001548:	2900      	cmp	r1, #0
 800154a:	d0e3      	beq.n	8001514 <__ledf2+0x94>
 800154c:	0008      	movs	r0, r1
 800154e:	e7d9      	b.n	8001504 <__ledf2+0x84>
 8001550:	45c4      	cmp	ip, r8
 8001552:	d8d1      	bhi.n	80014f8 <__ledf2+0x78>
 8001554:	2000      	movs	r0, #0
 8001556:	45c4      	cmp	ip, r8
 8001558:	d2d4      	bcs.n	8001504 <__ledf2+0x84>
 800155a:	e7f5      	b.n	8001548 <__ledf2+0xc8>
 800155c:	000007ff 	.word	0x000007ff

08001560 <__aeabi_dmul>:
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	4657      	mov	r7, sl
 8001564:	464e      	mov	r6, r9
 8001566:	4645      	mov	r5, r8
 8001568:	46de      	mov	lr, fp
 800156a:	b5e0      	push	{r5, r6, r7, lr}
 800156c:	4698      	mov	r8, r3
 800156e:	030c      	lsls	r4, r1, #12
 8001570:	004b      	lsls	r3, r1, #1
 8001572:	0006      	movs	r6, r0
 8001574:	4692      	mov	sl, r2
 8001576:	b087      	sub	sp, #28
 8001578:	0b24      	lsrs	r4, r4, #12
 800157a:	0d5b      	lsrs	r3, r3, #21
 800157c:	0fcf      	lsrs	r7, r1, #31
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <__aeabi_dmul+0xfc>
 8001582:	4add      	ldr	r2, [pc, #884]	; (80018f8 <__aeabi_dmul+0x398>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0x2a>
 8001588:	e086      	b.n	8001698 <__aeabi_dmul+0x138>
 800158a:	0f42      	lsrs	r2, r0, #29
 800158c:	00e4      	lsls	r4, r4, #3
 800158e:	4314      	orrs	r4, r2
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	0412      	lsls	r2, r2, #16
 8001594:	4314      	orrs	r4, r2
 8001596:	4ad9      	ldr	r2, [pc, #868]	; (80018fc <__aeabi_dmul+0x39c>)
 8001598:	00c5      	lsls	r5, r0, #3
 800159a:	4694      	mov	ip, r2
 800159c:	4463      	add	r3, ip
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	4699      	mov	r9, r3
 80015a4:	469b      	mov	fp, r3
 80015a6:	4643      	mov	r3, r8
 80015a8:	4642      	mov	r2, r8
 80015aa:	031e      	lsls	r6, r3, #12
 80015ac:	0fd2      	lsrs	r2, r2, #31
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4650      	mov	r0, sl
 80015b2:	4690      	mov	r8, r2
 80015b4:	0b36      	lsrs	r6, r6, #12
 80015b6:	0d5b      	lsrs	r3, r3, #21
 80015b8:	d100      	bne.n	80015bc <__aeabi_dmul+0x5c>
 80015ba:	e078      	b.n	80016ae <__aeabi_dmul+0x14e>
 80015bc:	4ace      	ldr	r2, [pc, #824]	; (80018f8 <__aeabi_dmul+0x398>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01d      	beq.n	80015fe <__aeabi_dmul+0x9e>
 80015c2:	49ce      	ldr	r1, [pc, #824]	; (80018fc <__aeabi_dmul+0x39c>)
 80015c4:	0f42      	lsrs	r2, r0, #29
 80015c6:	468c      	mov	ip, r1
 80015c8:	9900      	ldr	r1, [sp, #0]
 80015ca:	4463      	add	r3, ip
 80015cc:	00f6      	lsls	r6, r6, #3
 80015ce:	468c      	mov	ip, r1
 80015d0:	4316      	orrs	r6, r2
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	449c      	add	ip, r3
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	4663      	mov	r3, ip
 80015da:	4316      	orrs	r6, r2
 80015dc:	00c2      	lsls	r2, r0, #3
 80015de:	2000      	movs	r0, #0
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	9900      	ldr	r1, [sp, #0]
 80015e4:	4643      	mov	r3, r8
 80015e6:	3101      	adds	r1, #1
 80015e8:	468c      	mov	ip, r1
 80015ea:	4649      	mov	r1, r9
 80015ec:	407b      	eors	r3, r7
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	290f      	cmp	r1, #15
 80015f2:	d900      	bls.n	80015f6 <__aeabi_dmul+0x96>
 80015f4:	e07e      	b.n	80016f4 <__aeabi_dmul+0x194>
 80015f6:	4bc2      	ldr	r3, [pc, #776]	; (8001900 <__aeabi_dmul+0x3a0>)
 80015f8:	0089      	lsls	r1, r1, #2
 80015fa:	5859      	ldr	r1, [r3, r1]
 80015fc:	468f      	mov	pc, r1
 80015fe:	4652      	mov	r2, sl
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	4332      	orrs	r2, r6
 8001604:	d000      	beq.n	8001608 <__aeabi_dmul+0xa8>
 8001606:	e156      	b.n	80018b6 <__aeabi_dmul+0x356>
 8001608:	49bb      	ldr	r1, [pc, #748]	; (80018f8 <__aeabi_dmul+0x398>)
 800160a:	2600      	movs	r6, #0
 800160c:	468c      	mov	ip, r1
 800160e:	4463      	add	r3, ip
 8001610:	4649      	mov	r1, r9
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2302      	movs	r3, #2
 8001616:	4319      	orrs	r1, r3
 8001618:	4689      	mov	r9, r1
 800161a:	2002      	movs	r0, #2
 800161c:	e7e1      	b.n	80015e2 <__aeabi_dmul+0x82>
 800161e:	4643      	mov	r3, r8
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	0034      	movs	r4, r6
 8001624:	0015      	movs	r5, r2
 8001626:	4683      	mov	fp, r0
 8001628:	465b      	mov	r3, fp
 800162a:	2b02      	cmp	r3, #2
 800162c:	d05e      	beq.n	80016ec <__aeabi_dmul+0x18c>
 800162e:	2b03      	cmp	r3, #3
 8001630:	d100      	bne.n	8001634 <__aeabi_dmul+0xd4>
 8001632:	e1f3      	b.n	8001a1c <__aeabi_dmul+0x4bc>
 8001634:	2b01      	cmp	r3, #1
 8001636:	d000      	beq.n	800163a <__aeabi_dmul+0xda>
 8001638:	e118      	b.n	800186c <__aeabi_dmul+0x30c>
 800163a:	2200      	movs	r2, #0
 800163c:	2400      	movs	r4, #0
 800163e:	2500      	movs	r5, #0
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	0512      	lsls	r2, r2, #20
 8001644:	4322      	orrs	r2, r4
 8001646:	07db      	lsls	r3, r3, #31
 8001648:	431a      	orrs	r2, r3
 800164a:	0028      	movs	r0, r5
 800164c:	0011      	movs	r1, r2
 800164e:	b007      	add	sp, #28
 8001650:	bcf0      	pop	{r4, r5, r6, r7}
 8001652:	46bb      	mov	fp, r7
 8001654:	46b2      	mov	sl, r6
 8001656:	46a9      	mov	r9, r5
 8001658:	46a0      	mov	r8, r4
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	0025      	movs	r5, r4
 800165e:	4305      	orrs	r5, r0
 8001660:	d100      	bne.n	8001664 <__aeabi_dmul+0x104>
 8001662:	e141      	b.n	80018e8 <__aeabi_dmul+0x388>
 8001664:	2c00      	cmp	r4, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dmul+0x10a>
 8001668:	e1ad      	b.n	80019c6 <__aeabi_dmul+0x466>
 800166a:	0020      	movs	r0, r4
 800166c:	f000 fe20 	bl	80022b0 <__clzsi2>
 8001670:	0001      	movs	r1, r0
 8001672:	0002      	movs	r2, r0
 8001674:	390b      	subs	r1, #11
 8001676:	231d      	movs	r3, #29
 8001678:	0010      	movs	r0, r2
 800167a:	1a5b      	subs	r3, r3, r1
 800167c:	0031      	movs	r1, r6
 800167e:	0035      	movs	r5, r6
 8001680:	3808      	subs	r0, #8
 8001682:	4084      	lsls	r4, r0
 8001684:	40d9      	lsrs	r1, r3
 8001686:	4085      	lsls	r5, r0
 8001688:	430c      	orrs	r4, r1
 800168a:	489e      	ldr	r0, [pc, #632]	; (8001904 <__aeabi_dmul+0x3a4>)
 800168c:	1a83      	subs	r3, r0, r2
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	4699      	mov	r9, r3
 8001694:	469b      	mov	fp, r3
 8001696:	e786      	b.n	80015a6 <__aeabi_dmul+0x46>
 8001698:	0005      	movs	r5, r0
 800169a:	4325      	orrs	r5, r4
 800169c:	d000      	beq.n	80016a0 <__aeabi_dmul+0x140>
 800169e:	e11c      	b.n	80018da <__aeabi_dmul+0x37a>
 80016a0:	2208      	movs	r2, #8
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2302      	movs	r3, #2
 80016a6:	2400      	movs	r4, #0
 80016a8:	4691      	mov	r9, r2
 80016aa:	469b      	mov	fp, r3
 80016ac:	e77b      	b.n	80015a6 <__aeabi_dmul+0x46>
 80016ae:	4652      	mov	r2, sl
 80016b0:	4332      	orrs	r2, r6
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dmul+0x156>
 80016b4:	e10a      	b.n	80018cc <__aeabi_dmul+0x36c>
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	d100      	bne.n	80016bc <__aeabi_dmul+0x15c>
 80016ba:	e176      	b.n	80019aa <__aeabi_dmul+0x44a>
 80016bc:	0030      	movs	r0, r6
 80016be:	f000 fdf7 	bl	80022b0 <__clzsi2>
 80016c2:	0002      	movs	r2, r0
 80016c4:	3a0b      	subs	r2, #11
 80016c6:	231d      	movs	r3, #29
 80016c8:	0001      	movs	r1, r0
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	3908      	subs	r1, #8
 80016d0:	40da      	lsrs	r2, r3
 80016d2:	408e      	lsls	r6, r1
 80016d4:	4316      	orrs	r6, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	408a      	lsls	r2, r1
 80016da:	9b00      	ldr	r3, [sp, #0]
 80016dc:	4989      	ldr	r1, [pc, #548]	; (8001904 <__aeabi_dmul+0x3a4>)
 80016de:	1a18      	subs	r0, r3, r0
 80016e0:	0003      	movs	r3, r0
 80016e2:	468c      	mov	ip, r1
 80016e4:	4463      	add	r3, ip
 80016e6:	2000      	movs	r0, #0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	e77a      	b.n	80015e2 <__aeabi_dmul+0x82>
 80016ec:	2400      	movs	r4, #0
 80016ee:	2500      	movs	r5, #0
 80016f0:	4a81      	ldr	r2, [pc, #516]	; (80018f8 <__aeabi_dmul+0x398>)
 80016f2:	e7a5      	b.n	8001640 <__aeabi_dmul+0xe0>
 80016f4:	0c2f      	lsrs	r7, r5, #16
 80016f6:	042d      	lsls	r5, r5, #16
 80016f8:	0c2d      	lsrs	r5, r5, #16
 80016fa:	002b      	movs	r3, r5
 80016fc:	0c11      	lsrs	r1, r2, #16
 80016fe:	0412      	lsls	r2, r2, #16
 8001700:	0c12      	lsrs	r2, r2, #16
 8001702:	4353      	muls	r3, r2
 8001704:	4698      	mov	r8, r3
 8001706:	0013      	movs	r3, r2
 8001708:	0028      	movs	r0, r5
 800170a:	437b      	muls	r3, r7
 800170c:	4699      	mov	r9, r3
 800170e:	4348      	muls	r0, r1
 8001710:	4448      	add	r0, r9
 8001712:	4683      	mov	fp, r0
 8001714:	4640      	mov	r0, r8
 8001716:	000b      	movs	r3, r1
 8001718:	0c00      	lsrs	r0, r0, #16
 800171a:	4682      	mov	sl, r0
 800171c:	4658      	mov	r0, fp
 800171e:	437b      	muls	r3, r7
 8001720:	4450      	add	r0, sl
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	4581      	cmp	r9, r0
 8001726:	d906      	bls.n	8001736 <__aeabi_dmul+0x1d6>
 8001728:	469a      	mov	sl, r3
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	44ca      	add	sl, r9
 8001732:	4653      	mov	r3, sl
 8001734:	9302      	str	r3, [sp, #8]
 8001736:	0c03      	lsrs	r3, r0, #16
 8001738:	469b      	mov	fp, r3
 800173a:	4643      	mov	r3, r8
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	0400      	lsls	r0, r0, #16
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	4698      	mov	r8, r3
 8001744:	0003      	movs	r3, r0
 8001746:	4443      	add	r3, r8
 8001748:	9304      	str	r3, [sp, #16]
 800174a:	0c33      	lsrs	r3, r6, #16
 800174c:	4699      	mov	r9, r3
 800174e:	002b      	movs	r3, r5
 8001750:	0436      	lsls	r6, r6, #16
 8001752:	0c36      	lsrs	r6, r6, #16
 8001754:	4373      	muls	r3, r6
 8001756:	4698      	mov	r8, r3
 8001758:	0033      	movs	r3, r6
 800175a:	437b      	muls	r3, r7
 800175c:	469a      	mov	sl, r3
 800175e:	464b      	mov	r3, r9
 8001760:	435d      	muls	r5, r3
 8001762:	435f      	muls	r7, r3
 8001764:	4643      	mov	r3, r8
 8001766:	4455      	add	r5, sl
 8001768:	0c18      	lsrs	r0, r3, #16
 800176a:	1940      	adds	r0, r0, r5
 800176c:	4582      	cmp	sl, r0
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x218>
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	469a      	mov	sl, r3
 8001776:	4457      	add	r7, sl
 8001778:	0c05      	lsrs	r5, r0, #16
 800177a:	19eb      	adds	r3, r5, r7
 800177c:	9305      	str	r3, [sp, #20]
 800177e:	4643      	mov	r3, r8
 8001780:	041d      	lsls	r5, r3, #16
 8001782:	0c2d      	lsrs	r5, r5, #16
 8001784:	0400      	lsls	r0, r0, #16
 8001786:	1940      	adds	r0, r0, r5
 8001788:	0c25      	lsrs	r5, r4, #16
 800178a:	0424      	lsls	r4, r4, #16
 800178c:	0c24      	lsrs	r4, r4, #16
 800178e:	0027      	movs	r7, r4
 8001790:	4357      	muls	r7, r2
 8001792:	436a      	muls	r2, r5
 8001794:	4690      	mov	r8, r2
 8001796:	002a      	movs	r2, r5
 8001798:	0c3b      	lsrs	r3, r7, #16
 800179a:	469a      	mov	sl, r3
 800179c:	434a      	muls	r2, r1
 800179e:	4361      	muls	r1, r4
 80017a0:	4441      	add	r1, r8
 80017a2:	4451      	add	r1, sl
 80017a4:	4483      	add	fp, r0
 80017a6:	4588      	cmp	r8, r1
 80017a8:	d903      	bls.n	80017b2 <__aeabi_dmul+0x252>
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	4698      	mov	r8, r3
 80017b0:	4442      	add	r2, r8
 80017b2:	043f      	lsls	r7, r7, #16
 80017b4:	0c0b      	lsrs	r3, r1, #16
 80017b6:	0c3f      	lsrs	r7, r7, #16
 80017b8:	0409      	lsls	r1, r1, #16
 80017ba:	19c9      	adds	r1, r1, r7
 80017bc:	0027      	movs	r7, r4
 80017be:	4698      	mov	r8, r3
 80017c0:	464b      	mov	r3, r9
 80017c2:	4377      	muls	r7, r6
 80017c4:	435c      	muls	r4, r3
 80017c6:	436e      	muls	r6, r5
 80017c8:	435d      	muls	r5, r3
 80017ca:	0c3b      	lsrs	r3, r7, #16
 80017cc:	4699      	mov	r9, r3
 80017ce:	19a4      	adds	r4, r4, r6
 80017d0:	444c      	add	r4, r9
 80017d2:	4442      	add	r2, r8
 80017d4:	9503      	str	r5, [sp, #12]
 80017d6:	42a6      	cmp	r6, r4
 80017d8:	d904      	bls.n	80017e4 <__aeabi_dmul+0x284>
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	4698      	mov	r8, r3
 80017e0:	4445      	add	r5, r8
 80017e2:	9503      	str	r5, [sp, #12]
 80017e4:	9b02      	ldr	r3, [sp, #8]
 80017e6:	043f      	lsls	r7, r7, #16
 80017e8:	445b      	add	r3, fp
 80017ea:	001e      	movs	r6, r3
 80017ec:	4283      	cmp	r3, r0
 80017ee:	4180      	sbcs	r0, r0
 80017f0:	0423      	lsls	r3, r4, #16
 80017f2:	4698      	mov	r8, r3
 80017f4:	9b05      	ldr	r3, [sp, #20]
 80017f6:	0c3f      	lsrs	r7, r7, #16
 80017f8:	4447      	add	r7, r8
 80017fa:	4698      	mov	r8, r3
 80017fc:	1876      	adds	r6, r6, r1
 80017fe:	428e      	cmp	r6, r1
 8001800:	4189      	sbcs	r1, r1
 8001802:	4447      	add	r7, r8
 8001804:	4240      	negs	r0, r0
 8001806:	183d      	adds	r5, r7, r0
 8001808:	46a8      	mov	r8, r5
 800180a:	4693      	mov	fp, r2
 800180c:	4249      	negs	r1, r1
 800180e:	468a      	mov	sl, r1
 8001810:	44c3      	add	fp, r8
 8001812:	429f      	cmp	r7, r3
 8001814:	41bf      	sbcs	r7, r7
 8001816:	4580      	cmp	r8, r0
 8001818:	4180      	sbcs	r0, r0
 800181a:	9b03      	ldr	r3, [sp, #12]
 800181c:	44da      	add	sl, fp
 800181e:	4698      	mov	r8, r3
 8001820:	4653      	mov	r3, sl
 8001822:	4240      	negs	r0, r0
 8001824:	427f      	negs	r7, r7
 8001826:	4307      	orrs	r7, r0
 8001828:	0c24      	lsrs	r4, r4, #16
 800182a:	4593      	cmp	fp, r2
 800182c:	4192      	sbcs	r2, r2
 800182e:	458a      	cmp	sl, r1
 8001830:	4189      	sbcs	r1, r1
 8001832:	193f      	adds	r7, r7, r4
 8001834:	0ddc      	lsrs	r4, r3, #23
 8001836:	9b04      	ldr	r3, [sp, #16]
 8001838:	0275      	lsls	r5, r6, #9
 800183a:	431d      	orrs	r5, r3
 800183c:	1e68      	subs	r0, r5, #1
 800183e:	4185      	sbcs	r5, r0
 8001840:	4653      	mov	r3, sl
 8001842:	4252      	negs	r2, r2
 8001844:	4249      	negs	r1, r1
 8001846:	430a      	orrs	r2, r1
 8001848:	18bf      	adds	r7, r7, r2
 800184a:	4447      	add	r7, r8
 800184c:	0df6      	lsrs	r6, r6, #23
 800184e:	027f      	lsls	r7, r7, #9
 8001850:	4335      	orrs	r5, r6
 8001852:	025a      	lsls	r2, r3, #9
 8001854:	433c      	orrs	r4, r7
 8001856:	4315      	orrs	r5, r2
 8001858:	01fb      	lsls	r3, r7, #7
 800185a:	d400      	bmi.n	800185e <__aeabi_dmul+0x2fe>
 800185c:	e0c1      	b.n	80019e2 <__aeabi_dmul+0x482>
 800185e:	2101      	movs	r1, #1
 8001860:	086a      	lsrs	r2, r5, #1
 8001862:	400d      	ands	r5, r1
 8001864:	4315      	orrs	r5, r2
 8001866:	07e2      	lsls	r2, r4, #31
 8001868:	4315      	orrs	r5, r2
 800186a:	0864      	lsrs	r4, r4, #1
 800186c:	4926      	ldr	r1, [pc, #152]	; (8001908 <__aeabi_dmul+0x3a8>)
 800186e:	4461      	add	r1, ip
 8001870:	2900      	cmp	r1, #0
 8001872:	dd56      	ble.n	8001922 <__aeabi_dmul+0x3c2>
 8001874:	076b      	lsls	r3, r5, #29
 8001876:	d009      	beq.n	800188c <__aeabi_dmul+0x32c>
 8001878:	220f      	movs	r2, #15
 800187a:	402a      	ands	r2, r5
 800187c:	2a04      	cmp	r2, #4
 800187e:	d005      	beq.n	800188c <__aeabi_dmul+0x32c>
 8001880:	1d2a      	adds	r2, r5, #4
 8001882:	42aa      	cmp	r2, r5
 8001884:	41ad      	sbcs	r5, r5
 8001886:	426d      	negs	r5, r5
 8001888:	1964      	adds	r4, r4, r5
 800188a:	0015      	movs	r5, r2
 800188c:	01e3      	lsls	r3, r4, #7
 800188e:	d504      	bpl.n	800189a <__aeabi_dmul+0x33a>
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <__aeabi_dmul+0x3ac>)
 8001894:	00c9      	lsls	r1, r1, #3
 8001896:	4014      	ands	r4, r2
 8001898:	4461      	add	r1, ip
 800189a:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <__aeabi_dmul+0x3b0>)
 800189c:	4291      	cmp	r1, r2
 800189e:	dd00      	ble.n	80018a2 <__aeabi_dmul+0x342>
 80018a0:	e724      	b.n	80016ec <__aeabi_dmul+0x18c>
 80018a2:	0762      	lsls	r2, r4, #29
 80018a4:	08ed      	lsrs	r5, r5, #3
 80018a6:	0264      	lsls	r4, r4, #9
 80018a8:	0549      	lsls	r1, r1, #21
 80018aa:	4315      	orrs	r5, r2
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	0d4a      	lsrs	r2, r1, #21
 80018b0:	e6c6      	b.n	8001640 <__aeabi_dmul+0xe0>
 80018b2:	9701      	str	r7, [sp, #4]
 80018b4:	e6b8      	b.n	8001628 <__aeabi_dmul+0xc8>
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <__aeabi_dmul+0x398>)
 80018b8:	2003      	movs	r0, #3
 80018ba:	4694      	mov	ip, r2
 80018bc:	4463      	add	r3, ip
 80018be:	464a      	mov	r2, r9
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2303      	movs	r3, #3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	4691      	mov	r9, r2
 80018c8:	4652      	mov	r2, sl
 80018ca:	e68a      	b.n	80015e2 <__aeabi_dmul+0x82>
 80018cc:	4649      	mov	r1, r9
 80018ce:	2301      	movs	r3, #1
 80018d0:	4319      	orrs	r1, r3
 80018d2:	4689      	mov	r9, r1
 80018d4:	2600      	movs	r6, #0
 80018d6:	2001      	movs	r0, #1
 80018d8:	e683      	b.n	80015e2 <__aeabi_dmul+0x82>
 80018da:	220c      	movs	r2, #12
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2303      	movs	r3, #3
 80018e0:	0005      	movs	r5, r0
 80018e2:	4691      	mov	r9, r2
 80018e4:	469b      	mov	fp, r3
 80018e6:	e65e      	b.n	80015a6 <__aeabi_dmul+0x46>
 80018e8:	2304      	movs	r3, #4
 80018ea:	4699      	mov	r9, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	2400      	movs	r4, #0
 80018f4:	469b      	mov	fp, r3
 80018f6:	e656      	b.n	80015a6 <__aeabi_dmul+0x46>
 80018f8:	000007ff 	.word	0x000007ff
 80018fc:	fffffc01 	.word	0xfffffc01
 8001900:	0800ccb8 	.word	0x0800ccb8
 8001904:	fffffc0d 	.word	0xfffffc0d
 8001908:	000003ff 	.word	0x000003ff
 800190c:	feffffff 	.word	0xfeffffff
 8001910:	000007fe 	.word	0x000007fe
 8001914:	2300      	movs	r3, #0
 8001916:	2480      	movs	r4, #128	; 0x80
 8001918:	2500      	movs	r5, #0
 800191a:	4a44      	ldr	r2, [pc, #272]	; (8001a2c <__aeabi_dmul+0x4cc>)
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	0324      	lsls	r4, r4, #12
 8001920:	e68e      	b.n	8001640 <__aeabi_dmul+0xe0>
 8001922:	2001      	movs	r0, #1
 8001924:	1a40      	subs	r0, r0, r1
 8001926:	2838      	cmp	r0, #56	; 0x38
 8001928:	dd00      	ble.n	800192c <__aeabi_dmul+0x3cc>
 800192a:	e686      	b.n	800163a <__aeabi_dmul+0xda>
 800192c:	281f      	cmp	r0, #31
 800192e:	dd5b      	ble.n	80019e8 <__aeabi_dmul+0x488>
 8001930:	221f      	movs	r2, #31
 8001932:	0023      	movs	r3, r4
 8001934:	4252      	negs	r2, r2
 8001936:	1a51      	subs	r1, r2, r1
 8001938:	40cb      	lsrs	r3, r1
 800193a:	0019      	movs	r1, r3
 800193c:	2820      	cmp	r0, #32
 800193e:	d003      	beq.n	8001948 <__aeabi_dmul+0x3e8>
 8001940:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <__aeabi_dmul+0x4d0>)
 8001942:	4462      	add	r2, ip
 8001944:	4094      	lsls	r4, r2
 8001946:	4325      	orrs	r5, r4
 8001948:	1e6a      	subs	r2, r5, #1
 800194a:	4195      	sbcs	r5, r2
 800194c:	002a      	movs	r2, r5
 800194e:	430a      	orrs	r2, r1
 8001950:	2107      	movs	r1, #7
 8001952:	000d      	movs	r5, r1
 8001954:	2400      	movs	r4, #0
 8001956:	4015      	ands	r5, r2
 8001958:	4211      	tst	r1, r2
 800195a:	d05b      	beq.n	8001a14 <__aeabi_dmul+0x4b4>
 800195c:	210f      	movs	r1, #15
 800195e:	2400      	movs	r4, #0
 8001960:	4011      	ands	r1, r2
 8001962:	2904      	cmp	r1, #4
 8001964:	d053      	beq.n	8001a0e <__aeabi_dmul+0x4ae>
 8001966:	1d11      	adds	r1, r2, #4
 8001968:	4291      	cmp	r1, r2
 800196a:	4192      	sbcs	r2, r2
 800196c:	4252      	negs	r2, r2
 800196e:	18a4      	adds	r4, r4, r2
 8001970:	000a      	movs	r2, r1
 8001972:	0223      	lsls	r3, r4, #8
 8001974:	d54b      	bpl.n	8001a0e <__aeabi_dmul+0x4ae>
 8001976:	2201      	movs	r2, #1
 8001978:	2400      	movs	r4, #0
 800197a:	2500      	movs	r5, #0
 800197c:	e660      	b.n	8001640 <__aeabi_dmul+0xe0>
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	031b      	lsls	r3, r3, #12
 8001982:	421c      	tst	r4, r3
 8001984:	d009      	beq.n	800199a <__aeabi_dmul+0x43a>
 8001986:	421e      	tst	r6, r3
 8001988:	d107      	bne.n	800199a <__aeabi_dmul+0x43a>
 800198a:	4333      	orrs	r3, r6
 800198c:	031c      	lsls	r4, r3, #12
 800198e:	4643      	mov	r3, r8
 8001990:	0015      	movs	r5, r2
 8001992:	0b24      	lsrs	r4, r4, #12
 8001994:	4a25      	ldr	r2, [pc, #148]	; (8001a2c <__aeabi_dmul+0x4cc>)
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	e652      	b.n	8001640 <__aeabi_dmul+0xe0>
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4314      	orrs	r4, r2
 80019a0:	0324      	lsls	r4, r4, #12
 80019a2:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <__aeabi_dmul+0x4cc>)
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	9701      	str	r7, [sp, #4]
 80019a8:	e64a      	b.n	8001640 <__aeabi_dmul+0xe0>
 80019aa:	f000 fc81 	bl	80022b0 <__clzsi2>
 80019ae:	0003      	movs	r3, r0
 80019b0:	001a      	movs	r2, r3
 80019b2:	3215      	adds	r2, #21
 80019b4:	3020      	adds	r0, #32
 80019b6:	2a1c      	cmp	r2, #28
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dmul+0x45c>
 80019ba:	e684      	b.n	80016c6 <__aeabi_dmul+0x166>
 80019bc:	4656      	mov	r6, sl
 80019be:	3b08      	subs	r3, #8
 80019c0:	2200      	movs	r2, #0
 80019c2:	409e      	lsls	r6, r3
 80019c4:	e689      	b.n	80016da <__aeabi_dmul+0x17a>
 80019c6:	f000 fc73 	bl	80022b0 <__clzsi2>
 80019ca:	0001      	movs	r1, r0
 80019cc:	0002      	movs	r2, r0
 80019ce:	3115      	adds	r1, #21
 80019d0:	3220      	adds	r2, #32
 80019d2:	291c      	cmp	r1, #28
 80019d4:	dc00      	bgt.n	80019d8 <__aeabi_dmul+0x478>
 80019d6:	e64e      	b.n	8001676 <__aeabi_dmul+0x116>
 80019d8:	0034      	movs	r4, r6
 80019da:	3808      	subs	r0, #8
 80019dc:	2500      	movs	r5, #0
 80019de:	4084      	lsls	r4, r0
 80019e0:	e653      	b.n	800168a <__aeabi_dmul+0x12a>
 80019e2:	9b00      	ldr	r3, [sp, #0]
 80019e4:	469c      	mov	ip, r3
 80019e6:	e741      	b.n	800186c <__aeabi_dmul+0x30c>
 80019e8:	4912      	ldr	r1, [pc, #72]	; (8001a34 <__aeabi_dmul+0x4d4>)
 80019ea:	0022      	movs	r2, r4
 80019ec:	4461      	add	r1, ip
 80019ee:	002e      	movs	r6, r5
 80019f0:	408d      	lsls	r5, r1
 80019f2:	408a      	lsls	r2, r1
 80019f4:	40c6      	lsrs	r6, r0
 80019f6:	1e69      	subs	r1, r5, #1
 80019f8:	418d      	sbcs	r5, r1
 80019fa:	4332      	orrs	r2, r6
 80019fc:	432a      	orrs	r2, r5
 80019fe:	40c4      	lsrs	r4, r0
 8001a00:	0753      	lsls	r3, r2, #29
 8001a02:	d0b6      	beq.n	8001972 <__aeabi_dmul+0x412>
 8001a04:	210f      	movs	r1, #15
 8001a06:	4011      	ands	r1, r2
 8001a08:	2904      	cmp	r1, #4
 8001a0a:	d1ac      	bne.n	8001966 <__aeabi_dmul+0x406>
 8001a0c:	e7b1      	b.n	8001972 <__aeabi_dmul+0x412>
 8001a0e:	0765      	lsls	r5, r4, #29
 8001a10:	0264      	lsls	r4, r4, #9
 8001a12:	0b24      	lsrs	r4, r4, #12
 8001a14:	08d2      	lsrs	r2, r2, #3
 8001a16:	4315      	orrs	r5, r2
 8001a18:	2200      	movs	r2, #0
 8001a1a:	e611      	b.n	8001640 <__aeabi_dmul+0xe0>
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	0312      	lsls	r2, r2, #12
 8001a20:	4314      	orrs	r4, r2
 8001a22:	0324      	lsls	r4, r4, #12
 8001a24:	4a01      	ldr	r2, [pc, #4]	; (8001a2c <__aeabi_dmul+0x4cc>)
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	e60a      	b.n	8001640 <__aeabi_dmul+0xe0>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	0000043e 	.word	0x0000043e
 8001a34:	0000041e 	.word	0x0000041e

08001a38 <__aeabi_dsub>:
 8001a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3a:	4657      	mov	r7, sl
 8001a3c:	464e      	mov	r6, r9
 8001a3e:	4645      	mov	r5, r8
 8001a40:	46de      	mov	lr, fp
 8001a42:	0004      	movs	r4, r0
 8001a44:	b5e0      	push	{r5, r6, r7, lr}
 8001a46:	001f      	movs	r7, r3
 8001a48:	0010      	movs	r0, r2
 8001a4a:	030b      	lsls	r3, r1, #12
 8001a4c:	0f62      	lsrs	r2, r4, #29
 8001a4e:	004e      	lsls	r6, r1, #1
 8001a50:	0fcd      	lsrs	r5, r1, #31
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	0339      	lsls	r1, r7, #12
 8001a56:	4313      	orrs	r3, r2
 8001a58:	0a49      	lsrs	r1, r1, #9
 8001a5a:	00e2      	lsls	r2, r4, #3
 8001a5c:	0f44      	lsrs	r4, r0, #29
 8001a5e:	4321      	orrs	r1, r4
 8001a60:	4cc2      	ldr	r4, [pc, #776]	; (8001d6c <__aeabi_dsub+0x334>)
 8001a62:	4691      	mov	r9, r2
 8001a64:	4692      	mov	sl, r2
 8001a66:	00c0      	lsls	r0, r0, #3
 8001a68:	007a      	lsls	r2, r7, #1
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	0d76      	lsrs	r6, r6, #21
 8001a6e:	0d52      	lsrs	r2, r2, #21
 8001a70:	0fff      	lsrs	r7, r7, #31
 8001a72:	42a2      	cmp	r2, r4
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dsub+0x40>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dsub+0x1aa>
 8001a78:	2401      	movs	r4, #1
 8001a7a:	4067      	eors	r7, r4
 8001a7c:	46bb      	mov	fp, r7
 8001a7e:	42bd      	cmp	r5, r7
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x4c>
 8001a82:	e088      	b.n	8001b96 <__aeabi_dsub+0x15e>
 8001a84:	1ab4      	subs	r4, r6, r2
 8001a86:	46a4      	mov	ip, r4
 8001a88:	2c00      	cmp	r4, #0
 8001a8a:	dc00      	bgt.n	8001a8e <__aeabi_dsub+0x56>
 8001a8c:	e0b2      	b.n	8001bf4 <__aeabi_dsub+0x1bc>
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x5c>
 8001a92:	e0c5      	b.n	8001c20 <__aeabi_dsub+0x1e8>
 8001a94:	4ab5      	ldr	r2, [pc, #724]	; (8001d6c <__aeabi_dsub+0x334>)
 8001a96:	4296      	cmp	r6, r2
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x64>
 8001a9a:	e28b      	b.n	8001fb4 <__aeabi_dsub+0x57c>
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	0412      	lsls	r2, r2, #16
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	4662      	mov	r2, ip
 8001aa4:	2a38      	cmp	r2, #56	; 0x38
 8001aa6:	dd00      	ble.n	8001aaa <__aeabi_dsub+0x72>
 8001aa8:	e1a1      	b.n	8001dee <__aeabi_dsub+0x3b6>
 8001aaa:	2a1f      	cmp	r2, #31
 8001aac:	dd00      	ble.n	8001ab0 <__aeabi_dsub+0x78>
 8001aae:	e216      	b.n	8001ede <__aeabi_dsub+0x4a6>
 8001ab0:	2720      	movs	r7, #32
 8001ab2:	000c      	movs	r4, r1
 8001ab4:	1abf      	subs	r7, r7, r2
 8001ab6:	40bc      	lsls	r4, r7
 8001ab8:	0002      	movs	r2, r0
 8001aba:	46a0      	mov	r8, r4
 8001abc:	4664      	mov	r4, ip
 8001abe:	40b8      	lsls	r0, r7
 8001ac0:	40e2      	lsrs	r2, r4
 8001ac2:	4644      	mov	r4, r8
 8001ac4:	4314      	orrs	r4, r2
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	1e50      	subs	r0, r2, #1
 8001aca:	4182      	sbcs	r2, r0
 8001acc:	4660      	mov	r0, ip
 8001ace:	40c1      	lsrs	r1, r0
 8001ad0:	4322      	orrs	r2, r4
 8001ad2:	1a5b      	subs	r3, r3, r1
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	1a8c      	subs	r4, r1, r2
 8001ad8:	45a1      	cmp	r9, r4
 8001ada:	4192      	sbcs	r2, r2
 8001adc:	4252      	negs	r2, r2
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	4698      	mov	r8, r3
 8001ae2:	4643      	mov	r3, r8
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	d400      	bmi.n	8001aea <__aeabi_dsub+0xb2>
 8001ae8:	e117      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8001aea:	4643      	mov	r3, r8
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	0a5b      	lsrs	r3, r3, #9
 8001af0:	4698      	mov	r8, r3
 8001af2:	4643      	mov	r3, r8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0xc2>
 8001af8:	e16c      	b.n	8001dd4 <__aeabi_dsub+0x39c>
 8001afa:	4640      	mov	r0, r8
 8001afc:	f000 fbd8 	bl	80022b0 <__clzsi2>
 8001b00:	0002      	movs	r2, r0
 8001b02:	3a08      	subs	r2, #8
 8001b04:	2120      	movs	r1, #32
 8001b06:	0020      	movs	r0, r4
 8001b08:	4643      	mov	r3, r8
 8001b0a:	1a89      	subs	r1, r1, r2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	40c8      	lsrs	r0, r1
 8001b10:	4094      	lsls	r4, r2
 8001b12:	4303      	orrs	r3, r0
 8001b14:	4296      	cmp	r6, r2
 8001b16:	dd00      	ble.n	8001b1a <__aeabi_dsub+0xe2>
 8001b18:	e157      	b.n	8001dca <__aeabi_dsub+0x392>
 8001b1a:	1b96      	subs	r6, r2, r6
 8001b1c:	1c71      	adds	r1, r6, #1
 8001b1e:	291f      	cmp	r1, #31
 8001b20:	dd00      	ble.n	8001b24 <__aeabi_dsub+0xec>
 8001b22:	e1cb      	b.n	8001ebc <__aeabi_dsub+0x484>
 8001b24:	2220      	movs	r2, #32
 8001b26:	0018      	movs	r0, r3
 8001b28:	0026      	movs	r6, r4
 8001b2a:	1a52      	subs	r2, r2, r1
 8001b2c:	4094      	lsls	r4, r2
 8001b2e:	4090      	lsls	r0, r2
 8001b30:	40ce      	lsrs	r6, r1
 8001b32:	40cb      	lsrs	r3, r1
 8001b34:	1e62      	subs	r2, r4, #1
 8001b36:	4194      	sbcs	r4, r2
 8001b38:	4330      	orrs	r0, r6
 8001b3a:	4698      	mov	r8, r3
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	4304      	orrs	r4, r0
 8001b40:	0763      	lsls	r3, r4, #29
 8001b42:	d009      	beq.n	8001b58 <__aeabi_dsub+0x120>
 8001b44:	230f      	movs	r3, #15
 8001b46:	4023      	ands	r3, r4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d005      	beq.n	8001b58 <__aeabi_dsub+0x120>
 8001b4c:	1d23      	adds	r3, r4, #4
 8001b4e:	42a3      	cmp	r3, r4
 8001b50:	41a4      	sbcs	r4, r4
 8001b52:	4264      	negs	r4, r4
 8001b54:	44a0      	add	r8, r4
 8001b56:	001c      	movs	r4, r3
 8001b58:	4643      	mov	r3, r8
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	d400      	bmi.n	8001b60 <__aeabi_dsub+0x128>
 8001b5e:	e0df      	b.n	8001d20 <__aeabi_dsub+0x2e8>
 8001b60:	4b82      	ldr	r3, [pc, #520]	; (8001d6c <__aeabi_dsub+0x334>)
 8001b62:	3601      	adds	r6, #1
 8001b64:	429e      	cmp	r6, r3
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x132>
 8001b68:	e0fb      	b.n	8001d62 <__aeabi_dsub+0x32a>
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <__aeabi_dsub+0x338>)
 8001b6e:	08e4      	lsrs	r4, r4, #3
 8001b70:	401a      	ands	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	0571      	lsls	r1, r6, #21
 8001b76:	0752      	lsls	r2, r2, #29
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	4322      	orrs	r2, r4
 8001b7c:	0b1b      	lsrs	r3, r3, #12
 8001b7e:	0d49      	lsrs	r1, r1, #21
 8001b80:	0509      	lsls	r1, r1, #20
 8001b82:	07ed      	lsls	r5, r5, #31
 8001b84:	4319      	orrs	r1, r3
 8001b86:	4329      	orrs	r1, r5
 8001b88:	0010      	movs	r0, r2
 8001b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b8c:	46bb      	mov	fp, r7
 8001b8e:	46b2      	mov	sl, r6
 8001b90:	46a9      	mov	r9, r5
 8001b92:	46a0      	mov	r8, r4
 8001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b96:	1ab4      	subs	r4, r6, r2
 8001b98:	46a4      	mov	ip, r4
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	dd58      	ble.n	8001c50 <__aeabi_dsub+0x218>
 8001b9e:	2a00      	cmp	r2, #0
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x16c>
 8001ba2:	e09e      	b.n	8001ce2 <__aeabi_dsub+0x2aa>
 8001ba4:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <__aeabi_dsub+0x334>)
 8001ba6:	4296      	cmp	r6, r2
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x174>
 8001baa:	e13b      	b.n	8001e24 <__aeabi_dsub+0x3ec>
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	0412      	lsls	r2, r2, #16
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	4662      	mov	r2, ip
 8001bb4:	2a38      	cmp	r2, #56	; 0x38
 8001bb6:	dd00      	ble.n	8001bba <__aeabi_dsub+0x182>
 8001bb8:	e0c1      	b.n	8001d3e <__aeabi_dsub+0x306>
 8001bba:	2a1f      	cmp	r2, #31
 8001bbc:	dc00      	bgt.n	8001bc0 <__aeabi_dsub+0x188>
 8001bbe:	e1bb      	b.n	8001f38 <__aeabi_dsub+0x500>
 8001bc0:	000c      	movs	r4, r1
 8001bc2:	3a20      	subs	r2, #32
 8001bc4:	40d4      	lsrs	r4, r2
 8001bc6:	0022      	movs	r2, r4
 8001bc8:	4664      	mov	r4, ip
 8001bca:	2c20      	cmp	r4, #32
 8001bcc:	d004      	beq.n	8001bd8 <__aeabi_dsub+0x1a0>
 8001bce:	2740      	movs	r7, #64	; 0x40
 8001bd0:	1b3f      	subs	r7, r7, r4
 8001bd2:	40b9      	lsls	r1, r7
 8001bd4:	4308      	orrs	r0, r1
 8001bd6:	4680      	mov	r8, r0
 8001bd8:	4644      	mov	r4, r8
 8001bda:	1e61      	subs	r1, r4, #1
 8001bdc:	418c      	sbcs	r4, r1
 8001bde:	4314      	orrs	r4, r2
 8001be0:	e0b1      	b.n	8001d46 <__aeabi_dsub+0x30e>
 8001be2:	000c      	movs	r4, r1
 8001be4:	4304      	orrs	r4, r0
 8001be6:	d02a      	beq.n	8001c3e <__aeabi_dsub+0x206>
 8001be8:	46bb      	mov	fp, r7
 8001bea:	42bd      	cmp	r5, r7
 8001bec:	d02d      	beq.n	8001c4a <__aeabi_dsub+0x212>
 8001bee:	4c61      	ldr	r4, [pc, #388]	; (8001d74 <__aeabi_dsub+0x33c>)
 8001bf0:	46a4      	mov	ip, r4
 8001bf2:	44b4      	add	ip, r6
 8001bf4:	4664      	mov	r4, ip
 8001bf6:	2c00      	cmp	r4, #0
 8001bf8:	d05c      	beq.n	8001cb4 <__aeabi_dsub+0x27c>
 8001bfa:	1b94      	subs	r4, r2, r6
 8001bfc:	46a4      	mov	ip, r4
 8001bfe:	2e00      	cmp	r6, #0
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x1cc>
 8001c02:	e115      	b.n	8001e30 <__aeabi_dsub+0x3f8>
 8001c04:	464d      	mov	r5, r9
 8001c06:	431d      	orrs	r5, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x1d4>
 8001c0a:	e1c3      	b.n	8001f94 <__aeabi_dsub+0x55c>
 8001c0c:	1e65      	subs	r5, r4, #1
 8001c0e:	2c01      	cmp	r4, #1
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x1dc>
 8001c12:	e20c      	b.n	800202e <__aeabi_dsub+0x5f6>
 8001c14:	4e55      	ldr	r6, [pc, #340]	; (8001d6c <__aeabi_dsub+0x334>)
 8001c16:	42b4      	cmp	r4, r6
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x1e4>
 8001c1a:	e1f8      	b.n	800200e <__aeabi_dsub+0x5d6>
 8001c1c:	46ac      	mov	ip, r5
 8001c1e:	e10e      	b.n	8001e3e <__aeabi_dsub+0x406>
 8001c20:	000a      	movs	r2, r1
 8001c22:	4302      	orrs	r2, r0
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1f0>
 8001c26:	e136      	b.n	8001e96 <__aeabi_dsub+0x45e>
 8001c28:	0022      	movs	r2, r4
 8001c2a:	3a01      	subs	r2, #1
 8001c2c:	2c01      	cmp	r4, #1
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x1fa>
 8001c30:	e1c6      	b.n	8001fc0 <__aeabi_dsub+0x588>
 8001c32:	4c4e      	ldr	r4, [pc, #312]	; (8001d6c <__aeabi_dsub+0x334>)
 8001c34:	45a4      	cmp	ip, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x202>
 8001c38:	e0f4      	b.n	8001e24 <__aeabi_dsub+0x3ec>
 8001c3a:	4694      	mov	ip, r2
 8001c3c:	e731      	b.n	8001aa2 <__aeabi_dsub+0x6a>
 8001c3e:	2401      	movs	r4, #1
 8001c40:	4067      	eors	r7, r4
 8001c42:	46bb      	mov	fp, r7
 8001c44:	42bd      	cmp	r5, r7
 8001c46:	d000      	beq.n	8001c4a <__aeabi_dsub+0x212>
 8001c48:	e71c      	b.n	8001a84 <__aeabi_dsub+0x4c>
 8001c4a:	4c4a      	ldr	r4, [pc, #296]	; (8001d74 <__aeabi_dsub+0x33c>)
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	44b4      	add	ip, r6
 8001c50:	4664      	mov	r4, ip
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x220>
 8001c56:	e0cf      	b.n	8001df8 <__aeabi_dsub+0x3c0>
 8001c58:	1b94      	subs	r4, r2, r6
 8001c5a:	46a4      	mov	ip, r4
 8001c5c:	2e00      	cmp	r6, #0
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dsub+0x22a>
 8001c60:	e15c      	b.n	8001f1c <__aeabi_dsub+0x4e4>
 8001c62:	4e42      	ldr	r6, [pc, #264]	; (8001d6c <__aeabi_dsub+0x334>)
 8001c64:	42b2      	cmp	r2, r6
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dsub+0x232>
 8001c68:	e1ec      	b.n	8002044 <__aeabi_dsub+0x60c>
 8001c6a:	2680      	movs	r6, #128	; 0x80
 8001c6c:	0436      	lsls	r6, r6, #16
 8001c6e:	4333      	orrs	r3, r6
 8001c70:	4664      	mov	r4, ip
 8001c72:	2c38      	cmp	r4, #56	; 0x38
 8001c74:	dd00      	ble.n	8001c78 <__aeabi_dsub+0x240>
 8001c76:	e1b3      	b.n	8001fe0 <__aeabi_dsub+0x5a8>
 8001c78:	2c1f      	cmp	r4, #31
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dsub+0x246>
 8001c7c:	e238      	b.n	80020f0 <__aeabi_dsub+0x6b8>
 8001c7e:	2620      	movs	r6, #32
 8001c80:	1b36      	subs	r6, r6, r4
 8001c82:	001c      	movs	r4, r3
 8001c84:	40b4      	lsls	r4, r6
 8001c86:	464f      	mov	r7, r9
 8001c88:	46a0      	mov	r8, r4
 8001c8a:	4664      	mov	r4, ip
 8001c8c:	40e7      	lsrs	r7, r4
 8001c8e:	4644      	mov	r4, r8
 8001c90:	433c      	orrs	r4, r7
 8001c92:	464f      	mov	r7, r9
 8001c94:	40b7      	lsls	r7, r6
 8001c96:	003e      	movs	r6, r7
 8001c98:	1e77      	subs	r7, r6, #1
 8001c9a:	41be      	sbcs	r6, r7
 8001c9c:	4334      	orrs	r4, r6
 8001c9e:	4666      	mov	r6, ip
 8001ca0:	40f3      	lsrs	r3, r6
 8001ca2:	18c9      	adds	r1, r1, r3
 8001ca4:	1824      	adds	r4, r4, r0
 8001ca6:	4284      	cmp	r4, r0
 8001ca8:	419b      	sbcs	r3, r3
 8001caa:	425b      	negs	r3, r3
 8001cac:	4698      	mov	r8, r3
 8001cae:	0016      	movs	r6, r2
 8001cb0:	4488      	add	r8, r1
 8001cb2:	e04e      	b.n	8001d52 <__aeabi_dsub+0x31a>
 8001cb4:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <__aeabi_dsub+0x340>)
 8001cb6:	1c74      	adds	r4, r6, #1
 8001cb8:	4214      	tst	r4, r2
 8001cba:	d000      	beq.n	8001cbe <__aeabi_dsub+0x286>
 8001cbc:	e0d6      	b.n	8001e6c <__aeabi_dsub+0x434>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	2e00      	cmp	r6, #0
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x290>
 8001cc6:	e15b      	b.n	8001f80 <__aeabi_dsub+0x548>
 8001cc8:	2a00      	cmp	r2, #0
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x296>
 8001ccc:	e1a5      	b.n	800201a <__aeabi_dsub+0x5e2>
 8001cce:	000a      	movs	r2, r1
 8001cd0:	4302      	orrs	r2, r0
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x29e>
 8001cd4:	e1bb      	b.n	800204e <__aeabi_dsub+0x616>
 8001cd6:	464a      	mov	r2, r9
 8001cd8:	0759      	lsls	r1, r3, #29
 8001cda:	08d2      	lsrs	r2, r2, #3
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	e027      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 8001ce2:	000a      	movs	r2, r1
 8001ce4:	4302      	orrs	r2, r0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x2b2>
 8001ce8:	e174      	b.n	8001fd4 <__aeabi_dsub+0x59c>
 8001cea:	0022      	movs	r2, r4
 8001cec:	3a01      	subs	r2, #1
 8001cee:	2c01      	cmp	r4, #1
 8001cf0:	d005      	beq.n	8001cfe <__aeabi_dsub+0x2c6>
 8001cf2:	4c1e      	ldr	r4, [pc, #120]	; (8001d6c <__aeabi_dsub+0x334>)
 8001cf4:	45a4      	cmp	ip, r4
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x2c2>
 8001cf8:	e094      	b.n	8001e24 <__aeabi_dsub+0x3ec>
 8001cfa:	4694      	mov	ip, r2
 8001cfc:	e759      	b.n	8001bb2 <__aeabi_dsub+0x17a>
 8001cfe:	4448      	add	r0, r9
 8001d00:	4548      	cmp	r0, r9
 8001d02:	4192      	sbcs	r2, r2
 8001d04:	185b      	adds	r3, r3, r1
 8001d06:	4698      	mov	r8, r3
 8001d08:	0004      	movs	r4, r0
 8001d0a:	4252      	negs	r2, r2
 8001d0c:	4490      	add	r8, r2
 8001d0e:	4643      	mov	r3, r8
 8001d10:	2602      	movs	r6, #2
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	d500      	bpl.n	8001d18 <__aeabi_dsub+0x2e0>
 8001d16:	e0c4      	b.n	8001ea2 <__aeabi_dsub+0x46a>
 8001d18:	3e01      	subs	r6, #1
 8001d1a:	0763      	lsls	r3, r4, #29
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x2e8>
 8001d1e:	e711      	b.n	8001b44 <__aeabi_dsub+0x10c>
 8001d20:	4643      	mov	r3, r8
 8001d22:	46b4      	mov	ip, r6
 8001d24:	0759      	lsls	r1, r3, #29
 8001d26:	08e2      	lsrs	r2, r4, #3
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	490f      	ldr	r1, [pc, #60]	; (8001d6c <__aeabi_dsub+0x334>)
 8001d2e:	458c      	cmp	ip, r1
 8001d30:	d040      	beq.n	8001db4 <__aeabi_dsub+0x37c>
 8001d32:	4661      	mov	r1, ip
 8001d34:	031b      	lsls	r3, r3, #12
 8001d36:	0549      	lsls	r1, r1, #21
 8001d38:	0b1b      	lsrs	r3, r3, #12
 8001d3a:	0d49      	lsrs	r1, r1, #21
 8001d3c:	e720      	b.n	8001b80 <__aeabi_dsub+0x148>
 8001d3e:	4301      	orrs	r1, r0
 8001d40:	000c      	movs	r4, r1
 8001d42:	1e61      	subs	r1, r4, #1
 8001d44:	418c      	sbcs	r4, r1
 8001d46:	444c      	add	r4, r9
 8001d48:	454c      	cmp	r4, r9
 8001d4a:	4192      	sbcs	r2, r2
 8001d4c:	4252      	negs	r2, r2
 8001d4e:	4690      	mov	r8, r2
 8001d50:	4498      	add	r8, r3
 8001d52:	4643      	mov	r3, r8
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	d5e0      	bpl.n	8001d1a <__aeabi_dsub+0x2e2>
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__aeabi_dsub+0x334>)
 8001d5a:	3601      	adds	r6, #1
 8001d5c:	429e      	cmp	r6, r3
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x32a>
 8001d60:	e09f      	b.n	8001ea2 <__aeabi_dsub+0x46a>
 8001d62:	0031      	movs	r1, r6
 8001d64:	2300      	movs	r3, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e70a      	b.n	8001b80 <__aeabi_dsub+0x148>
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	000007ff 	.word	0x000007ff
 8001d70:	ff7fffff 	.word	0xff7fffff
 8001d74:	fffff801 	.word	0xfffff801
 8001d78:	000007fe 	.word	0x000007fe
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x34a>
 8001d80:	e160      	b.n	8002044 <__aeabi_dsub+0x60c>
 8001d82:	000a      	movs	r2, r1
 8001d84:	4302      	orrs	r2, r0
 8001d86:	d04d      	beq.n	8001e24 <__aeabi_dsub+0x3ec>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	075c      	lsls	r4, r3, #29
 8001d8c:	08d2      	lsrs	r2, r2, #3
 8001d8e:	4322      	orrs	r2, r4
 8001d90:	2480      	movs	r4, #128	; 0x80
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	0324      	lsls	r4, r4, #12
 8001d96:	4223      	tst	r3, r4
 8001d98:	d007      	beq.n	8001daa <__aeabi_dsub+0x372>
 8001d9a:	08ce      	lsrs	r6, r1, #3
 8001d9c:	4226      	tst	r6, r4
 8001d9e:	d104      	bne.n	8001daa <__aeabi_dsub+0x372>
 8001da0:	465d      	mov	r5, fp
 8001da2:	0033      	movs	r3, r6
 8001da4:	08c2      	lsrs	r2, r0, #3
 8001da6:	0749      	lsls	r1, r1, #29
 8001da8:	430a      	orrs	r2, r1
 8001daa:	0f51      	lsrs	r1, r2, #29
 8001dac:	00d2      	lsls	r2, r2, #3
 8001dae:	08d2      	lsrs	r2, r2, #3
 8001db0:	0749      	lsls	r1, r1, #29
 8001db2:	430a      	orrs	r2, r1
 8001db4:	0011      	movs	r1, r2
 8001db6:	4319      	orrs	r1, r3
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x384>
 8001dba:	e1c8      	b.n	800214e <__aeabi_dsub+0x716>
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0309      	lsls	r1, r1, #12
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	031b      	lsls	r3, r3, #12
 8001dc4:	49d5      	ldr	r1, [pc, #852]	; (800211c <__aeabi_dsub+0x6e4>)
 8001dc6:	0b1b      	lsrs	r3, r3, #12
 8001dc8:	e6da      	b.n	8001b80 <__aeabi_dsub+0x148>
 8001dca:	49d5      	ldr	r1, [pc, #852]	; (8002120 <__aeabi_dsub+0x6e8>)
 8001dcc:	1ab6      	subs	r6, r6, r2
 8001dce:	400b      	ands	r3, r1
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	e6b5      	b.n	8001b40 <__aeabi_dsub+0x108>
 8001dd4:	0020      	movs	r0, r4
 8001dd6:	f000 fa6b 	bl	80022b0 <__clzsi2>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	3218      	adds	r2, #24
 8001dde:	2a1f      	cmp	r2, #31
 8001de0:	dc00      	bgt.n	8001de4 <__aeabi_dsub+0x3ac>
 8001de2:	e68f      	b.n	8001b04 <__aeabi_dsub+0xcc>
 8001de4:	0023      	movs	r3, r4
 8001de6:	3808      	subs	r0, #8
 8001de8:	4083      	lsls	r3, r0
 8001dea:	2400      	movs	r4, #0
 8001dec:	e692      	b.n	8001b14 <__aeabi_dsub+0xdc>
 8001dee:	4308      	orrs	r0, r1
 8001df0:	0002      	movs	r2, r0
 8001df2:	1e50      	subs	r0, r2, #1
 8001df4:	4182      	sbcs	r2, r0
 8001df6:	e66d      	b.n	8001ad4 <__aeabi_dsub+0x9c>
 8001df8:	4cca      	ldr	r4, [pc, #808]	; (8002124 <__aeabi_dsub+0x6ec>)
 8001dfa:	1c72      	adds	r2, r6, #1
 8001dfc:	4222      	tst	r2, r4
 8001dfe:	d000      	beq.n	8001e02 <__aeabi_dsub+0x3ca>
 8001e00:	e0ad      	b.n	8001f5e <__aeabi_dsub+0x526>
 8001e02:	464a      	mov	r2, r9
 8001e04:	431a      	orrs	r2, r3
 8001e06:	2e00      	cmp	r6, #0
 8001e08:	d1b8      	bne.n	8001d7c <__aeabi_dsub+0x344>
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x3d8>
 8001e0e:	e158      	b.n	80020c2 <__aeabi_dsub+0x68a>
 8001e10:	000a      	movs	r2, r1
 8001e12:	4302      	orrs	r2, r0
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x3e0>
 8001e16:	e159      	b.n	80020cc <__aeabi_dsub+0x694>
 8001e18:	464a      	mov	r2, r9
 8001e1a:	0759      	lsls	r1, r3, #29
 8001e1c:	08d2      	lsrs	r2, r2, #3
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	e786      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 8001e24:	464a      	mov	r2, r9
 8001e26:	0759      	lsls	r1, r3, #29
 8001e28:	08d2      	lsrs	r2, r2, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	e7c1      	b.n	8001db4 <__aeabi_dsub+0x37c>
 8001e30:	4dba      	ldr	r5, [pc, #744]	; (800211c <__aeabi_dsub+0x6e4>)
 8001e32:	42aa      	cmp	r2, r5
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x400>
 8001e36:	e11e      	b.n	8002076 <__aeabi_dsub+0x63e>
 8001e38:	2580      	movs	r5, #128	; 0x80
 8001e3a:	042d      	lsls	r5, r5, #16
 8001e3c:	432b      	orrs	r3, r5
 8001e3e:	4664      	mov	r4, ip
 8001e40:	2c38      	cmp	r4, #56	; 0x38
 8001e42:	dc5d      	bgt.n	8001f00 <__aeabi_dsub+0x4c8>
 8001e44:	2c1f      	cmp	r4, #31
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x412>
 8001e48:	e0d0      	b.n	8001fec <__aeabi_dsub+0x5b4>
 8001e4a:	2520      	movs	r5, #32
 8001e4c:	4667      	mov	r7, ip
 8001e4e:	1b2d      	subs	r5, r5, r4
 8001e50:	464e      	mov	r6, r9
 8001e52:	001c      	movs	r4, r3
 8001e54:	40fe      	lsrs	r6, r7
 8001e56:	40ac      	lsls	r4, r5
 8001e58:	4334      	orrs	r4, r6
 8001e5a:	464e      	mov	r6, r9
 8001e5c:	40ae      	lsls	r6, r5
 8001e5e:	0035      	movs	r5, r6
 8001e60:	40fb      	lsrs	r3, r7
 8001e62:	1e6e      	subs	r6, r5, #1
 8001e64:	41b5      	sbcs	r5, r6
 8001e66:	1ac9      	subs	r1, r1, r3
 8001e68:	432c      	orrs	r4, r5
 8001e6a:	e04e      	b.n	8001f0a <__aeabi_dsub+0x4d2>
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	1a14      	subs	r4, r2, r0
 8001e70:	45a1      	cmp	r9, r4
 8001e72:	4192      	sbcs	r2, r2
 8001e74:	4252      	negs	r2, r2
 8001e76:	4690      	mov	r8, r2
 8001e78:	1a5f      	subs	r7, r3, r1
 8001e7a:	003a      	movs	r2, r7
 8001e7c:	4647      	mov	r7, r8
 8001e7e:	1bd2      	subs	r2, r2, r7
 8001e80:	4690      	mov	r8, r2
 8001e82:	0212      	lsls	r2, r2, #8
 8001e84:	d500      	bpl.n	8001e88 <__aeabi_dsub+0x450>
 8001e86:	e08b      	b.n	8001fa0 <__aeabi_dsub+0x568>
 8001e88:	4642      	mov	r2, r8
 8001e8a:	4322      	orrs	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x458>
 8001e8e:	e630      	b.n	8001af2 <__aeabi_dsub+0xba>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2500      	movs	r5, #0
 8001e94:	e74d      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 8001e96:	464a      	mov	r2, r9
 8001e98:	0759      	lsls	r1, r3, #29
 8001e9a:	08d2      	lsrs	r2, r2, #3
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	08db      	lsrs	r3, r3, #3
 8001ea0:	e744      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 8001ea2:	4642      	mov	r2, r8
 8001ea4:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <__aeabi_dsub+0x6e8>)
 8001ea6:	0861      	lsrs	r1, r4, #1
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	2201      	movs	r2, #1
 8001eae:	4014      	ands	r4, r2
 8001eb0:	430c      	orrs	r4, r1
 8001eb2:	07da      	lsls	r2, r3, #31
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	4314      	orrs	r4, r2
 8001eba:	e641      	b.n	8001b40 <__aeabi_dsub+0x108>
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	3e1f      	subs	r6, #31
 8001ec0:	40f2      	lsrs	r2, r6
 8001ec2:	0016      	movs	r6, r2
 8001ec4:	2920      	cmp	r1, #32
 8001ec6:	d003      	beq.n	8001ed0 <__aeabi_dsub+0x498>
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	1a51      	subs	r1, r2, r1
 8001ecc:	408b      	lsls	r3, r1
 8001ece:	431c      	orrs	r4, r3
 8001ed0:	1e62      	subs	r2, r4, #1
 8001ed2:	4194      	sbcs	r4, r2
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4334      	orrs	r4, r6
 8001ed8:	4698      	mov	r8, r3
 8001eda:	2600      	movs	r6, #0
 8001edc:	e71d      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8001ede:	000c      	movs	r4, r1
 8001ee0:	3a20      	subs	r2, #32
 8001ee2:	40d4      	lsrs	r4, r2
 8001ee4:	0022      	movs	r2, r4
 8001ee6:	4664      	mov	r4, ip
 8001ee8:	2c20      	cmp	r4, #32
 8001eea:	d004      	beq.n	8001ef6 <__aeabi_dsub+0x4be>
 8001eec:	2740      	movs	r7, #64	; 0x40
 8001eee:	1b3f      	subs	r7, r7, r4
 8001ef0:	40b9      	lsls	r1, r7
 8001ef2:	4308      	orrs	r0, r1
 8001ef4:	4680      	mov	r8, r0
 8001ef6:	4644      	mov	r4, r8
 8001ef8:	1e61      	subs	r1, r4, #1
 8001efa:	418c      	sbcs	r4, r1
 8001efc:	4322      	orrs	r2, r4
 8001efe:	e5e9      	b.n	8001ad4 <__aeabi_dsub+0x9c>
 8001f00:	464c      	mov	r4, r9
 8001f02:	4323      	orrs	r3, r4
 8001f04:	001c      	movs	r4, r3
 8001f06:	1e63      	subs	r3, r4, #1
 8001f08:	419c      	sbcs	r4, r3
 8001f0a:	1b04      	subs	r4, r0, r4
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	419b      	sbcs	r3, r3
 8001f10:	425b      	negs	r3, r3
 8001f12:	1acb      	subs	r3, r1, r3
 8001f14:	4698      	mov	r8, r3
 8001f16:	465d      	mov	r5, fp
 8001f18:	0016      	movs	r6, r2
 8001f1a:	e5e2      	b.n	8001ae2 <__aeabi_dsub+0xaa>
 8001f1c:	464e      	mov	r6, r9
 8001f1e:	431e      	orrs	r6, r3
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x4ec>
 8001f22:	e0ae      	b.n	8002082 <__aeabi_dsub+0x64a>
 8001f24:	1e66      	subs	r6, r4, #1
 8001f26:	2c01      	cmp	r4, #1
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x4f4>
 8001f2a:	e0fd      	b.n	8002128 <__aeabi_dsub+0x6f0>
 8001f2c:	4f7b      	ldr	r7, [pc, #492]	; (800211c <__aeabi_dsub+0x6e4>)
 8001f2e:	42bc      	cmp	r4, r7
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x4fc>
 8001f32:	e107      	b.n	8002144 <__aeabi_dsub+0x70c>
 8001f34:	46b4      	mov	ip, r6
 8001f36:	e69b      	b.n	8001c70 <__aeabi_dsub+0x238>
 8001f38:	4664      	mov	r4, ip
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	1b12      	subs	r2, r2, r4
 8001f3e:	000c      	movs	r4, r1
 8001f40:	4094      	lsls	r4, r2
 8001f42:	0007      	movs	r7, r0
 8001f44:	4090      	lsls	r0, r2
 8001f46:	46a0      	mov	r8, r4
 8001f48:	4664      	mov	r4, ip
 8001f4a:	1e42      	subs	r2, r0, #1
 8001f4c:	4190      	sbcs	r0, r2
 8001f4e:	4662      	mov	r2, ip
 8001f50:	40e7      	lsrs	r7, r4
 8001f52:	4644      	mov	r4, r8
 8001f54:	40d1      	lsrs	r1, r2
 8001f56:	433c      	orrs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	185b      	adds	r3, r3, r1
 8001f5c:	e6f3      	b.n	8001d46 <__aeabi_dsub+0x30e>
 8001f5e:	4c6f      	ldr	r4, [pc, #444]	; (800211c <__aeabi_dsub+0x6e4>)
 8001f60:	42a2      	cmp	r2, r4
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x52e>
 8001f64:	e0d5      	b.n	8002112 <__aeabi_dsub+0x6da>
 8001f66:	4448      	add	r0, r9
 8001f68:	185b      	adds	r3, r3, r1
 8001f6a:	4548      	cmp	r0, r9
 8001f6c:	4189      	sbcs	r1, r1
 8001f6e:	4249      	negs	r1, r1
 8001f70:	185b      	adds	r3, r3, r1
 8001f72:	07dc      	lsls	r4, r3, #31
 8001f74:	0840      	lsrs	r0, r0, #1
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	4698      	mov	r8, r3
 8001f7a:	0016      	movs	r6, r2
 8001f7c:	4304      	orrs	r4, r0
 8001f7e:	e6cc      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x54e>
 8001f84:	e082      	b.n	800208c <__aeabi_dsub+0x654>
 8001f86:	000a      	movs	r2, r1
 8001f88:	4302      	orrs	r2, r0
 8001f8a:	d140      	bne.n	800200e <__aeabi_dsub+0x5d6>
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	2500      	movs	r5, #0
 8001f90:	031b      	lsls	r3, r3, #12
 8001f92:	e713      	b.n	8001dbc <__aeabi_dsub+0x384>
 8001f94:	074b      	lsls	r3, r1, #29
 8001f96:	08c2      	lsrs	r2, r0, #3
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	465d      	mov	r5, fp
 8001f9c:	08cb      	lsrs	r3, r1, #3
 8001f9e:	e6c5      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 8001fa0:	464a      	mov	r2, r9
 8001fa2:	1a84      	subs	r4, r0, r2
 8001fa4:	42a0      	cmp	r0, r4
 8001fa6:	4192      	sbcs	r2, r2
 8001fa8:	1acb      	subs	r3, r1, r3
 8001faa:	4252      	negs	r2, r2
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	4698      	mov	r8, r3
 8001fb0:	465d      	mov	r5, fp
 8001fb2:	e59e      	b.n	8001af2 <__aeabi_dsub+0xba>
 8001fb4:	464a      	mov	r2, r9
 8001fb6:	0759      	lsls	r1, r3, #29
 8001fb8:	08d2      	lsrs	r2, r2, #3
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	08db      	lsrs	r3, r3, #3
 8001fbe:	e6f9      	b.n	8001db4 <__aeabi_dsub+0x37c>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	1a14      	subs	r4, r2, r0
 8001fc4:	45a1      	cmp	r9, r4
 8001fc6:	4192      	sbcs	r2, r2
 8001fc8:	1a5b      	subs	r3, r3, r1
 8001fca:	4252      	negs	r2, r2
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	4698      	mov	r8, r3
 8001fd0:	2601      	movs	r6, #1
 8001fd2:	e586      	b.n	8001ae2 <__aeabi_dsub+0xaa>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	0759      	lsls	r1, r3, #29
 8001fd8:	08d2      	lsrs	r2, r2, #3
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	e6a5      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 8001fe0:	464c      	mov	r4, r9
 8001fe2:	4323      	orrs	r3, r4
 8001fe4:	001c      	movs	r4, r3
 8001fe6:	1e63      	subs	r3, r4, #1
 8001fe8:	419c      	sbcs	r4, r3
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_dsub+0x26c>
 8001fec:	4665      	mov	r5, ip
 8001fee:	001e      	movs	r6, r3
 8001ff0:	3d20      	subs	r5, #32
 8001ff2:	40ee      	lsrs	r6, r5
 8001ff4:	2c20      	cmp	r4, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dsub+0x5cc>
 8001ff8:	2540      	movs	r5, #64	; 0x40
 8001ffa:	1b2d      	subs	r5, r5, r4
 8001ffc:	40ab      	lsls	r3, r5
 8001ffe:	464c      	mov	r4, r9
 8002000:	431c      	orrs	r4, r3
 8002002:	46a2      	mov	sl, r4
 8002004:	4654      	mov	r4, sl
 8002006:	1e63      	subs	r3, r4, #1
 8002008:	419c      	sbcs	r4, r3
 800200a:	4334      	orrs	r4, r6
 800200c:	e77d      	b.n	8001f0a <__aeabi_dsub+0x4d2>
 800200e:	074b      	lsls	r3, r1, #29
 8002010:	08c2      	lsrs	r2, r0, #3
 8002012:	431a      	orrs	r2, r3
 8002014:	465d      	mov	r5, fp
 8002016:	08cb      	lsrs	r3, r1, #3
 8002018:	e6cc      	b.n	8001db4 <__aeabi_dsub+0x37c>
 800201a:	000a      	movs	r2, r1
 800201c:	4302      	orrs	r2, r0
 800201e:	d100      	bne.n	8002022 <__aeabi_dsub+0x5ea>
 8002020:	e736      	b.n	8001e90 <__aeabi_dsub+0x458>
 8002022:	074b      	lsls	r3, r1, #29
 8002024:	08c2      	lsrs	r2, r0, #3
 8002026:	431a      	orrs	r2, r3
 8002028:	465d      	mov	r5, fp
 800202a:	08cb      	lsrs	r3, r1, #3
 800202c:	e681      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 800202e:	464a      	mov	r2, r9
 8002030:	1a84      	subs	r4, r0, r2
 8002032:	42a0      	cmp	r0, r4
 8002034:	4192      	sbcs	r2, r2
 8002036:	1acb      	subs	r3, r1, r3
 8002038:	4252      	negs	r2, r2
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	4698      	mov	r8, r3
 800203e:	465d      	mov	r5, fp
 8002040:	2601      	movs	r6, #1
 8002042:	e54e      	b.n	8001ae2 <__aeabi_dsub+0xaa>
 8002044:	074b      	lsls	r3, r1, #29
 8002046:	08c2      	lsrs	r2, r0, #3
 8002048:	431a      	orrs	r2, r3
 800204a:	08cb      	lsrs	r3, r1, #3
 800204c:	e6b2      	b.n	8001db4 <__aeabi_dsub+0x37c>
 800204e:	464a      	mov	r2, r9
 8002050:	1a14      	subs	r4, r2, r0
 8002052:	45a1      	cmp	r9, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	1a5f      	subs	r7, r3, r1
 8002058:	4252      	negs	r2, r2
 800205a:	1aba      	subs	r2, r7, r2
 800205c:	4690      	mov	r8, r2
 800205e:	0212      	lsls	r2, r2, #8
 8002060:	d56b      	bpl.n	800213a <__aeabi_dsub+0x702>
 8002062:	464a      	mov	r2, r9
 8002064:	1a84      	subs	r4, r0, r2
 8002066:	42a0      	cmp	r0, r4
 8002068:	4192      	sbcs	r2, r2
 800206a:	1acb      	subs	r3, r1, r3
 800206c:	4252      	negs	r2, r2
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	4698      	mov	r8, r3
 8002072:	465d      	mov	r5, fp
 8002074:	e564      	b.n	8001b40 <__aeabi_dsub+0x108>
 8002076:	074b      	lsls	r3, r1, #29
 8002078:	08c2      	lsrs	r2, r0, #3
 800207a:	431a      	orrs	r2, r3
 800207c:	465d      	mov	r5, fp
 800207e:	08cb      	lsrs	r3, r1, #3
 8002080:	e698      	b.n	8001db4 <__aeabi_dsub+0x37c>
 8002082:	074b      	lsls	r3, r1, #29
 8002084:	08c2      	lsrs	r2, r0, #3
 8002086:	431a      	orrs	r2, r3
 8002088:	08cb      	lsrs	r3, r1, #3
 800208a:	e64f      	b.n	8001d2c <__aeabi_dsub+0x2f4>
 800208c:	000a      	movs	r2, r1
 800208e:	4302      	orrs	r2, r0
 8002090:	d090      	beq.n	8001fb4 <__aeabi_dsub+0x57c>
 8002092:	464a      	mov	r2, r9
 8002094:	075c      	lsls	r4, r3, #29
 8002096:	08d2      	lsrs	r2, r2, #3
 8002098:	4314      	orrs	r4, r2
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	0312      	lsls	r2, r2, #12
 80020a0:	4213      	tst	r3, r2
 80020a2:	d008      	beq.n	80020b6 <__aeabi_dsub+0x67e>
 80020a4:	08ce      	lsrs	r6, r1, #3
 80020a6:	4216      	tst	r6, r2
 80020a8:	d105      	bne.n	80020b6 <__aeabi_dsub+0x67e>
 80020aa:	08c0      	lsrs	r0, r0, #3
 80020ac:	0749      	lsls	r1, r1, #29
 80020ae:	4308      	orrs	r0, r1
 80020b0:	0004      	movs	r4, r0
 80020b2:	465d      	mov	r5, fp
 80020b4:	0033      	movs	r3, r6
 80020b6:	0f61      	lsrs	r1, r4, #29
 80020b8:	00e2      	lsls	r2, r4, #3
 80020ba:	0749      	lsls	r1, r1, #29
 80020bc:	08d2      	lsrs	r2, r2, #3
 80020be:	430a      	orrs	r2, r1
 80020c0:	e678      	b.n	8001db4 <__aeabi_dsub+0x37c>
 80020c2:	074b      	lsls	r3, r1, #29
 80020c4:	08c2      	lsrs	r2, r0, #3
 80020c6:	431a      	orrs	r2, r3
 80020c8:	08cb      	lsrs	r3, r1, #3
 80020ca:	e632      	b.n	8001d32 <__aeabi_dsub+0x2fa>
 80020cc:	4448      	add	r0, r9
 80020ce:	185b      	adds	r3, r3, r1
 80020d0:	4548      	cmp	r0, r9
 80020d2:	4192      	sbcs	r2, r2
 80020d4:	4698      	mov	r8, r3
 80020d6:	4252      	negs	r2, r2
 80020d8:	4490      	add	r8, r2
 80020da:	4643      	mov	r3, r8
 80020dc:	0004      	movs	r4, r0
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	d400      	bmi.n	80020e4 <__aeabi_dsub+0x6ac>
 80020e2:	e61a      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 80020e4:	4642      	mov	r2, r8
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <__aeabi_dsub+0x6e8>)
 80020e8:	2601      	movs	r6, #1
 80020ea:	401a      	ands	r2, r3
 80020ec:	4690      	mov	r8, r2
 80020ee:	e614      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 80020f0:	4666      	mov	r6, ip
 80020f2:	001f      	movs	r7, r3
 80020f4:	3e20      	subs	r6, #32
 80020f6:	40f7      	lsrs	r7, r6
 80020f8:	2c20      	cmp	r4, #32
 80020fa:	d005      	beq.n	8002108 <__aeabi_dsub+0x6d0>
 80020fc:	2640      	movs	r6, #64	; 0x40
 80020fe:	1b36      	subs	r6, r6, r4
 8002100:	40b3      	lsls	r3, r6
 8002102:	464c      	mov	r4, r9
 8002104:	431c      	orrs	r4, r3
 8002106:	46a2      	mov	sl, r4
 8002108:	4654      	mov	r4, sl
 800210a:	1e63      	subs	r3, r4, #1
 800210c:	419c      	sbcs	r4, r3
 800210e:	433c      	orrs	r4, r7
 8002110:	e5c8      	b.n	8001ca4 <__aeabi_dsub+0x26c>
 8002112:	0011      	movs	r1, r2
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	e532      	b.n	8001b80 <__aeabi_dsub+0x148>
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	000007ff 	.word	0x000007ff
 8002120:	ff7fffff 	.word	0xff7fffff
 8002124:	000007fe 	.word	0x000007fe
 8002128:	464a      	mov	r2, r9
 800212a:	1814      	adds	r4, r2, r0
 800212c:	4284      	cmp	r4, r0
 800212e:	4192      	sbcs	r2, r2
 8002130:	185b      	adds	r3, r3, r1
 8002132:	4698      	mov	r8, r3
 8002134:	4252      	negs	r2, r2
 8002136:	4490      	add	r8, r2
 8002138:	e5e9      	b.n	8001d0e <__aeabi_dsub+0x2d6>
 800213a:	4642      	mov	r2, r8
 800213c:	4322      	orrs	r2, r4
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x70a>
 8002140:	e6a6      	b.n	8001e90 <__aeabi_dsub+0x458>
 8002142:	e5ea      	b.n	8001d1a <__aeabi_dsub+0x2e2>
 8002144:	074b      	lsls	r3, r1, #29
 8002146:	08c2      	lsrs	r2, r0, #3
 8002148:	431a      	orrs	r2, r3
 800214a:	08cb      	lsrs	r3, r1, #3
 800214c:	e632      	b.n	8001db4 <__aeabi_dsub+0x37c>
 800214e:	2200      	movs	r2, #0
 8002150:	4901      	ldr	r1, [pc, #4]	; (8002158 <__aeabi_dsub+0x720>)
 8002152:	0013      	movs	r3, r2
 8002154:	e514      	b.n	8001b80 <__aeabi_dsub+0x148>
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	000007ff 	.word	0x000007ff

0800215c <__aeabi_dcmpun>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	0005      	movs	r5, r0
 8002160:	480c      	ldr	r0, [pc, #48]	; (8002194 <__aeabi_dcmpun+0x38>)
 8002162:	030c      	lsls	r4, r1, #12
 8002164:	0016      	movs	r6, r2
 8002166:	0049      	lsls	r1, r1, #1
 8002168:	031a      	lsls	r2, r3, #12
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	0b24      	lsrs	r4, r4, #12
 800216e:	0d49      	lsrs	r1, r1, #21
 8002170:	0b12      	lsrs	r2, r2, #12
 8002172:	0d5b      	lsrs	r3, r3, #21
 8002174:	4281      	cmp	r1, r0
 8002176:	d008      	beq.n	800218a <__aeabi_dcmpun+0x2e>
 8002178:	4906      	ldr	r1, [pc, #24]	; (8002194 <__aeabi_dcmpun+0x38>)
 800217a:	2000      	movs	r0, #0
 800217c:	428b      	cmp	r3, r1
 800217e:	d103      	bne.n	8002188 <__aeabi_dcmpun+0x2c>
 8002180:	4332      	orrs	r2, r6
 8002182:	0010      	movs	r0, r2
 8002184:	1e42      	subs	r2, r0, #1
 8002186:	4190      	sbcs	r0, r2
 8002188:	bd70      	pop	{r4, r5, r6, pc}
 800218a:	2001      	movs	r0, #1
 800218c:	432c      	orrs	r4, r5
 800218e:	d1fb      	bne.n	8002188 <__aeabi_dcmpun+0x2c>
 8002190:	e7f2      	b.n	8002178 <__aeabi_dcmpun+0x1c>
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	000007ff 	.word	0x000007ff

08002198 <__aeabi_d2iz>:
 8002198:	000a      	movs	r2, r1
 800219a:	b530      	push	{r4, r5, lr}
 800219c:	4c13      	ldr	r4, [pc, #76]	; (80021ec <__aeabi_d2iz+0x54>)
 800219e:	0053      	lsls	r3, r2, #1
 80021a0:	0309      	lsls	r1, r1, #12
 80021a2:	0005      	movs	r5, r0
 80021a4:	0b09      	lsrs	r1, r1, #12
 80021a6:	2000      	movs	r0, #0
 80021a8:	0d5b      	lsrs	r3, r3, #21
 80021aa:	0fd2      	lsrs	r2, r2, #31
 80021ac:	42a3      	cmp	r3, r4
 80021ae:	dd04      	ble.n	80021ba <__aeabi_d2iz+0x22>
 80021b0:	480f      	ldr	r0, [pc, #60]	; (80021f0 <__aeabi_d2iz+0x58>)
 80021b2:	4283      	cmp	r3, r0
 80021b4:	dd02      	ble.n	80021bc <__aeabi_d2iz+0x24>
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <__aeabi_d2iz+0x5c>)
 80021b8:	18d0      	adds	r0, r2, r3
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	2080      	movs	r0, #128	; 0x80
 80021be:	0340      	lsls	r0, r0, #13
 80021c0:	4301      	orrs	r1, r0
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <__aeabi_d2iz+0x60>)
 80021c4:	1ac0      	subs	r0, r0, r3
 80021c6:	281f      	cmp	r0, #31
 80021c8:	dd08      	ble.n	80021dc <__aeabi_d2iz+0x44>
 80021ca:	480c      	ldr	r0, [pc, #48]	; (80021fc <__aeabi_d2iz+0x64>)
 80021cc:	1ac3      	subs	r3, r0, r3
 80021ce:	40d9      	lsrs	r1, r3
 80021d0:	000b      	movs	r3, r1
 80021d2:	4258      	negs	r0, r3
 80021d4:	2a00      	cmp	r2, #0
 80021d6:	d1f0      	bne.n	80021ba <__aeabi_d2iz+0x22>
 80021d8:	0018      	movs	r0, r3
 80021da:	e7ee      	b.n	80021ba <__aeabi_d2iz+0x22>
 80021dc:	4c08      	ldr	r4, [pc, #32]	; (8002200 <__aeabi_d2iz+0x68>)
 80021de:	40c5      	lsrs	r5, r0
 80021e0:	46a4      	mov	ip, r4
 80021e2:	4463      	add	r3, ip
 80021e4:	4099      	lsls	r1, r3
 80021e6:	000b      	movs	r3, r1
 80021e8:	432b      	orrs	r3, r5
 80021ea:	e7f2      	b.n	80021d2 <__aeabi_d2iz+0x3a>
 80021ec:	000003fe 	.word	0x000003fe
 80021f0:	0000041d 	.word	0x0000041d
 80021f4:	7fffffff 	.word	0x7fffffff
 80021f8:	00000433 	.word	0x00000433
 80021fc:	00000413 	.word	0x00000413
 8002200:	fffffbed 	.word	0xfffffbed

08002204 <__aeabi_i2d>:
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	2800      	cmp	r0, #0
 8002208:	d016      	beq.n	8002238 <__aeabi_i2d+0x34>
 800220a:	17c3      	asrs	r3, r0, #31
 800220c:	18c5      	adds	r5, r0, r3
 800220e:	405d      	eors	r5, r3
 8002210:	0fc4      	lsrs	r4, r0, #31
 8002212:	0028      	movs	r0, r5
 8002214:	f000 f84c 	bl	80022b0 <__clzsi2>
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <__aeabi_i2d+0x5c>)
 800221a:	1a12      	subs	r2, r2, r0
 800221c:	280a      	cmp	r0, #10
 800221e:	dc16      	bgt.n	800224e <__aeabi_i2d+0x4a>
 8002220:	0003      	movs	r3, r0
 8002222:	002e      	movs	r6, r5
 8002224:	3315      	adds	r3, #21
 8002226:	409e      	lsls	r6, r3
 8002228:	230b      	movs	r3, #11
 800222a:	1a18      	subs	r0, r3, r0
 800222c:	40c5      	lsrs	r5, r0
 800222e:	0553      	lsls	r3, r2, #21
 8002230:	032d      	lsls	r5, r5, #12
 8002232:	0b2d      	lsrs	r5, r5, #12
 8002234:	0d5b      	lsrs	r3, r3, #21
 8002236:	e003      	b.n	8002240 <__aeabi_i2d+0x3c>
 8002238:	2400      	movs	r4, #0
 800223a:	2300      	movs	r3, #0
 800223c:	2500      	movs	r5, #0
 800223e:	2600      	movs	r6, #0
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	432b      	orrs	r3, r5
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4323      	orrs	r3, r4
 8002248:	0030      	movs	r0, r6
 800224a:	0019      	movs	r1, r3
 800224c:	bd70      	pop	{r4, r5, r6, pc}
 800224e:	380b      	subs	r0, #11
 8002250:	4085      	lsls	r5, r0
 8002252:	0553      	lsls	r3, r2, #21
 8002254:	032d      	lsls	r5, r5, #12
 8002256:	2600      	movs	r6, #0
 8002258:	0b2d      	lsrs	r5, r5, #12
 800225a:	0d5b      	lsrs	r3, r3, #21
 800225c:	e7f0      	b.n	8002240 <__aeabi_i2d+0x3c>
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	0000041e 	.word	0x0000041e

08002264 <__aeabi_ui2d>:
 8002264:	b510      	push	{r4, lr}
 8002266:	1e04      	subs	r4, r0, #0
 8002268:	d010      	beq.n	800228c <__aeabi_ui2d+0x28>
 800226a:	f000 f821 	bl	80022b0 <__clzsi2>
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <__aeabi_ui2d+0x48>)
 8002270:	1a1b      	subs	r3, r3, r0
 8002272:	280a      	cmp	r0, #10
 8002274:	dc11      	bgt.n	800229a <__aeabi_ui2d+0x36>
 8002276:	220b      	movs	r2, #11
 8002278:	0021      	movs	r1, r4
 800227a:	1a12      	subs	r2, r2, r0
 800227c:	40d1      	lsrs	r1, r2
 800227e:	3015      	adds	r0, #21
 8002280:	030a      	lsls	r2, r1, #12
 8002282:	055b      	lsls	r3, r3, #21
 8002284:	4084      	lsls	r4, r0
 8002286:	0b12      	lsrs	r2, r2, #12
 8002288:	0d5b      	lsrs	r3, r3, #21
 800228a:	e001      	b.n	8002290 <__aeabi_ui2d+0x2c>
 800228c:	2300      	movs	r3, #0
 800228e:	2200      	movs	r2, #0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	4313      	orrs	r3, r2
 8002294:	0020      	movs	r0, r4
 8002296:	0019      	movs	r1, r3
 8002298:	bd10      	pop	{r4, pc}
 800229a:	0022      	movs	r2, r4
 800229c:	380b      	subs	r0, #11
 800229e:	4082      	lsls	r2, r0
 80022a0:	055b      	lsls	r3, r3, #21
 80022a2:	0312      	lsls	r2, r2, #12
 80022a4:	2400      	movs	r4, #0
 80022a6:	0b12      	lsrs	r2, r2, #12
 80022a8:	0d5b      	lsrs	r3, r3, #21
 80022aa:	e7f1      	b.n	8002290 <__aeabi_ui2d+0x2c>
 80022ac:	0000041e 	.word	0x0000041e

080022b0 <__clzsi2>:
 80022b0:	211c      	movs	r1, #28
 80022b2:	2301      	movs	r3, #1
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	4298      	cmp	r0, r3
 80022b8:	d301      	bcc.n	80022be <__clzsi2+0xe>
 80022ba:	0c00      	lsrs	r0, r0, #16
 80022bc:	3910      	subs	r1, #16
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	4298      	cmp	r0, r3
 80022c2:	d301      	bcc.n	80022c8 <__clzsi2+0x18>
 80022c4:	0a00      	lsrs	r0, r0, #8
 80022c6:	3908      	subs	r1, #8
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	4298      	cmp	r0, r3
 80022cc:	d301      	bcc.n	80022d2 <__clzsi2+0x22>
 80022ce:	0900      	lsrs	r0, r0, #4
 80022d0:	3904      	subs	r1, #4
 80022d2:	a202      	add	r2, pc, #8	; (adr r2, 80022dc <__clzsi2+0x2c>)
 80022d4:	5c10      	ldrb	r0, [r2, r0]
 80022d6:	1840      	adds	r0, r0, r1
 80022d8:	4770      	bx	lr
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	02020304 	.word	0x02020304
 80022e0:	01010101 	.word	0x01010101
	...

080022ec <__clzdi2>:
 80022ec:	b510      	push	{r4, lr}
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d103      	bne.n	80022fa <__clzdi2+0xe>
 80022f2:	f7ff ffdd 	bl	80022b0 <__clzsi2>
 80022f6:	3020      	adds	r0, #32
 80022f8:	e002      	b.n	8002300 <__clzdi2+0x14>
 80022fa:	1c08      	adds	r0, r1, #0
 80022fc:	f7ff ffd8 	bl	80022b0 <__clzsi2>
 8002300:	bd10      	pop	{r4, pc}
 8002302:	46c0      	nop			; (mov r8, r8)

08002304 <payload.9311>:
	// enable device i2c bus connected on the chip select gpio pin
	HAL_GPIO_WritePin(acc_ref->gpio_port, acc_ref->CS_PIN, GPIO_PIN_SET);
	uint8_t buffer[2];
	// run setup code
	uint8_t* payload(uint8_t reg, uint8_t data)
	{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	0002      	movs	r2, r0
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	1dbb      	adds	r3, r7, #6
 8002312:	1c0a      	adds	r2, r1, #0
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	4663      	mov	r3, ip
 8002318:	4662      	mov	r2, ip
 800231a:	603a      	str	r2, [r7, #0]
		// lil macro
		buffer[0] = reg;
 800231c:	1dfa      	adds	r2, r7, #7
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	705a      	strb	r2, [r3, #1]
		buffer[1] = data;
 8002322:	1dba      	adds	r2, r7, #6
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	709a      	strb	r2, [r3, #2]
		return buffer;
 8002328:	3301      	adds	r3, #1
	}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <vADXL345_DeviceSetup>:
{
 8002334:	b5b0      	push	{r4, r5, r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
extern void vADXL345_DeviceSetup(AccelerometerData_t *acc_ref, I2C_HandleTypeDef *ref)
 800233e:	2328      	movs	r3, #40	; 0x28
 8002340:	18fa      	adds	r2, r7, r3
 8002342:	240c      	movs	r4, #12
 8002344:	193b      	adds	r3, r7, r4
 8002346:	605a      	str	r2, [r3, #4]
	printf("Running setup on adxl device CS: #%lu\n\r\n", acc_ref->CS_PIN);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <vADXL345_DeviceSetup+0xb8>)
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f008 f9ad 	bl	800a6b0 <iprintf>
	HAL_GPIO_WritePin(acc_ref->gpio_port, acc_ref->CS_PIN, GPIO_PIN_SET);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6858      	ldr	r0, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	2201      	movs	r2, #1
 8002362:	0019      	movs	r1, r3
 8002364:	f002 f890 	bl	8004488 <HAL_GPIO_WritePin>
				// lil macro
				buffer2[0] = reg;
				return buffer2;
		}
	// initialize device into FIFO read status
	HAL_I2C_Master_Transmit(ref, (uint16_t)ADXL345_ADDR, payload(FIFO_CTL, ADXL_FIFO_CONFIGURATION), 2, 100);
 8002368:	193b      	adds	r3, r7, r4
 800236a:	469c      	mov	ip, r3
 800236c:	2183      	movs	r1, #131	; 0x83
 800236e:	2038      	movs	r0, #56	; 0x38
 8002370:	f7ff ffc8 	bl	8002304 <payload.9311>
 8002374:	0002      	movs	r2, r0
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	2364      	movs	r3, #100	; 0x64
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2302      	movs	r3, #2
 800237e:	2153      	movs	r1, #83	; 0x53
 8002380:	f002 f936 	bl	80045f0 <HAL_I2C_Master_Transmit>
	// initialize stream mode for FIFO
	HAL_I2C_Master_Transmit(ref, (uint16_t)ADXL345_ADDR, payload(POWER_CTL, ADXL_MEASURE_MODE), 2, 100);
 8002384:	193b      	adds	r3, r7, r4
 8002386:	469c      	mov	ip, r3
 8002388:	2108      	movs	r1, #8
 800238a:	202d      	movs	r0, #45	; 0x2d
 800238c:	f7ff ffba 	bl	8002304 <payload.9311>
 8002390:	0002      	movs	r2, r0
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	2364      	movs	r3, #100	; 0x64
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2302      	movs	r3, #2
 800239a:	2153      	movs	r1, #83	; 0x53
 800239c:	f002 f928 	bl	80045f0 <HAL_I2C_Master_Transmit>
	// disable device i2c bus connected on the chip select gpio pin
	uint8_t dev_id = HAL_I2C_Master_Receive(ref, (uint16_t)ADXL345_ADDR, payloadreg(DEVID),1,100);
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	469c      	mov	ip, r3
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 f825 	bl	80023f4 <payloadreg.9315>
 80023aa:	0002      	movs	r2, r0
 80023ac:	2517      	movs	r5, #23
 80023ae:	197c      	adds	r4, r7, r5
 80023b0:	6838      	ldr	r0, [r7, #0]
 80023b2:	2364      	movs	r3, #100	; 0x64
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	2153      	movs	r1, #83	; 0x53
 80023ba:	f002 fa21 	bl	8004800 <HAL_I2C_Master_Receive>
 80023be:	0003      	movs	r3, r0
 80023c0:	7023      	strb	r3, [r4, #0]
	printf("Successfully setup device ID: %d\n\r\n", dev_id);
 80023c2:	197b      	adds	r3, r7, r5
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <vADXL345_DeviceSetup+0xbc>)
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f008 f970 	bl	800a6b0 <iprintf>
	HAL_GPIO_WritePin(acc_ref->gpio_port, acc_ref->CS_PIN, GPIO_PIN_RESET);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6858      	ldr	r0, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2200      	movs	r2, #0
 80023dc:	0019      	movs	r1, r3
 80023de:	f002 f853 	bl	8004488 <HAL_GPIO_WritePin>
};
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b006      	add	sp, #24
 80023e8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	0800cba0 	.word	0x0800cba0
 80023f0:	0800cbcc 	.word	0x0800cbcc

080023f4 <payloadreg.9315>:
		{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	4663      	mov	r3, ip
 8002402:	4662      	mov	r2, ip
 8002404:	603a      	str	r2, [r7, #0]
				buffer2[0] = reg;
 8002406:	1dfa      	adds	r2, r7, #7
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	701a      	strb	r2, [r3, #0]
		}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}

08002414 <__io_putchar>:
/* USER CODE BEGIN PV */
AccelerometerData_t accelerometer1;
AccelerometerData_t accelerometer2;
AccelerometerData_t accelerometer3;

void __io_putchar(uint8_t ch) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	0002      	movs	r2, r0
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8002420:	1df9      	adds	r1, r7, #7
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <__io_putchar+0x20>)
 8002424:	2301      	movs	r3, #1
 8002426:	2201      	movs	r2, #1
 8002428:	f004 fb6e 	bl	8006b08 <HAL_UART_Transmit>
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20001c44 	.word	0x20001c44

08002438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800243c:	f000 fe44 	bl	80030c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002440:	f000 f850 	bl	80024e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002444:	f000 fa82 	bl	800294c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002448:	f000 f894 	bl	8002574 <MX_ADC1_Init>
  MX_I2C1_Init();
 800244c:	f000 f932 	bl	80026b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002450:	f000 f970 	bl	8002734 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002454:	f000 fa2c 	bl	80028b0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002458:	f000 f9ac 	bl	80027b4 <MX_TIM2_Init>
  MX_DAC1_Init();
 800245c:	f000 f8f4 	bl	8002648 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <main+0x84>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2100      	movs	r1, #0
 8002468:	0018      	movs	r0, r3
 800246a:	f008 f9b7 	bl	800a7dc <setbuf>


  accelerometer1.CS_PIN = GPIO_PIN_2;
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <main+0x88>)
 8002470:	2204      	movs	r2, #4
 8002472:	601a      	str	r2, [r3, #0]
  accelerometer1.gpio_port = GPIOB;
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <main+0x88>)
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <main+0x8c>)
 8002478:	605a      	str	r2, [r3, #4]

  printf("Initializing Devices\r\n");
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <main+0x90>)
 800247c:	0018      	movs	r0, r3
 800247e:	f008 f9a3 	bl	800a7c8 <puts>
  vADXL345_DeviceSetup(&accelerometer1, &hi2c1);
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <main+0x94>)
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <main+0x88>)
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff ff53 	bl	8002334 <vADXL345_DeviceSetup>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <main+0x98>)
 8002490:	0018      	movs	r0, r3
 8002492:	f001 fc1d 	bl	8003cd0 <HAL_ADCEx_Calibration_Start>

  printf("Devices Initialized\r\n");
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <main+0x9c>)
 8002498:	0018      	movs	r0, r3
 800249a:	f008 f995 	bl	800a7c8 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800249e:	f005 fa17 	bl	80078d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80024a2:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <main+0xa0>)
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <main+0xa4>)
 80024a6:	2100      	movs	r1, #0
 80024a8:	0018      	movs	r0, r3
 80024aa:	f005 fa59 	bl	8007960 <osThreadNew>
 80024ae:	0002      	movs	r2, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <main+0xa8>)
 80024b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80024b4:	f005 fa2e 	bl	8007914 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <main+0x80>
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	20000010 	.word	0x20000010
 80024c0:	20001bc0 	.word	0x20001bc0
 80024c4:	50000400 	.word	0x50000400
 80024c8:	0800cc30 	.word	0x0800cc30
 80024cc:	20001b28 	.word	0x20001b28
 80024d0:	20001be0 	.word	0x20001be0
 80024d4:	0800cc48 	.word	0x0800cc48
 80024d8:	0800ccf8 	.word	0x0800ccf8
 80024dc:	08002a59 	.word	0x08002a59
 80024e0:	20001b10 	.word	0x20001b10

080024e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b093      	sub	sp, #76	; 0x4c
 80024e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ea:	2410      	movs	r4, #16
 80024ec:	193b      	adds	r3, r7, r4
 80024ee:	0018      	movs	r0, r3
 80024f0:	2338      	movs	r3, #56	; 0x38
 80024f2:	001a      	movs	r2, r3
 80024f4:	2100      	movs	r1, #0
 80024f6:	f007 fc58 	bl	8009daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024fa:	003b      	movs	r3, r7
 80024fc:	0018      	movs	r0, r3
 80024fe:	2310      	movs	r3, #16
 8002500:	001a      	movs	r2, r3
 8002502:	2100      	movs	r1, #0
 8002504:	f007 fc51 	bl	8009daa <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	0018      	movs	r0, r3
 800250e:	f002 fd0f 	bl	8004f30 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002512:	193b      	adds	r3, r7, r4
 8002514:	2202      	movs	r2, #2
 8002516:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002518:	193b      	adds	r3, r7, r4
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	0052      	lsls	r2, r2, #1
 800251e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002520:	193b      	adds	r3, r7, r4
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002526:	193b      	adds	r3, r7, r4
 8002528:	2240      	movs	r2, #64	; 0x40
 800252a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800252c:	193b      	adds	r3, r7, r4
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002532:	193b      	adds	r3, r7, r4
 8002534:	0018      	movs	r0, r3
 8002536:	f002 fd47 	bl	8004fc8 <HAL_RCC_OscConfig>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d001      	beq.n	8002542 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800253e:	f000 fa95 	bl	8002a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002542:	003b      	movs	r3, r7
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002548:	003b      	movs	r3, r7
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254e:	003b      	movs	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002554:	003b      	movs	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800255a:	003b      	movs	r3, r7
 800255c:	2100      	movs	r1, #0
 800255e:	0018      	movs	r0, r3
 8002560:	f003 f852 	bl	8005608 <HAL_RCC_ClockConfig>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002568:	f000 fa80 	bl	8002a6c <Error_Handler>
  }
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b013      	add	sp, #76	; 0x4c
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	0018      	movs	r0, r3
 800257e:	230c      	movs	r3, #12
 8002580:	001a      	movs	r2, r3
 8002582:	2100      	movs	r1, #0
 8002584:	f007 fc11 	bl	8009daa <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <MX_ADC1_Init+0xcc>)
 800258a:	4a2e      	ldr	r2, [pc, #184]	; (8002644 <MX_ADC1_Init+0xd0>)
 800258c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <MX_ADC1_Init+0xcc>)
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	05d2      	lsls	r2, r2, #23
 8002594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <MX_ADC1_Init+0xcc>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <MX_ADC1_Init+0xcc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025a2:	4b27      	ldr	r3, [pc, #156]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025aa:	2204      	movs	r2, #4
 80025ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025c8:	2220      	movs	r2, #32
 80025ca:	2100      	movs	r1, #0
 80025cc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025dc:	222c      	movs	r2, #44	; 0x2c
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025f6:	223c      	movs	r2, #60	; 0x3c
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_ADC1_Init+0xcc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_ADC1_Init+0xcc>)
 8002604:	0018      	movs	r0, r3
 8002606:	f000 ff2b 	bl	8003460 <HAL_ADC_Init>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800260e:	f000 fa2d 	bl	8002a6c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002624:	1d3a      	adds	r2, r7, #4
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_ADC1_Init+0xcc>)
 8002628:	0011      	movs	r1, r2
 800262a:	0018      	movs	r0, r3
 800262c:	f001 f8f6 	bl	800381c <HAL_ADC_ConfigChannel>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d001      	beq.n	8002638 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002634:	f000 fa1a 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20001be0 	.word	0x20001be0
 8002644:	40012400 	.word	0x40012400

08002648 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	0018      	movs	r0, r3
 8002652:	2324      	movs	r3, #36	; 0x24
 8002654:	001a      	movs	r2, r3
 8002656:	2100      	movs	r1, #0
 8002658:	f007 fba7 	bl	8009daa <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_DAC1_Init+0x64>)
 800265e:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <MX_DAC1_Init+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <MX_DAC1_Init+0x64>)
 8002664:	0018      	movs	r0, r3
 8002666:	f001 fc69 	bl	8003f3c <HAL_DAC_Init>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800266e:	f000 f9fd 	bl	8002a6c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002690:	1d39      	adds	r1, r7, #4
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <MX_DAC1_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	0018      	movs	r0, r3
 8002698:	f001 fc74 	bl	8003f84 <HAL_DAC_ConfigChannel>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 80026a0:	f000 f9e4 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b00a      	add	sp, #40	; 0x28
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20001b14 	.word	0x20001b14
 80026b0:	40007400 	.word	0x40007400

080026b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <MX_I2C1_Init+0x74>)
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <MX_I2C1_Init+0x78>)
 80026bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_I2C1_Init+0x74>)
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <MX_I2C1_Init+0x7c>)
 80026c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <MX_I2C1_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_I2C1_Init+0x74>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <MX_I2C1_Init+0x74>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_I2C1_Init+0x74>)
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <MX_I2C1_Init+0x74>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_I2C1_Init+0x74>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_I2C1_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_I2C1_Init+0x74>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 fee7 	bl	80044c4 <HAL_I2C_Init>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d001      	beq.n	80026fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026fa:	f000 f9b7 	bl	8002a6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <MX_I2C1_Init+0x74>)
 8002700:	2100      	movs	r1, #0
 8002702:	0018      	movs	r0, r3
 8002704:	f002 fb7c 	bl	8004e00 <HAL_I2CEx_ConfigAnalogFilter>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d001      	beq.n	8002710 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800270c:	f000 f9ae 	bl	8002a6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <MX_I2C1_Init+0x74>)
 8002712:	2100      	movs	r1, #0
 8002714:	0018      	movs	r0, r3
 8002716:	f002 fbbf 	bl	8004e98 <HAL_I2CEx_ConfigDigitalFilter>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800271e:	f000 f9a5 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20001b28 	.word	0x20001b28
 800272c:	40005400 	.word	0x40005400
 8002730:	00303d5b 	.word	0x00303d5b

08002734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_I2C2_Init+0x74>)
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <MX_I2C2_Init+0x78>)
 800273c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <MX_I2C2_Init+0x7c>)
 8002742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <MX_I2C2_Init+0x74>)
 800274c:	2201      	movs	r2, #1
 800274e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_I2C2_Init+0x74>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_I2C2_Init+0x74>)
 800276a:	2200      	movs	r2, #0
 800276c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002770:	0018      	movs	r0, r3
 8002772:	f001 fea7 	bl	80044c4 <HAL_I2C_Init>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800277a:	f000 f977 	bl	8002a6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002780:	2100      	movs	r1, #0
 8002782:	0018      	movs	r0, r3
 8002784:	f002 fb3c 	bl	8004e00 <HAL_I2CEx_ConfigAnalogFilter>
 8002788:	1e03      	subs	r3, r0, #0
 800278a:	d001      	beq.n	8002790 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800278c:	f000 f96e 	bl	8002a6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <MX_I2C2_Init+0x74>)
 8002792:	2100      	movs	r1, #0
 8002794:	0018      	movs	r0, r3
 8002796:	f002 fb7f 	bl	8004e98 <HAL_I2CEx_ConfigDigitalFilter>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800279e:	f000 f965 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20001b74 	.word	0x20001b74
 80027ac:	40005800 	.word	0x40005800
 80027b0:	00303d5b 	.word	0x00303d5b

080027b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	2328      	movs	r3, #40	; 0x28
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	0018      	movs	r0, r3
 80027c0:	2310      	movs	r3, #16
 80027c2:	001a      	movs	r2, r3
 80027c4:	2100      	movs	r1, #0
 80027c6:	f007 faf0 	bl	8009daa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	231c      	movs	r3, #28
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	0018      	movs	r0, r3
 80027d0:	230c      	movs	r3, #12
 80027d2:	001a      	movs	r2, r3
 80027d4:	2100      	movs	r1, #0
 80027d6:	f007 fae8 	bl	8009daa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027da:	003b      	movs	r3, r7
 80027dc:	0018      	movs	r0, r3
 80027de:	231c      	movs	r3, #28
 80027e0:	001a      	movs	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f007 fae1 	bl	8009daa <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <MX_TIM2_Init+0xf8>)
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	05d2      	lsls	r2, r2, #23
 80027ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <MX_TIM2_Init+0xf8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <MX_TIM2_Init+0xf8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <MX_TIM2_Init+0xf8>)
 80027fe:	2201      	movs	r2, #1
 8002800:	4252      	negs	r2, r2
 8002802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <MX_TIM2_Init+0xf8>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <MX_TIM2_Init+0xf8>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002810:	4b26      	ldr	r3, [pc, #152]	; (80028ac <MX_TIM2_Init+0xf8>)
 8002812:	0018      	movs	r0, r3
 8002814:	f003 fa5a 	bl	8005ccc <HAL_TIM_Base_Init>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800281c:	f000 f926 	bl	8002a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002820:	2128      	movs	r1, #40	; 0x28
 8002822:	187b      	adds	r3, r7, r1
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	0152      	lsls	r2, r2, #5
 8002828:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800282a:	187a      	adds	r2, r7, r1
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <MX_TIM2_Init+0xf8>)
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f003 fbf9 	bl	8006028 <HAL_TIM_ConfigClockSource>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800283a:	f000 f917 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_TIM2_Init+0xf8>)
 8002840:	0018      	movs	r0, r3
 8002842:	f003 fa9b 	bl	8005d7c <HAL_TIM_PWM_Init>
 8002846:	1e03      	subs	r3, r0, #0
 8002848:	d001      	beq.n	800284e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800284a:	f000 f90f 	bl	8002a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284e:	211c      	movs	r1, #28
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800285c:	187a      	adds	r2, r7, r1
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <MX_TIM2_Init+0xf8>)
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f004 f88c 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800286c:	f000 f8fe 	bl	8002a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002870:	003b      	movs	r3, r7
 8002872:	2260      	movs	r2, #96	; 0x60
 8002874:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002876:	003b      	movs	r3, r7
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287c:	003b      	movs	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002882:	003b      	movs	r3, r7
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002888:	0039      	movs	r1, r7
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <MX_TIM2_Init+0xf8>)
 800288c:	2200      	movs	r2, #0
 800288e:	0018      	movs	r0, r3
 8002890:	f003 fad4 	bl	8005e3c <HAL_TIM_PWM_ConfigChannel>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d001      	beq.n	800289c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002898:	f000 f8e8 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <MX_TIM2_Init+0xf8>)
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 fa72 	bl	8002d88 <HAL_TIM_MspPostInit>

}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b00e      	add	sp, #56	; 0x38
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20001cf8 	.word	0x20001cf8

080028b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028b6:	4a24      	ldr	r2, [pc, #144]	; (8002948 <MX_USART1_UART_Init+0x98>)
 80028b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028bc:	22e1      	movs	r2, #225	; 0xe1
 80028be:	0252      	lsls	r2, r2, #9
 80028c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028d6:	220c      	movs	r2, #12
 80028d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <MX_USART1_UART_Init+0x94>)
 80028fa:	0018      	movs	r0, r3
 80028fc:	f004 f8ae 	bl	8006a5c <HAL_UART_Init>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d001      	beq.n	8002908 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002904:	f000 f8b2 	bl	8002a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_USART1_UART_Init+0x94>)
 800290a:	2100      	movs	r1, #0
 800290c:	0018      	movs	r0, r3
 800290e:	f004 fe85 	bl	800761c <HAL_UARTEx_SetTxFifoThreshold>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d001      	beq.n	800291a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002916:	f000 f8a9 	bl	8002a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <MX_USART1_UART_Init+0x94>)
 800291c:	2100      	movs	r1, #0
 800291e:	0018      	movs	r0, r3
 8002920:	f004 febc 	bl	800769c <HAL_UARTEx_SetRxFifoThreshold>
 8002924:	1e03      	subs	r3, r0, #0
 8002926:	d001      	beq.n	800292c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002928:	f000 f8a0 	bl	8002a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <MX_USART1_UART_Init+0x94>)
 800292e:	0018      	movs	r0, r3
 8002930:	f004 fe3a 	bl	80075a8 <HAL_UARTEx_DisableFifoMode>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d001      	beq.n	800293c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002938:	f000 f898 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	20001c44 	.word	0x20001c44
 8002948:	40013800 	.word	0x40013800

0800294c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002952:	240c      	movs	r4, #12
 8002954:	193b      	adds	r3, r7, r4
 8002956:	0018      	movs	r0, r3
 8002958:	2314      	movs	r3, #20
 800295a:	001a      	movs	r2, r3
 800295c:	2100      	movs	r1, #0
 800295e:	f007 fa24 	bl	8009daa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <MX_GPIO_Init+0xfc>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <MX_GPIO_Init+0xfc>)
 8002968:	2102      	movs	r1, #2
 800296a:	430a      	orrs	r2, r1
 800296c:	635a      	str	r2, [r3, #52]	; 0x34
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <MX_GPIO_Init+0xfc>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <MX_GPIO_Init+0xfc>)
 800297c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297e:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <MX_GPIO_Init+0xfc>)
 8002980:	2101      	movs	r1, #1
 8002982:	430a      	orrs	r2, r1
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <MX_GPIO_Init+0xfc>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	2201      	movs	r2, #1
 800298c:	4013      	ands	r3, r2
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <MX_GPIO_Init+0xfc>)
 8002994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002996:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <MX_GPIO_Init+0xfc>)
 8002998:	2104      	movs	r1, #4
 800299a:	430a      	orrs	r2, r1
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
 800299e:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <MX_GPIO_Init+0xfc>)
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	2204      	movs	r2, #4
 80029a4:	4013      	ands	r3, r2
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80029aa:	23a0      	movs	r3, #160	; 0xa0
 80029ac:	05db      	lsls	r3, r3, #23
 80029ae:	2200      	movs	r2, #0
 80029b0:	2102      	movs	r1, #2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f001 fd68 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <MX_GPIO_Init+0x100>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	2130      	movs	r1, #48	; 0x30
 80029be:	0018      	movs	r0, r3
 80029c0:	f001 fd62 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11, GPIO_PIN_RESET);
 80029c4:	4922      	ldr	r1, [pc, #136]	; (8002a50 <MX_GPIO_Init+0x104>)
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <MX_GPIO_Init+0x108>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	0018      	movs	r0, r3
 80029cc:	f001 fd5c 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	2202      	movs	r2, #2
 80029d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2201      	movs	r2, #1
 80029da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2200      	movs	r2, #0
 80029e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	193a      	adds	r2, r7, r4
 80029ea:	23a0      	movs	r3, #160	; 0xa0
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	0011      	movs	r1, r2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f001 fbe5 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	2230      	movs	r2, #48	; 0x30
 80029fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	2201      	movs	r2, #1
 8002a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <MX_GPIO_Init+0x100>)
 8002a12:	0019      	movs	r1, r3
 8002a14:	0010      	movs	r0, r2
 8002a16:	f001 fbd3 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 8002a1a:	0021      	movs	r1, r4
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <MX_GPIO_Init+0x104>)
 8002a20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2201      	movs	r2, #1
 8002a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <MX_GPIO_Init+0x108>)
 8002a38:	0019      	movs	r1, r3
 8002a3a:	0010      	movs	r0, r2
 8002a3c:	f001 fbc0 	bl	80041c0 <HAL_GPIO_Init>

}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b009      	add	sp, #36	; 0x24
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	50000800 	.word	0x50000800
 8002a50:	00000804 	.word	0x00000804
 8002a54:	50000400 	.word	0x50000400

08002a58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(400);
 8002a60:	23c8      	movs	r3, #200	; 0xc8
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	0018      	movs	r0, r3
 8002a66:	f005 f811 	bl	8007a8c <osDelay>
 8002a6a:	e7f9      	b.n	8002a60 <StartDefaultTask+0x8>

08002a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a70:	b672      	cpsid	i
}
 8002a72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <Error_Handler+0x8>
	...

08002a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a84:	2101      	movs	r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	0549      	lsls	r1, r1, #21
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_MspInit+0x5c>)
 8002aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	055b      	lsls	r3, r3, #21
 8002aac:	4013      	ands	r3, r2
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	425b      	negs	r3, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2103      	movs	r1, #3
 8002aba:	0018      	movs	r0, r3
 8002abc:	f001 fa1c 	bl	8003ef8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002ac0:	23c0      	movs	r3, #192	; 0xc0
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 fba9 	bl	800321c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b097      	sub	sp, #92	; 0x5c
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	2344      	movs	r3, #68	; 0x44
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	2314      	movs	r3, #20
 8002ae8:	001a      	movs	r2, r3
 8002aea:	2100      	movs	r1, #0
 8002aec:	f007 f95d 	bl	8009daa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af0:	2410      	movs	r4, #16
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	0018      	movs	r0, r3
 8002af6:	2334      	movs	r3, #52	; 0x34
 8002af8:	001a      	movs	r2, r3
 8002afa:	2100      	movs	r1, #0
 8002afc:	f007 f955 	bl	8009daa <memset>
  if(hadc->Instance==ADC1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <HAL_ADC_MspInit+0xb0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d139      	bne.n	8002b7e <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	01d2      	lsls	r2, r2, #7
 8002b10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	2200      	movs	r2, #0
 8002b16:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f002 ff1e 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 8002b20:	1e03      	subs	r3, r0, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b24:	f7ff ffa2 	bl	8002a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	0349      	lsls	r1, r1, #13
 8002b32:	430a      	orrs	r2, r1
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	035b      	lsls	r3, r3, #13
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_ADC_MspInit+0xb4>)
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b5c:	2144      	movs	r1, #68	; 0x44
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2203      	movs	r2, #3
 8002b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	187a      	adds	r2, r7, r1
 8002b72:	23a0      	movs	r3, #160	; 0xa0
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f001 fb21 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b017      	add	sp, #92	; 0x5c
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40012400 	.word	0x40012400
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	2414      	movs	r4, #20
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	2314      	movs	r3, #20
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f007 f901 	bl	8009daa <memset>
  if(hdac->Instance==DAC1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <HAL_DAC_MspInit+0x80>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d129      	bne.n	8002c06 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_DAC_MspInit+0x84>)
 8002bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_DAC_MspInit+0x84>)
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	0589      	lsls	r1, r1, #22
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_DAC_MspInit+0x84>)
 8002bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	059b      	lsls	r3, r3, #22
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_DAC_MspInit+0x84>)
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_DAC_MspInit+0x84>)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_DAC_MspInit+0x84>)
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	2210      	movs	r2, #16
 8002bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2203      	movs	r2, #3
 8002bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf8:	193a      	adds	r2, r7, r4
 8002bfa:	23a0      	movs	r3, #160	; 0xa0
 8002bfc:	05db      	lsls	r3, r3, #23
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f001 fadd 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b00b      	add	sp, #44	; 0x2c
 8002c0c:	bd90      	pop	{r4, r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	40007400 	.word	0x40007400
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b099      	sub	sp, #100	; 0x64
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	234c      	movs	r3, #76	; 0x4c
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	0018      	movs	r0, r3
 8002c26:	2314      	movs	r3, #20
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f007 f8bd 	bl	8009daa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	2418      	movs	r4, #24
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	0018      	movs	r0, r3
 8002c36:	2334      	movs	r3, #52	; 0x34
 8002c38:	001a      	movs	r2, r3
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f007 f8b5 	bl	8009daa <memset>
  if(hi2c->Instance==I2C1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a3e      	ldr	r2, [pc, #248]	; (8002d40 <HAL_I2C_MspInit+0x128>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d13e      	bne.n	8002cc8 <HAL_I2C_MspInit+0xb0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f002 fe7f 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c62:	f7ff ff03 	bl	8002a6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002c7e:	214c      	movs	r1, #76	; 0x4c
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	22c0      	movs	r2, #192	; 0xc0
 8002c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2212      	movs	r2, #18
 8002c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	2206      	movs	r2, #6
 8002c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <HAL_I2C_MspInit+0x130>)
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f001 fa8b 	bl	80041c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cae:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	0389      	lsls	r1, r1, #14
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cb8:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	039b      	lsls	r3, r3, #14
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cc6:	e036      	b.n	8002d36 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_I2C_MspInit+0x134>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d131      	bne.n	8002d36 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002cea:	214c      	movs	r1, #76	; 0x4c
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	22c0      	movs	r2, #192	; 0xc0
 8002cf0:	0152      	lsls	r2, r2, #5
 8002cf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2212      	movs	r2, #18
 8002cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2206      	movs	r2, #6
 8002d0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	187a      	adds	r2, r7, r1
 8002d0e:	23a0      	movs	r3, #160	; 0xa0
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	0011      	movs	r1, r2
 8002d14:	0018      	movs	r0, r3
 8002d16:	f001 fa53 	bl	80041c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002d20:	2180      	movs	r1, #128	; 0x80
 8002d22:	03c9      	lsls	r1, r1, #15
 8002d24:	430a      	orrs	r2, r1
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_I2C_MspInit+0x12c>)
 8002d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	03db      	lsls	r3, r3, #15
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b019      	add	sp, #100	; 0x64
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40005400 	.word	0x40005400
 8002d44:	40021000 	.word	0x40021000
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	40005800 	.word	0x40005800

08002d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	05db      	lsls	r3, r3, #23
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d10b      	bne.n	8002d7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_TIM_Base_MspInit+0x34>)
 8002d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_TIM_Base_MspInit+0x34>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_TIM_Base_MspInit+0x34>)
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b004      	add	sp, #16
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	240c      	movs	r4, #12
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	0018      	movs	r0, r3
 8002d96:	2314      	movs	r3, #20
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f007 f805 	bl	8009daa <memset>
  if(htim->Instance==TIM2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	05db      	lsls	r3, r3, #23
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d123      	bne.n	8002df4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_TIM_MspPostInit+0x74>)
 8002dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_TIM_MspPostInit+0x74>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_TIM_MspPostInit+0x74>)
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002dc4:	193b      	adds	r3, r7, r4
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	0212      	lsls	r2, r2, #8
 8002dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	0021      	movs	r1, r4
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2202      	movs	r2, #2
 8002de4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de6:	187a      	adds	r2, r7, r1
 8002de8:	23a0      	movs	r3, #160	; 0xa0
 8002dea:	05db      	lsls	r3, r3, #23
 8002dec:	0011      	movs	r1, r2
 8002dee:	0018      	movs	r0, r3
 8002df0:	f001 f9e6 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b009      	add	sp, #36	; 0x24
 8002dfa:	bd90      	pop	{r4, r7, pc}
 8002dfc:	40021000 	.word	0x40021000

08002e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b097      	sub	sp, #92	; 0x5c
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	2344      	movs	r3, #68	; 0x44
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	2314      	movs	r3, #20
 8002e10:	001a      	movs	r2, r3
 8002e12:	2100      	movs	r1, #0
 8002e14:	f006 ffc9 	bl	8009daa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e18:	2410      	movs	r4, #16
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	2334      	movs	r3, #52	; 0x34
 8002e20:	001a      	movs	r2, r3
 8002e22:	2100      	movs	r1, #0
 8002e24:	f006 ffc1 	bl	8009daa <memset>
  if(huart->Instance==USART1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <HAL_UART_MspInit+0xbc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d13f      	bne.n	8002eb2 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e32:	193b      	adds	r3, r7, r4
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	0018      	movs	r0, r3
 8002e42:	f002 fd8b 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e4a:	f7ff fe0f 	bl	8002a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_UART_MspInit+0xc0>)
 8002e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_UART_MspInit+0xc0>)
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	01c9      	lsls	r1, r1, #7
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_UART_MspInit+0xc0>)
 8002e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	01db      	lsls	r3, r3, #7
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_UART_MspInit+0xc0>)
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_UART_MspInit+0xc0>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_UART_MspInit+0xc0>)
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002e82:	2144      	movs	r1, #68	; 0x44
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	22c0      	movs	r2, #192	; 0xc0
 8002e88:	00d2      	lsls	r2, r2, #3
 8002e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2202      	movs	r2, #2
 8002e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	187a      	adds	r2, r7, r1
 8002ea6:	23a0      	movs	r3, #160	; 0xa0
 8002ea8:	05db      	lsls	r3, r3, #23
 8002eaa:	0011      	movs	r1, r2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f001 f987 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b017      	add	sp, #92	; 0x5c
 8002eb8:	bd90      	pop	{r4, r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <NMI_Handler+0x4>

08002eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <HardFault_Handler+0x4>

08002ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ed4:	f000 f962 	bl	800319c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002ed8:	f006 f874 	bl	8008fc4 <xTaskGetSchedulerState>
 8002edc:	0003      	movs	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ee2:	f006 fd41 	bl	8009968 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	return 1;
 8002ef0:	2301      	movs	r3, #1
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_kill>:

int _kill(int pid, int sig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f02:	f006 ff1f 	bl	8009d44 <__errno>
 8002f06:	0003      	movs	r3, r0
 8002f08:	2216      	movs	r2, #22
 8002f0a:	601a      	str	r2, [r3, #0]
	return -1;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	425b      	negs	r3, r3
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_exit>:

void _exit (int status)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f20:	2301      	movs	r3, #1
 8002f22:	425a      	negs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0011      	movs	r1, r2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff ffe5 	bl	8002ef8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f2e:	e7fe      	b.n	8002f2e <_exit+0x16>

08002f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e00a      	b.n	8002f58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f42:	e000      	b.n	8002f46 <_read+0x16>
 8002f44:	bf00      	nop
 8002f46:	0001      	movs	r1, r0
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	60ba      	str	r2, [r7, #8]
 8002f4e:	b2ca      	uxtb	r2, r1
 8002f50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbf0      	blt.n	8002f42 <_read+0x12>
	}

return len;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b006      	add	sp, #24
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e009      	b.n	8002f90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	60ba      	str	r2, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff fa45 	bl	8002414 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	dbf1      	blt.n	8002f7c <_write+0x12>
	}
	return len;
 8002f98:	687b      	ldr	r3, [r7, #4]
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b006      	add	sp, #24
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <_close>:

int _close(int file)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
	return -1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	425b      	negs	r3, r3
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	0192      	lsls	r2, r2, #6
 8002fc6:	605a      	str	r2, [r3, #4]
	return 0;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_isatty>:

int _isatty(int file)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
	return 0;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b004      	add	sp, #16
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <_sbrk+0x5c>)
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <_sbrk+0x60>)
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <_sbrk+0x64>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <_sbrk+0x64>)
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <_sbrk+0x68>)
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	429a      	cmp	r2, r3
 800302a:	d207      	bcs.n	800303c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800302c:	f006 fe8a 	bl	8009d44 <__errno>
 8003030:	0003      	movs	r3, r0
 8003032:	220c      	movs	r2, #12
 8003034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003036:	2301      	movs	r3, #1
 8003038:	425b      	negs	r3, r3
 800303a:	e009      	b.n	8003050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	18d2      	adds	r2, r2, r3
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <_sbrk+0x64>)
 800304c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20009000 	.word	0x20009000
 800305c:	00000400 	.word	0x00000400
 8003060:	200001fc 	.word	0x200001fc
 8003064:	20001dc0 	.word	0x20001dc0

08003068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003074:	480d      	ldr	r0, [pc, #52]	; (80030ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003076:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003078:	f7ff fff6 	bl	8003068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800307c:	480c      	ldr	r0, [pc, #48]	; (80030b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800307e:	490d      	ldr	r1, [pc, #52]	; (80030b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <LoopForever+0xe>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003084:	e002      	b.n	800308c <LoopCopyDataInit>

08003086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800308a:	3304      	adds	r3, #4

0800308c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800308c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003090:	d3f9      	bcc.n	8003086 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003094:	4c0a      	ldr	r4, [pc, #40]	; (80030c0 <LoopForever+0x16>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003098:	e001      	b.n	800309e <LoopFillZerobss>

0800309a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800309a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800309c:	3204      	adds	r2, #4

0800309e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a0:	d3fb      	bcc.n	800309a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030a2:	f006 fe55 	bl	8009d50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030a6:	f7ff f9c7 	bl	8002438 <main>

080030aa <LoopForever>:

LoopForever:
  b LoopForever
 80030aa:	e7fe      	b.n	80030aa <LoopForever>
  ldr   r0, =_estack
 80030ac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80030b8:	0800d214 	.word	0x0800d214
  ldr r2, =_sbss
 80030bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80030c0:	20001dbc 	.word	0x20001dbc

080030c4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030c4:	e7fe      	b.n	80030c4 <ADC1_COMP_IRQHandler>
	...

080030c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_Init+0x3c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Init+0x3c>)
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	0049      	lsls	r1, r1, #1
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030e2:	2003      	movs	r0, #3
 80030e4:	f000 f810 	bl	8003108 <HAL_InitTick>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e001      	b.n	80030f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80030f4:	f7ff fcc0 	bl	8002a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	781b      	ldrb	r3, [r3, #0]
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40022000 	.word	0x40022000

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003110:	230f      	movs	r3, #15
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_InitTick+0x88>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02b      	beq.n	8003178 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003120:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_InitTick+0x8c>)
 8003122:	681c      	ldr	r4, [r3, #0]
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <HAL_InitTick+0x88>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	0019      	movs	r1, r3
 800312a:	23fa      	movs	r3, #250	; 0xfa
 800312c:	0098      	lsls	r0, r3, #2
 800312e:	f7fd f807 	bl	8000140 <__udivsi3>
 8003132:	0003      	movs	r3, r0
 8003134:	0019      	movs	r1, r3
 8003136:	0020      	movs	r0, r4
 8003138:	f7fd f802 	bl	8000140 <__udivsi3>
 800313c:	0003      	movs	r3, r0
 800313e:	0018      	movs	r0, r3
 8003140:	f000 feef 	bl	8003f22 <HAL_SYSTICK_Config>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d112      	bne.n	800316e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d80a      	bhi.n	8003164 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	2301      	movs	r3, #1
 8003152:	425b      	negs	r3, r3
 8003154:	2200      	movs	r2, #0
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fece 	bl	8003ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_InitTick+0x90>)
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e00d      	b.n	8003180 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003164:	230f      	movs	r3, #15
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e008      	b.n	8003180 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e003      	b.n	8003180 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003178:	230f      	movs	r3, #15
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	781b      	ldrb	r3, [r3, #0]
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b005      	add	sp, #20
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	20000008 	.word	0x20000008
 8003194:	20000000 	.word	0x20000000
 8003198:	20000004 	.word	0x20000004

0800319c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_IncTick+0x1c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	001a      	movs	r2, r3
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_IncTick+0x20>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	18d2      	adds	r2, r2, r3
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <HAL_IncTick+0x20>)
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20000008 	.word	0x20000008
 80031bc:	20001d68 	.word	0x20001d68

080031c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return uwTick;
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <HAL_GetTick+0x10>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	20001d68 	.word	0x20001d68

080031d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3301      	adds	r3, #1
 80031ec:	d005      	beq.n	80031fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_Delay+0x44>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	001a      	movs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	f7ff ffe0 	bl	80031c0 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d8f7      	bhi.n	80031fc <HAL_Delay+0x28>
  {
  }
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b004      	add	sp, #16
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	20000008 	.word	0x20000008

0800321c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	40010000 	.word	0x40010000
 8003244:	fffff9ff 	.word	0xfffff9ff

08003248 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003258:	401a      	ands	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b002      	add	sp, #8
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	fe3fffff 	.word	0xfe3fffff

08003270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	23e0      	movs	r3, #224	; 0xe0
 800327e:	045b      	lsls	r3, r3, #17
 8003280:	4013      	ands	r3, r2
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b002      	add	sp, #8
 8003288:	bd80      	pop	{r7, pc}

0800328a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	2104      	movs	r1, #4
 800329e:	400a      	ands	r2, r1
 80032a0:	2107      	movs	r1, #7
 80032a2:	4091      	lsls	r1, r2
 80032a4:	000a      	movs	r2, r1
 80032a6:	43d2      	mvns	r2, r2
 80032a8:	401a      	ands	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2104      	movs	r1, #4
 80032ae:	400b      	ands	r3, r1
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4099      	lsls	r1, r3
 80032b4:	000b      	movs	r3, r1
 80032b6:	431a      	orrs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	211f      	movs	r1, #31
 80032d8:	400a      	ands	r2, r1
 80032da:	210f      	movs	r1, #15
 80032dc:	4091      	lsls	r1, r2
 80032de:	000a      	movs	r2, r1
 80032e0:	43d2      	mvns	r2, r2
 80032e2:	401a      	ands	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0e9b      	lsrs	r3, r3, #26
 80032e8:	210f      	movs	r1, #15
 80032ea:	4019      	ands	r1, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	201f      	movs	r0, #31
 80032f0:	4003      	ands	r3, r0
 80032f2:	4099      	lsls	r1, r3
 80032f4:	000b      	movs	r3, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b004      	add	sp, #16
 8003302:	bd80      	pop	{r7, pc}

08003304 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	035b      	lsls	r3, r3, #13
 8003316:	0b5b      	lsrs	r3, r3, #13
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}

08003326 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	0352      	lsls	r2, r2, #13
 8003338:	0b52      	lsrs	r2, r2, #13
 800333a:	43d2      	mvns	r2, r2
 800333c:	401a      	ands	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	0212      	lsls	r2, r2, #8
 8003360:	43d2      	mvns	r2, r2
 8003362:	401a      	ands	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	400b      	ands	r3, r1
 800336c:	4904      	ldr	r1, [pc, #16]	; (8003380 <LL_ADC_SetChannelSamplingTime+0x34>)
 800336e:	400b      	ands	r3, r1
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	07ffff00 	.word	0x07ffff00

08003384 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003392:	4013      	ands	r3, r2
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	0552      	lsls	r2, r2, #21
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b002      	add	sp, #8
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	6fffffe8 	.word	0x6fffffe8

080033ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	055b      	lsls	r3, r3, #21
 80033bc:	401a      	ands	r2, r3
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	055b      	lsls	r3, r3, #21
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d101      	bne.n	80033ca <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <LL_ADC_Disable+0x20>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	2202      	movs	r2, #2
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	7fffffe8 	.word	0x7fffffe8

080033f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2201      	movs	r2, #1
 8003406:	4013      	ands	r3, r2
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <LL_ADC_IsEnabled+0x18>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <LL_ADC_IsEnabled+0x1a>
 8003410:	2300      	movs	r3, #0
}
 8003412:	0018      	movs	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	b002      	add	sp, #8
 8003418:	bd80      	pop	{r7, pc}

0800341a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d101      	bne.n	8003432 <LL_ADC_IsDisableOngoing+0x18>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <LL_ADC_IsDisableOngoing+0x1a>
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}

0800343c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2204      	movs	r2, #4
 800344a:	4013      	ands	r3, r2
 800344c:	2b04      	cmp	r3, #4
 800344e:	d101      	bne.n	8003454 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003454:	2300      	movs	r3, #0
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b002      	add	sp, #8
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003468:	231f      	movs	r3, #31
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1b1      	b.n	80037ea <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff fb21 	bl	8002ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2254      	movs	r2, #84	; 0x54
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff ff7f 	bl	80033ac <LL_ADC_IsInternalRegulatorEnabled>
 80034ae:	1e03      	subs	r3, r0, #0
 80034b0:	d115      	bne.n	80034de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff ff64 	bl	8003384 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034bc:	4bcd      	ldr	r3, [pc, #820]	; (80037f4 <HAL_ADC_Init+0x394>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	49cd      	ldr	r1, [pc, #820]	; (80037f8 <HAL_ADC_Init+0x398>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fc fe3c 	bl	8000140 <__udivsi3>
 80034c8:	0003      	movs	r3, r0
 80034ca:	3301      	adds	r3, #1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034d0:	e002      	b.n	80034d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f9      	bne.n	80034d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff ff62 	bl	80033ac <LL_ADC_IsInternalRegulatorEnabled>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d10f      	bne.n	800350c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	2210      	movs	r2, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	2201      	movs	r2, #1
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003504:	231f      	movs	r3, #31
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff ff93 	bl	800343c <LL_ADC_REG_IsConversionOngoing>
 8003516:	0003      	movs	r3, r0
 8003518:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	2210      	movs	r2, #16
 8003520:	4013      	ands	r3, r2
 8003522:	d000      	beq.n	8003526 <HAL_ADC_Init+0xc6>
 8003524:	e154      	b.n	80037d0 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d000      	beq.n	800352e <HAL_ADC_Init+0xce>
 800352c:	e150      	b.n	80037d0 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4ab2      	ldr	r2, [pc, #712]	; (80037fc <HAL_ADC_Init+0x39c>)
 8003534:	4013      	ands	r3, r2
 8003536:	2202      	movs	r2, #2
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0018      	movs	r0, r3
 8003544:	f7ff ff58 	bl	80033f8 <LL_ADC_IsEnabled>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d156      	bne.n	80035fa <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2218      	movs	r2, #24
 8003554:	4393      	bics	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	0f9b      	lsrs	r3, r3, #30
 800356a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003570:	4313      	orrs	r3, r2
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223c      	movs	r2, #60	; 0x3c
 800357c:	5c9b      	ldrb	r3, [r3, r2]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d111      	bne.n	80035a6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0f9b      	lsrs	r3, r3, #30
 8003588:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800358e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003594:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800359a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	2201      	movs	r2, #1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	4a94      	ldr	r2, [pc, #592]	; (8003800 <HAL_ADC_Init+0x3a0>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	23c0      	movs	r3, #192	; 0xc0
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d018      	beq.n	80035fa <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	05db      	lsls	r3, r3, #23
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d012      	beq.n	80035fa <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	061b      	lsls	r3, r3, #24
 80035dc:	429a      	cmp	r2, r3
 80035de:	d00c      	beq.n	80035fa <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80035e0:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_ADC_Init+0x3a4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a88      	ldr	r2, [pc, #544]	; (8003808 <HAL_ADC_Init+0x3a8>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	23f0      	movs	r3, #240	; 0xf0
 80035f0:	039b      	lsls	r3, r3, #14
 80035f2:	401a      	ands	r2, r3
 80035f4:	4b83      	ldr	r3, [pc, #524]	; (8003804 <HAL_ADC_Init+0x3a4>)
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7e1b      	ldrb	r3, [r3, #24]
 80035fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7e5b      	ldrb	r3, [r3, #25]
 8003604:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003606:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7e9b      	ldrb	r3, [r3, #26]
 800360c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800360e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_ADC_Init+0x1be>
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	015b      	lsls	r3, r3, #5
 800361c:	e000      	b.n	8003620 <HAL_ADC_Init+0x1c0>
 800361e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003620:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003626:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	da04      	bge.n	800363a <HAL_ADC_Init+0x1da>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	e001      	b.n	800363e <HAL_ADC_Init+0x1de>
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800363e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	5c5b      	ldrb	r3, [r3, r1]
 8003646:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003648:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	5c9b      	ldrb	r3, [r3, r2]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d115      	bne.n	8003686 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	7e9b      	ldrb	r3, [r3, #26]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	0252      	lsls	r2, r2, #9
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e00b      	b.n	8003686 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	2220      	movs	r2, #32
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	2201      	movs	r2, #1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003692:	23e0      	movs	r3, #224	; 0xe0
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800369c:	4313      	orrs	r3, r2
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	4a58      	ldr	r2, [pc, #352]	; (800380c <HAL_ADC_Init+0x3ac>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4a53      	ldr	r2, [pc, #332]	; (8003810 <HAL_ADC_Init+0x3b0>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	001a      	movs	r2, r3
 80036da:	2100      	movs	r1, #0
 80036dc:	f7ff fdd5 	bl	800328a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	494a      	ldr	r1, [pc, #296]	; (8003814 <HAL_ADC_Init+0x3b4>)
 80036ea:	001a      	movs	r2, r3
 80036ec:	f7ff fdcd 	bl	800328a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2110      	movs	r1, #16
 8003704:	4249      	negs	r1, r1
 8003706:	430a      	orrs	r2, r1
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
 800370a:	e03a      	b.n	8003782 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	039b      	lsls	r3, r3, #14
 8003714:	429a      	cmp	r2, r3
 8003716:	d134      	bne.n	8003782 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	e00c      	b.n	8003738 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	40da      	lsrs	r2, r3
 8003728:	0013      	movs	r3, r2
 800372a:	220f      	movs	r2, #15
 800372c:	4013      	ands	r3, r2
 800372e:	2b0f      	cmp	r3, #15
 8003730:	d006      	beq.n	8003740 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	3301      	adds	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b07      	cmp	r3, #7
 800373c:	d9ef      	bls.n	800371e <HAL_ADC_Init+0x2be>
 800373e:	e000      	b.n	8003742 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003740:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d109      	bne.n	800375c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2110      	movs	r1, #16
 8003754:	4249      	negs	r1, r1
 8003756:	430a      	orrs	r2, r1
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
 800375a:	e012      	b.n	8003782 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	3b01      	subs	r3, #1
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	221c      	movs	r2, #28
 800376c:	4013      	ands	r3, r2
 800376e:	2210      	movs	r2, #16
 8003770:	4252      	negs	r2, r2
 8003772:	409a      	lsls	r2, r3
 8003774:	0011      	movs	r1, r2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_ADC_Init+0x3b8>)
 800378a:	4013      	ands	r3, r2
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	429a      	cmp	r2, r3
 8003790:	d10b      	bne.n	80037aa <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	2203      	movs	r2, #3
 800379e:	4393      	bics	r3, r2
 80037a0:	2201      	movs	r2, #1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80037a8:	e01c      	b.n	80037e4 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	2212      	movs	r2, #18
 80037b0:	4393      	bics	r3, r2
 80037b2:	2210      	movs	r2, #16
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	2201      	movs	r2, #1
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80037c6:	231f      	movs	r3, #31
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80037ce:	e009      	b.n	80037e4 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	2210      	movs	r2, #16
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037dc:	231f      	movs	r3, #31
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2201      	movs	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80037e4:	231f      	movs	r3, #31
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	781b      	ldrb	r3, [r3, #0]
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b008      	add	sp, #32
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000000 	.word	0x20000000
 80037f8:	00030d40 	.word	0x00030d40
 80037fc:	fffffefd 	.word	0xfffffefd
 8003800:	1ffffc02 	.word	0x1ffffc02
 8003804:	40012708 	.word	0x40012708
 8003808:	ffc3ffff 	.word	0xffc3ffff
 800380c:	fffe0219 	.word	0xfffe0219
 8003810:	dffffc02 	.word	0xdffffc02
 8003814:	07ffff04 	.word	0x07ffff04
 8003818:	833fffe7 	.word	0x833fffe7

0800381c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003826:	2317      	movs	r3, #23
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2254      	movs	r2, #84	; 0x54
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x24>
 800383c:	2302      	movs	r3, #2
 800383e:	e1c0      	b.n	8003bc2 <HAL_ADC_ConfigChannel+0x3a6>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2254      	movs	r2, #84	; 0x54
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff fdf5 	bl	800343c <LL_ADC_REG_IsConversionOngoing>
 8003852:	1e03      	subs	r3, r0, #0
 8003854:	d000      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x3c>
 8003856:	e1a3      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d100      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x46>
 8003860:	e143      	b.n	8003aea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	429a      	cmp	r2, r3
 800386c:	d004      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003872:	4ac1      	ldr	r2, [pc, #772]	; (8003b78 <HAL_ADC_ConfigChannel+0x35c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d108      	bne.n	800388a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0019      	movs	r1, r3
 8003882:	0010      	movs	r0, r2
 8003884:	f7ff fd3e 	bl	8003304 <LL_ADC_REG_SetSequencerChAdd>
 8003888:	e0c9      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	211f      	movs	r1, #31
 8003894:	400b      	ands	r3, r1
 8003896:	210f      	movs	r1, #15
 8003898:	4099      	lsls	r1, r3
 800389a:	000b      	movs	r3, r1
 800389c:	43db      	mvns	r3, r3
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	035b      	lsls	r3, r3, #13
 80038a8:	0b5b      	lsrs	r3, r3, #13
 80038aa:	d105      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x9c>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	221f      	movs	r2, #31
 80038b4:	4013      	ands	r3, r2
 80038b6:	e098      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	d000      	beq.n	80038c4 <HAL_ADC_ConfigChannel+0xa8>
 80038c2:	e091      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x1cc>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2202      	movs	r2, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	d000      	beq.n	80038d0 <HAL_ADC_ConfigChannel+0xb4>
 80038ce:	e089      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x1c8>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2204      	movs	r2, #4
 80038d6:	4013      	ands	r3, r2
 80038d8:	d000      	beq.n	80038dc <HAL_ADC_ConfigChannel+0xc0>
 80038da:	e081      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x1c4>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2208      	movs	r2, #8
 80038e2:	4013      	ands	r3, r2
 80038e4:	d000      	beq.n	80038e8 <HAL_ADC_ConfigChannel+0xcc>
 80038e6:	e079      	b.n	80039dc <HAL_ADC_ConfigChannel+0x1c0>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	4013      	ands	r3, r2
 80038f0:	d000      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0xd8>
 80038f2:	e071      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x1bc>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2220      	movs	r2, #32
 80038fa:	4013      	ands	r3, r2
 80038fc:	d000      	beq.n	8003900 <HAL_ADC_ConfigChannel+0xe4>
 80038fe:	e069      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x1b8>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2240      	movs	r2, #64	; 0x40
 8003906:	4013      	ands	r3, r2
 8003908:	d000      	beq.n	800390c <HAL_ADC_ConfigChannel+0xf0>
 800390a:	e061      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x1b4>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	4013      	ands	r3, r2
 8003914:	d000      	beq.n	8003918 <HAL_ADC_ConfigChannel+0xfc>
 8003916:	e059      	b.n	80039cc <HAL_ADC_ConfigChannel+0x1b0>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4013      	ands	r3, r2
 8003922:	d151      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1ac>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4013      	ands	r3, r2
 800392e:	d149      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1a8>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4013      	ands	r3, r2
 800393a:	d141      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x1a4>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	4013      	ands	r3, r2
 8003946:	d139      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1a0>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	015b      	lsls	r3, r3, #5
 8003950:	4013      	ands	r3, r2
 8003952:	d131      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x19c>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	019b      	lsls	r3, r3, #6
 800395c:	4013      	ands	r3, r2
 800395e:	d129      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x198>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	01db      	lsls	r3, r3, #7
 8003968:	4013      	ands	r3, r2
 800396a:	d121      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x194>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	4013      	ands	r3, r2
 8003976:	d119      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x190>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	025b      	lsls	r3, r3, #9
 8003980:	4013      	ands	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x18c>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	029b      	lsls	r3, r3, #10
 800398c:	4013      	ands	r3, r2
 800398e:	d109      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x188>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	02db      	lsls	r3, r3, #11
 8003998:	4013      	ands	r3, r2
 800399a:	d001      	beq.n	80039a0 <HAL_ADC_ConfigChannel+0x184>
 800399c:	2312      	movs	r3, #18
 800399e:	e024      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039a0:	2300      	movs	r3, #0
 80039a2:	e022      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039a4:	2311      	movs	r3, #17
 80039a6:	e020      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039a8:	2310      	movs	r3, #16
 80039aa:	e01e      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039ac:	230f      	movs	r3, #15
 80039ae:	e01c      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039b0:	230e      	movs	r3, #14
 80039b2:	e01a      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039b4:	230d      	movs	r3, #13
 80039b6:	e018      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039b8:	230c      	movs	r3, #12
 80039ba:	e016      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039bc:	230b      	movs	r3, #11
 80039be:	e014      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039c0:	230a      	movs	r3, #10
 80039c2:	e012      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039c4:	2309      	movs	r3, #9
 80039c6:	e010      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039c8:	2308      	movs	r3, #8
 80039ca:	e00e      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039cc:	2307      	movs	r3, #7
 80039ce:	e00c      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039d0:	2306      	movs	r3, #6
 80039d2:	e00a      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039d4:	2305      	movs	r3, #5
 80039d6:	e008      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039d8:	2304      	movs	r3, #4
 80039da:	e006      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039dc:	2303      	movs	r3, #3
 80039de:	e004      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e002      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1ce>
 80039e8:	2300      	movs	r3, #0
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	6852      	ldr	r2, [r2, #4]
 80039ee:	201f      	movs	r0, #31
 80039f0:	4002      	ands	r2, r0
 80039f2:	4093      	lsls	r3, r2
 80039f4:	000a      	movs	r2, r1
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d808      	bhi.n	8003a1e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	001a      	movs	r2, r3
 8003a1a:	f7ff fc53 	bl	80032c4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	f7ff fc8e 	bl	800334c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db00      	blt.n	8003a3a <HAL_ADC_ConfigChannel+0x21e>
 8003a38:	e0bc      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3a:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff fc17 	bl	8003270 <LL_ADC_GetCommonPathInternalCh>
 8003a42:	0003      	movs	r3, r0
 8003a44:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a4d      	ldr	r2, [pc, #308]	; (8003b80 <HAL_ADC_ConfigChannel+0x364>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d122      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a58:	d11d      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	0412      	lsls	r2, r2, #16
 8003a60:	4313      	orrs	r3, r2
 8003a62:	4a46      	ldr	r2, [pc, #280]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003a64:	0019      	movs	r1, r3
 8003a66:	0010      	movs	r0, r2
 8003a68:	f7ff fbee 	bl	8003248 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a6c:	4b45      	ldr	r3, [pc, #276]	; (8003b84 <HAL_ADC_ConfigChannel+0x368>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4945      	ldr	r1, [pc, #276]	; (8003b88 <HAL_ADC_ConfigChannel+0x36c>)
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fc fb64 	bl	8000140 <__udivsi3>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	189b      	adds	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a86:	e002      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f9      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a94:	e08e      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3c      	ldr	r2, [pc, #240]	; (8003b8c <HAL_ADC_ConfigChannel+0x370>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10e      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x2a2>
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	045b      	lsls	r3, r3, #17
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d109      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	0452      	lsls	r2, r2, #17
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	4a32      	ldr	r2, [pc, #200]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	0010      	movs	r0, r2
 8003ab8:	f7ff fbc6 	bl	8003248 <LL_ADC_SetCommonPathInternalCh>
 8003abc:	e07a      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a33      	ldr	r2, [pc, #204]	; (8003b90 <HAL_ADC_ConfigChannel+0x374>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d000      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x2ae>
 8003ac8:	e074      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	03db      	lsls	r3, r3, #15
 8003ad0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ad2:	d000      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0x2ba>
 8003ad4:	e06e      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	03d2      	lsls	r2, r2, #15
 8003adc:	4313      	orrs	r3, r2
 8003ade:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	0010      	movs	r0, r2
 8003ae4:	f7ff fbb0 	bl	8003248 <LL_ADC_SetCommonPathInternalCh>
 8003ae8:	e064      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d004      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003afa:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <HAL_ADC_ConfigChannel+0x35c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d107      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0019      	movs	r1, r3
 8003b0a:	0010      	movs	r0, r2
 8003b0c:	f7ff fc0b 	bl	8003326 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da4d      	bge.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b18:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff fba8 	bl	8003270 <LL_ADC_GetCommonPathInternalCh>
 8003b20:	0003      	movs	r3, r0
 8003b22:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <HAL_ADC_ConfigChannel+0x364>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_ADC_ConfigChannel+0x378>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003b36:	0019      	movs	r1, r3
 8003b38:	0010      	movs	r0, r2
 8003b3a:	f7ff fb85 	bl	8003248 <LL_ADC_SetCommonPathInternalCh>
 8003b3e:	e039      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_ADC_ConfigChannel+0x370>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <HAL_ADC_ConfigChannel+0x37c>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	0010      	movs	r0, r2
 8003b56:	f7ff fb77 	bl	8003248 <LL_ADC_SetCommonPathInternalCh>
 8003b5a:	e02b      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <HAL_ADC_ConfigChannel+0x374>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d126      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <HAL_ADC_ConfigChannel+0x380>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_ADC_ConfigChannel+0x360>)
 8003b6e:	0019      	movs	r1, r3
 8003b70:	0010      	movs	r0, r2
 8003b72:	f7ff fb69 	bl	8003248 <LL_ADC_SetCommonPathInternalCh>
 8003b76:	e01d      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x398>
 8003b78:	80000004 	.word	0x80000004
 8003b7c:	40012708 	.word	0x40012708
 8003b80:	b0001000 	.word	0xb0001000
 8003b84:	20000000 	.word	0x20000000
 8003b88:	00030d40 	.word	0x00030d40
 8003b8c:	b8004000 	.word	0xb8004000
 8003b90:	b4002000 	.word	0xb4002000
 8003b94:	ff7fffff 	.word	0xff7fffff
 8003b98:	feffffff 	.word	0xfeffffff
 8003b9c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bac:	2317      	movs	r3, #23
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2254      	movs	r2, #84	; 0x54
 8003bb8:	2100      	movs	r1, #0
 8003bba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003bbc:	2317      	movs	r3, #23
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	781b      	ldrb	r3, [r3, #0]
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b006      	add	sp, #24
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)

08003bcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff fc1e 	bl	800341a <LL_ADC_IsDisableOngoing>
 8003bde:	0003      	movs	r3, r0
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7ff fc06 	bl	80033f8 <LL_ADC_IsEnabled>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d046      	beq.n	8003c7e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d143      	bne.n	8003c7e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10d      	bne.n	8003c20 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff fbe3 	bl	80033d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2203      	movs	r2, #3
 8003c14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c16:	f7ff fad3 	bl	80031c0 <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c1e:	e028      	b.n	8003c72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	2210      	movs	r2, #16
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	2201      	movs	r2, #1
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e021      	b.n	8003c80 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c3c:	f7ff fac0 	bl	80031c0 <HAL_GetTick>
 8003c40:	0002      	movs	r2, r0
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d913      	bls.n	8003c72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2201      	movs	r2, #1
 8003c52:	4013      	ands	r3, r2
 8003c54:	d00d      	beq.n	8003c72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	2201      	movs	r2, #1
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e006      	b.n	8003c80 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d1de      	bne.n	8003c3c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b004      	add	sp, #16
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <LL_ADC_IsEnabled>:
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2201      	movs	r2, #1
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <LL_ADC_IsEnabled+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <LL_ADC_IsEnabled+0x1a>
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <LL_ADC_IsCalibrationOnGoing>:
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0fdb      	lsrs	r3, r3, #31
 8003cb8:	07da      	lsls	r2, r3, #31
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d101      	bne.n	8003cc6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2254      	movs	r2, #84	; 0x54
 8003ce0:	5c9b      	ldrb	r3, [r3, r2]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_ADCEx_Calibration_Start+0x1a>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e06c      	b.n	8003dc4 <HAL_ADCEx_Calibration_Start+0xf4>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2254      	movs	r2, #84	; 0x54
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003cf2:	2317      	movs	r3, #23
 8003cf4:	18fc      	adds	r4, r7, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7ff ff67 	bl	8003bcc <ADC_Disable>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7ff ffbe 	bl	8003c88 <LL_ADC_IsEnabled>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d14c      	bne.n	8003daa <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	4a2d      	ldr	r2, [pc, #180]	; (8003dcc <HAL_ADCEx_Calibration_Start+0xfc>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	2202      	movs	r2, #2
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2203      	movs	r2, #3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2103      	movs	r1, #3
 8003d38:	438a      	bics	r2, r1
 8003d3a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	0609      	lsls	r1, r1, #24
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d4e:	e014      	b.n	8003d7a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <HAL_ADCEx_Calibration_Start+0x100>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d90d      	bls.n	8003d7a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	2212      	movs	r2, #18
 8003d64:	4393      	bics	r3, r2
 8003d66:	2210      	movs	r2, #16
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2254      	movs	r2, #84	; 0x54
 8003d72:	2100      	movs	r1, #0
 8003d74:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e024      	b.n	8003dc4 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7ff ff93 	bl	8003caa <LL_ADC_IsCalibrationOnGoing>
 8003d84:	1e03      	subs	r3, r0, #0
 8003d86:	d1e3      	bne.n	8003d50 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	4393      	bics	r3, r2
 8003da0:	2201      	movs	r2, #1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	659a      	str	r2, [r3, #88]	; 0x58
 8003da8:	e005      	b.n	8003db6 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	2210      	movs	r2, #16
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2254      	movs	r2, #84	; 0x54
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003dbe:	2317      	movs	r3, #23
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	781b      	ldrb	r3, [r3, #0]
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b007      	add	sp, #28
 8003dca:	bd90      	pop	{r4, r7, pc}
 8003dcc:	fffffefd 	.word	0xfffffefd
 8003dd0:	0002f1ff 	.word	0x0002f1ff

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	0002      	movs	r2, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b7f      	cmp	r3, #127	; 0x7f
 8003de8:	d828      	bhi.n	8003e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dea:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <__NVIC_SetPriority+0xd4>)
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	33c0      	adds	r3, #192	; 0xc0
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	589b      	ldr	r3, [r3, r2]
 8003dfa:	1dfa      	adds	r2, r7, #7
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	0011      	movs	r1, r2
 8003e00:	2203      	movs	r2, #3
 8003e02:	400a      	ands	r2, r1
 8003e04:	00d2      	lsls	r2, r2, #3
 8003e06:	21ff      	movs	r1, #255	; 0xff
 8003e08:	4091      	lsls	r1, r2
 8003e0a:	000a      	movs	r2, r1
 8003e0c:	43d2      	mvns	r2, r2
 8003e0e:	401a      	ands	r2, r3
 8003e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	22ff      	movs	r2, #255	; 0xff
 8003e18:	401a      	ands	r2, r3
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	2303      	movs	r3, #3
 8003e22:	4003      	ands	r3, r0
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e28:	481f      	ldr	r0, [pc, #124]	; (8003ea8 <__NVIC_SetPriority+0xd4>)
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	430a      	orrs	r2, r1
 8003e34:	33c0      	adds	r3, #192	; 0xc0
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e3a:	e031      	b.n	8003ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <__NVIC_SetPriority+0xd8>)
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	0019      	movs	r1, r3
 8003e44:	230f      	movs	r3, #15
 8003e46:	400b      	ands	r3, r1
 8003e48:	3b08      	subs	r3, #8
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3306      	adds	r3, #6
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	3304      	adds	r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1dfa      	adds	r2, r7, #7
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	400a      	ands	r2, r1
 8003e60:	00d2      	lsls	r2, r2, #3
 8003e62:	21ff      	movs	r1, #255	; 0xff
 8003e64:	4091      	lsls	r1, r2
 8003e66:	000a      	movs	r2, r1
 8003e68:	43d2      	mvns	r2, r2
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	22ff      	movs	r2, #255	; 0xff
 8003e74:	401a      	ands	r2, r3
 8003e76:	1dfb      	adds	r3, r7, #7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	4003      	ands	r3, r0
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e84:	4809      	ldr	r0, [pc, #36]	; (8003eac <__NVIC_SetPriority+0xd8>)
 8003e86:	1dfb      	adds	r3, r7, #7
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	001c      	movs	r4, r3
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	4023      	ands	r3, r4
 8003e90:	3b08      	subs	r3, #8
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	430a      	orrs	r2, r1
 8003e96:	3306      	adds	r3, #6
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	18c3      	adds	r3, r0, r3
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	601a      	str	r2, [r3, #0]
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	e000e100 	.word	0xe000e100
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	045b      	lsls	r3, r3, #17
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d301      	bcc.n	8003ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e010      	b.n	8003eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <SysTick_Config+0x44>)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	2103      	movs	r1, #3
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff ff7c 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <SysTick_Config+0x44>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <SysTick_Config+0x44>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b002      	add	sp, #8
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	210f      	movs	r1, #15
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	1c02      	adds	r2, r0, #0
 8003f08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff ff5d 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff ffbf 	bl	8003eb0 <SysTick_Config>
 8003f32:	0003      	movs	r3, r0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e015      	b.n	8003f7a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	791b      	ldrb	r3, [r3, #4]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fe fe15 	bl	8002b90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	795b      	ldrb	r3, [r3, #5]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DAC_ConfigChannel+0x1c>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e107      	b.n	80041b0 <HAL_DAC_ConfigChannel+0x22c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d000      	beq.n	8003fb6 <HAL_DAC_ConfigChannel+0x32>
 8003fb4:	e074      	b.n	80040a0 <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d138      	bne.n	800402e <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003fbc:	f7ff f900 	bl	80031c0 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fc4:	e011      	b.n	8003fea <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fc6:	f7ff f8fb 	bl	80031c0 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d90a      	bls.n	8003fea <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0e2      	b.n	80041b0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d1e6      	bne.n	8003fc6 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7ff f8eb 	bl	80031d4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	6992      	ldr	r2, [r2, #24]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
 8004008:	e01e      	b.n	8004048 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800400a:	f7ff f8d9 	bl	80031c0 <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d90a      	bls.n	800402e <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2208      	movs	r2, #8
 800401e:	431a      	orrs	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2203      	movs	r2, #3
 8004028:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e0c0      	b.n	80041b0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	2b00      	cmp	r3, #0
 8004036:	dbe8      	blt.n	800400a <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 8004038:	2001      	movs	r0, #1
 800403a:	f7ff f8cb 	bl	80031d4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	6992      	ldr	r2, [r2, #24]
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	2110      	movs	r1, #16
 8004052:	400a      	ands	r2, r1
 8004054:	4958      	ldr	r1, [pc, #352]	; (80041b8 <HAL_DAC_ConfigChannel+0x234>)
 8004056:	4091      	lsls	r1, r2
 8004058:	000a      	movs	r2, r1
 800405a:	43d2      	mvns	r2, r2
 800405c:	401a      	ands	r2, r3
 800405e:	0011      	movs	r1, r2
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2010      	movs	r0, #16
 8004068:	4003      	ands	r3, r0
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	2110      	movs	r1, #16
 800407e:	400a      	ands	r2, r1
 8004080:	21ff      	movs	r1, #255	; 0xff
 8004082:	4091      	lsls	r1, r2
 8004084:	000a      	movs	r2, r1
 8004086:	43d2      	mvns	r2, r2
 8004088:	401a      	ands	r2, r3
 800408a:	0011      	movs	r1, r2
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2010      	movs	r0, #16
 8004094:	4003      	ands	r3, r0
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d11d      	bne.n	80040e4 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2210      	movs	r2, #16
 80040b4:	4013      	ands	r3, r2
 80040b6:	221f      	movs	r2, #31
 80040b8:	409a      	lsls	r2, r3
 80040ba:	0013      	movs	r3, r2
 80040bc:	43da      	mvns	r2, r3
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2210      	movs	r2, #16
 80040ce:	4013      	ands	r3, r2
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
 80040d4:	0013      	movs	r3, r2
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2210      	movs	r2, #16
 80040f0:	4013      	ands	r3, r2
 80040f2:	2207      	movs	r2, #7
 80040f4:	409a      	lsls	r2, r3
 80040f6:	0013      	movs	r3, r2
 80040f8:	43da      	mvns	r2, r3
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	431a      	orrs	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2210      	movs	r2, #16
 8004116:	4013      	ands	r3, r2
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	409a      	lsls	r2, r3
 800411c:	0013      	movs	r3, r2
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2110      	movs	r1, #16
 8004136:	400b      	ands	r3, r1
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	01c9      	lsls	r1, r1, #7
 800413c:	4099      	lsls	r1, r3
 800413e:	000b      	movs	r3, r1
 8004140:	43d9      	mvns	r1, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	400a      	ands	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2210      	movs	r2, #16
 8004156:	4013      	ands	r3, r2
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_DAC_ConfigChannel+0x238>)
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	43da      	mvns	r2, r3
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2210      	movs	r2, #16
 8004170:	4013      	ands	r3, r2
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	409a      	lsls	r2, r3
 8004176:	0013      	movs	r3, r2
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2110      	movs	r1, #16
 8004190:	400b      	ands	r3, r1
 8004192:	21c0      	movs	r1, #192	; 0xc0
 8004194:	4099      	lsls	r1, r3
 8004196:	000b      	movs	r3, r1
 8004198:	43d9      	mvns	r1, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	400a      	ands	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b008      	add	sp, #32
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	000003ff 	.word	0x000003ff
 80041bc:	00000ffe 	.word	0x00000ffe

080041c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ce:	e147      	b.n	8004460 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2101      	movs	r1, #1
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4091      	lsls	r1, r2
 80041da:	000a      	movs	r2, r1
 80041dc:	4013      	ands	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d100      	bne.n	80041e8 <HAL_GPIO_Init+0x28>
 80041e6:	e138      	b.n	800445a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2203      	movs	r2, #3
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d005      	beq.n	8004200 <HAL_GPIO_Init+0x40>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d130      	bne.n	8004262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	2203      	movs	r2, #3
 800420c:	409a      	lsls	r2, r3
 800420e:	0013      	movs	r3, r2
 8004210:	43da      	mvns	r2, r3
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	409a      	lsls	r2, r3
 8004222:	0013      	movs	r3, r2
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004236:	2201      	movs	r2, #1
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	43da      	mvns	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	2201      	movs	r2, #1
 800424e:	401a      	ands	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	409a      	lsls	r2, r3
 8004254:	0013      	movs	r3, r2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2203      	movs	r2, #3
 8004268:	4013      	ands	r3, r2
 800426a:	2b03      	cmp	r3, #3
 800426c:	d017      	beq.n	800429e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	2203      	movs	r2, #3
 800427a:	409a      	lsls	r2, r3
 800427c:	0013      	movs	r3, r2
 800427e:	43da      	mvns	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	0013      	movs	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2203      	movs	r2, #3
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d123      	bne.n	80042f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	08da      	lsrs	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3208      	adds	r2, #8
 80042b2:	0092      	lsls	r2, r2, #2
 80042b4:	58d3      	ldr	r3, [r2, r3]
 80042b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2207      	movs	r2, #7
 80042bc:	4013      	ands	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	220f      	movs	r2, #15
 80042c2:	409a      	lsls	r2, r3
 80042c4:	0013      	movs	r3, r2
 80042c6:	43da      	mvns	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2107      	movs	r1, #7
 80042d6:	400b      	ands	r3, r1
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	409a      	lsls	r2, r3
 80042dc:	0013      	movs	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	08da      	lsrs	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3208      	adds	r2, #8
 80042ec:	0092      	lsls	r2, r2, #2
 80042ee:	6939      	ldr	r1, [r7, #16]
 80042f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	2203      	movs	r2, #3
 80042fe:	409a      	lsls	r2, r3
 8004300:	0013      	movs	r3, r2
 8004302:	43da      	mvns	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	401a      	ands	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	409a      	lsls	r2, r3
 8004318:	0013      	movs	r3, r2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	23c0      	movs	r3, #192	; 0xc0
 800432c:	029b      	lsls	r3, r3, #10
 800432e:	4013      	ands	r3, r2
 8004330:	d100      	bne.n	8004334 <HAL_GPIO_Init+0x174>
 8004332:	e092      	b.n	800445a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004334:	4a50      	ldr	r2, [pc, #320]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3318      	adds	r3, #24
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	589b      	ldr	r3, [r3, r2]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2203      	movs	r2, #3
 8004346:	4013      	ands	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	220f      	movs	r2, #15
 800434c:	409a      	lsls	r2, r3
 800434e:	0013      	movs	r3, r2
 8004350:	43da      	mvns	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4013      	ands	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	23a0      	movs	r3, #160	; 0xa0
 800435c:	05db      	lsls	r3, r3, #23
 800435e:	429a      	cmp	r2, r3
 8004360:	d013      	beq.n	800438a <HAL_GPIO_Init+0x1ca>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a45      	ldr	r2, [pc, #276]	; (800447c <HAL_GPIO_Init+0x2bc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00d      	beq.n	8004386 <HAL_GPIO_Init+0x1c6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a44      	ldr	r2, [pc, #272]	; (8004480 <HAL_GPIO_Init+0x2c0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d007      	beq.n	8004382 <HAL_GPIO_Init+0x1c2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a43      	ldr	r2, [pc, #268]	; (8004484 <HAL_GPIO_Init+0x2c4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d101      	bne.n	800437e <HAL_GPIO_Init+0x1be>
 800437a:	2303      	movs	r3, #3
 800437c:	e006      	b.n	800438c <HAL_GPIO_Init+0x1cc>
 800437e:	2305      	movs	r3, #5
 8004380:	e004      	b.n	800438c <HAL_GPIO_Init+0x1cc>
 8004382:	2302      	movs	r3, #2
 8004384:	e002      	b.n	800438c <HAL_GPIO_Init+0x1cc>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_GPIO_Init+0x1cc>
 800438a:	2300      	movs	r3, #0
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	2103      	movs	r1, #3
 8004390:	400a      	ands	r2, r1
 8004392:	00d2      	lsls	r2, r2, #3
 8004394:	4093      	lsls	r3, r2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800439c:	4936      	ldr	r1, [pc, #216]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	3318      	adds	r3, #24
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043aa:	4a33      	ldr	r2, [pc, #204]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	58d3      	ldr	r3, [r2, r3]
 80043b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	025b      	lsls	r3, r3, #9
 80043c4:	4013      	ands	r3, r2
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043d0:	4929      	ldr	r1, [pc, #164]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80043d8:	4a27      	ldr	r2, [pc, #156]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 80043da:	2384      	movs	r3, #132	; 0x84
 80043dc:	58d3      	ldr	r3, [r2, r3]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	43da      	mvns	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	4013      	ands	r3, r2
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043fe:	491e      	ldr	r1, [pc, #120]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 8004400:	2284      	movs	r2, #132	; 0x84
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	43da      	mvns	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	035b      	lsls	r3, r3, #13
 800441e:	4013      	ands	r3, r2
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	43da      	mvns	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	039b      	lsls	r3, r3, #14
 8004448:	4013      	ands	r3, r2
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	3301      	adds	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	40da      	lsrs	r2, r3
 8004468:	1e13      	subs	r3, r2, #0
 800446a:	d000      	beq.n	800446e <HAL_GPIO_Init+0x2ae>
 800446c:	e6b0      	b.n	80041d0 <HAL_GPIO_Init+0x10>
  }
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b006      	add	sp, #24
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021800 	.word	0x40021800
 800447c:	50000400 	.word	0x50000400
 8004480:	50000800 	.word	0x50000800
 8004484:	50000c00 	.word	0x50000c00

08004488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	0008      	movs	r0, r1
 8004492:	0011      	movs	r1, r2
 8004494:	1cbb      	adds	r3, r7, #2
 8004496:	1c02      	adds	r2, r0, #0
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	1c7b      	adds	r3, r7, #1
 800449c:	1c0a      	adds	r2, r1, #0
 800449e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044a0:	1c7b      	adds	r3, r7, #1
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044a8:	1cbb      	adds	r3, r7, #2
 80044aa:	881a      	ldrh	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044b0:	e003      	b.n	80044ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044b2:	1cbb      	adds	r3, r7, #2
 80044b4:	881a      	ldrh	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	46bd      	mov	sp, r7
 80044be:	b002      	add	sp, #8
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e082      	b.n	80045dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2241      	movs	r2, #65	; 0x41
 80044da:	5c9b      	ldrb	r3, [r3, r2]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2240      	movs	r2, #64	; 0x40
 80044e6:	2100      	movs	r1, #0
 80044e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fe fb93 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2241      	movs	r2, #65	; 0x41
 80044f6:	2124      	movs	r1, #36	; 0x24
 80044f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	438a      	bics	r2, r1
 8004508:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4934      	ldr	r1, [pc, #208]	; (80045e4 <HAL_I2C_Init+0x120>)
 8004514:	400a      	ands	r2, r1
 8004516:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4931      	ldr	r1, [pc, #196]	; (80045e8 <HAL_I2C_Init+0x124>)
 8004524:	400a      	ands	r2, r1
 8004526:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d108      	bne.n	8004542 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2180      	movs	r1, #128	; 0x80
 800453a:	0209      	lsls	r1, r1, #8
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	e007      	b.n	8004552 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2184      	movs	r1, #132	; 0x84
 800454c:	0209      	lsls	r1, r1, #8
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d104      	bne.n	8004564 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	491f      	ldr	r1, [pc, #124]	; (80045ec <HAL_I2C_Init+0x128>)
 8004570:	430a      	orrs	r2, r1
 8004572:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	491a      	ldr	r1, [pc, #104]	; (80045e8 <HAL_I2C_Init+0x124>)
 8004580:	400a      	ands	r2, r1
 8004582:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	431a      	orrs	r2, r3
 800458e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69d9      	ldr	r1, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2241      	movs	r2, #65	; 0x41
 80045c8:	2120      	movs	r1, #32
 80045ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2242      	movs	r2, #66	; 0x42
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	f0ffffff 	.word	0xf0ffffff
 80045e8:	ffff7fff 	.word	0xffff7fff
 80045ec:	02008000 	.word	0x02008000

080045f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	0008      	movs	r0, r1
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	0019      	movs	r1, r3
 80045fe:	230a      	movs	r3, #10
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	1c02      	adds	r2, r0, #0
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	2308      	movs	r3, #8
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	1c0a      	adds	r2, r1, #0
 800460c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2241      	movs	r2, #65	; 0x41
 8004612:	5c9b      	ldrb	r3, [r3, r2]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b20      	cmp	r3, #32
 8004618:	d000      	beq.n	800461c <HAL_I2C_Master_Transmit+0x2c>
 800461a:	e0e7      	b.n	80047ec <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	; 0x40
 8004620:	5c9b      	ldrb	r3, [r3, r2]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_I2C_Master_Transmit+0x3a>
 8004626:	2302      	movs	r3, #2
 8004628:	e0e1      	b.n	80047ee <HAL_I2C_Master_Transmit+0x1fe>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2240      	movs	r2, #64	; 0x40
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004632:	f7fe fdc5 	bl	80031c0 <HAL_GetTick>
 8004636:	0003      	movs	r3, r0
 8004638:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	0219      	lsls	r1, r3, #8
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2319      	movs	r3, #25
 8004646:	2201      	movs	r2, #1
 8004648:	f000 fa04 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0cc      	b.n	80047ee <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2241      	movs	r2, #65	; 0x41
 8004658:	2121      	movs	r1, #33	; 0x21
 800465a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2242      	movs	r2, #66	; 0x42
 8004660:	2110      	movs	r1, #16
 8004662:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2208      	movs	r2, #8
 8004674:	18ba      	adds	r2, r7, r2
 8004676:	8812      	ldrh	r2, [r2, #0]
 8004678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2bff      	cmp	r3, #255	; 0xff
 8004688:	d911      	bls.n	80046ae <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	22ff      	movs	r2, #255	; 0xff
 800468e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	b2da      	uxtb	r2, r3
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	045c      	lsls	r4, r3, #17
 800469a:	230a      	movs	r3, #10
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	8819      	ldrh	r1, [r3, #0]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	4b55      	ldr	r3, [pc, #340]	; (80047f8 <HAL_I2C_Master_Transmit+0x208>)
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	0023      	movs	r3, r4
 80046a8:	f000 fb74 	bl	8004d94 <I2C_TransferConfig>
 80046ac:	e075      	b.n	800479a <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	049c      	lsls	r4, r3, #18
 80046c2:	230a      	movs	r3, #10
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	8819      	ldrh	r1, [r3, #0]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	4b4b      	ldr	r3, [pc, #300]	; (80047f8 <HAL_I2C_Master_Transmit+0x208>)
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	0023      	movs	r3, r4
 80046d0:	f000 fb60 	bl	8004d94 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046d4:	e061      	b.n	800479a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	0018      	movs	r0, r3
 80046de:	f000 f9f8 	bl	8004ad2 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e2:	1e03      	subs	r3, r0, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e081      	b.n	80047ee <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d03a      	beq.n	800479a <HAL_I2C_Master_Transmit+0x1aa>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d136      	bne.n	800479a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800472c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	0013      	movs	r3, r2
 8004736:	2200      	movs	r2, #0
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	f000 f98b 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 800473e:	1e03      	subs	r3, r0, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e053      	b.n	80047ee <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	2bff      	cmp	r3, #255	; 0xff
 800474e:	d911      	bls.n	8004774 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	22ff      	movs	r2, #255	; 0xff
 8004754:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	b2da      	uxtb	r2, r3
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	045c      	lsls	r4, r3, #17
 8004760:	230a      	movs	r3, #10
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	8819      	ldrh	r1, [r3, #0]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	2300      	movs	r3, #0
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	0023      	movs	r3, r4
 800476e:	f000 fb11 	bl	8004d94 <I2C_TransferConfig>
 8004772:	e012      	b.n	800479a <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	b2da      	uxtb	r2, r3
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	049c      	lsls	r4, r3, #18
 8004788:	230a      	movs	r3, #10
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	8819      	ldrh	r1, [r3, #0]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	2300      	movs	r3, #0
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	0023      	movs	r3, r4
 8004796:	f000 fafd 	bl	8004d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d198      	bne.n	80046d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 f9d0 	bl	8004b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e01a      	b.n	80047ee <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2220      	movs	r2, #32
 80047be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	490c      	ldr	r1, [pc, #48]	; (80047fc <HAL_I2C_Master_Transmit+0x20c>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2241      	movs	r2, #65	; 0x41
 80047d4:	2120      	movs	r1, #32
 80047d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2242      	movs	r2, #66	; 0x42
 80047dc:	2100      	movs	r1, #0
 80047de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	2100      	movs	r1, #0
 80047e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b007      	add	sp, #28
 80047f4:	bd90      	pop	{r4, r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	80002000 	.word	0x80002000
 80047fc:	fe00e800 	.word	0xfe00e800

08004800 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b089      	sub	sp, #36	; 0x24
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	0008      	movs	r0, r1
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	0019      	movs	r1, r3
 800480e:	230a      	movs	r3, #10
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	1c02      	adds	r2, r0, #0
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	2308      	movs	r3, #8
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	1c0a      	adds	r2, r1, #0
 800481c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2241      	movs	r2, #65	; 0x41
 8004822:	5c9b      	ldrb	r3, [r3, r2]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b20      	cmp	r3, #32
 8004828:	d000      	beq.n	800482c <HAL_I2C_Master_Receive+0x2c>
 800482a:	e0e8      	b.n	80049fe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2240      	movs	r2, #64	; 0x40
 8004830:	5c9b      	ldrb	r3, [r3, r2]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_I2C_Master_Receive+0x3a>
 8004836:	2302      	movs	r3, #2
 8004838:	e0e2      	b.n	8004a00 <HAL_I2C_Master_Receive+0x200>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2240      	movs	r2, #64	; 0x40
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004842:	f7fe fcbd 	bl	80031c0 <HAL_GetTick>
 8004846:	0003      	movs	r3, r0
 8004848:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	0219      	lsls	r1, r3, #8
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2319      	movs	r3, #25
 8004856:	2201      	movs	r2, #1
 8004858:	f000 f8fc 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d001      	beq.n	8004864 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0cd      	b.n	8004a00 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2241      	movs	r2, #65	; 0x41
 8004868:	2122      	movs	r1, #34	; 0x22
 800486a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2242      	movs	r2, #66	; 0x42
 8004870:	2110      	movs	r1, #16
 8004872:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2208      	movs	r2, #8
 8004884:	18ba      	adds	r2, r7, r2
 8004886:	8812      	ldrh	r2, [r2, #0]
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2bff      	cmp	r3, #255	; 0xff
 8004898:	d911      	bls.n	80048be <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	22ff      	movs	r2, #255	; 0xff
 800489e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	045c      	lsls	r4, r3, #17
 80048aa:	230a      	movs	r3, #10
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	8819      	ldrh	r1, [r3, #0]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	4b55      	ldr	r3, [pc, #340]	; (8004a08 <HAL_I2C_Master_Receive+0x208>)
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	0023      	movs	r3, r4
 80048b8:	f000 fa6c 	bl	8004d94 <I2C_TransferConfig>
 80048bc:	e076      	b.n	80049ac <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	049c      	lsls	r4, r3, #18
 80048d2:	230a      	movs	r3, #10
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	8819      	ldrh	r1, [r3, #0]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <HAL_I2C_Master_Receive+0x208>)
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	0023      	movs	r3, r4
 80048e0:	f000 fa58 	bl	8004d94 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80048e4:	e062      	b.n	80049ac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 f96b 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048f2:	1e03      	subs	r3, r0, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e082      	b.n	8004a00 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d03a      	beq.n	80049ac <HAL_I2C_Master_Receive+0x1ac>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d136      	bne.n	80049ac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800493e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	0013      	movs	r3, r2
 8004948:	2200      	movs	r2, #0
 800494a:	2180      	movs	r1, #128	; 0x80
 800494c:	f000 f882 	bl	8004a54 <I2C_WaitOnFlagUntilTimeout>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e053      	b.n	8004a00 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2bff      	cmp	r3, #255	; 0xff
 8004960:	d911      	bls.n	8004986 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	b2da      	uxtb	r2, r3
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	045c      	lsls	r4, r3, #17
 8004972:	230a      	movs	r3, #10
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	8819      	ldrh	r1, [r3, #0]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	2300      	movs	r3, #0
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	0023      	movs	r3, r4
 8004980:	f000 fa08 	bl	8004d94 <I2C_TransferConfig>
 8004984:	e012      	b.n	80049ac <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	b2da      	uxtb	r2, r3
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	049c      	lsls	r4, r3, #18
 800499a:	230a      	movs	r3, #10
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	8819      	ldrh	r1, [r3, #0]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	0023      	movs	r3, r4
 80049a8:	f000 f9f4 	bl	8004d94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d197      	bne.n	80048e6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 f8c7 	bl	8004b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049c2:	1e03      	subs	r3, r0, #0
 80049c4:	d001      	beq.n	80049ca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e01a      	b.n	8004a00 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2220      	movs	r2, #32
 80049d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	490b      	ldr	r1, [pc, #44]	; (8004a0c <HAL_I2C_Master_Receive+0x20c>)
 80049de:	400a      	ands	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2241      	movs	r2, #65	; 0x41
 80049e6:	2120      	movs	r1, #32
 80049e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2242      	movs	r2, #66	; 0x42
 80049ee:	2100      	movs	r1, #0
 80049f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2240      	movs	r2, #64	; 0x40
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b007      	add	sp, #28
 8004a06:	bd90      	pop	{r4, r7, pc}
 8004a08:	80002400 	.word	0x80002400
 8004a0c:	fe00e800 	.word	0xfe00e800

08004a10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d007      	beq.n	8004a4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2101      	movs	r1, #1
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	619a      	str	r2, [r3, #24]
  }
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a64:	e021      	b.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	d01e      	beq.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7fe fba8 	bl	80031c0 <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d113      	bne.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	2220      	movs	r2, #32
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2241      	movs	r2, #65	; 0x41
 8004a92:	2120      	movs	r1, #32
 8004a94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2242      	movs	r2, #66	; 0x42
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2240      	movs	r2, #64	; 0x40
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e00f      	b.n	8004aca <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	425a      	negs	r2, r3
 8004aba:	4153      	adcs	r3, r2
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	001a      	movs	r2, r3
 8004ac0:	1dfb      	adds	r3, r7, #7
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d0ce      	beq.n	8004a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b004      	add	sp, #16
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ade:	e02b      	b.n	8004b38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 f8da 	bl	8004ca0 <I2C_IsAcknowledgeFailed>
 8004aec:	1e03      	subs	r3, r0, #0
 8004aee:	d001      	beq.n	8004af4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e029      	b.n	8004b48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	3301      	adds	r3, #1
 8004af8:	d01e      	beq.n	8004b38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fe fb61 	bl	80031c0 <HAL_GetTick>
 8004afe:	0002      	movs	r2, r0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d113      	bne.n	8004b38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b14:	2220      	movs	r2, #32
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2241      	movs	r2, #65	; 0x41
 8004b20:	2120      	movs	r1, #32
 8004b22:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2242      	movs	r2, #66	; 0x42
 8004b28:	2100      	movs	r1, #0
 8004b2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	2100      	movs	r1, #0
 8004b32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e007      	b.n	8004b48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d1cc      	bne.n	8004ae0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b5c:	e028      	b.n	8004bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f000 f89b 	bl	8004ca0 <I2C_IsAcknowledgeFailed>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e026      	b.n	8004bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fe fb25 	bl	80031c0 <HAL_GetTick>
 8004b76:	0002      	movs	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d113      	bne.n	8004bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2241      	movs	r2, #65	; 0x41
 8004b98:	2120      	movs	r1, #32
 8004b9a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2242      	movs	r2, #66	; 0x42
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2240      	movs	r2, #64	; 0x40
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d1cf      	bne.n	8004b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b004      	add	sp, #16
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bd4:	e055      	b.n	8004c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f85f 	bl	8004ca0 <I2C_IsAcknowledgeFailed>
 8004be2:	1e03      	subs	r3, r0, #0
 8004be4:	d001      	beq.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e053      	b.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d129      	bne.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d105      	bne.n	8004c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e03f      	b.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2220      	movs	r2, #32
 8004c18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	491d      	ldr	r1, [pc, #116]	; (8004c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004c26:	400a      	ands	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2241      	movs	r2, #65	; 0x41
 8004c34:	2120      	movs	r1, #32
 8004c36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2242      	movs	r2, #66	; 0x42
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e022      	b.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4c:	f7fe fab8 	bl	80031c0 <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	2220      	movs	r2, #32
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2241      	movs	r2, #65	; 0x41
 8004c72:	2120      	movs	r1, #32
 8004c74:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2240      	movs	r2, #64	; 0x40
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e007      	b.n	8004c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d1a2      	bne.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b004      	add	sp, #16
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	fe00e800 	.word	0xfe00e800

08004ca0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d164      	bne.n	8004d84 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	049b      	lsls	r3, r3, #18
 8004cc4:	401a      	ands	r2, r3
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	049b      	lsls	r3, r3, #18
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d02b      	beq.n	8004d26 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	01c9      	lsls	r1, r1, #7
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce0:	e021      	b.n	8004d26 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	d01e      	beq.n	8004d26 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce8:	f7fe fa6a 	bl	80031c0 <HAL_GetTick>
 8004cec:	0002      	movs	r2, r0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d302      	bcc.n	8004cfe <I2C_IsAcknowledgeFailed+0x5e>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d113      	bne.n	8004d26 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	2220      	movs	r2, #32
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2241      	movs	r2, #65	; 0x41
 8004d0e:	2120      	movs	r1, #32
 8004d10:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2242      	movs	r2, #66	; 0x42
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2240      	movs	r2, #64	; 0x40
 8004d1e:	2100      	movs	r1, #0
 8004d20:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e02f      	b.n	8004d86 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d1d6      	bne.n	8004ce2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2220      	movs	r2, #32
 8004d42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7ff fe62 	bl	8004a10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	490e      	ldr	r1, [pc, #56]	; (8004d90 <I2C_IsAcknowledgeFailed+0xf0>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d60:	2204      	movs	r2, #4
 8004d62:	431a      	orrs	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2241      	movs	r2, #65	; 0x41
 8004d6c:	2120      	movs	r1, #32
 8004d6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2242      	movs	r2, #66	; 0x42
 8004d74:	2100      	movs	r1, #0
 8004d76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2240      	movs	r2, #64	; 0x40
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	fe00e800 	.word	0xfe00e800

08004d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	0008      	movs	r0, r1
 8004d9e:	0011      	movs	r1, r2
 8004da0:	607b      	str	r3, [r7, #4]
 8004da2:	240a      	movs	r4, #10
 8004da4:	193b      	adds	r3, r7, r4
 8004da6:	1c02      	adds	r2, r0, #0
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	2009      	movs	r0, #9
 8004dac:	183b      	adds	r3, r7, r0
 8004dae:	1c0a      	adds	r2, r1, #0
 8004db0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	0d51      	lsrs	r1, r2, #21
 8004dbc:	2280      	movs	r2, #128	; 0x80
 8004dbe:	00d2      	lsls	r2, r2, #3
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	490e      	ldr	r1, [pc, #56]	; (8004dfc <I2C_TransferConfig+0x68>)
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	43d2      	mvns	r2, r2
 8004dc8:	401a      	ands	r2, r3
 8004dca:	0011      	movs	r1, r2
 8004dcc:	193b      	adds	r3, r7, r4
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	059b      	lsls	r3, r3, #22
 8004dd2:	0d9a      	lsrs	r2, r3, #22
 8004dd4:	183b      	adds	r3, r7, r0
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	0418      	lsls	r0, r3, #16
 8004dda:	23ff      	movs	r3, #255	; 0xff
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	4003      	ands	r3, r0
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b005      	add	sp, #20
 8004df8:	bd90      	pop	{r4, r7, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	03ff63ff 	.word	0x03ff63ff

08004e00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2241      	movs	r2, #65	; 0x41
 8004e0e:	5c9b      	ldrb	r3, [r3, r2]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d138      	bne.n	8004e88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2240      	movs	r2, #64	; 0x40
 8004e1a:	5c9b      	ldrb	r3, [r3, r2]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e032      	b.n	8004e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2240      	movs	r2, #64	; 0x40
 8004e28:	2101      	movs	r1, #1
 8004e2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2241      	movs	r2, #65	; 0x41
 8004e30:	2124      	movs	r1, #36	; 0x24
 8004e32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2101      	movs	r1, #1
 8004e40:	438a      	bics	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4911      	ldr	r1, [pc, #68]	; (8004e94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2101      	movs	r1, #1
 8004e70:	430a      	orrs	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2241      	movs	r2, #65	; 0x41
 8004e78:	2120      	movs	r1, #32
 8004e7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2240      	movs	r2, #64	; 0x40
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	ffffefff 	.word	0xffffefff

08004e98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2241      	movs	r2, #65	; 0x41
 8004ea6:	5c9b      	ldrb	r3, [r3, r2]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d139      	bne.n	8004f22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2240      	movs	r2, #64	; 0x40
 8004eb2:	5c9b      	ldrb	r3, [r3, r2]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e033      	b.n	8004f24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2240      	movs	r2, #64	; 0x40
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2241      	movs	r2, #65	; 0x41
 8004ec8:	2124      	movs	r1, #36	; 0x24
 8004eca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	438a      	bics	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a11      	ldr	r2, [pc, #68]	; (8004f2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2241      	movs	r2, #65	; 0x41
 8004f12:	2120      	movs	r1, #32
 8004f14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2240      	movs	r2, #64	; 0x40
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e000      	b.n	8004f24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
  }
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b004      	add	sp, #16
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	fffff0ff 	.word	0xfffff0ff

08004f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	0019      	movs	r1, r3
 8004f42:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d11f      	bne.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	0013      	movs	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	189b      	adds	r3, r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4912      	ldr	r1, [pc, #72]	; (8004fac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004f62:	0018      	movs	r0, r3
 8004f64:	f7fb f8ec 	bl	8000140 <__udivsi3>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f6e:	e008      	b.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e001      	b.n	8004f82 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e009      	b.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f84:	695a      	ldr	r2, [r3, #20]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d0ed      	beq.n	8004f70 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b004      	add	sp, #16
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	fffff9ff 	.word	0xfffff9ff
 8004fa8:	20000000 	.word	0x20000000
 8004fac:	000f4240 	.word	0x000f4240

08004fb0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	23e0      	movs	r3, #224	; 0xe0
 8004fba:	01db      	lsls	r3, r3, #7
 8004fbc:	4013      	ands	r3, r2
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000

08004fc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e304      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x1e>
 8004fe4:	e07c      	b.n	80050e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe6:	4bc3      	ldr	r3, [pc, #780]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2238      	movs	r2, #56	; 0x38
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff0:	4bc0      	ldr	r3, [pc, #768]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d102      	bne.n	8005006 <HAL_RCC_OscConfig+0x3e>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d002      	beq.n	800500c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10b      	bne.n	8005024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500c:	4bb9      	ldr	r3, [pc, #740]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	4013      	ands	r3, r2
 8005016:	d062      	beq.n	80050de <HAL_RCC_OscConfig+0x116>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d15e      	bne.n	80050de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e2df      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	025b      	lsls	r3, r3, #9
 800502c:	429a      	cmp	r2, r3
 800502e:	d107      	bne.n	8005040 <HAL_RCC_OscConfig+0x78>
 8005030:	4bb0      	ldr	r3, [pc, #704]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4baf      	ldr	r3, [pc, #700]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	0249      	lsls	r1, r1, #9
 800503a:	430a      	orrs	r2, r1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e020      	b.n	8005082 <HAL_RCC_OscConfig+0xba>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	23a0      	movs	r3, #160	; 0xa0
 8005046:	02db      	lsls	r3, r3, #11
 8005048:	429a      	cmp	r2, r3
 800504a:	d10e      	bne.n	800506a <HAL_RCC_OscConfig+0xa2>
 800504c:	4ba9      	ldr	r3, [pc, #676]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4ba8      	ldr	r3, [pc, #672]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	02c9      	lsls	r1, r1, #11
 8005056:	430a      	orrs	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	4ba6      	ldr	r3, [pc, #664]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4ba5      	ldr	r3, [pc, #660]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005060:	2180      	movs	r1, #128	; 0x80
 8005062:	0249      	lsls	r1, r1, #9
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e00b      	b.n	8005082 <HAL_RCC_OscConfig+0xba>
 800506a:	4ba2      	ldr	r3, [pc, #648]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4ba1      	ldr	r3, [pc, #644]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005070:	49a1      	ldr	r1, [pc, #644]	; (80052f8 <HAL_RCC_OscConfig+0x330>)
 8005072:	400a      	ands	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	4b9f      	ldr	r3, [pc, #636]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b9e      	ldr	r3, [pc, #632]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800507c:	499f      	ldr	r1, [pc, #636]	; (80052fc <HAL_RCC_OscConfig+0x334>)
 800507e:	400a      	ands	r2, r1
 8005080:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d014      	beq.n	80050b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fe f899 	bl	80031c0 <HAL_GetTick>
 800508e:	0003      	movs	r3, r0
 8005090:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005094:	f7fe f894 	bl	80031c0 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e29e      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050a6:	4b93      	ldr	r3, [pc, #588]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	4013      	ands	r3, r2
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0xcc>
 80050b2:	e015      	b.n	80050e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fe f884 	bl	80031c0 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050be:	f7fe f87f 	bl	80031c0 <HAL_GetTick>
 80050c2:	0002      	movs	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b64      	cmp	r3, #100	; 0x64
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e289      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050d0:	4b88      	ldr	r3, [pc, #544]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	029b      	lsls	r3, r3, #10
 80050d8:	4013      	ands	r3, r2
 80050da:	d1f0      	bne.n	80050be <HAL_RCC_OscConfig+0xf6>
 80050dc:	e000      	b.n	80050e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2202      	movs	r2, #2
 80050e6:	4013      	ands	r3, r2
 80050e8:	d100      	bne.n	80050ec <HAL_RCC_OscConfig+0x124>
 80050ea:	e099      	b.n	8005220 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ec:	4b81      	ldr	r3, [pc, #516]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2238      	movs	r2, #56	; 0x38
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f6:	4b7f      	ldr	r3, [pc, #508]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2203      	movs	r2, #3
 80050fc:	4013      	ands	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b10      	cmp	r3, #16
 8005104:	d102      	bne.n	800510c <HAL_RCC_OscConfig+0x144>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d002      	beq.n	8005112 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d135      	bne.n	800517e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005112:	4b78      	ldr	r3, [pc, #480]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	2380      	movs	r3, #128	; 0x80
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4013      	ands	r3, r2
 800511c:	d005      	beq.n	800512a <HAL_RCC_OscConfig+0x162>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e25c      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	4b72      	ldr	r3, [pc, #456]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a74      	ldr	r2, [pc, #464]	; (8005300 <HAL_RCC_OscConfig+0x338>)
 8005130:	4013      	ands	r3, r2
 8005132:	0019      	movs	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	021a      	lsls	r2, r3, #8
 800513a:	4b6e      	ldr	r3, [pc, #440]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d112      	bne.n	800516c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005146:	4b6b      	ldr	r3, [pc, #428]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a6e      	ldr	r2, [pc, #440]	; (8005304 <HAL_RCC_OscConfig+0x33c>)
 800514c:	4013      	ands	r3, r2
 800514e:	0019      	movs	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	4b67      	ldr	r3, [pc, #412]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005156:	430a      	orrs	r2, r1
 8005158:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800515a:	4b66      	ldr	r3, [pc, #408]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	0adb      	lsrs	r3, r3, #11
 8005160:	2207      	movs	r2, #7
 8005162:	4013      	ands	r3, r2
 8005164:	4a68      	ldr	r2, [pc, #416]	; (8005308 <HAL_RCC_OscConfig+0x340>)
 8005166:	40da      	lsrs	r2, r3
 8005168:	4b68      	ldr	r3, [pc, #416]	; (800530c <HAL_RCC_OscConfig+0x344>)
 800516a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800516c:	4b68      	ldr	r3, [pc, #416]	; (8005310 <HAL_RCC_OscConfig+0x348>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	0018      	movs	r0, r3
 8005172:	f7fd ffc9 	bl	8003108 <HAL_InitTick>
 8005176:	1e03      	subs	r3, r0, #0
 8005178:	d051      	beq.n	800521e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e232      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d030      	beq.n	80051e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005186:	4b5b      	ldr	r3, [pc, #364]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a5e      	ldr	r2, [pc, #376]	; (8005304 <HAL_RCC_OscConfig+0x33c>)
 800518c:	4013      	ands	r3, r2
 800518e:	0019      	movs	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	4b57      	ldr	r3, [pc, #348]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005196:	430a      	orrs	r2, r1
 8005198:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800519a:	4b56      	ldr	r3, [pc, #344]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b55      	ldr	r3, [pc, #340]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80051a0:	2180      	movs	r1, #128	; 0x80
 80051a2:	0049      	lsls	r1, r1, #1
 80051a4:	430a      	orrs	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fe f80a 	bl	80031c0 <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b2:	f7fe f805 	bl	80031c0 <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e20f      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c4:	4b4b      	ldr	r3, [pc, #300]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4013      	ands	r3, r2
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b48      	ldr	r3, [pc, #288]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a4a      	ldr	r2, [pc, #296]	; (8005300 <HAL_RCC_OscConfig+0x338>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	0019      	movs	r1, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	4b44      	ldr	r3, [pc, #272]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	e01b      	b.n	8005220 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80051e8:	4b42      	ldr	r3, [pc, #264]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80051ee:	4949      	ldr	r1, [pc, #292]	; (8005314 <HAL_RCC_OscConfig+0x34c>)
 80051f0:	400a      	ands	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fd ffe4 	bl	80031c0 <HAL_GetTick>
 80051f8:	0003      	movs	r3, r0
 80051fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fe:	f7fd ffdf 	bl	80031c0 <HAL_GetTick>
 8005202:	0002      	movs	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e1e9      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005210:	4b38      	ldr	r3, [pc, #224]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	2380      	movs	r3, #128	; 0x80
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4013      	ands	r3, r2
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x236>
 800521c:	e000      	b.n	8005220 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800521e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2208      	movs	r2, #8
 8005226:	4013      	ands	r3, r2
 8005228:	d047      	beq.n	80052ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800522a:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2238      	movs	r2, #56	; 0x38
 8005230:	4013      	ands	r3, r2
 8005232:	2b18      	cmp	r3, #24
 8005234:	d10a      	bne.n	800524c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005236:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	2202      	movs	r2, #2
 800523c:	4013      	ands	r3, r2
 800523e:	d03c      	beq.n	80052ba <HAL_RCC_OscConfig+0x2f2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d138      	bne.n	80052ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e1cb      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 8005256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005258:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800525a:	2101      	movs	r1, #1
 800525c:	430a      	orrs	r2, r1
 800525e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd ffae 	bl	80031c0 <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526a:	f7fd ffa9 	bl	80031c0 <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e1b3      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800527e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d0f1      	beq.n	800526a <HAL_RCC_OscConfig+0x2a2>
 8005286:	e018      	b.n	80052ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005288:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800528a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 800528e:	2101      	movs	r1, #1
 8005290:	438a      	bics	r2, r1
 8005292:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fd ff94 	bl	80031c0 <HAL_GetTick>
 8005298:	0003      	movs	r3, r0
 800529a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529e:	f7fd ff8f 	bl	80031c0 <HAL_GetTick>
 80052a2:	0002      	movs	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e199      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80052b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b4:	2202      	movs	r2, #2
 80052b6:	4013      	ands	r3, r2
 80052b8:	d1f1      	bne.n	800529e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2204      	movs	r2, #4
 80052c0:	4013      	ands	r3, r2
 80052c2:	d100      	bne.n	80052c6 <HAL_RCC_OscConfig+0x2fe>
 80052c4:	e0c6      	b.n	8005454 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c6:	231f      	movs	r3, #31
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2238      	movs	r2, #56	; 0x38
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d11e      	bne.n	8005318 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <HAL_RCC_OscConfig+0x32c>)
 80052dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052de:	2202      	movs	r2, #2
 80052e0:	4013      	ands	r3, r2
 80052e2:	d100      	bne.n	80052e6 <HAL_RCC_OscConfig+0x31e>
 80052e4:	e0b6      	b.n	8005454 <HAL_RCC_OscConfig+0x48c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d000      	beq.n	80052f0 <HAL_RCC_OscConfig+0x328>
 80052ee:	e0b1      	b.n	8005454 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e177      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
 80052f4:	40021000 	.word	0x40021000
 80052f8:	fffeffff 	.word	0xfffeffff
 80052fc:	fffbffff 	.word	0xfffbffff
 8005300:	ffff80ff 	.word	0xffff80ff
 8005304:	ffffc7ff 	.word	0xffffc7ff
 8005308:	00f42400 	.word	0x00f42400
 800530c:	20000000 	.word	0x20000000
 8005310:	20000004 	.word	0x20000004
 8005314:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005318:	4bb4      	ldr	r3, [pc, #720]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800531a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	055b      	lsls	r3, r3, #21
 8005320:	4013      	ands	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_RCC_OscConfig+0x360>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x362>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	4baf      	ldr	r3, [pc, #700]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005332:	4bae      	ldr	r3, [pc, #696]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005334:	2180      	movs	r1, #128	; 0x80
 8005336:	0549      	lsls	r1, r1, #21
 8005338:	430a      	orrs	r2, r1
 800533a:	63da      	str	r2, [r3, #60]	; 0x3c
 800533c:	4bab      	ldr	r3, [pc, #684]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800533e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	055b      	lsls	r3, r3, #21
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800534a:	231f      	movs	r3, #31
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005352:	4ba7      	ldr	r3, [pc, #668]	; (80055f0 <HAL_RCC_OscConfig+0x628>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4013      	ands	r3, r2
 800535c:	d11a      	bne.n	8005394 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800535e:	4ba4      	ldr	r3, [pc, #656]	; (80055f0 <HAL_RCC_OscConfig+0x628>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4ba3      	ldr	r3, [pc, #652]	; (80055f0 <HAL_RCC_OscConfig+0x628>)
 8005364:	2180      	movs	r1, #128	; 0x80
 8005366:	0049      	lsls	r1, r1, #1
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800536c:	f7fd ff28 	bl	80031c0 <HAL_GetTick>
 8005370:	0003      	movs	r3, r0
 8005372:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005376:	f7fd ff23 	bl	80031c0 <HAL_GetTick>
 800537a:	0002      	movs	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e12d      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005388:	4b99      	ldr	r3, [pc, #612]	; (80055f0 <HAL_RCC_OscConfig+0x628>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4013      	ands	r3, r2
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d106      	bne.n	80053aa <HAL_RCC_OscConfig+0x3e2>
 800539c:	4b93      	ldr	r3, [pc, #588]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800539e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053a0:	4b92      	ldr	r3, [pc, #584]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053a2:	2101      	movs	r1, #1
 80053a4:	430a      	orrs	r2, r1
 80053a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80053a8:	e01c      	b.n	80053e4 <HAL_RCC_OscConfig+0x41c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d10c      	bne.n	80053cc <HAL_RCC_OscConfig+0x404>
 80053b2:	4b8e      	ldr	r3, [pc, #568]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053b6:	4b8d      	ldr	r3, [pc, #564]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053b8:	2104      	movs	r1, #4
 80053ba:	430a      	orrs	r2, r1
 80053bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80053be:	4b8b      	ldr	r3, [pc, #556]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053c2:	4b8a      	ldr	r3, [pc, #552]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053c4:	2101      	movs	r1, #1
 80053c6:	430a      	orrs	r2, r1
 80053c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80053ca:	e00b      	b.n	80053e4 <HAL_RCC_OscConfig+0x41c>
 80053cc:	4b87      	ldr	r3, [pc, #540]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053d0:	4b86      	ldr	r3, [pc, #536]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053d2:	2101      	movs	r1, #1
 80053d4:	438a      	bics	r2, r1
 80053d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80053d8:	4b84      	ldr	r3, [pc, #528]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053dc:	4b83      	ldr	r3, [pc, #524]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80053de:	2104      	movs	r1, #4
 80053e0:	438a      	bics	r2, r1
 80053e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d014      	beq.n	8005416 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fd fee8 	bl	80031c0 <HAL_GetTick>
 80053f0:	0003      	movs	r3, r0
 80053f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f4:	e009      	b.n	800540a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f6:	f7fd fee3 	bl	80031c0 <HAL_GetTick>
 80053fa:	0002      	movs	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	4a7c      	ldr	r2, [pc, #496]	; (80055f4 <HAL_RCC_OscConfig+0x62c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e0ec      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540a:	4b78      	ldr	r3, [pc, #480]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800540c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540e:	2202      	movs	r2, #2
 8005410:	4013      	ands	r3, r2
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x42e>
 8005414:	e013      	b.n	800543e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fd fed3 	bl	80031c0 <HAL_GetTick>
 800541a:	0003      	movs	r3, r0
 800541c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800541e:	e009      	b.n	8005434 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005420:	f7fd fece 	bl	80031c0 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	4a72      	ldr	r2, [pc, #456]	; (80055f4 <HAL_RCC_OscConfig+0x62c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e0d7      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005434:	4b6d      	ldr	r3, [pc, #436]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	2202      	movs	r2, #2
 800543a:	4013      	ands	r3, r2
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800543e:	231f      	movs	r3, #31
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005448:	4b68      	ldr	r3, [pc, #416]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	4b67      	ldr	r3, [pc, #412]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800544e:	496a      	ldr	r1, [pc, #424]	; (80055f8 <HAL_RCC_OscConfig+0x630>)
 8005450:	400a      	ands	r2, r1
 8005452:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d100      	bne.n	800545e <HAL_RCC_OscConfig+0x496>
 800545c:	e0c1      	b.n	80055e2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800545e:	4b63      	ldr	r3, [pc, #396]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2238      	movs	r2, #56	; 0x38
 8005464:	4013      	ands	r3, r2
 8005466:	2b10      	cmp	r3, #16
 8005468:	d100      	bne.n	800546c <HAL_RCC_OscConfig+0x4a4>
 800546a:	e081      	b.n	8005570 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d156      	bne.n	8005522 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005474:	4b5d      	ldr	r3, [pc, #372]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b5c      	ldr	r3, [pc, #368]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800547a:	4960      	ldr	r1, [pc, #384]	; (80055fc <HAL_RCC_OscConfig+0x634>)
 800547c:	400a      	ands	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd fe9e 	bl	80031c0 <HAL_GetTick>
 8005484:	0003      	movs	r3, r0
 8005486:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548a:	f7fd fe99 	bl	80031c0 <HAL_GetTick>
 800548e:	0002      	movs	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e0a3      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	049b      	lsls	r3, r3, #18
 80054a4:	4013      	ands	r3, r2
 80054a6:	d1f0      	bne.n	800548a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a54      	ldr	r2, [pc, #336]	; (8005600 <HAL_RCC_OscConfig+0x638>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	431a      	orrs	r2, r3
 80054d6:	4b45      	ldr	r3, [pc, #276]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80054d8:	430a      	orrs	r2, r1
 80054da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054dc:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4b42      	ldr	r3, [pc, #264]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80054e2:	2180      	movs	r1, #128	; 0x80
 80054e4:	0449      	lsls	r1, r1, #17
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80054ea:	4b40      	ldr	r3, [pc, #256]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	0549      	lsls	r1, r1, #21
 80054f4:	430a      	orrs	r2, r1
 80054f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd fe62 	bl	80031c0 <HAL_GetTick>
 80054fc:	0003      	movs	r3, r0
 80054fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005502:	f7fd fe5d 	bl	80031c0 <HAL_GetTick>
 8005506:	0002      	movs	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e067      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005514:	4b35      	ldr	r3, [pc, #212]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	049b      	lsls	r3, r3, #18
 800551c:	4013      	ands	r3, r2
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x53a>
 8005520:	e05f      	b.n	80055e2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005522:	4b32      	ldr	r3, [pc, #200]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005528:	4934      	ldr	r1, [pc, #208]	; (80055fc <HAL_RCC_OscConfig+0x634>)
 800552a:	400a      	ands	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800552e:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4b2e      	ldr	r3, [pc, #184]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005534:	2103      	movs	r1, #3
 8005536:	438a      	bics	r2, r1
 8005538:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800553a:	4b2c      	ldr	r3, [pc, #176]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005540:	4930      	ldr	r1, [pc, #192]	; (8005604 <HAL_RCC_OscConfig+0x63c>)
 8005542:	400a      	ands	r2, r1
 8005544:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005546:	f7fd fe3b 	bl	80031c0 <HAL_GetTick>
 800554a:	0003      	movs	r3, r0
 800554c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005550:	f7fd fe36 	bl	80031c0 <HAL_GetTick>
 8005554:	0002      	movs	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e040      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	049b      	lsls	r3, r3, #18
 800556a:	4013      	ands	r3, r2
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x588>
 800556e:	e038      	b.n	80055e2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e033      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800557c:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <HAL_RCC_OscConfig+0x624>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2203      	movs	r2, #3
 8005586:	401a      	ands	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	429a      	cmp	r2, r3
 800558e:	d126      	bne.n	80055de <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2270      	movs	r2, #112	; 0x70
 8005594:	401a      	ands	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	429a      	cmp	r2, r3
 800559c:	d11f      	bne.n	80055de <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	23fe      	movs	r3, #254	; 0xfe
 80055a2:	01db      	lsls	r3, r3, #7
 80055a4:	401a      	ands	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d116      	bne.n	80055de <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	23f8      	movs	r3, #248	; 0xf8
 80055b4:	039b      	lsls	r3, r3, #14
 80055b6:	401a      	ands	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d10e      	bne.n	80055de <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	23e0      	movs	r3, #224	; 0xe0
 80055c4:	051b      	lsls	r3, r3, #20
 80055c6:	401a      	ands	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d106      	bne.n	80055de <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	0f5b      	lsrs	r3, r3, #29
 80055d4:	075a      	lsls	r2, r3, #29
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d001      	beq.n	80055e2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	0018      	movs	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b008      	add	sp, #32
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40007000 	.word	0x40007000
 80055f4:	00001388 	.word	0x00001388
 80055f8:	efffffff 	.word	0xefffffff
 80055fc:	feffffff 	.word	0xfeffffff
 8005600:	11c1808c 	.word	0x11c1808c
 8005604:	eefeffff 	.word	0xeefeffff

08005608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0e9      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800561c:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2207      	movs	r2, #7
 8005622:	4013      	ands	r3, r2
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d91e      	bls.n	8005668 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4b73      	ldr	r3, [pc, #460]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2207      	movs	r2, #7
 8005630:	4393      	bics	r3, r2
 8005632:	0019      	movs	r1, r3
 8005634:	4b70      	ldr	r3, [pc, #448]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800563c:	f7fd fdc0 	bl	80031c0 <HAL_GetTick>
 8005640:	0003      	movs	r3, r0
 8005642:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005644:	e009      	b.n	800565a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005646:	f7fd fdbb 	bl	80031c0 <HAL_GetTick>
 800564a:	0002      	movs	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	4a6a      	ldr	r2, [pc, #424]	; (80057fc <HAL_RCC_ClockConfig+0x1f4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e0ca      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800565a:	4b67      	ldr	r3, [pc, #412]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2207      	movs	r2, #7
 8005660:	4013      	ands	r3, r2
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d1ee      	bne.n	8005646 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2202      	movs	r2, #2
 800566e:	4013      	ands	r3, r2
 8005670:	d015      	beq.n	800569e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2204      	movs	r2, #4
 8005678:	4013      	ands	r3, r2
 800567a:	d006      	beq.n	800568a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800567c:	4b60      	ldr	r3, [pc, #384]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	4b5f      	ldr	r3, [pc, #380]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 8005682:	21e0      	movs	r1, #224	; 0xe0
 8005684:	01c9      	lsls	r1, r1, #7
 8005686:	430a      	orrs	r2, r1
 8005688:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800568a:	4b5d      	ldr	r3, [pc, #372]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4a5d      	ldr	r2, [pc, #372]	; (8005804 <HAL_RCC_ClockConfig+0x1fc>)
 8005690:	4013      	ands	r3, r2
 8005692:	0019      	movs	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	4b59      	ldr	r3, [pc, #356]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 800569a:	430a      	orrs	r2, r1
 800569c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	d057      	beq.n	8005758 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056b0:	4b53      	ldr	r3, [pc, #332]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	029b      	lsls	r3, r3, #10
 80056b8:	4013      	ands	r3, r2
 80056ba:	d12b      	bne.n	8005714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e097      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c8:	4b4d      	ldr	r3, [pc, #308]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	049b      	lsls	r3, r3, #18
 80056d0:	4013      	ands	r3, r2
 80056d2:	d11f      	bne.n	8005714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e08b      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d107      	bne.n	80056f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e0:	4b47      	ldr	r3, [pc, #284]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4013      	ands	r3, r2
 80056ea:	d113      	bne.n	8005714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e07f      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d106      	bne.n	8005706 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056f8:	4b41      	ldr	r3, [pc, #260]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 80056fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fc:	2202      	movs	r2, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	d108      	bne.n	8005714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e074      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005706:	4b3e      	ldr	r3, [pc, #248]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 8005708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570a:	2202      	movs	r2, #2
 800570c:	4013      	ands	r3, r2
 800570e:	d101      	bne.n	8005714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e06d      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005714:	4b3a      	ldr	r3, [pc, #232]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2207      	movs	r2, #7
 800571a:	4393      	bics	r3, r2
 800571c:	0019      	movs	r1, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	4b37      	ldr	r3, [pc, #220]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 8005724:	430a      	orrs	r2, r1
 8005726:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fd fd4a 	bl	80031c0 <HAL_GetTick>
 800572c:	0003      	movs	r3, r0
 800572e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005730:	e009      	b.n	8005746 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005732:	f7fd fd45 	bl	80031c0 <HAL_GetTick>
 8005736:	0002      	movs	r2, r0
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <HAL_RCC_ClockConfig+0x1f4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e054      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2238      	movs	r2, #56	; 0x38
 800574c:	401a      	ands	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	429a      	cmp	r2, r3
 8005756:	d1ec      	bne.n	8005732 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005758:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2207      	movs	r2, #7
 800575e:	4013      	ands	r3, r2
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d21e      	bcs.n	80057a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2207      	movs	r2, #7
 800576c:	4393      	bics	r3, r2
 800576e:	0019      	movs	r1, r3
 8005770:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005778:	f7fd fd22 	bl	80031c0 <HAL_GetTick>
 800577c:	0003      	movs	r3, r0
 800577e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005780:	e009      	b.n	8005796 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005782:	f7fd fd1d 	bl	80031c0 <HAL_GetTick>
 8005786:	0002      	movs	r2, r0
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_RCC_ClockConfig+0x1f4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e02c      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2207      	movs	r2, #7
 800579c:	4013      	ands	r3, r2
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d1ee      	bne.n	8005782 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2204      	movs	r2, #4
 80057aa:	4013      	ands	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_RCC_ClockConfig+0x200>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	0019      	movs	r1, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80057c2:	f000 f829 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 80057c6:	0001      	movs	r1, r0
 80057c8:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <HAL_RCC_ClockConfig+0x1f8>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	0a1b      	lsrs	r3, r3, #8
 80057ce:	220f      	movs	r2, #15
 80057d0:	401a      	ands	r2, r3
 80057d2:	4b0e      	ldr	r3, [pc, #56]	; (800580c <HAL_RCC_ClockConfig+0x204>)
 80057d4:	0092      	lsls	r2, r2, #2
 80057d6:	58d3      	ldr	r3, [r2, r3]
 80057d8:	221f      	movs	r2, #31
 80057da:	4013      	ands	r3, r2
 80057dc:	000a      	movs	r2, r1
 80057de:	40da      	lsrs	r2, r3
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_ClockConfig+0x208>)
 80057e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCC_ClockConfig+0x20c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7fd fc8d 	bl	8003108 <HAL_InitTick>
 80057ee:	0003      	movs	r3, r0
}
 80057f0:	0018      	movs	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b004      	add	sp, #16
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40022000 	.word	0x40022000
 80057fc:	00001388 	.word	0x00001388
 8005800:	40021000 	.word	0x40021000
 8005804:	fffff0ff 	.word	0xfffff0ff
 8005808:	ffff8fff 	.word	0xffff8fff
 800580c:	0800cd1c 	.word	0x0800cd1c
 8005810:	20000000 	.word	0x20000000
 8005814:	20000004 	.word	0x20000004

08005818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800581e:	4b3c      	ldr	r3, [pc, #240]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2238      	movs	r2, #56	; 0x38
 8005824:	4013      	ands	r3, r2
 8005826:	d10f      	bne.n	8005848 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005828:	4b39      	ldr	r3, [pc, #228]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	0adb      	lsrs	r3, r3, #11
 800582e:	2207      	movs	r2, #7
 8005830:	4013      	ands	r3, r2
 8005832:	2201      	movs	r2, #1
 8005834:	409a      	lsls	r2, r3
 8005836:	0013      	movs	r3, r2
 8005838:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	4835      	ldr	r0, [pc, #212]	; (8005914 <HAL_RCC_GetSysClockFreq+0xfc>)
 800583e:	f7fa fc7f 	bl	8000140 <__udivsi3>
 8005842:	0003      	movs	r3, r0
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e05d      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005848:	4b31      	ldr	r3, [pc, #196]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2238      	movs	r2, #56	; 0x38
 800584e:	4013      	ands	r3, r2
 8005850:	2b08      	cmp	r3, #8
 8005852:	d102      	bne.n	800585a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005854:	4b30      	ldr	r3, [pc, #192]	; (8005918 <HAL_RCC_GetSysClockFreq+0x100>)
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	e054      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800585a:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2238      	movs	r2, #56	; 0x38
 8005860:	4013      	ands	r3, r2
 8005862:	2b10      	cmp	r3, #16
 8005864:	d138      	bne.n	80058d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005866:	4b2a      	ldr	r3, [pc, #168]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2203      	movs	r2, #3
 800586c:	4013      	ands	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005870:	4b27      	ldr	r3, [pc, #156]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	2207      	movs	r2, #7
 8005878:	4013      	ands	r3, r2
 800587a:	3301      	adds	r3, #1
 800587c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d10d      	bne.n	80058a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4824      	ldr	r0, [pc, #144]	; (8005918 <HAL_RCC_GetSysClockFreq+0x100>)
 8005888:	f7fa fc5a 	bl	8000140 <__udivsi3>
 800588c:	0003      	movs	r3, r0
 800588e:	0019      	movs	r1, r3
 8005890:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	227f      	movs	r2, #127	; 0x7f
 8005898:	4013      	ands	r3, r2
 800589a:	434b      	muls	r3, r1
 800589c:	617b      	str	r3, [r7, #20]
        break;
 800589e:	e00d      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	481c      	ldr	r0, [pc, #112]	; (8005914 <HAL_RCC_GetSysClockFreq+0xfc>)
 80058a4:	f7fa fc4c 	bl	8000140 <__udivsi3>
 80058a8:	0003      	movs	r3, r0
 80058aa:	0019      	movs	r1, r3
 80058ac:	4b18      	ldr	r3, [pc, #96]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	227f      	movs	r2, #127	; 0x7f
 80058b4:	4013      	ands	r3, r2
 80058b6:	434b      	muls	r3, r1
 80058b8:	617b      	str	r3, [r7, #20]
        break;
 80058ba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	0f5b      	lsrs	r3, r3, #29
 80058c2:	2207      	movs	r2, #7
 80058c4:	4013      	ands	r3, r2
 80058c6:	3301      	adds	r3, #1
 80058c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	6978      	ldr	r0, [r7, #20]
 80058ce:	f7fa fc37 	bl	8000140 <__udivsi3>
 80058d2:	0003      	movs	r3, r0
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e015      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2238      	movs	r2, #56	; 0x38
 80058de:	4013      	ands	r3, r2
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d103      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80058ec:	4b08      	ldr	r3, [pc, #32]	; (8005910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2238      	movs	r2, #56	; 0x38
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b18      	cmp	r3, #24
 80058f6:	d103      	bne.n	8005900 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80058f8:	23fa      	movs	r3, #250	; 0xfa
 80058fa:	01db      	lsls	r3, r3, #7
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e001      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005904:	693b      	ldr	r3, [r7, #16]
}
 8005906:	0018      	movs	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	b006      	add	sp, #24
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	40021000 	.word	0x40021000
 8005914:	00f42400 	.word	0x00f42400
 8005918:	007a1200 	.word	0x007a1200

0800591c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005920:	4b02      	ldr	r3, [pc, #8]	; (800592c <HAL_RCC_GetHCLKFreq+0x10>)
 8005922:	681b      	ldr	r3, [r3, #0]
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	20000000 	.word	0x20000000

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b5b0      	push	{r4, r5, r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005934:	f7ff fff2 	bl	800591c <HAL_RCC_GetHCLKFreq>
 8005938:	0004      	movs	r4, r0
 800593a:	f7ff fb39 	bl	8004fb0 <LL_RCC_GetAPB1Prescaler>
 800593e:	0003      	movs	r3, r0
 8005940:	0b1a      	lsrs	r2, r3, #12
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005944:	0092      	lsls	r2, r2, #2
 8005946:	58d3      	ldr	r3, [r2, r3]
 8005948:	221f      	movs	r2, #31
 800594a:	4013      	ands	r3, r2
 800594c:	40dc      	lsrs	r4, r3
 800594e:	0023      	movs	r3, r4
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	bdb0      	pop	{r4, r5, r7, pc}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	0800cd5c 	.word	0x0800cd5c

0800595c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005964:	2313      	movs	r3, #19
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800596c:	2312      	movs	r3, #18
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	4013      	ands	r3, r2
 800597e:	d100      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005980:	e0a3      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005982:	2011      	movs	r0, #17
 8005984:	183b      	adds	r3, r7, r0
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598a:	4bc3      	ldr	r3, [pc, #780]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800598c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	055b      	lsls	r3, r3, #21
 8005992:	4013      	ands	r3, r2
 8005994:	d110      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005996:	4bc0      	ldr	r3, [pc, #768]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800599a:	4bbf      	ldr	r3, [pc, #764]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800599c:	2180      	movs	r1, #128	; 0x80
 800599e:	0549      	lsls	r1, r1, #21
 80059a0:	430a      	orrs	r2, r1
 80059a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80059a4:	4bbc      	ldr	r3, [pc, #752]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a8:	2380      	movs	r3, #128	; 0x80
 80059aa:	055b      	lsls	r3, r3, #21
 80059ac:	4013      	ands	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b2:	183b      	adds	r3, r7, r0
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b8:	4bb8      	ldr	r3, [pc, #736]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4bb7      	ldr	r3, [pc, #732]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	0049      	lsls	r1, r1, #1
 80059c2:	430a      	orrs	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059c6:	f7fd fbfb 	bl	80031c0 <HAL_GetTick>
 80059ca:	0003      	movs	r3, r0
 80059cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ce:	e00b      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d0:	f7fd fbf6 	bl	80031c0 <HAL_GetTick>
 80059d4:	0002      	movs	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d904      	bls.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80059de:	2313      	movs	r3, #19
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	2203      	movs	r2, #3
 80059e4:	701a      	strb	r2, [r3, #0]
        break;
 80059e6:	e005      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059e8:	4bac      	ldr	r3, [pc, #688]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4013      	ands	r3, r2
 80059f2:	d0ed      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80059f4:	2313      	movs	r3, #19
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d154      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059fe:	4ba6      	ldr	r3, [pc, #664]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a02:	23c0      	movs	r3, #192	; 0xc0
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4013      	ands	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d019      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d014      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a1a:	4b9f      	ldr	r3, [pc, #636]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	4aa0      	ldr	r2, [pc, #640]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a24:	4b9c      	ldr	r3, [pc, #624]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a28:	4b9b      	ldr	r3, [pc, #620]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a2a:	2180      	movs	r1, #128	; 0x80
 8005a2c:	0249      	lsls	r1, r1, #9
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a32:	4b99      	ldr	r3, [pc, #612]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a36:	4b98      	ldr	r3, [pc, #608]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a38:	499a      	ldr	r1, [pc, #616]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a3a:	400a      	ands	r2, r1
 8005a3c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a3e:	4b96      	ldr	r3, [pc, #600]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2201      	movs	r2, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d016      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fd fbb8 	bl	80031c0 <HAL_GetTick>
 8005a50:	0003      	movs	r3, r0
 8005a52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a54:	e00c      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fd fbb3 	bl	80031c0 <HAL_GetTick>
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	4a91      	ldr	r2, [pc, #580]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d904      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005a66:	2313      	movs	r3, #19
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	701a      	strb	r2, [r3, #0]
            break;
 8005a6e:	e004      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a70:	4b89      	ldr	r3, [pc, #548]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a74:	2202      	movs	r2, #2
 8005a76:	4013      	ands	r3, r2
 8005a78:	d0ed      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005a7a:	2313      	movs	r3, #19
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a84:	4b84      	ldr	r3, [pc, #528]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a88:	4a85      	ldr	r2, [pc, #532]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a92:	4b81      	ldr	r3, [pc, #516]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a94:	430a      	orrs	r2, r1
 8005a96:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a98:	e00c      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a9a:	2312      	movs	r3, #18
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	2213      	movs	r2, #19
 8005aa0:	18ba      	adds	r2, r7, r2
 8005aa2:	7812      	ldrb	r2, [r2, #0]
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e005      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	2312      	movs	r3, #18
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2213      	movs	r2, #19
 8005aae:	18ba      	adds	r2, r7, r2
 8005ab0:	7812      	ldrb	r2, [r2, #0]
 8005ab2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ab4:	2311      	movs	r3, #17
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d105      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005abe:	4b76      	ldr	r3, [pc, #472]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac2:	4b75      	ldr	r3, [pc, #468]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ac4:	4979      	ldr	r1, [pc, #484]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005ac6:	400a      	ands	r2, r1
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ad4:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	2203      	movs	r2, #3
 8005ada:	4393      	bics	r3, r2
 8005adc:	0019      	movs	r1, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2202      	movs	r2, #2
 8005aee:	4013      	ands	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005af2:	4b69      	ldr	r3, [pc, #420]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	220c      	movs	r2, #12
 8005af8:	4393      	bics	r3, r2
 8005afa:	0019      	movs	r1, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b02:	430a      	orrs	r2, r1
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d009      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b10:	4b61      	ldr	r3, [pc, #388]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	4a66      	ldr	r2, [pc, #408]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	0019      	movs	r1, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	4b5e      	ldr	r3, [pc, #376]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b20:	430a      	orrs	r2, r1
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b30:	4b59      	ldr	r3, [pc, #356]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b34:	4a5f      	ldr	r2, [pc, #380]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	4b56      	ldr	r3, [pc, #344]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b40:	430a      	orrs	r2, r1
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b50:	4b51      	ldr	r3, [pc, #324]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b54:	4a58      	ldr	r2, [pc, #352]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b60:	430a      	orrs	r2, r1
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	4a52      	ldr	r2, [pc, #328]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	4b46      	ldr	r3, [pc, #280]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	01db      	lsls	r3, r3, #7
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d015      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b8e:	4b42      	ldr	r3, [pc, #264]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	0899      	lsrs	r1, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	05db      	lsls	r3, r3, #23
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d106      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bac:	4b3a      	ldr	r3, [pc, #232]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	4b39      	ldr	r3, [pc, #228]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	0249      	lsls	r1, r1, #9
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	031b      	lsls	r3, r3, #12
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bc6:	4b34      	ldr	r3, [pc, #208]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	2240      	movs	r2, #64	; 0x40
 8005bcc:	4393      	bics	r3, r2
 8005bce:	0019      	movs	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd4:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	039b      	lsls	r3, r3, #14
 8005be2:	4013      	ands	r3, r2
 8005be4:	d016      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005be6:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	4a35      	ldr	r2, [pc, #212]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	0019      	movs	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf4:	4b28      	ldr	r3, [pc, #160]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	03db      	lsls	r3, r3, #15
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d106      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c06:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	4b23      	ldr	r3, [pc, #140]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c0c:	2180      	movs	r1, #128	; 0x80
 8005c0e:	0449      	lsls	r1, r1, #17
 8005c10:	430a      	orrs	r2, r1
 8005c12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	03db      	lsls	r3, r3, #15
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d016      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	4a27      	ldr	r2, [pc, #156]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c30:	430a      	orrs	r2, r1
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	045b      	lsls	r3, r3, #17
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d106      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c40:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	0449      	lsls	r1, r1, #17
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	4013      	ands	r3, r2
 8005c58:	d016      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005c5a:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	0019      	movs	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695a      	ldr	r2, [r3, #20]
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	01db      	lsls	r3, r3, #7
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d106      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	0249      	lsls	r1, r1, #9
 8005c84:	430a      	orrs	r2, r1
 8005c86:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c88:	2312      	movs	r3, #18
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	781b      	ldrb	r3, [r3, #0]
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b006      	add	sp, #24
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	fffffcff 	.word	0xfffffcff
 8005ca4:	fffeffff 	.word	0xfffeffff
 8005ca8:	00001388 	.word	0x00001388
 8005cac:	efffffff 	.word	0xefffffff
 8005cb0:	fffff3ff 	.word	0xfffff3ff
 8005cb4:	fff3ffff 	.word	0xfff3ffff
 8005cb8:	ffcfffff 	.word	0xffcfffff
 8005cbc:	ffffcfff 	.word	0xffffcfff
 8005cc0:	ffbfffff 	.word	0xffbfffff
 8005cc4:	feffffff 	.word	0xfeffffff
 8005cc8:	ffff3fff 	.word	0xffff3fff

08005ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e04a      	b.n	8005d74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	223d      	movs	r2, #61	; 0x3d
 8005ce2:	5c9b      	ldrb	r3, [r3, r2]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	223c      	movs	r2, #60	; 0x3c
 8005cee:	2100      	movs	r1, #0
 8005cf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f7fd f82b 	bl	8002d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	223d      	movs	r2, #61	; 0x3d
 8005cfe:	2102      	movs	r1, #2
 8005d00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	0010      	movs	r0, r2
 8005d0e:	f000 fa57 	bl	80061c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2248      	movs	r2, #72	; 0x48
 8005d16:	2101      	movs	r1, #1
 8005d18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	223e      	movs	r2, #62	; 0x3e
 8005d1e:	2101      	movs	r1, #1
 8005d20:	5499      	strb	r1, [r3, r2]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	223f      	movs	r2, #63	; 0x3f
 8005d26:	2101      	movs	r1, #1
 8005d28:	5499      	strb	r1, [r3, r2]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2240      	movs	r2, #64	; 0x40
 8005d2e:	2101      	movs	r1, #1
 8005d30:	5499      	strb	r1, [r3, r2]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2241      	movs	r2, #65	; 0x41
 8005d36:	2101      	movs	r1, #1
 8005d38:	5499      	strb	r1, [r3, r2]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2242      	movs	r2, #66	; 0x42
 8005d3e:	2101      	movs	r1, #1
 8005d40:	5499      	strb	r1, [r3, r2]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2243      	movs	r2, #67	; 0x43
 8005d46:	2101      	movs	r1, #1
 8005d48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2244      	movs	r2, #68	; 0x44
 8005d4e:	2101      	movs	r1, #1
 8005d50:	5499      	strb	r1, [r3, r2]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2245      	movs	r2, #69	; 0x45
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2246      	movs	r2, #70	; 0x46
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2247      	movs	r2, #71	; 0x47
 8005d66:	2101      	movs	r1, #1
 8005d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	223d      	movs	r2, #61	; 0x3d
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	0018      	movs	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b002      	add	sp, #8
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e04a      	b.n	8005e24 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	223d      	movs	r2, #61	; 0x3d
 8005d92:	5c9b      	ldrb	r3, [r3, r2]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	223c      	movs	r2, #60	; 0x3c
 8005d9e:	2100      	movs	r1, #0
 8005da0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	0018      	movs	r0, r3
 8005da6:	f000 f841 	bl	8005e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	223d      	movs	r2, #61	; 0x3d
 8005dae:	2102      	movs	r1, #2
 8005db0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	0019      	movs	r1, r3
 8005dbc:	0010      	movs	r0, r2
 8005dbe:	f000 f9ff 	bl	80061c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2248      	movs	r2, #72	; 0x48
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	223e      	movs	r2, #62	; 0x3e
 8005dce:	2101      	movs	r1, #1
 8005dd0:	5499      	strb	r1, [r3, r2]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	223f      	movs	r2, #63	; 0x3f
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2240      	movs	r2, #64	; 0x40
 8005dde:	2101      	movs	r1, #1
 8005de0:	5499      	strb	r1, [r3, r2]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2241      	movs	r2, #65	; 0x41
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2242      	movs	r2, #66	; 0x42
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2243      	movs	r2, #67	; 0x43
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2244      	movs	r2, #68	; 0x44
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2245      	movs	r2, #69	; 0x45
 8005e06:	2101      	movs	r1, #1
 8005e08:	5499      	strb	r1, [r3, r2]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2246      	movs	r2, #70	; 0x46
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2247      	movs	r2, #71	; 0x47
 8005e16:	2101      	movs	r1, #1
 8005e18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	223d      	movs	r2, #61	; 0x3d
 8005e1e:	2101      	movs	r1, #1
 8005e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e34:	46c0      	nop			; (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	223c      	movs	r2, #60	; 0x3c
 8005e4c:	5c9b      	ldrb	r3, [r3, r2]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e0df      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	223c      	movs	r2, #60	; 0x3c
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	5499      	strb	r1, [r3, r2]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b14      	cmp	r3, #20
 8005e62:	d900      	bls.n	8005e66 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005e64:	e0d1      	b.n	800600a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	009a      	lsls	r2, r3, #2
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	; (8006020 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8005e6c:	18d3      	adds	r3, r2, r3
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 fa20 	bl	80062c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2108      	movs	r1, #8
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2104      	movs	r1, #4
 8005e9c:	438a      	bics	r2, r1
 8005e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6999      	ldr	r1, [r3, #24]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	619a      	str	r2, [r3, #24]
      break;
 8005eb2:	e0ab      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	0011      	movs	r1, r2
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f000 fa89 	bl	80063d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2180      	movs	r1, #128	; 0x80
 8005ece:	0109      	lsls	r1, r1, #4
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4951      	ldr	r1, [pc, #324]	; (8006024 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005ee0:	400a      	ands	r2, r1
 8005ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6999      	ldr	r1, [r3, #24]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	619a      	str	r2, [r3, #24]
      break;
 8005ef8:	e088      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	0011      	movs	r1, r2
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 faea 	bl	80064dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2108      	movs	r1, #8
 8005f14:	430a      	orrs	r2, r1
 8005f16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2104      	movs	r1, #4
 8005f24:	438a      	bics	r2, r1
 8005f26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69d9      	ldr	r1, [r3, #28]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	61da      	str	r2, [r3, #28]
      break;
 8005f3a:	e067      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	0011      	movs	r1, r2
 8005f44:	0018      	movs	r0, r3
 8005f46:	f000 fb51 	bl	80065ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	0109      	lsls	r1, r1, #4
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	492f      	ldr	r1, [pc, #188]	; (8006024 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005f68:	400a      	ands	r2, r1
 8005f6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69d9      	ldr	r1, [r3, #28]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	021a      	lsls	r2, r3, #8
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	61da      	str	r2, [r3, #28]
      break;
 8005f80:	e044      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	0011      	movs	r1, r2
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 fb98 	bl	80066c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2108      	movs	r1, #8
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2104      	movs	r1, #4
 8005fac:	438a      	bics	r2, r1
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fc2:	e023      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	0011      	movs	r1, r2
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f000 fbd7 	bl	8006780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2180      	movs	r1, #128	; 0x80
 8005fde:	0109      	lsls	r1, r1, #4
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	490d      	ldr	r1, [pc, #52]	; (8006024 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005ff0:	400a      	ands	r2, r1
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	021a      	lsls	r2, r3, #8
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006008:	e000      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800600a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	223c      	movs	r2, #60	; 0x3c
 8006010:	2100      	movs	r1, #0
 8006012:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	0018      	movs	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	b004      	add	sp, #16
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	0800cd7c 	.word	0x0800cd7c
 8006024:	fffffbff 	.word	0xfffffbff

08006028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	223c      	movs	r2, #60	; 0x3c
 8006036:	5c9b      	ldrb	r3, [r3, r2]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIM_ConfigClockSource+0x18>
 800603c:	2302      	movs	r3, #2
 800603e:	e0b7      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x188>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	223c      	movs	r2, #60	; 0x3c
 8006044:	2101      	movs	r1, #1
 8006046:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	223d      	movs	r2, #61	; 0x3d
 800604c:	2102      	movs	r1, #2
 800604e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a57      	ldr	r2, [pc, #348]	; (80061b8 <HAL_TIM_ConfigClockSource+0x190>)
 800605c:	4013      	ands	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a56      	ldr	r2, [pc, #344]	; (80061bc <HAL_TIM_ConfigClockSource+0x194>)
 8006064:	4013      	ands	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2280      	movs	r2, #128	; 0x80
 8006076:	0192      	lsls	r2, r2, #6
 8006078:	4293      	cmp	r3, r2
 800607a:	d040      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0xd6>
 800607c:	2280      	movs	r2, #128	; 0x80
 800607e:	0192      	lsls	r2, r2, #6
 8006080:	4293      	cmp	r3, r2
 8006082:	d900      	bls.n	8006086 <HAL_TIM_ConfigClockSource+0x5e>
 8006084:	e088      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	0152      	lsls	r2, r2, #5
 800608a:	4293      	cmp	r3, r2
 800608c:	d100      	bne.n	8006090 <HAL_TIM_ConfigClockSource+0x68>
 800608e:	e085      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>
 8006090:	2280      	movs	r2, #128	; 0x80
 8006092:	0152      	lsls	r2, r2, #5
 8006094:	4293      	cmp	r3, r2
 8006096:	d900      	bls.n	800609a <HAL_TIM_ConfigClockSource+0x72>
 8006098:	e07e      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 800609a:	2b70      	cmp	r3, #112	; 0x70
 800609c:	d018      	beq.n	80060d0 <HAL_TIM_ConfigClockSource+0xa8>
 800609e:	d900      	bls.n	80060a2 <HAL_TIM_ConfigClockSource+0x7a>
 80060a0:	e07a      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 80060a2:	2b60      	cmp	r3, #96	; 0x60
 80060a4:	d04f      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x11e>
 80060a6:	d900      	bls.n	80060aa <HAL_TIM_ConfigClockSource+0x82>
 80060a8:	e076      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 80060aa:	2b50      	cmp	r3, #80	; 0x50
 80060ac:	d03b      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0xfe>
 80060ae:	d900      	bls.n	80060b2 <HAL_TIM_ConfigClockSource+0x8a>
 80060b0:	e072      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d057      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x13e>
 80060b6:	d900      	bls.n	80060ba <HAL_TIM_ConfigClockSource+0x92>
 80060b8:	e06e      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 80060ba:	2b30      	cmp	r3, #48	; 0x30
 80060bc:	d063      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x15e>
 80060be:	d86b      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d060      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x15e>
 80060c4:	d868      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d05d      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x15e>
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d05b      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80060ce:	e063      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6899      	ldr	r1, [r3, #8]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f000 fc2e 	bl	8006940 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2277      	movs	r2, #119	; 0x77
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	609a      	str	r2, [r3, #8]
      break;
 80060fc:	e04f      	b.n	800619e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	6899      	ldr	r1, [r3, #8]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f000 fc17 	bl	8006940 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2180      	movs	r1, #128	; 0x80
 800611e:	01c9      	lsls	r1, r1, #7
 8006120:	430a      	orrs	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
      break;
 8006124:	e03b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6859      	ldr	r1, [r3, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	001a      	movs	r2, r3
 8006134:	f000 fb88 	bl	8006848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2150      	movs	r1, #80	; 0x50
 800613e:	0018      	movs	r0, r3
 8006140:	f000 fbe2 	bl	8006908 <TIM_ITRx_SetConfig>
      break;
 8006144:	e02b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6859      	ldr	r1, [r3, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	001a      	movs	r2, r3
 8006154:	f000 fba6 	bl	80068a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2160      	movs	r1, #96	; 0x60
 800615e:	0018      	movs	r0, r3
 8006160:	f000 fbd2 	bl	8006908 <TIM_ITRx_SetConfig>
      break;
 8006164:	e01b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6859      	ldr	r1, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	001a      	movs	r2, r3
 8006174:	f000 fb68 	bl	8006848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2140      	movs	r1, #64	; 0x40
 800617e:	0018      	movs	r0, r3
 8006180:	f000 fbc2 	bl	8006908 <TIM_ITRx_SetConfig>
      break;
 8006184:	e00b      	b.n	800619e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0019      	movs	r1, r3
 8006190:	0010      	movs	r0, r2
 8006192:	f000 fbb9 	bl	8006908 <TIM_ITRx_SetConfig>
        break;
 8006196:	e002      	b.n	800619e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006198:	46c0      	nop			; (mov r8, r8)
 800619a:	e000      	b.n	800619e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800619c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	223d      	movs	r2, #61	; 0x3d
 80061a2:	2101      	movs	r1, #1
 80061a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	223c      	movs	r2, #60	; 0x3c
 80061aa:	2100      	movs	r1, #0
 80061ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	0018      	movs	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b004      	add	sp, #16
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	ffceff88 	.word	0xffceff88
 80061bc:	ffff00ff 	.word	0xffff00ff

080061c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a34      	ldr	r2, [pc, #208]	; (80062a4 <TIM_Base_SetConfig+0xe4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d008      	beq.n	80061ea <TIM_Base_SetConfig+0x2a>
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	05db      	lsls	r3, r3, #23
 80061de:	429a      	cmp	r2, r3
 80061e0:	d003      	beq.n	80061ea <TIM_Base_SetConfig+0x2a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a30      	ldr	r2, [pc, #192]	; (80062a8 <TIM_Base_SetConfig+0xe8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d108      	bne.n	80061fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2270      	movs	r2, #112	; 0x70
 80061ee:	4393      	bics	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a29      	ldr	r2, [pc, #164]	; (80062a4 <TIM_Base_SetConfig+0xe4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d018      	beq.n	8006236 <TIM_Base_SetConfig+0x76>
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	05db      	lsls	r3, r3, #23
 800620a:	429a      	cmp	r2, r3
 800620c:	d013      	beq.n	8006236 <TIM_Base_SetConfig+0x76>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a25      	ldr	r2, [pc, #148]	; (80062a8 <TIM_Base_SetConfig+0xe8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00f      	beq.n	8006236 <TIM_Base_SetConfig+0x76>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a24      	ldr	r2, [pc, #144]	; (80062ac <TIM_Base_SetConfig+0xec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00b      	beq.n	8006236 <TIM_Base_SetConfig+0x76>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a23      	ldr	r2, [pc, #140]	; (80062b0 <TIM_Base_SetConfig+0xf0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <TIM_Base_SetConfig+0x76>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <TIM_Base_SetConfig+0xf4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_Base_SetConfig+0x76>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <TIM_Base_SetConfig+0xf8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d108      	bne.n	8006248 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a20      	ldr	r2, [pc, #128]	; (80062bc <TIM_Base_SetConfig+0xfc>)
 800623a:	4013      	ands	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	4393      	bics	r3, r2
 800624e:	001a      	movs	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a0c      	ldr	r2, [pc, #48]	; (80062a4 <TIM_Base_SetConfig+0xe4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00b      	beq.n	800628e <TIM_Base_SetConfig+0xce>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a0d      	ldr	r2, [pc, #52]	; (80062b0 <TIM_Base_SetConfig+0xf0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <TIM_Base_SetConfig+0xce>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a0c      	ldr	r2, [pc, #48]	; (80062b4 <TIM_Base_SetConfig+0xf4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_Base_SetConfig+0xce>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a0b      	ldr	r2, [pc, #44]	; (80062b8 <TIM_Base_SetConfig+0xf8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d103      	bne.n	8006296 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	615a      	str	r2, [r3, #20]
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b004      	add	sp, #16
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40002000 	.word	0x40002000
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800
 80062bc:	fffffcff 	.word	0xfffffcff

080062c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	2201      	movs	r2, #1
 80062d0:	4393      	bics	r3, r2
 80062d2:	001a      	movs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4a32      	ldr	r2, [pc, #200]	; (80063b8 <TIM_OC1_SetConfig+0xf8>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2203      	movs	r2, #3
 80062f6:	4393      	bics	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2202      	movs	r2, #2
 8006308:	4393      	bics	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a28      	ldr	r2, [pc, #160]	; (80063bc <TIM_OC1_SetConfig+0xfc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_OC1_SetConfig+0x76>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a27      	ldr	r2, [pc, #156]	; (80063c0 <TIM_OC1_SetConfig+0x100>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_OC1_SetConfig+0x76>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a26      	ldr	r2, [pc, #152]	; (80063c4 <TIM_OC1_SetConfig+0x104>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_OC1_SetConfig+0x76>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a25      	ldr	r2, [pc, #148]	; (80063c8 <TIM_OC1_SetConfig+0x108>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d10c      	bne.n	8006350 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2208      	movs	r2, #8
 800633a:	4393      	bics	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2204      	movs	r2, #4
 800634c:	4393      	bics	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <TIM_OC1_SetConfig+0xfc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00b      	beq.n	8006370 <TIM_OC1_SetConfig+0xb0>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <TIM_OC1_SetConfig+0x100>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d007      	beq.n	8006370 <TIM_OC1_SetConfig+0xb0>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <TIM_OC1_SetConfig+0x104>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC1_SetConfig+0xb0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <TIM_OC1_SetConfig+0x108>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d111      	bne.n	8006394 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4a16      	ldr	r2, [pc, #88]	; (80063cc <TIM_OC1_SetConfig+0x10c>)
 8006374:	4013      	ands	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <TIM_OC1_SetConfig+0x110>)
 800637c:	4013      	ands	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b006      	add	sp, #24
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	fffeff8f 	.word	0xfffeff8f
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800
 80063cc:	fffffeff 	.word	0xfffffeff
 80063d0:	fffffdff 	.word	0xfffffdff

080063d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	2210      	movs	r2, #16
 80063e4:	4393      	bics	r3, r2
 80063e6:	001a      	movs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a2e      	ldr	r2, [pc, #184]	; (80064bc <TIM_OC2_SetConfig+0xe8>)
 8006402:	4013      	ands	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a2d      	ldr	r2, [pc, #180]	; (80064c0 <TIM_OC2_SetConfig+0xec>)
 800640a:	4013      	ands	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2220      	movs	r2, #32
 800641e:	4393      	bics	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a24      	ldr	r2, [pc, #144]	; (80064c4 <TIM_OC2_SetConfig+0xf0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10d      	bne.n	8006452 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2280      	movs	r2, #128	; 0x80
 800643a:	4393      	bics	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	4393      	bics	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <TIM_OC2_SetConfig+0xf0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00b      	beq.n	8006472 <TIM_OC2_SetConfig+0x9e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <TIM_OC2_SetConfig+0xf4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <TIM_OC2_SetConfig+0x9e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a19      	ldr	r2, [pc, #100]	; (80064cc <TIM_OC2_SetConfig+0xf8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_OC2_SetConfig+0x9e>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <TIM_OC2_SetConfig+0xfc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d113      	bne.n	800649a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <TIM_OC2_SetConfig+0x100>)
 8006476:	4013      	ands	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <TIM_OC2_SetConfig+0x104>)
 800647e:	4013      	ands	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	621a      	str	r2, [r3, #32]
}
 80064b4:	46c0      	nop			; (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b006      	add	sp, #24
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	feff8fff 	.word	0xfeff8fff
 80064c0:	fffffcff 	.word	0xfffffcff
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800
 80064d4:	fffffbff 	.word	0xfffffbff
 80064d8:	fffff7ff 	.word	0xfffff7ff

080064dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4a35      	ldr	r2, [pc, #212]	; (80065c0 <TIM_OC3_SetConfig+0xe4>)
 80064ec:	401a      	ands	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a2f      	ldr	r2, [pc, #188]	; (80065c4 <TIM_OC3_SetConfig+0xe8>)
 8006508:	4013      	ands	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2203      	movs	r2, #3
 8006510:	4393      	bics	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <TIM_OC3_SetConfig+0xec>)
 8006522:	4013      	ands	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a25      	ldr	r2, [pc, #148]	; (80065cc <TIM_OC3_SetConfig+0xf0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10d      	bne.n	8006556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4a24      	ldr	r2, [pc, #144]	; (80065d0 <TIM_OC3_SetConfig+0xf4>)
 800653e:	4013      	ands	r3, r2
 8006540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <TIM_OC3_SetConfig+0xf8>)
 8006552:	4013      	ands	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <TIM_OC3_SetConfig+0xf0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00b      	beq.n	8006576 <TIM_OC3_SetConfig+0x9a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <TIM_OC3_SetConfig+0xfc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_OC3_SetConfig+0x9a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <TIM_OC3_SetConfig+0x100>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_OC3_SetConfig+0x9a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <TIM_OC3_SetConfig+0x104>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d113      	bne.n	800659e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <TIM_OC3_SetConfig+0x108>)
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4a19      	ldr	r2, [pc, #100]	; (80065e8 <TIM_OC3_SetConfig+0x10c>)
 8006582:	4013      	ands	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	621a      	str	r2, [r3, #32]
}
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	46bd      	mov	sp, r7
 80065bc:	b006      	add	sp, #24
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	fffffeff 	.word	0xfffffeff
 80065c4:	fffeff8f 	.word	0xfffeff8f
 80065c8:	fffffdff 	.word	0xfffffdff
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	fffff7ff 	.word	0xfffff7ff
 80065d4:	fffffbff 	.word	0xfffffbff
 80065d8:	40014000 	.word	0x40014000
 80065dc:	40014400 	.word	0x40014400
 80065e0:	40014800 	.word	0x40014800
 80065e4:	ffffefff 	.word	0xffffefff
 80065e8:	ffffdfff 	.word	0xffffdfff

080065ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	4a28      	ldr	r2, [pc, #160]	; (800669c <TIM_OC4_SetConfig+0xb0>)
 80065fc:	401a      	ands	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <TIM_OC4_SetConfig+0xb4>)
 8006618:	4013      	ands	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <TIM_OC4_SetConfig+0xb8>)
 8006620:	4013      	ands	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <TIM_OC4_SetConfig+0xbc>)
 8006634:	4013      	ands	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a19      	ldr	r2, [pc, #100]	; (80066ac <TIM_OC4_SetConfig+0xc0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_OC4_SetConfig+0x78>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <TIM_OC4_SetConfig+0xc4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_OC4_SetConfig+0x78>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <TIM_OC4_SetConfig+0xc8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC4_SetConfig+0x78>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <TIM_OC4_SetConfig+0xcc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d109      	bne.n	8006678 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	4a15      	ldr	r2, [pc, #84]	; (80066bc <TIM_OC4_SetConfig+0xd0>)
 8006668:	4013      	ands	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	019b      	lsls	r3, r3, #6
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	46bd      	mov	sp, r7
 8006696:	b006      	add	sp, #24
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	ffffefff 	.word	0xffffefff
 80066a0:	feff8fff 	.word	0xfeff8fff
 80066a4:	fffffcff 	.word	0xfffffcff
 80066a8:	ffffdfff 	.word	0xffffdfff
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40014400 	.word	0x40014400
 80066b8:	40014800 	.word	0x40014800
 80066bc:	ffffbfff 	.word	0xffffbfff

080066c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4a25      	ldr	r2, [pc, #148]	; (8006764 <TIM_OC5_SetConfig+0xa4>)
 80066d0:	401a      	ands	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <TIM_OC5_SetConfig+0xa8>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4a1b      	ldr	r2, [pc, #108]	; (800676c <TIM_OC5_SetConfig+0xac>)
 80066fe:	4013      	ands	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a17      	ldr	r2, [pc, #92]	; (8006770 <TIM_OC5_SetConfig+0xb0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d00b      	beq.n	800672e <TIM_OC5_SetConfig+0x6e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a16      	ldr	r2, [pc, #88]	; (8006774 <TIM_OC5_SetConfig+0xb4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <TIM_OC5_SetConfig+0x6e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a15      	ldr	r2, [pc, #84]	; (8006778 <TIM_OC5_SetConfig+0xb8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC5_SetConfig+0x6e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a14      	ldr	r2, [pc, #80]	; (800677c <TIM_OC5_SetConfig+0xbc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d109      	bne.n	8006742 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <TIM_OC5_SetConfig+0xa4>)
 8006732:	4013      	ands	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	b006      	add	sp, #24
 8006762:	bd80      	pop	{r7, pc}
 8006764:	fffeffff 	.word	0xfffeffff
 8006768:	fffeff8f 	.word	0xfffeff8f
 800676c:	fffdffff 	.word	0xfffdffff
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	4a26      	ldr	r2, [pc, #152]	; (8006828 <TIM_OC6_SetConfig+0xa8>)
 8006790:	401a      	ands	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a20      	ldr	r2, [pc, #128]	; (800682c <TIM_OC6_SetConfig+0xac>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <TIM_OC6_SetConfig+0xb0>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	051b      	lsls	r3, r3, #20
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <TIM_OC6_SetConfig+0xb4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_OC6_SetConfig+0x70>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <TIM_OC6_SetConfig+0xb8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_OC6_SetConfig+0x70>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a16      	ldr	r2, [pc, #88]	; (800683c <TIM_OC6_SetConfig+0xbc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_OC6_SetConfig+0x70>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a15      	ldr	r2, [pc, #84]	; (8006840 <TIM_OC6_SetConfig+0xc0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d109      	bne.n	8006804 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	4a14      	ldr	r2, [pc, #80]	; (8006844 <TIM_OC6_SetConfig+0xc4>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	029b      	lsls	r3, r3, #10
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b006      	add	sp, #24
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	ffefffff 	.word	0xffefffff
 800682c:	feff8fff 	.word	0xfeff8fff
 8006830:	ffdfffff 	.word	0xffdfffff
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800
 8006844:	fffbffff 	.word	0xfffbffff

08006848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	2201      	movs	r2, #1
 8006860:	4393      	bics	r3, r2
 8006862:	001a      	movs	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	22f0      	movs	r2, #240	; 0xf0
 8006872:	4393      	bics	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	220a      	movs	r2, #10
 8006884:	4393      	bics	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	621a      	str	r2, [r3, #32]
}
 800689c:	46c0      	nop			; (mov r8, r8)
 800689e:	46bd      	mov	sp, r7
 80068a0:	b006      	add	sp, #24
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	2210      	movs	r2, #16
 80068b6:	4393      	bics	r3, r2
 80068b8:	001a      	movs	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	4a0d      	ldr	r2, [pc, #52]	; (8006904 <TIM_TI2_ConfigInputStage+0x60>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	031b      	lsls	r3, r3, #12
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	22a0      	movs	r2, #160	; 0xa0
 80068e0:	4393      	bics	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b006      	add	sp, #24
 8006900:	bd80      	pop	{r7, pc}
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	ffff0fff 	.word	0xffff0fff

08006908 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a08      	ldr	r2, [pc, #32]	; (800693c <TIM_ITRx_SetConfig+0x34>)
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	2207      	movs	r2, #7
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	609a      	str	r2, [r3, #8]
}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	46bd      	mov	sp, r7
 8006936:	b004      	add	sp, #16
 8006938:	bd80      	pop	{r7, pc}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	ffcfff8f 	.word	0xffcfff8f

08006940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	4a09      	ldr	r2, [pc, #36]	; (800697c <TIM_ETR_SetConfig+0x3c>)
 8006958:	4013      	ands	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	021a      	lsls	r2, r3, #8
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	431a      	orrs	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	46c0      	nop			; (mov r8, r8)
 8006976:	46bd      	mov	sp, r7
 8006978:	b006      	add	sp, #24
 800697a:	bd80      	pop	{r7, pc}
 800697c:	ffff00ff 	.word	0xffff00ff

08006980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	223c      	movs	r2, #60	; 0x3c
 800698e:	5c9b      	ldrb	r3, [r3, r2]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006994:	2302      	movs	r3, #2
 8006996:	e055      	b.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	223c      	movs	r2, #60	; 0x3c
 800699c:	2101      	movs	r1, #1
 800699e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	223d      	movs	r2, #61	; 0x3d
 80069a4:	2102      	movs	r1, #2
 80069a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d108      	bne.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a22      	ldr	r2, [pc, #136]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069c6:	4013      	ands	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2270      	movs	r2, #112	; 0x70
 80069d8:	4393      	bics	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a16      	ldr	r2, [pc, #88]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00f      	beq.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	05db      	lsls	r3, r3, #23
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d009      	beq.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a12      	ldr	r2, [pc, #72]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a11      	ldr	r2, [pc, #68]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d10c      	bne.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2280      	movs	r2, #128	; 0x80
 8006a1c:	4393      	bics	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	223d      	movs	r2, #61	; 0x3d
 8006a36:	2101      	movs	r1, #1
 8006a38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	223c      	movs	r2, #60	; 0x3c
 8006a3e:	2100      	movs	r1, #0
 8006a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	0018      	movs	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b004      	add	sp, #16
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	ff0fffff 	.word	0xff0fffff
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40014000 	.word	0x40014000

08006a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e046      	b.n	8006afc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2284      	movs	r2, #132	; 0x84
 8006a72:	589b      	ldr	r3, [r3, r2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2280      	movs	r2, #128	; 0x80
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	0018      	movs	r0, r3
 8006a84:	f7fc f9bc 	bl	8002e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2284      	movs	r2, #132	; 0x84
 8006a8c:	2124      	movs	r1, #36	; 0x24
 8006a8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	438a      	bics	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 f8dc 	bl	8006c60 <UART_SetConfig>
 8006aa8:	0003      	movs	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e024      	b.n	8006afc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 fbad 	bl	800721c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	490d      	ldr	r1, [pc, #52]	; (8006b04 <HAL_UART_Init+0xa8>)
 8006ace:	400a      	ands	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	212a      	movs	r1, #42	; 0x2a
 8006ade:	438a      	bics	r2, r1
 8006ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2101      	movs	r1, #1
 8006aee:	430a      	orrs	r2, r1
 8006af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 fc45 	bl	8007384 <UART_CheckIdleState>
 8006afa:	0003      	movs	r3, r0
}
 8006afc:	0018      	movs	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b002      	add	sp, #8
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	ffffb7ff 	.word	0xffffb7ff

08006b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	1dbb      	adds	r3, r7, #6
 8006b16:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2284      	movs	r2, #132	; 0x84
 8006b1c:	589b      	ldr	r3, [r3, r2]
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d000      	beq.n	8006b24 <HAL_UART_Transmit+0x1c>
 8006b22:	e097      	b.n	8006c54 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_UART_Transmit+0x2a>
 8006b2a:	1dbb      	adds	r3, r7, #6
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e08f      	b.n	8006c56 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	015b      	lsls	r3, r3, #5
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d109      	bne.n	8006b56 <HAL_UART_Transmit+0x4e>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d105      	bne.n	8006b56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d001      	beq.n	8006b56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e07f      	b.n	8006c56 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2280      	movs	r2, #128	; 0x80
 8006b5a:	5c9b      	ldrb	r3, [r3, r2]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_UART_Transmit+0x5c>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e078      	b.n	8006c56 <HAL_UART_Transmit+0x14e>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2280      	movs	r2, #128	; 0x80
 8006b68:	2101      	movs	r1, #1
 8006b6a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	228c      	movs	r2, #140	; 0x8c
 8006b70:	2100      	movs	r1, #0
 8006b72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2284      	movs	r2, #132	; 0x84
 8006b78:	2121      	movs	r1, #33	; 0x21
 8006b7a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b7c:	f7fc fb20 	bl	80031c0 <HAL_GetTick>
 8006b80:	0003      	movs	r3, r0
 8006b82:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1dba      	adds	r2, r7, #6
 8006b88:	2154      	movs	r1, #84	; 0x54
 8006b8a:	8812      	ldrh	r2, [r2, #0]
 8006b8c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1dba      	adds	r2, r7, #6
 8006b92:	2156      	movs	r1, #86	; 0x56
 8006b94:	8812      	ldrh	r2, [r2, #0]
 8006b96:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	015b      	lsls	r3, r3, #5
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d108      	bne.n	8006bb6 <HAL_UART_Transmit+0xae>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	e003      	b.n	8006bbe <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2280      	movs	r2, #128	; 0x80
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006bc6:	e02c      	b.n	8006c22 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	0013      	movs	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2180      	movs	r1, #128	; 0x80
 8006bd6:	f000 fc1f 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8006bda:	1e03      	subs	r3, r0, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e039      	b.n	8006c56 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10b      	bne.n	8006c00 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	001a      	movs	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	05d2      	lsls	r2, r2, #23
 8006bf4:	0dd2      	lsrs	r2, r2, #23
 8006bf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	e007      	b.n	8006c10 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	781a      	ldrb	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2256      	movs	r2, #86	; 0x56
 8006c14:	5a9b      	ldrh	r3, [r3, r2]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b299      	uxth	r1, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2256      	movs	r2, #86	; 0x56
 8006c20:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2256      	movs	r2, #86	; 0x56
 8006c26:	5a9b      	ldrh	r3, [r3, r2]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1cc      	bne.n	8006bc8 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	0013      	movs	r3, r2
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2140      	movs	r1, #64	; 0x40
 8006c3c:	f000 fbec 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 8006c40:	1e03      	subs	r3, r0, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e006      	b.n	8006c56 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2284      	movs	r2, #132	; 0x84
 8006c4c:	2120      	movs	r1, #32
 8006c4e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	0018      	movs	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b008      	add	sp, #32
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	b5b0      	push	{r4, r5, r7, lr}
 8006c62:	b090      	sub	sp, #64	; 0x40
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c68:	231a      	movs	r3, #26
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	4694      	mov	ip, r2
 8006c6e:	44bc      	add	ip, r7
 8006c70:	4463      	add	r3, ip
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4ab9      	ldr	r2, [pc, #740]	; (8006f7c <UART_SetConfig+0x31c>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	0019      	movs	r1, r3
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	4ab5      	ldr	r2, [pc, #724]	; (8006f80 <UART_SetConfig+0x320>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	0018      	movs	r0, r3
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	68d9      	ldr	r1, [r3, #12]
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	0003      	movs	r3, r0
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4aae      	ldr	r2, [pc, #696]	; (8006f84 <UART_SetConfig+0x324>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	4aaa      	ldr	r2, [pc, #680]	; (8006f88 <UART_SetConfig+0x328>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	0019      	movs	r1, r3
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	430b      	orrs	r3, r1
 8006cec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	220f      	movs	r2, #15
 8006cf6:	4393      	bics	r3, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	0003      	movs	r3, r0
 8006d04:	430b      	orrs	r3, r1
 8006d06:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a9f      	ldr	r2, [pc, #636]	; (8006f8c <UART_SetConfig+0x32c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d136      	bne.n	8006d80 <UART_SetConfig+0x120>
 8006d12:	4b9f      	ldr	r3, [pc, #636]	; (8006f90 <UART_SetConfig+0x330>)
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	2203      	movs	r2, #3
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d020      	beq.n	8006d60 <UART_SetConfig+0x100>
 8006d1e:	d827      	bhi.n	8006d70 <UART_SetConfig+0x110>
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d00d      	beq.n	8006d40 <UART_SetConfig+0xe0>
 8006d24:	d824      	bhi.n	8006d70 <UART_SetConfig+0x110>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <UART_SetConfig+0xd0>
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d010      	beq.n	8006d50 <UART_SetConfig+0xf0>
 8006d2e:	e01f      	b.n	8006d70 <UART_SetConfig+0x110>
 8006d30:	231b      	movs	r3, #27
 8006d32:	2220      	movs	r2, #32
 8006d34:	4694      	mov	ip, r2
 8006d36:	44bc      	add	ip, r7
 8006d38:	4463      	add	r3, ip
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e0c5      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006d40:	231b      	movs	r3, #27
 8006d42:	2220      	movs	r2, #32
 8006d44:	4694      	mov	ip, r2
 8006d46:	44bc      	add	ip, r7
 8006d48:	4463      	add	r3, ip
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e0bd      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006d50:	231b      	movs	r3, #27
 8006d52:	2220      	movs	r2, #32
 8006d54:	4694      	mov	ip, r2
 8006d56:	44bc      	add	ip, r7
 8006d58:	4463      	add	r3, ip
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	e0b5      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006d60:	231b      	movs	r3, #27
 8006d62:	2220      	movs	r2, #32
 8006d64:	4694      	mov	ip, r2
 8006d66:	44bc      	add	ip, r7
 8006d68:	4463      	add	r3, ip
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	e0ad      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006d70:	231b      	movs	r3, #27
 8006d72:	2220      	movs	r2, #32
 8006d74:	4694      	mov	ip, r2
 8006d76:	44bc      	add	ip, r7
 8006d78:	4463      	add	r3, ip
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e0a5      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a83      	ldr	r2, [pc, #524]	; (8006f94 <UART_SetConfig+0x334>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d136      	bne.n	8006df8 <UART_SetConfig+0x198>
 8006d8a:	4b81      	ldr	r3, [pc, #516]	; (8006f90 <UART_SetConfig+0x330>)
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	220c      	movs	r2, #12
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b0c      	cmp	r3, #12
 8006d94:	d020      	beq.n	8006dd8 <UART_SetConfig+0x178>
 8006d96:	d827      	bhi.n	8006de8 <UART_SetConfig+0x188>
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d00d      	beq.n	8006db8 <UART_SetConfig+0x158>
 8006d9c:	d824      	bhi.n	8006de8 <UART_SetConfig+0x188>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <UART_SetConfig+0x148>
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d010      	beq.n	8006dc8 <UART_SetConfig+0x168>
 8006da6:	e01f      	b.n	8006de8 <UART_SetConfig+0x188>
 8006da8:	231b      	movs	r3, #27
 8006daa:	2220      	movs	r2, #32
 8006dac:	4694      	mov	ip, r2
 8006dae:	44bc      	add	ip, r7
 8006db0:	4463      	add	r3, ip
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	e089      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006db8:	231b      	movs	r3, #27
 8006dba:	2220      	movs	r2, #32
 8006dbc:	4694      	mov	ip, r2
 8006dbe:	44bc      	add	ip, r7
 8006dc0:	4463      	add	r3, ip
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e081      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006dc8:	231b      	movs	r3, #27
 8006dca:	2220      	movs	r2, #32
 8006dcc:	4694      	mov	ip, r2
 8006dce:	44bc      	add	ip, r7
 8006dd0:	4463      	add	r3, ip
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	e079      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006dd8:	231b      	movs	r3, #27
 8006dda:	2220      	movs	r2, #32
 8006ddc:	4694      	mov	ip, r2
 8006dde:	44bc      	add	ip, r7
 8006de0:	4463      	add	r3, ip
 8006de2:	2208      	movs	r2, #8
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e071      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006de8:	231b      	movs	r3, #27
 8006dea:	2220      	movs	r2, #32
 8006dec:	4694      	mov	ip, r2
 8006dee:	44bc      	add	ip, r7
 8006df0:	4463      	add	r3, ip
 8006df2:	2210      	movs	r2, #16
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	e069      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a66      	ldr	r2, [pc, #408]	; (8006f98 <UART_SetConfig+0x338>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d107      	bne.n	8006e12 <UART_SetConfig+0x1b2>
 8006e02:	231b      	movs	r3, #27
 8006e04:	2220      	movs	r2, #32
 8006e06:	4694      	mov	ip, r2
 8006e08:	44bc      	add	ip, r7
 8006e0a:	4463      	add	r3, ip
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	e05c      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a61      	ldr	r2, [pc, #388]	; (8006f9c <UART_SetConfig+0x33c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d107      	bne.n	8006e2c <UART_SetConfig+0x1cc>
 8006e1c:	231b      	movs	r3, #27
 8006e1e:	2220      	movs	r2, #32
 8006e20:	4694      	mov	ip, r2
 8006e22:	44bc      	add	ip, r7
 8006e24:	4463      	add	r3, ip
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	e04f      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a54      	ldr	r2, [pc, #336]	; (8006f84 <UART_SetConfig+0x324>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d143      	bne.n	8006ebe <UART_SetConfig+0x25e>
 8006e36:	4b56      	ldr	r3, [pc, #344]	; (8006f90 <UART_SetConfig+0x330>)
 8006e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3a:	23c0      	movs	r3, #192	; 0xc0
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	4013      	ands	r3, r2
 8006e40:	22c0      	movs	r2, #192	; 0xc0
 8006e42:	0112      	lsls	r2, r2, #4
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d02a      	beq.n	8006e9e <UART_SetConfig+0x23e>
 8006e48:	22c0      	movs	r2, #192	; 0xc0
 8006e4a:	0112      	lsls	r2, r2, #4
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d82e      	bhi.n	8006eae <UART_SetConfig+0x24e>
 8006e50:	2280      	movs	r2, #128	; 0x80
 8006e52:	0112      	lsls	r2, r2, #4
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d012      	beq.n	8006e7e <UART_SetConfig+0x21e>
 8006e58:	2280      	movs	r2, #128	; 0x80
 8006e5a:	0112      	lsls	r2, r2, #4
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d826      	bhi.n	8006eae <UART_SetConfig+0x24e>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <UART_SetConfig+0x20e>
 8006e64:	2280      	movs	r2, #128	; 0x80
 8006e66:	00d2      	lsls	r2, r2, #3
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d010      	beq.n	8006e8e <UART_SetConfig+0x22e>
 8006e6c:	e01f      	b.n	8006eae <UART_SetConfig+0x24e>
 8006e6e:	231b      	movs	r3, #27
 8006e70:	2220      	movs	r2, #32
 8006e72:	4694      	mov	ip, r2
 8006e74:	44bc      	add	ip, r7
 8006e76:	4463      	add	r3, ip
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	e026      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006e7e:	231b      	movs	r3, #27
 8006e80:	2220      	movs	r2, #32
 8006e82:	4694      	mov	ip, r2
 8006e84:	44bc      	add	ip, r7
 8006e86:	4463      	add	r3, ip
 8006e88:	2202      	movs	r2, #2
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e01e      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006e8e:	231b      	movs	r3, #27
 8006e90:	2220      	movs	r2, #32
 8006e92:	4694      	mov	ip, r2
 8006e94:	44bc      	add	ip, r7
 8006e96:	4463      	add	r3, ip
 8006e98:	2204      	movs	r2, #4
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	e016      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006e9e:	231b      	movs	r3, #27
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	4694      	mov	ip, r2
 8006ea4:	44bc      	add	ip, r7
 8006ea6:	4463      	add	r3, ip
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e00e      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006eae:	231b      	movs	r3, #27
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	4694      	mov	ip, r2
 8006eb4:	44bc      	add	ip, r7
 8006eb6:	4463      	add	r3, ip
 8006eb8:	2210      	movs	r2, #16
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	e006      	b.n	8006ecc <UART_SetConfig+0x26c>
 8006ebe:	231b      	movs	r3, #27
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	4694      	mov	ip, r2
 8006ec4:	44bc      	add	ip, r7
 8006ec6:	4463      	add	r3, ip
 8006ec8:	2210      	movs	r2, #16
 8006eca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2c      	ldr	r2, [pc, #176]	; (8006f84 <UART_SetConfig+0x324>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d000      	beq.n	8006ed8 <UART_SetConfig+0x278>
 8006ed6:	e0ad      	b.n	8007034 <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ed8:	231b      	movs	r3, #27
 8006eda:	2220      	movs	r2, #32
 8006edc:	4694      	mov	ip, r2
 8006ede:	44bc      	add	ip, r7
 8006ee0:	4463      	add	r3, ip
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d015      	beq.n	8006f14 <UART_SetConfig+0x2b4>
 8006ee8:	dc18      	bgt.n	8006f1c <UART_SetConfig+0x2bc>
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d00d      	beq.n	8006f0a <UART_SetConfig+0x2aa>
 8006eee:	dc15      	bgt.n	8006f1c <UART_SetConfig+0x2bc>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <UART_SetConfig+0x29a>
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d005      	beq.n	8006f04 <UART_SetConfig+0x2a4>
 8006ef8:	e010      	b.n	8006f1c <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006efa:	f7fe fd19 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8006efe:	0003      	movs	r3, r0
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f02:	e015      	b.n	8006f30 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f04:	4b26      	ldr	r3, [pc, #152]	; (8006fa0 <UART_SetConfig+0x340>)
 8006f06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f08:	e012      	b.n	8006f30 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0a:	f7fe fc85 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8006f0e:	0003      	movs	r3, r0
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f12:	e00d      	b.n	8006f30 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f14:	2380      	movs	r3, #128	; 0x80
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f1a:	e009      	b.n	8006f30 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f20:	231a      	movs	r3, #26
 8006f22:	2220      	movs	r2, #32
 8006f24:	4694      	mov	ip, r2
 8006f26:	44bc      	add	ip, r7
 8006f28:	4463      	add	r3, ip
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	701a      	strb	r2, [r3, #0]
        break;
 8006f2e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d100      	bne.n	8006f38 <UART_SetConfig+0x2d8>
 8006f36:	e154      	b.n	80071e2 <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <UART_SetConfig+0x344>)
 8006f3e:	0052      	lsls	r2, r2, #1
 8006f40:	5ad3      	ldrh	r3, [r2, r3]
 8006f42:	0019      	movs	r1, r3
 8006f44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f46:	f7f9 f8fb 	bl	8000140 <__udivsi3>
 8006f4a:	0003      	movs	r3, r0
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	0013      	movs	r3, r2
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d305      	bcc.n	8006f6a <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d91e      	bls.n	8006fa8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006f6a:	231a      	movs	r3, #26
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	4694      	mov	ip, r2
 8006f70:	44bc      	add	ip, r7
 8006f72:	4463      	add	r3, ip
 8006f74:	2201      	movs	r2, #1
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e133      	b.n	80071e2 <UART_SetConfig+0x582>
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	cfff69f3 	.word	0xcfff69f3
 8006f80:	ffffcfff 	.word	0xffffcfff
 8006f84:	40008000 	.word	0x40008000
 8006f88:	11fff4ff 	.word	0x11fff4ff
 8006f8c:	40013800 	.word	0x40013800
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40004400 	.word	0x40004400
 8006f98:	40004800 	.word	0x40004800
 8006f9c:	40004c00 	.word	0x40004c00
 8006fa0:	00f42400 	.word	0x00f42400
 8006fa4:	0800cdd0 	.word	0x0800cdd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fb4:	4b97      	ldr	r3, [pc, #604]	; (8007214 <UART_SetConfig+0x5b4>)
 8006fb6:	0052      	lsls	r2, r2, #1
 8006fb8:	5ad3      	ldrh	r3, [r2, r3]
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	69b8      	ldr	r0, [r7, #24]
 8006fc6:	69f9      	ldr	r1, [r7, #28]
 8006fc8:	f7f9 fa6e 	bl	80004a8 <__aeabi_uldivmod>
 8006fcc:	0002      	movs	r2, r0
 8006fce:	000b      	movs	r3, r1
 8006fd0:	0e11      	lsrs	r1, r2, #24
 8006fd2:	021d      	lsls	r5, r3, #8
 8006fd4:	430d      	orrs	r5, r1
 8006fd6:	0214      	lsls	r4, r2, #8
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	085b      	lsrs	r3, r3, #1
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	68b8      	ldr	r0, [r7, #8]
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	1900      	adds	r0, r0, r4
 8006fea:	4169      	adcs	r1, r5
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	607b      	str	r3, [r7, #4]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f7f9 fa55 	bl	80004a8 <__aeabi_uldivmod>
 8006ffe:	0002      	movs	r2, r0
 8007000:	000b      	movs	r3, r1
 8007002:	0013      	movs	r3, r2
 8007004:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007008:	23c0      	movs	r3, #192	; 0xc0
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	429a      	cmp	r2, r3
 800700e:	d309      	bcc.n	8007024 <UART_SetConfig+0x3c4>
 8007010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007012:	2380      	movs	r3, #128	; 0x80
 8007014:	035b      	lsls	r3, r3, #13
 8007016:	429a      	cmp	r2, r3
 8007018:	d204      	bcs.n	8007024 <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	e0de      	b.n	80071e2 <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 8007024:	231a      	movs	r3, #26
 8007026:	2220      	movs	r2, #32
 8007028:	4694      	mov	ip, r2
 800702a:	44bc      	add	ip, r7
 800702c:	4463      	add	r3, ip
 800702e:	2201      	movs	r2, #1
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e0d6      	b.n	80071e2 <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	429a      	cmp	r2, r3
 800703e:	d000      	beq.n	8007042 <UART_SetConfig+0x3e2>
 8007040:	e074      	b.n	800712c <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 8007042:	231b      	movs	r3, #27
 8007044:	2220      	movs	r2, #32
 8007046:	4694      	mov	ip, r2
 8007048:	44bc      	add	ip, r7
 800704a:	4463      	add	r3, ip
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b08      	cmp	r3, #8
 8007050:	d015      	beq.n	800707e <UART_SetConfig+0x41e>
 8007052:	dc18      	bgt.n	8007086 <UART_SetConfig+0x426>
 8007054:	2b04      	cmp	r3, #4
 8007056:	d00d      	beq.n	8007074 <UART_SetConfig+0x414>
 8007058:	dc15      	bgt.n	8007086 <UART_SetConfig+0x426>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <UART_SetConfig+0x404>
 800705e:	2b02      	cmp	r3, #2
 8007060:	d005      	beq.n	800706e <UART_SetConfig+0x40e>
 8007062:	e010      	b.n	8007086 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fe fc64 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8007068:	0003      	movs	r3, r0
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800706c:	e015      	b.n	800709a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800706e:	4b6a      	ldr	r3, [pc, #424]	; (8007218 <UART_SetConfig+0x5b8>)
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007072:	e012      	b.n	800709a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007074:	f7fe fbd0 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8007078:	0003      	movs	r3, r0
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800707c:	e00d      	b.n	800709a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707e:	2380      	movs	r3, #128	; 0x80
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007084:	e009      	b.n	800709a <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800708a:	231a      	movs	r3, #26
 800708c:	2220      	movs	r2, #32
 800708e:	4694      	mov	ip, r2
 8007090:	44bc      	add	ip, r7
 8007092:	4463      	add	r3, ip
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
        break;
 8007098:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	2b00      	cmp	r3, #0
 800709e:	d100      	bne.n	80070a2 <UART_SetConfig+0x442>
 80070a0:	e09f      	b.n	80071e2 <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070a6:	4b5b      	ldr	r3, [pc, #364]	; (8007214 <UART_SetConfig+0x5b4>)
 80070a8:	0052      	lsls	r2, r2, #1
 80070aa:	5ad3      	ldrh	r3, [r2, r3]
 80070ac:	0019      	movs	r1, r3
 80070ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070b0:	f7f9 f846 	bl	8000140 <__udivsi3>
 80070b4:	0003      	movs	r3, r0
 80070b6:	005a      	lsls	r2, r3, #1
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	18d2      	adds	r2, r2, r3
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	0019      	movs	r1, r3
 80070c6:	0010      	movs	r0, r2
 80070c8:	f7f9 f83a 	bl	8000140 <__udivsi3>
 80070cc:	0003      	movs	r3, r0
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	2b0f      	cmp	r3, #15
 80070d6:	d921      	bls.n	800711c <UART_SetConfig+0x4bc>
 80070d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	025b      	lsls	r3, r3, #9
 80070de:	429a      	cmp	r2, r3
 80070e0:	d21c      	bcs.n	800711c <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	200e      	movs	r0, #14
 80070e8:	2420      	movs	r4, #32
 80070ea:	193b      	adds	r3, r7, r4
 80070ec:	181b      	adds	r3, r3, r0
 80070ee:	210f      	movs	r1, #15
 80070f0:	438a      	bics	r2, r1
 80070f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2207      	movs	r2, #7
 80070fc:	4013      	ands	r3, r2
 80070fe:	b299      	uxth	r1, r3
 8007100:	193b      	adds	r3, r7, r4
 8007102:	181b      	adds	r3, r3, r0
 8007104:	193a      	adds	r2, r7, r4
 8007106:	1812      	adds	r2, r2, r0
 8007108:	8812      	ldrh	r2, [r2, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	193a      	adds	r2, r7, r4
 8007114:	1812      	adds	r2, r2, r0
 8007116:	8812      	ldrh	r2, [r2, #0]
 8007118:	60da      	str	r2, [r3, #12]
 800711a:	e062      	b.n	80071e2 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 800711c:	231a      	movs	r3, #26
 800711e:	2220      	movs	r2, #32
 8007120:	4694      	mov	ip, r2
 8007122:	44bc      	add	ip, r7
 8007124:	4463      	add	r3, ip
 8007126:	2201      	movs	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e05a      	b.n	80071e2 <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 800712c:	231b      	movs	r3, #27
 800712e:	2220      	movs	r2, #32
 8007130:	4694      	mov	ip, r2
 8007132:	44bc      	add	ip, r7
 8007134:	4463      	add	r3, ip
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b08      	cmp	r3, #8
 800713a:	d015      	beq.n	8007168 <UART_SetConfig+0x508>
 800713c:	dc18      	bgt.n	8007170 <UART_SetConfig+0x510>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d00d      	beq.n	800715e <UART_SetConfig+0x4fe>
 8007142:	dc15      	bgt.n	8007170 <UART_SetConfig+0x510>
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <UART_SetConfig+0x4ee>
 8007148:	2b02      	cmp	r3, #2
 800714a:	d005      	beq.n	8007158 <UART_SetConfig+0x4f8>
 800714c:	e010      	b.n	8007170 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800714e:	f7fe fbef 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8007152:	0003      	movs	r3, r0
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007156:	e015      	b.n	8007184 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007158:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <UART_SetConfig+0x5b8>)
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800715c:	e012      	b.n	8007184 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715e:	f7fe fb5b 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8007162:	0003      	movs	r3, r0
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007166:	e00d      	b.n	8007184 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800716e:	e009      	b.n	8007184 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007174:	231a      	movs	r3, #26
 8007176:	2220      	movs	r2, #32
 8007178:	4694      	mov	ip, r2
 800717a:	44bc      	add	ip, r7
 800717c:	4463      	add	r3, ip
 800717e:	2201      	movs	r2, #1
 8007180:	701a      	strb	r2, [r3, #0]
        break;
 8007182:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	2b00      	cmp	r3, #0
 8007188:	d02b      	beq.n	80071e2 <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800718e:	4b21      	ldr	r3, [pc, #132]	; (8007214 <UART_SetConfig+0x5b4>)
 8007190:	0052      	lsls	r2, r2, #1
 8007192:	5ad3      	ldrh	r3, [r2, r3]
 8007194:	0019      	movs	r1, r3
 8007196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007198:	f7f8 ffd2 	bl	8000140 <__udivsi3>
 800719c:	0003      	movs	r3, r0
 800719e:	001a      	movs	r2, r3
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	18d2      	adds	r2, r2, r3
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	0019      	movs	r1, r3
 80071ae:	0010      	movs	r0, r2
 80071b0:	f7f8 ffc6 	bl	8000140 <__udivsi3>
 80071b4:	0003      	movs	r3, r0
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	d909      	bls.n	80071d4 <UART_SetConfig+0x574>
 80071c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c2:	2380      	movs	r3, #128	; 0x80
 80071c4:	025b      	lsls	r3, r3, #9
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d204      	bcs.n	80071d4 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d0:	60da      	str	r2, [r3, #12]
 80071d2:	e006      	b.n	80071e2 <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 80071d4:	231a      	movs	r3, #26
 80071d6:	2220      	movs	r2, #32
 80071d8:	4694      	mov	ip, r2
 80071da:	44bc      	add	ip, r7
 80071dc:	4463      	add	r3, ip
 80071de:	2201      	movs	r2, #1
 80071e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	226a      	movs	r2, #106	; 0x6a
 80071e6:	2101      	movs	r1, #1
 80071e8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	2268      	movs	r2, #104	; 0x68
 80071ee:	2101      	movs	r1, #1
 80071f0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	2200      	movs	r2, #0
 80071f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	2200      	movs	r2, #0
 80071fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071fe:	231a      	movs	r3, #26
 8007200:	2220      	movs	r2, #32
 8007202:	4694      	mov	ip, r2
 8007204:	44bc      	add	ip, r7
 8007206:	4463      	add	r3, ip
 8007208:	781b      	ldrb	r3, [r3, #0]
}
 800720a:	0018      	movs	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	b010      	add	sp, #64	; 0x40
 8007210:	bdb0      	pop	{r4, r5, r7, pc}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	0800cdd0 	.word	0x0800cdd0
 8007218:	00f42400 	.word	0x00f42400

0800721c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	2201      	movs	r2, #1
 800722a:	4013      	ands	r3, r2
 800722c:	d00b      	beq.n	8007246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	4a4a      	ldr	r2, [pc, #296]	; (8007360 <UART_AdvFeatureConfig+0x144>)
 8007236:	4013      	ands	r3, r2
 8007238:	0019      	movs	r1, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	2202      	movs	r2, #2
 800724c:	4013      	ands	r3, r2
 800724e:	d00b      	beq.n	8007268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	4a43      	ldr	r2, [pc, #268]	; (8007364 <UART_AdvFeatureConfig+0x148>)
 8007258:	4013      	ands	r3, r2
 800725a:	0019      	movs	r1, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	2204      	movs	r2, #4
 800726e:	4013      	ands	r3, r2
 8007270:	d00b      	beq.n	800728a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	4a3b      	ldr	r2, [pc, #236]	; (8007368 <UART_AdvFeatureConfig+0x14c>)
 800727a:	4013      	ands	r3, r2
 800727c:	0019      	movs	r1, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	2208      	movs	r2, #8
 8007290:	4013      	ands	r3, r2
 8007292:	d00b      	beq.n	80072ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	4a34      	ldr	r2, [pc, #208]	; (800736c <UART_AdvFeatureConfig+0x150>)
 800729c:	4013      	ands	r3, r2
 800729e:	0019      	movs	r1, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	2210      	movs	r2, #16
 80072b2:	4013      	ands	r3, r2
 80072b4:	d00b      	beq.n	80072ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4a2c      	ldr	r2, [pc, #176]	; (8007370 <UART_AdvFeatureConfig+0x154>)
 80072be:	4013      	ands	r3, r2
 80072c0:	0019      	movs	r1, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	2220      	movs	r2, #32
 80072d4:	4013      	ands	r3, r2
 80072d6:	d00b      	beq.n	80072f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	4a25      	ldr	r2, [pc, #148]	; (8007374 <UART_AdvFeatureConfig+0x158>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	0019      	movs	r1, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	2240      	movs	r2, #64	; 0x40
 80072f6:	4013      	ands	r3, r2
 80072f8:	d01d      	beq.n	8007336 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <UART_AdvFeatureConfig+0x15c>)
 8007302:	4013      	ands	r3, r2
 8007304:	0019      	movs	r1, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	2380      	movs	r3, #128	; 0x80
 8007318:	035b      	lsls	r3, r3, #13
 800731a:	429a      	cmp	r2, r3
 800731c:	d10b      	bne.n	8007336 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a15      	ldr	r2, [pc, #84]	; (800737c <UART_AdvFeatureConfig+0x160>)
 8007326:	4013      	ands	r3, r2
 8007328:	0019      	movs	r1, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733a:	2280      	movs	r2, #128	; 0x80
 800733c:	4013      	ands	r3, r2
 800733e:	d00b      	beq.n	8007358 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4a0e      	ldr	r2, [pc, #56]	; (8007380 <UART_AdvFeatureConfig+0x164>)
 8007348:	4013      	ands	r3, r2
 800734a:	0019      	movs	r1, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	46bd      	mov	sp, r7
 800735c:	b002      	add	sp, #8
 800735e:	bd80      	pop	{r7, pc}
 8007360:	fffdffff 	.word	0xfffdffff
 8007364:	fffeffff 	.word	0xfffeffff
 8007368:	fffbffff 	.word	0xfffbffff
 800736c:	ffff7fff 	.word	0xffff7fff
 8007370:	ffffefff 	.word	0xffffefff
 8007374:	ffffdfff 	.word	0xffffdfff
 8007378:	ffefffff 	.word	0xffefffff
 800737c:	ff9fffff 	.word	0xff9fffff
 8007380:	fff7ffff 	.word	0xfff7ffff

08007384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af02      	add	r7, sp, #8
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	228c      	movs	r2, #140	; 0x8c
 8007390:	2100      	movs	r1, #0
 8007392:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007394:	f7fb ff14 	bl	80031c0 <HAL_GetTick>
 8007398:	0003      	movs	r3, r0
 800739a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2208      	movs	r2, #8
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b08      	cmp	r3, #8
 80073a8:	d10c      	bne.n	80073c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2280      	movs	r2, #128	; 0x80
 80073ae:	0391      	lsls	r1, r2, #14
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <UART_CheckIdleState+0x90>)
 80073b4:	9200      	str	r2, [sp, #0]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f000 f82e 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 80073bc:	1e03      	subs	r3, r0, #0
 80073be:	d001      	beq.n	80073c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e023      	b.n	800740c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2204      	movs	r2, #4
 80073cc:	4013      	ands	r3, r2
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d10c      	bne.n	80073ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2280      	movs	r2, #128	; 0x80
 80073d6:	03d1      	lsls	r1, r2, #15
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4a0e      	ldr	r2, [pc, #56]	; (8007414 <UART_CheckIdleState+0x90>)
 80073dc:	9200      	str	r2, [sp, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	f000 f81a 	bl	8007418 <UART_WaitOnFlagUntilTimeout>
 80073e4:	1e03      	subs	r3, r0, #0
 80073e6:	d001      	beq.n	80073ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e00f      	b.n	800740c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2284      	movs	r2, #132	; 0x84
 80073f0:	2120      	movs	r1, #32
 80073f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2288      	movs	r2, #136	; 0x88
 80073f8:	2120      	movs	r1, #32
 80073fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2280      	movs	r2, #128	; 0x80
 8007406:	2100      	movs	r1, #0
 8007408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	b004      	add	sp, #16
 8007412:	bd80      	pop	{r7, pc}
 8007414:	01ffffff 	.word	0x01ffffff

08007418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b094      	sub	sp, #80	; 0x50
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	1dfb      	adds	r3, r7, #7
 8007426:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007428:	e0a7      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800742c:	3301      	adds	r3, #1
 800742e:	d100      	bne.n	8007432 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007430:	e0a3      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007432:	f7fb fec5 	bl	80031c0 <HAL_GetTick>
 8007436:	0002      	movs	r2, r0
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <UART_WaitOnFlagUntilTimeout+0x30>
 8007442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007444:	2b00      	cmp	r3, #0
 8007446:	d13f      	bne.n	80074c8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007448:	f3ef 8310 	mrs	r3, PRIMASK
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
 8007452:	2301      	movs	r3, #1
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	f383 8810 	msr	PRIMASK, r3
}
 800745c:	46c0      	nop			; (mov r8, r8)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	494e      	ldr	r1, [pc, #312]	; (80075a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800746a:	400a      	ands	r2, r1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007470:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	f383 8810 	msr	PRIMASK, r3
}
 8007478:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800747a:	f3ef 8310 	mrs	r3, PRIMASK
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007482:	643b      	str	r3, [r7, #64]	; 0x40
 8007484:	2301      	movs	r3, #1
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f383 8810 	msr	PRIMASK, r3
}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2101      	movs	r1, #1
 800749c:	438a      	bics	r2, r1
 800749e:	609a      	str	r2, [r3, #8]
 80074a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a6:	f383 8810 	msr	PRIMASK, r3
}
 80074aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2284      	movs	r2, #132	; 0x84
 80074b0:	2120      	movs	r1, #32
 80074b2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2288      	movs	r2, #136	; 0x88
 80074b8:	2120      	movs	r1, #32
 80074ba:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	2100      	movs	r1, #0
 80074c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e069      	b.n	800759c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2204      	movs	r2, #4
 80074d0:	4013      	ands	r3, r2
 80074d2:	d052      	beq.n	800757a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69da      	ldr	r2, [r3, #28]
 80074da:	2380      	movs	r3, #128	; 0x80
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	401a      	ands	r2, r3
 80074e0:	2380      	movs	r3, #128	; 0x80
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d148      	bne.n	800757a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2280      	movs	r2, #128	; 0x80
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f2:	f3ef 8310 	mrs	r3, PRIMASK
 80074f6:	613b      	str	r3, [r7, #16]
  return(result);
 80074f8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fc:	2301      	movs	r3, #1
 80074fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f383 8810 	msr	PRIMASK, r3
}
 8007506:	46c0      	nop			; (mov r8, r8)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4924      	ldr	r1, [pc, #144]	; (80075a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007514:	400a      	ands	r2, r1
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f383 8810 	msr	PRIMASK, r3
}
 8007522:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007524:	f3ef 8310 	mrs	r3, PRIMASK
 8007528:	61fb      	str	r3, [r7, #28]
  return(result);
 800752a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752c:	64bb      	str	r3, [r7, #72]	; 0x48
 800752e:	2301      	movs	r3, #1
 8007530:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f383 8810 	msr	PRIMASK, r3
}
 8007538:	46c0      	nop			; (mov r8, r8)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2101      	movs	r1, #1
 8007546:	438a      	bics	r2, r1
 8007548:	609a      	str	r2, [r3, #8]
 800754a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	f383 8810 	msr	PRIMASK, r3
}
 8007554:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2284      	movs	r2, #132	; 0x84
 800755a:	2120      	movs	r1, #32
 800755c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2288      	movs	r2, #136	; 0x88
 8007562:	2120      	movs	r1, #32
 8007564:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	228c      	movs	r2, #140	; 0x8c
 800756a:	2120      	movs	r1, #32
 800756c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2280      	movs	r2, #128	; 0x80
 8007572:	2100      	movs	r1, #0
 8007574:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e010      	b.n	800759c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	425a      	negs	r2, r3
 800758a:	4153      	adcs	r3, r2
 800758c:	b2db      	uxtb	r3, r3
 800758e:	001a      	movs	r2, r3
 8007590:	1dfb      	adds	r3, r7, #7
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d100      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0x182>
 8007598:	e747      	b.n	800742a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b014      	add	sp, #80	; 0x50
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	fffffe5f 	.word	0xfffffe5f

080075a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2280      	movs	r2, #128	; 0x80
 80075b4:	5c9b      	ldrb	r3, [r3, r2]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_UARTEx_DisableFifoMode+0x16>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e027      	b.n	800760e <HAL_UARTEx_DisableFifoMode+0x66>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2280      	movs	r2, #128	; 0x80
 80075c2:	2101      	movs	r1, #1
 80075c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2284      	movs	r2, #132	; 0x84
 80075ca:	2124      	movs	r1, #36	; 0x24
 80075cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2101      	movs	r1, #1
 80075e2:	438a      	bics	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4a0b      	ldr	r2, [pc, #44]	; (8007618 <HAL_UARTEx_DisableFifoMode+0x70>)
 80075ea:	4013      	ands	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2284      	movs	r2, #132	; 0x84
 8007600:	2120      	movs	r1, #32
 8007602:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2280      	movs	r2, #128	; 0x80
 8007608:	2100      	movs	r1, #0
 800760a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	0018      	movs	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	b004      	add	sp, #16
 8007614:	bd80      	pop	{r7, pc}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	dfffffff 	.word	0xdfffffff

0800761c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2280      	movs	r2, #128	; 0x80
 800762a:	5c9b      	ldrb	r3, [r3, r2]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e02e      	b.n	8007692 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	2101      	movs	r1, #1
 800763a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2284      	movs	r2, #132	; 0x84
 8007640:	2124      	movs	r1, #36	; 0x24
 8007642:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2101      	movs	r1, #1
 8007658:	438a      	bics	r2, r1
 800765a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	08d9      	lsrs	r1, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	0018      	movs	r0, r3
 8007674:	f000 f854 	bl	8007720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2284      	movs	r2, #132	; 0x84
 8007684:	2120      	movs	r1, #32
 8007686:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2280      	movs	r2, #128	; 0x80
 800768c:	2100      	movs	r1, #0
 800768e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b004      	add	sp, #16
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2280      	movs	r2, #128	; 0x80
 80076aa:	5c9b      	ldrb	r3, [r3, r2]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e02f      	b.n	8007714 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2280      	movs	r2, #128	; 0x80
 80076b8:	2101      	movs	r1, #1
 80076ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2284      	movs	r2, #132	; 0x84
 80076c0:	2124      	movs	r1, #36	; 0x24
 80076c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2101      	movs	r1, #1
 80076d8:	438a      	bics	r2, r1
 80076da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	4a0e      	ldr	r2, [pc, #56]	; (800771c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	0019      	movs	r1, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f000 f813 	bl	8007720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2284      	movs	r2, #132	; 0x84
 8007706:	2120      	movs	r1, #32
 8007708:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	2100      	movs	r1, #0
 8007710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	0018      	movs	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	b004      	add	sp, #16
 800771a:	bd80      	pop	{r7, pc}
 800771c:	f1ffffff 	.word	0xf1ffffff

08007720 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	226a      	movs	r2, #106	; 0x6a
 8007734:	2101      	movs	r1, #1
 8007736:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2268      	movs	r2, #104	; 0x68
 800773c:	2101      	movs	r1, #1
 800773e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007740:	e043      	b.n	80077ca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007742:	260f      	movs	r6, #15
 8007744:	19bb      	adds	r3, r7, r6
 8007746:	2208      	movs	r2, #8
 8007748:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800774a:	200e      	movs	r0, #14
 800774c:	183b      	adds	r3, r7, r0
 800774e:	2208      	movs	r2, #8
 8007750:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	0e5b      	lsrs	r3, r3, #25
 800775a:	b2da      	uxtb	r2, r3
 800775c:	240d      	movs	r4, #13
 800775e:	193b      	adds	r3, r7, r4
 8007760:	2107      	movs	r1, #7
 8007762:	400a      	ands	r2, r1
 8007764:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	0f5b      	lsrs	r3, r3, #29
 800776e:	b2da      	uxtb	r2, r3
 8007770:	250c      	movs	r5, #12
 8007772:	197b      	adds	r3, r7, r5
 8007774:	2107      	movs	r1, #7
 8007776:	400a      	ands	r2, r1
 8007778:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800777a:	183b      	adds	r3, r7, r0
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	197a      	adds	r2, r7, r5
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	4914      	ldr	r1, [pc, #80]	; (80077d4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007784:	5c8a      	ldrb	r2, [r1, r2]
 8007786:	435a      	muls	r2, r3
 8007788:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800778a:	197b      	adds	r3, r7, r5
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007790:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007792:	0019      	movs	r1, r3
 8007794:	f7f8 fd5e 	bl	8000254 <__divsi3>
 8007798:	0003      	movs	r3, r0
 800779a:	b299      	uxth	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	226a      	movs	r2, #106	; 0x6a
 80077a0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a2:	19bb      	adds	r3, r7, r6
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	193a      	adds	r2, r7, r4
 80077a8:	7812      	ldrb	r2, [r2, #0]
 80077aa:	490a      	ldr	r1, [pc, #40]	; (80077d4 <UARTEx_SetNbDataToProcess+0xb4>)
 80077ac:	5c8a      	ldrb	r2, [r1, r2]
 80077ae:	435a      	muls	r2, r3
 80077b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80077b2:	193b      	adds	r3, r7, r4
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <UARTEx_SetNbDataToProcess+0xb8>)
 80077b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ba:	0019      	movs	r1, r3
 80077bc:	f7f8 fd4a 	bl	8000254 <__divsi3>
 80077c0:	0003      	movs	r3, r0
 80077c2:	b299      	uxth	r1, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2268      	movs	r2, #104	; 0x68
 80077c8:	5299      	strh	r1, [r3, r2]
}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	46bd      	mov	sp, r7
 80077ce:	b005      	add	sp, #20
 80077d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d2:	46c0      	nop			; (mov r8, r8)
 80077d4:	0800cde8 	.word	0x0800cde8
 80077d8:	0800cdf0 	.word	0x0800cdf0

080077dc <__NVIC_SetPriority>:
{
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	0002      	movs	r2, r0
 80077e4:	6039      	str	r1, [r7, #0]
 80077e6:	1dfb      	adds	r3, r7, #7
 80077e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80077ea:	1dfb      	adds	r3, r7, #7
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b7f      	cmp	r3, #127	; 0x7f
 80077f0:	d828      	bhi.n	8007844 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077f2:	4a2f      	ldr	r2, [pc, #188]	; (80078b0 <__NVIC_SetPriority+0xd4>)
 80077f4:	1dfb      	adds	r3, r7, #7
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b25b      	sxtb	r3, r3
 80077fa:	089b      	lsrs	r3, r3, #2
 80077fc:	33c0      	adds	r3, #192	; 0xc0
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	589b      	ldr	r3, [r3, r2]
 8007802:	1dfa      	adds	r2, r7, #7
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	0011      	movs	r1, r2
 8007808:	2203      	movs	r2, #3
 800780a:	400a      	ands	r2, r1
 800780c:	00d2      	lsls	r2, r2, #3
 800780e:	21ff      	movs	r1, #255	; 0xff
 8007810:	4091      	lsls	r1, r2
 8007812:	000a      	movs	r2, r1
 8007814:	43d2      	mvns	r2, r2
 8007816:	401a      	ands	r2, r3
 8007818:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	019b      	lsls	r3, r3, #6
 800781e:	22ff      	movs	r2, #255	; 0xff
 8007820:	401a      	ands	r2, r3
 8007822:	1dfb      	adds	r3, r7, #7
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	0018      	movs	r0, r3
 8007828:	2303      	movs	r3, #3
 800782a:	4003      	ands	r3, r0
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007830:	481f      	ldr	r0, [pc, #124]	; (80078b0 <__NVIC_SetPriority+0xd4>)
 8007832:	1dfb      	adds	r3, r7, #7
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	b25b      	sxtb	r3, r3
 8007838:	089b      	lsrs	r3, r3, #2
 800783a:	430a      	orrs	r2, r1
 800783c:	33c0      	adds	r3, #192	; 0xc0
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	501a      	str	r2, [r3, r0]
}
 8007842:	e031      	b.n	80078a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007844:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <__NVIC_SetPriority+0xd8>)
 8007846:	1dfb      	adds	r3, r7, #7
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	0019      	movs	r1, r3
 800784c:	230f      	movs	r3, #15
 800784e:	400b      	ands	r3, r1
 8007850:	3b08      	subs	r3, #8
 8007852:	089b      	lsrs	r3, r3, #2
 8007854:	3306      	adds	r3, #6
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	18d3      	adds	r3, r2, r3
 800785a:	3304      	adds	r3, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1dfa      	adds	r2, r7, #7
 8007860:	7812      	ldrb	r2, [r2, #0]
 8007862:	0011      	movs	r1, r2
 8007864:	2203      	movs	r2, #3
 8007866:	400a      	ands	r2, r1
 8007868:	00d2      	lsls	r2, r2, #3
 800786a:	21ff      	movs	r1, #255	; 0xff
 800786c:	4091      	lsls	r1, r2
 800786e:	000a      	movs	r2, r1
 8007870:	43d2      	mvns	r2, r2
 8007872:	401a      	ands	r2, r3
 8007874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	019b      	lsls	r3, r3, #6
 800787a:	22ff      	movs	r2, #255	; 0xff
 800787c:	401a      	ands	r2, r3
 800787e:	1dfb      	adds	r3, r7, #7
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	0018      	movs	r0, r3
 8007884:	2303      	movs	r3, #3
 8007886:	4003      	ands	r3, r0
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800788c:	4809      	ldr	r0, [pc, #36]	; (80078b4 <__NVIC_SetPriority+0xd8>)
 800788e:	1dfb      	adds	r3, r7, #7
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	001c      	movs	r4, r3
 8007894:	230f      	movs	r3, #15
 8007896:	4023      	ands	r3, r4
 8007898:	3b08      	subs	r3, #8
 800789a:	089b      	lsrs	r3, r3, #2
 800789c:	430a      	orrs	r2, r1
 800789e:	3306      	adds	r3, #6
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	18c3      	adds	r3, r0, r3
 80078a4:	3304      	adds	r3, #4
 80078a6:	601a      	str	r2, [r3, #0]
}
 80078a8:	46c0      	nop			; (mov r8, r8)
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b003      	add	sp, #12
 80078ae:	bd90      	pop	{r4, r7, pc}
 80078b0:	e000e100 	.word	0xe000e100
 80078b4:	e000ed00 	.word	0xe000ed00

080078b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078bc:	2305      	movs	r3, #5
 80078be:	425b      	negs	r3, r3
 80078c0:	2100      	movs	r1, #0
 80078c2:	0018      	movs	r0, r3
 80078c4:	f7ff ff8a 	bl	80077dc <__NVIC_SetPriority>
#endif
}
 80078c8:	46c0      	nop			; (mov r8, r8)
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d6:	f3ef 8305 	mrs	r3, IPSR
 80078da:	603b      	str	r3, [r7, #0]
  return(result);
 80078dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80078e2:	2306      	movs	r3, #6
 80078e4:	425b      	negs	r3, r3
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	e00c      	b.n	8007904 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <osKernelInitialize+0x40>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078f2:	4b07      	ldr	r3, [pc, #28]	; (8007910 <osKernelInitialize+0x40>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	607b      	str	r3, [r7, #4]
 80078fc:	e002      	b.n	8007904 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078fe:	2301      	movs	r3, #1
 8007900:	425b      	negs	r3, r3
 8007902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007904:	687b      	ldr	r3, [r7, #4]
}
 8007906:	0018      	movs	r0, r3
 8007908:	46bd      	mov	sp, r7
 800790a:	b002      	add	sp, #8
 800790c:	bd80      	pop	{r7, pc}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	20000200 	.word	0x20000200

08007914 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800791a:	f3ef 8305 	mrs	r3, IPSR
 800791e:	603b      	str	r3, [r7, #0]
  return(result);
 8007920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007926:	2306      	movs	r3, #6
 8007928:	425b      	negs	r3, r3
 800792a:	607b      	str	r3, [r7, #4]
 800792c:	e010      	b.n	8007950 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800792e:	4b0b      	ldr	r3, [pc, #44]	; (800795c <osKernelStart+0x48>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d109      	bne.n	800794a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007936:	f7ff ffbf 	bl	80078b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800793a:	4b08      	ldr	r3, [pc, #32]	; (800795c <osKernelStart+0x48>)
 800793c:	2202      	movs	r2, #2
 800793e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007940:	f000 ff6e 	bl	8008820 <vTaskStartScheduler>
      stat = osOK;
 8007944:	2300      	movs	r3, #0
 8007946:	607b      	str	r3, [r7, #4]
 8007948:	e002      	b.n	8007950 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800794a:	2301      	movs	r3, #1
 800794c:	425b      	negs	r3, r3
 800794e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007950:	687b      	ldr	r3, [r7, #4]
}
 8007952:	0018      	movs	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	b002      	add	sp, #8
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	20000200 	.word	0x20000200

08007960 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007960:	b5b0      	push	{r4, r5, r7, lr}
 8007962:	b08e      	sub	sp, #56	; 0x38
 8007964:	af04      	add	r7, sp, #16
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007970:	f3ef 8305 	mrs	r3, IPSR
 8007974:	617b      	str	r3, [r7, #20]
  return(result);
 8007976:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007978:	2b00      	cmp	r3, #0
 800797a:	d000      	beq.n	800797e <osThreadNew+0x1e>
 800797c:	e081      	b.n	8007a82 <osThreadNew+0x122>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d100      	bne.n	8007986 <osThreadNew+0x26>
 8007984:	e07d      	b.n	8007a82 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8007986:	2380      	movs	r3, #128	; 0x80
 8007988:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800798a:	2318      	movs	r3, #24
 800798c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007992:	2301      	movs	r3, #1
 8007994:	425b      	negs	r3, r3
 8007996:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d044      	beq.n	8007a28 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <osThreadNew+0x4c>
        name = attr->name;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <osThreadNew+0x70>
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	2b38      	cmp	r3, #56	; 0x38
 80079c4:	d804      	bhi.n	80079d0 <osThreadNew+0x70>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	4013      	ands	r3, r2
 80079ce:	d001      	beq.n	80079d4 <osThreadNew+0x74>
        return (NULL);
 80079d0:	2300      	movs	r3, #0
 80079d2:	e057      	b.n	8007a84 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	089b      	lsrs	r3, r3, #2
 80079e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00e      	beq.n	8007a0a <osThreadNew+0xaa>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b5b      	cmp	r3, #91	; 0x5b
 80079f2:	d90a      	bls.n	8007a0a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d006      	beq.n	8007a0a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <osThreadNew+0xaa>
        mem = 1;
 8007a04:	2301      	movs	r3, #1
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	e010      	b.n	8007a2c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10c      	bne.n	8007a2c <osThreadNew+0xcc>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d108      	bne.n	8007a2c <osThreadNew+0xcc>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d104      	bne.n	8007a2c <osThreadNew+0xcc>
          mem = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e001      	b.n	8007a2c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d112      	bne.n	8007a58 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a3a:	68bd      	ldr	r5, [r7, #8]
 8007a3c:	6a3c      	ldr	r4, [r7, #32]
 8007a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	9302      	str	r3, [sp, #8]
 8007a44:	9201      	str	r2, [sp, #4]
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	002b      	movs	r3, r5
 8007a4c:	0022      	movs	r2, r4
 8007a4e:	f000 fd3e 	bl	80084ce <xTaskCreateStatic>
 8007a52:	0003      	movs	r3, r0
 8007a54:	613b      	str	r3, [r7, #16]
 8007a56:	e014      	b.n	8007a82 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d111      	bne.n	8007a82 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68bc      	ldr	r4, [r7, #8]
 8007a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	2310      	movs	r3, #16
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	0023      	movs	r3, r4
 8007a74:	f000 fd6f 	bl	8008556 <xTaskCreate>
 8007a78:	0003      	movs	r3, r0
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d001      	beq.n	8007a82 <osThreadNew+0x122>
            hTask = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a82:	693b      	ldr	r3, [r7, #16]
}
 8007a84:	0018      	movs	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	b00a      	add	sp, #40	; 0x28
 8007a8a:	bdb0      	pop	{r4, r5, r7, pc}

08007a8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a94:	f3ef 8305 	mrs	r3, IPSR
 8007a98:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <osDelay+0x1c>
    stat = osErrorISR;
 8007aa0:	2306      	movs	r3, #6
 8007aa2:	425b      	negs	r3, r3
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	e008      	b.n	8007aba <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <osDelay+0x2e>
      vTaskDelay(ticks);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f000 fe8d 	bl	80087d4 <vTaskDelay>
    }
  }

  return (stat);
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	0018      	movs	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b004      	add	sp, #16
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a06      	ldr	r2, [pc, #24]	; (8007aec <vApplicationGetIdleTaskMemory+0x28>)
 8007ad4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4a05      	ldr	r2, [pc, #20]	; (8007af0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ada:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2280      	movs	r2, #128	; 0x80
 8007ae0:	601a      	str	r2, [r3, #0]
}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	b004      	add	sp, #16
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	20000204 	.word	0x20000204
 8007af0:	20000260 	.word	0x20000260

08007af4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a06      	ldr	r2, [pc, #24]	; (8007b1c <vApplicationGetTimerTaskMemory+0x28>)
 8007b04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	4a05      	ldr	r2, [pc, #20]	; (8007b20 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2280      	movs	r2, #128	; 0x80
 8007b10:	0052      	lsls	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b004      	add	sp, #16
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000460 	.word	0x20000460
 8007b20:	200004bc 	.word	0x200004bc

08007b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	001a      	movs	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	4252      	negs	r2, r2
 8007b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3308      	adds	r3, #8
 8007b42:	001a      	movs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	001a      	movs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b58:	46c0      	nop			; (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	46bd      	mov	sp, r7
 8007b72:	b002      	add	sp, #8
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	b004      	add	sp, #16
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	d103      	bne.n	8007bd8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e00c      	b.n	8007bf2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e002      	b.n	8007be6 <vListInsert+0x2c>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d2f6      	bcs.n	8007be0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b004      	add	sp, #16
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	6892      	ldr	r2, [r2, #8]
 8007c3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6852      	ldr	r2, [r2, #4]
 8007c46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d103      	bne.n	8007c5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	1e5a      	subs	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
}
 8007c6e:	0018      	movs	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	b004      	add	sp, #16
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <xQueueGenericReset+0x18>
 8007c8a:	b672      	cpsid	i
 8007c8c:	e7fe      	b.n	8007c8c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8007c8e:	f001 fe0f 	bl	80098b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	434b      	muls	r3, r1
 8007ca0:	18d2      	adds	r2, r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbc:	1e59      	subs	r1, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	434b      	muls	r3, r1
 8007cc4:	18d2      	adds	r2, r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2244      	movs	r2, #68	; 0x44
 8007cce:	21ff      	movs	r1, #255	; 0xff
 8007cd0:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2245      	movs	r2, #69	; 0x45
 8007cd6:	21ff      	movs	r1, #255	; 0xff
 8007cd8:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10d      	bne.n	8007cfc <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d013      	beq.n	8007d10 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3310      	adds	r3, #16
 8007cec:	0018      	movs	r0, r3
 8007cee:	f000 ffd7 	bl	8008ca0 <xTaskRemoveFromEventList>
 8007cf2:	1e03      	subs	r3, r0, #0
 8007cf4:	d00c      	beq.n	8007d10 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cf6:	f001 fdcb 	bl	8009890 <vPortYield>
 8007cfa:	e009      	b.n	8007d10 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3310      	adds	r3, #16
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7ff ff0f 	bl	8007b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3324      	adds	r3, #36	; 0x24
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f7ff ff0a 	bl	8007b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d10:	f001 fde0 	bl	80098d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d14:	2301      	movs	r3, #1
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b004      	add	sp, #16
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d1e:	b590      	push	{r4, r7, lr}
 8007d20:	b089      	sub	sp, #36	; 0x24
 8007d22:	af02      	add	r7, sp, #8
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <xQueueGenericCreateStatic+0x18>
 8007d32:	b672      	cpsid	i
 8007d34:	e7fe      	b.n	8007d34 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <xQueueGenericCreateStatic+0x22>
 8007d3c:	b672      	cpsid	i
 8007d3e:	e7fe      	b.n	8007d3e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <xQueueGenericCreateStatic+0x2e>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <xQueueGenericCreateStatic+0x32>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <xQueueGenericCreateStatic+0x34>
 8007d50:	2300      	movs	r3, #0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <xQueueGenericCreateStatic+0x3c>
 8007d56:	b672      	cpsid	i
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <xQueueGenericCreateStatic+0x48>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <xQueueGenericCreateStatic+0x4c>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e000      	b.n	8007d6c <xQueueGenericCreateStatic+0x4e>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <xQueueGenericCreateStatic+0x56>
 8007d70:	b672      	cpsid	i
 8007d72:	e7fe      	b.n	8007d72 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d74:	2350      	movs	r3, #80	; 0x50
 8007d76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b50      	cmp	r3, #80	; 0x50
 8007d7c:	d001      	beq.n	8007d82 <xQueueGenericCreateStatic+0x64>
 8007d7e:	b672      	cpsid	i
 8007d80:	e7fe      	b.n	8007d80 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d82:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00e      	beq.n	8007dac <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2246      	movs	r2, #70	; 0x46
 8007d92:	2101      	movs	r1, #1
 8007d94:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d96:	2328      	movs	r3, #40	; 0x28
 8007d98:	18fb      	adds	r3, r7, r3
 8007d9a:	781c      	ldrb	r4, [r3, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	0023      	movs	r3, r4
 8007da8:	f000 f805 	bl	8007db6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dac:	697b      	ldr	r3, [r7, #20]
	}
 8007dae:	0018      	movs	r0, r3
 8007db0:	46bd      	mov	sp, r7
 8007db2:	b007      	add	sp, #28
 8007db4:	bd90      	pop	{r4, r7, pc}

08007db6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	001a      	movs	r2, r3
 8007dc4:	1cfb      	adds	r3, r7, #3
 8007dc6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e002      	b.n	8007ddc <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2101      	movs	r1, #1
 8007dec:	0018      	movs	r0, r3
 8007dee:	f7ff ff42 	bl	8007c76 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	1cfa      	adds	r2, r7, #3
 8007df6:	214c      	movs	r1, #76	; 0x4c
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dfc:	46c0      	nop			; (mov r8, r8)
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b004      	add	sp, #16
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e12:	2300      	movs	r3, #0
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <xQueueGenericSend+0x20>
 8007e20:	b672      	cpsid	i
 8007e22:	e7fe      	b.n	8007e22 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <xQueueGenericSend+0x2e>
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <xQueueGenericSend+0x32>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <xQueueGenericSend+0x34>
 8007e36:	2300      	movs	r3, #0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <xQueueGenericSend+0x3c>
 8007e3c:	b672      	cpsid	i
 8007e3e:	e7fe      	b.n	8007e3e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d103      	bne.n	8007e4e <xQueueGenericSend+0x4a>
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <xQueueGenericSend+0x4e>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <xQueueGenericSend+0x50>
 8007e52:	2300      	movs	r3, #0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <xQueueGenericSend+0x58>
 8007e58:	b672      	cpsid	i
 8007e5a:	e7fe      	b.n	8007e5a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e5c:	f001 f8b2 	bl	8008fc4 <xTaskGetSchedulerState>
 8007e60:	1e03      	subs	r3, r0, #0
 8007e62:	d102      	bne.n	8007e6a <xQueueGenericSend+0x66>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <xQueueGenericSend+0x6a>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <xQueueGenericSend+0x6c>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <xQueueGenericSend+0x74>
 8007e74:	b672      	cpsid	i
 8007e76:	e7fe      	b.n	8007e76 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e78:	f001 fd1a 	bl	80098b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <xQueueGenericSend+0x8a>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d11e      	bne.n	8007ecc <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	0018      	movs	r0, r3
 8007e96:	f000 f9a2 	bl	80081de <prvCopyDataToQueue>
 8007e9a:	0003      	movs	r3, r0
 8007e9c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	3324      	adds	r3, #36	; 0x24
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 fef8 	bl	8008ca0 <xTaskRemoveFromEventList>
 8007eb0:	1e03      	subs	r3, r0, #0
 8007eb2:	d007      	beq.n	8007ec4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007eb4:	f001 fcec 	bl	8009890 <vPortYield>
 8007eb8:	e004      	b.n	8007ec4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ec0:	f001 fce6 	bl	8009890 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ec4:	f001 fd06 	bl	80098d4 <vPortExitCritical>
				return pdPASS;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e05b      	b.n	8007f84 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ed2:	f001 fcff 	bl	80098d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e054      	b.n	8007f84 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ee0:	2314      	movs	r3, #20
 8007ee2:	18fb      	adds	r3, r7, r3
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	f000 ff37 	bl	8008d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eea:	2301      	movs	r3, #1
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eee:	f001 fcf1 	bl	80098d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ef2:	f000 fce9 	bl	80088c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ef6:	f001 fcdb 	bl	80098b0 <vPortEnterCritical>
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	2244      	movs	r2, #68	; 0x44
 8007efe:	5c9b      	ldrb	r3, [r3, r2]
 8007f00:	b25b      	sxtb	r3, r3
 8007f02:	3301      	adds	r3, #1
 8007f04:	d103      	bne.n	8007f0e <xQueueGenericSend+0x10a>
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	2244      	movs	r2, #68	; 0x44
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	5499      	strb	r1, [r3, r2]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	2245      	movs	r2, #69	; 0x45
 8007f12:	5c9b      	ldrb	r3, [r3, r2]
 8007f14:	b25b      	sxtb	r3, r3
 8007f16:	3301      	adds	r3, #1
 8007f18:	d103      	bne.n	8007f22 <xQueueGenericSend+0x11e>
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	2245      	movs	r2, #69	; 0x45
 8007f1e:	2100      	movs	r1, #0
 8007f20:	5499      	strb	r1, [r3, r2]
 8007f22:	f001 fcd7 	bl	80098d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f26:	1d3a      	adds	r2, r7, #4
 8007f28:	2314      	movs	r3, #20
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	0011      	movs	r1, r2
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f000 ff26 	bl	8008d80 <xTaskCheckForTimeOut>
 8007f34:	1e03      	subs	r3, r0, #0
 8007f36:	d11e      	bne.n	8007f76 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 fa54 	bl	80083e8 <prvIsQueueFull>
 8007f40:	1e03      	subs	r3, r0, #0
 8007f42:	d011      	beq.n	8007f68 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	3310      	adds	r3, #16
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f000 fe63 	bl	8008c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	0018      	movs	r0, r3
 8007f56:	f000 f9d3 	bl	8008300 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f5a:	f000 fcc1 	bl	80088e0 <xTaskResumeAll>
 8007f5e:	1e03      	subs	r3, r0, #0
 8007f60:	d18a      	bne.n	8007e78 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007f62:	f001 fc95 	bl	8009890 <vPortYield>
 8007f66:	e787      	b.n	8007e78 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f000 f9c8 	bl	8008300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f70:	f000 fcb6 	bl	80088e0 <xTaskResumeAll>
 8007f74:	e780      	b.n	8007e78 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f000 f9c1 	bl	8008300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f7e:	f000 fcaf 	bl	80088e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f84:	0018      	movs	r0, r3
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b00a      	add	sp, #40	; 0x28
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	b08b      	sub	sp, #44	; 0x2c
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <xQueueGenericSendFromISR+0x1c>
 8007fa4:	b672      	cpsid	i
 8007fa6:	e7fe      	b.n	8007fa6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d103      	bne.n	8007fb6 <xQueueGenericSendFromISR+0x2a>
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <xQueueGenericSendFromISR+0x2e>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <xQueueGenericSendFromISR+0x30>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <xQueueGenericSendFromISR+0x38>
 8007fc0:	b672      	cpsid	i
 8007fc2:	e7fe      	b.n	8007fc2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d103      	bne.n	8007fd2 <xQueueGenericSendFromISR+0x46>
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <xQueueGenericSendFromISR+0x4a>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xQueueGenericSendFromISR+0x4c>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <xQueueGenericSendFromISR+0x54>
 8007fdc:	b672      	cpsid	i
 8007fde:	e7fe      	b.n	8007fde <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fe0:	f001 fc90 	bl	8009904 <ulSetInterruptMaskFromISR>
 8007fe4:	0003      	movs	r3, r0
 8007fe6:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d302      	bcc.n	8007ffa <xQueueGenericSendFromISR+0x6e>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d131      	bne.n	800805e <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ffa:	241b      	movs	r4, #27
 8007ffc:	193b      	adds	r3, r7, r4
 8007ffe:	6a3a      	ldr	r2, [r7, #32]
 8008000:	2145      	movs	r1, #69	; 0x45
 8008002:	5c52      	ldrb	r2, [r2, r1]
 8008004:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	0018      	movs	r0, r3
 8008014:	f000 f8e3 	bl	80081de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008018:	193b      	adds	r3, r7, r4
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b25b      	sxtb	r3, r3
 800801e:	3301      	adds	r3, #1
 8008020:	d111      	bne.n	8008046 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	2b00      	cmp	r3, #0
 8008028:	d016      	beq.n	8008058 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	3324      	adds	r3, #36	; 0x24
 800802e:	0018      	movs	r0, r3
 8008030:	f000 fe36 	bl	8008ca0 <xTaskRemoveFromEventList>
 8008034:	1e03      	subs	r3, r0, #0
 8008036:	d00f      	beq.n	8008058 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e008      	b.n	8008058 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008046:	231b      	movs	r3, #27
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	b2db      	uxtb	r3, r3
 8008050:	b259      	sxtb	r1, r3
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	2245      	movs	r2, #69	; 0x45
 8008056:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008058:	2301      	movs	r3, #1
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800805c:	e001      	b.n	8008062 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800805e:	2300      	movs	r3, #0
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	0018      	movs	r0, r3
 8008066:	f001 fc53 	bl	8009910 <vClearInterruptMaskFromISR>

	return xReturn;
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800806c:	0018      	movs	r0, r3
 800806e:	46bd      	mov	sp, r7
 8008070:	b00b      	add	sp, #44	; 0x2c
 8008072:	bd90      	pop	{r4, r7, pc}

08008074 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08a      	sub	sp, #40	; 0x28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008080:	2300      	movs	r3, #0
 8008082:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <xQueueReceive+0x1e>
 800808e:	b672      	cpsid	i
 8008090:	e7fe      	b.n	8008090 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d103      	bne.n	80080a0 <xQueueReceive+0x2c>
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <xQueueReceive+0x30>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e000      	b.n	80080a6 <xQueueReceive+0x32>
 80080a4:	2300      	movs	r3, #0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <xQueueReceive+0x3a>
 80080aa:	b672      	cpsid	i
 80080ac:	e7fe      	b.n	80080ac <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ae:	f000 ff89 	bl	8008fc4 <xTaskGetSchedulerState>
 80080b2:	1e03      	subs	r3, r0, #0
 80080b4:	d102      	bne.n	80080bc <xQueueReceive+0x48>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <xQueueReceive+0x4c>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <xQueueReceive+0x4e>
 80080c0:	2300      	movs	r3, #0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <xQueueReceive+0x56>
 80080c6:	b672      	cpsid	i
 80080c8:	e7fe      	b.n	80080c8 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ca:	f001 fbf1 	bl	80098b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01a      	beq.n	8008110 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	0011      	movs	r1, r2
 80080e0:	0018      	movs	r0, r3
 80080e2:	f000 f8e7 	bl	80082b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	1e5a      	subs	r2, r3, #1
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d008      	beq.n	8008108 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	3310      	adds	r3, #16
 80080fa:	0018      	movs	r0, r3
 80080fc:	f000 fdd0 	bl	8008ca0 <xTaskRemoveFromEventList>
 8008100:	1e03      	subs	r3, r0, #0
 8008102:	d001      	beq.n	8008108 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008104:	f001 fbc4 	bl	8009890 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008108:	f001 fbe4 	bl	80098d4 <vPortExitCritical>
				return pdPASS;
 800810c:	2301      	movs	r3, #1
 800810e:	e062      	b.n	80081d6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008116:	f001 fbdd 	bl	80098d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800811a:	2300      	movs	r3, #0
 800811c:	e05b      	b.n	80081d6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d106      	bne.n	8008132 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008124:	2314      	movs	r3, #20
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	0018      	movs	r0, r3
 800812a:	f000 fe15 	bl	8008d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800812e:	2301      	movs	r3, #1
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008132:	f001 fbcf 	bl	80098d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008136:	f000 fbc7 	bl	80088c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800813a:	f001 fbb9 	bl	80098b0 <vPortEnterCritical>
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	2244      	movs	r2, #68	; 0x44
 8008142:	5c9b      	ldrb	r3, [r3, r2]
 8008144:	b25b      	sxtb	r3, r3
 8008146:	3301      	adds	r3, #1
 8008148:	d103      	bne.n	8008152 <xQueueReceive+0xde>
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	2244      	movs	r2, #68	; 0x44
 800814e:	2100      	movs	r1, #0
 8008150:	5499      	strb	r1, [r3, r2]
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2245      	movs	r2, #69	; 0x45
 8008156:	5c9b      	ldrb	r3, [r3, r2]
 8008158:	b25b      	sxtb	r3, r3
 800815a:	3301      	adds	r3, #1
 800815c:	d103      	bne.n	8008166 <xQueueReceive+0xf2>
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	2245      	movs	r2, #69	; 0x45
 8008162:	2100      	movs	r1, #0
 8008164:	5499      	strb	r1, [r3, r2]
 8008166:	f001 fbb5 	bl	80098d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800816a:	1d3a      	adds	r2, r7, #4
 800816c:	2314      	movs	r3, #20
 800816e:	18fb      	adds	r3, r7, r3
 8008170:	0011      	movs	r1, r2
 8008172:	0018      	movs	r0, r3
 8008174:	f000 fe04 	bl	8008d80 <xTaskCheckForTimeOut>
 8008178:	1e03      	subs	r3, r0, #0
 800817a:	d11e      	bne.n	80081ba <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	0018      	movs	r0, r3
 8008180:	f000 f91c 	bl	80083bc <prvIsQueueEmpty>
 8008184:	1e03      	subs	r3, r0, #0
 8008186:	d011      	beq.n	80081ac <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	3324      	adds	r3, #36	; 0x24
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	0011      	movs	r1, r2
 8008190:	0018      	movs	r0, r3
 8008192:	f000 fd41 	bl	8008c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	0018      	movs	r0, r3
 800819a:	f000 f8b1 	bl	8008300 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800819e:	f000 fb9f 	bl	80088e0 <xTaskResumeAll>
 80081a2:	1e03      	subs	r3, r0, #0
 80081a4:	d191      	bne.n	80080ca <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80081a6:	f001 fb73 	bl	8009890 <vPortYield>
 80081aa:	e78e      	b.n	80080ca <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	0018      	movs	r0, r3
 80081b0:	f000 f8a6 	bl	8008300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081b4:	f000 fb94 	bl	80088e0 <xTaskResumeAll>
 80081b8:	e787      	b.n	80080ca <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	0018      	movs	r0, r3
 80081be:	f000 f89f 	bl	8008300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081c2:	f000 fb8d 	bl	80088e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	0018      	movs	r0, r3
 80081ca:	f000 f8f7 	bl	80083bc <prvIsQueueEmpty>
 80081ce:	1e03      	subs	r3, r0, #0
 80081d0:	d100      	bne.n	80081d4 <xQueueReceive+0x160>
 80081d2:	e77a      	b.n	80080ca <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081d6:	0018      	movs	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	b00a      	add	sp, #40	; 0x28
 80081dc:	bd80      	pop	{r7, pc}

080081de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10e      	bne.n	800821a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d14e      	bne.n	80082a2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	0018      	movs	r0, r3
 800820a:	f000 fef7 	bl	8008ffc <xTaskPriorityDisinherit>
 800820e:	0003      	movs	r3, r0
 8008210:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	e043      	b.n	80082a2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d119      	bne.n	8008254 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6858      	ldr	r0, [r3, #4]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	0019      	movs	r1, r3
 800822c:	f001 fdb4 	bl	8009d98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	18d2      	adds	r2, r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	429a      	cmp	r2, r3
 8008248:	d32b      	bcc.n	80082a2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	e026      	b.n	80082a2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68d8      	ldr	r0, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	0019      	movs	r1, r3
 8008260:	f001 fd9a 	bl	8009d98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	425b      	negs	r3, r3
 800826e:	18d2      	adds	r2, r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d207      	bcs.n	8008290 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	425b      	negs	r3, r3
 800828a:	18d2      	adds	r2, r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d105      	bne.n	80082a2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	3b01      	subs	r3, #1
 80082a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082aa:	697b      	ldr	r3, [r7, #20]
}
 80082ac:	0018      	movs	r0, r3
 80082ae:	46bd      	mov	sp, r7
 80082b0:	b006      	add	sp, #24
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d018      	beq.n	80082f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	18d2      	adds	r2, r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d303      	bcc.n	80082e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68d9      	ldr	r1, [r3, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	0018      	movs	r0, r3
 80082f4:	f001 fd50 	bl	8009d98 <memcpy>
	}
}
 80082f8:	46c0      	nop			; (mov r8, r8)
 80082fa:	46bd      	mov	sp, r7
 80082fc:	b002      	add	sp, #8
 80082fe:	bd80      	pop	{r7, pc}

08008300 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008308:	f001 fad2 	bl	80098b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800830c:	230f      	movs	r3, #15
 800830e:	18fb      	adds	r3, r7, r3
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	2145      	movs	r1, #69	; 0x45
 8008314:	5c52      	ldrb	r2, [r2, r1]
 8008316:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008318:	e013      	b.n	8008342 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	d016      	beq.n	8008350 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3324      	adds	r3, #36	; 0x24
 8008326:	0018      	movs	r0, r3
 8008328:	f000 fcba 	bl	8008ca0 <xTaskRemoveFromEventList>
 800832c:	1e03      	subs	r3, r0, #0
 800832e:	d001      	beq.n	8008334 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008330:	f000 fd76 	bl	8008e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008334:	210f      	movs	r1, #15
 8008336:	187b      	adds	r3, r7, r1
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	3b01      	subs	r3, #1
 800833c:	b2da      	uxtb	r2, r3
 800833e:	187b      	adds	r3, r7, r1
 8008340:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008342:	230f      	movs	r3, #15
 8008344:	18fb      	adds	r3, r7, r3
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	b25b      	sxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	dce5      	bgt.n	800831a <prvUnlockQueue+0x1a>
 800834e:	e000      	b.n	8008352 <prvUnlockQueue+0x52>
					break;
 8008350:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2245      	movs	r2, #69	; 0x45
 8008356:	21ff      	movs	r1, #255	; 0xff
 8008358:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800835a:	f001 fabb 	bl	80098d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800835e:	f001 faa7 	bl	80098b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008362:	230e      	movs	r3, #14
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	2144      	movs	r1, #68	; 0x44
 800836a:	5c52      	ldrb	r2, [r2, r1]
 800836c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800836e:	e013      	b.n	8008398 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d016      	beq.n	80083a6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3310      	adds	r3, #16
 800837c:	0018      	movs	r0, r3
 800837e:	f000 fc8f 	bl	8008ca0 <xTaskRemoveFromEventList>
 8008382:	1e03      	subs	r3, r0, #0
 8008384:	d001      	beq.n	800838a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008386:	f000 fd4b 	bl	8008e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800838a:	210e      	movs	r1, #14
 800838c:	187b      	adds	r3, r7, r1
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	3b01      	subs	r3, #1
 8008392:	b2da      	uxtb	r2, r3
 8008394:	187b      	adds	r3, r7, r1
 8008396:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008398:	230e      	movs	r3, #14
 800839a:	18fb      	adds	r3, r7, r3
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dce5      	bgt.n	8008370 <prvUnlockQueue+0x70>
 80083a4:	e000      	b.n	80083a8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80083a6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2244      	movs	r2, #68	; 0x44
 80083ac:	21ff      	movs	r1, #255	; 0xff
 80083ae:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80083b0:	f001 fa90 	bl	80098d4 <vPortExitCritical>
}
 80083b4:	46c0      	nop			; (mov r8, r8)
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b004      	add	sp, #16
 80083ba:	bd80      	pop	{r7, pc}

080083bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083c4:	f001 fa74 	bl	80098b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e001      	b.n	80083da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083da:	f001 fa7b 	bl	80098d4 <vPortExitCritical>

	return xReturn;
 80083de:	68fb      	ldr	r3, [r7, #12]
}
 80083e0:	0018      	movs	r0, r3
 80083e2:	46bd      	mov	sp, r7
 80083e4:	b004      	add	sp, #16
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083f0:	f001 fa5e 	bl	80098b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d102      	bne.n	8008406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e001      	b.n	800840a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800840a:	f001 fa63 	bl	80098d4 <vPortExitCritical>

	return xReturn;
 800840e:	68fb      	ldr	r3, [r7, #12]
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b004      	add	sp, #16
 8008416:	bd80      	pop	{r7, pc}

08008418 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e015      	b.n	8008454 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008428:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <vQueueAddToRegistry+0x4c>)
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	00d2      	lsls	r2, r2, #3
 800842e:	58d3      	ldr	r3, [r2, r3]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10c      	bne.n	800844e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <vQueueAddToRegistry+0x4c>)
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	00d2      	lsls	r2, r2, #3
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <vQueueAddToRegistry+0x4c>)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	18d3      	adds	r3, r2, r3
 8008446:	3304      	adds	r3, #4
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800844c:	e006      	b.n	800845c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b07      	cmp	r3, #7
 8008458:	d9e6      	bls.n	8008428 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	46c0      	nop			; (mov r8, r8)
 800845e:	46bd      	mov	sp, r7
 8008460:	b004      	add	sp, #16
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20001d6c 	.word	0x20001d6c

08008468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008478:	f001 fa1a 	bl	80098b0 <vPortEnterCritical>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2244      	movs	r2, #68	; 0x44
 8008480:	5c9b      	ldrb	r3, [r3, r2]
 8008482:	b25b      	sxtb	r3, r3
 8008484:	3301      	adds	r3, #1
 8008486:	d103      	bne.n	8008490 <vQueueWaitForMessageRestricted+0x28>
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2244      	movs	r2, #68	; 0x44
 800848c:	2100      	movs	r1, #0
 800848e:	5499      	strb	r1, [r3, r2]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2245      	movs	r2, #69	; 0x45
 8008494:	5c9b      	ldrb	r3, [r3, r2]
 8008496:	b25b      	sxtb	r3, r3
 8008498:	3301      	adds	r3, #1
 800849a:	d103      	bne.n	80084a4 <vQueueWaitForMessageRestricted+0x3c>
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2245      	movs	r2, #69	; 0x45
 80084a0:	2100      	movs	r1, #0
 80084a2:	5499      	strb	r1, [r3, r2]
 80084a4:	f001 fa16 	bl	80098d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	3324      	adds	r3, #36	; 0x24
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	0018      	movs	r0, r3
 80084ba:	f000 fbcb 	bl	8008c54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	0018      	movs	r0, r3
 80084c2:	f7ff ff1d 	bl	8008300 <prvUnlockQueue>
	}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	46bd      	mov	sp, r7
 80084ca:	b006      	add	sp, #24
 80084cc:	bd80      	pop	{r7, pc}

080084ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084ce:	b590      	push	{r4, r7, lr}
 80084d0:	b08d      	sub	sp, #52	; 0x34
 80084d2:	af04      	add	r7, sp, #16
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <xTaskCreateStatic+0x18>
 80084e2:	b672      	cpsid	i
 80084e4:	e7fe      	b.n	80084e4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <xTaskCreateStatic+0x22>
 80084ec:	b672      	cpsid	i
 80084ee:	e7fe      	b.n	80084ee <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084f0:	235c      	movs	r3, #92	; 0x5c
 80084f2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2b5c      	cmp	r3, #92	; 0x5c
 80084f8:	d001      	beq.n	80084fe <xTaskCreateStatic+0x30>
 80084fa:	b672      	cpsid	i
 80084fc:	e7fe      	b.n	80084fc <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084fe:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	2b00      	cmp	r3, #0
 8008504:	d020      	beq.n	8008548 <xTaskCreateStatic+0x7a>
 8008506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01d      	beq.n	8008548 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008514:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	2259      	movs	r2, #89	; 0x59
 800851a:	2102      	movs	r1, #2
 800851c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800851e:	683c      	ldr	r4, [r7, #0]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	2300      	movs	r3, #0
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	9302      	str	r3, [sp, #8]
 800852e:	2318      	movs	r3, #24
 8008530:	18fb      	adds	r3, r7, r3
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	0023      	movs	r3, r4
 800853a:	f000 f859 	bl	80085f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	0018      	movs	r0, r3
 8008542:	f000 f8df 	bl	8008704 <prvAddNewTaskToReadyList>
 8008546:	e001      	b.n	800854c <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800854c:	69bb      	ldr	r3, [r7, #24]
	}
 800854e:	0018      	movs	r0, r3
 8008550:	46bd      	mov	sp, r7
 8008552:	b009      	add	sp, #36	; 0x24
 8008554:	bd90      	pop	{r4, r7, pc}

08008556 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008556:	b590      	push	{r4, r7, lr}
 8008558:	b08d      	sub	sp, #52	; 0x34
 800855a:	af04      	add	r7, sp, #16
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	1dbb      	adds	r3, r7, #6
 8008564:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008566:	1dbb      	adds	r3, r7, #6
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	0018      	movs	r0, r3
 800856e:	f001 fa37 	bl	80099e0 <pvPortMalloc>
 8008572:	0003      	movs	r3, r0
 8008574:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d010      	beq.n	800859e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800857c:	205c      	movs	r0, #92	; 0x5c
 800857e:	f001 fa2f 	bl	80099e0 <pvPortMalloc>
 8008582:	0003      	movs	r3, r0
 8008584:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	631a      	str	r2, [r3, #48]	; 0x30
 8008592:	e006      	b.n	80085a2 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	0018      	movs	r0, r3
 8008598:	f001 face 	bl	8009b38 <vPortFree>
 800859c:	e001      	b.n	80085a2 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01a      	beq.n	80085de <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2259      	movs	r2, #89	; 0x59
 80085ac:	2100      	movs	r1, #0
 80085ae:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085b0:	1dbb      	adds	r3, r7, #6
 80085b2:	881a      	ldrh	r2, [r3, #0]
 80085b4:	683c      	ldr	r4, [r7, #0]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	2300      	movs	r3, #0
 80085bc:	9303      	str	r3, [sp, #12]
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	9302      	str	r3, [sp, #8]
 80085c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	0023      	movs	r3, r4
 80085cc:	f000 f810 	bl	80085f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	0018      	movs	r0, r3
 80085d4:	f000 f896 	bl	8008704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085d8:	2301      	movs	r3, #1
 80085da:	61bb      	str	r3, [r7, #24]
 80085dc:	e002      	b.n	80085e4 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085de:	2301      	movs	r3, #1
 80085e0:	425b      	negs	r3, r3
 80085e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085e4:	69bb      	ldr	r3, [r7, #24]
	}
 80085e6:	0018      	movs	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b009      	add	sp, #36	; 0x24
 80085ec:	bd90      	pop	{r4, r7, pc}
	...

080085f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	001a      	movs	r2, r3
 8008608:	21a5      	movs	r1, #165	; 0xa5
 800860a:	f001 fbce 	bl	8009daa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	493a      	ldr	r1, [pc, #232]	; (8008700 <prvInitialiseNewTask+0x110>)
 8008616:	468c      	mov	ip, r1
 8008618:	4463      	add	r3, ip
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	18d3      	adds	r3, r2, r3
 800861e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	2207      	movs	r2, #7
 8008624:	4393      	bics	r3, r2
 8008626:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	2207      	movs	r2, #7
 800862c:	4013      	ands	r3, r2
 800862e:	d001      	beq.n	8008634 <prvInitialiseNewTask+0x44>
 8008630:	b672      	cpsid	i
 8008632:	e7fe      	b.n	8008632 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d020      	beq.n	800867c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e013      	b.n	8008668 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	18d3      	adds	r3, r2, r3
 8008646:	7818      	ldrb	r0, [r3, #0]
 8008648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800864a:	2134      	movs	r1, #52	; 0x34
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	18d3      	adds	r3, r2, r3
 8008650:	185b      	adds	r3, r3, r1
 8008652:	1c02      	adds	r2, r0, #0
 8008654:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	18d3      	adds	r3, r2, r3
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d006      	beq.n	8008670 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	3301      	adds	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2b0f      	cmp	r3, #15
 800866c:	d9e8      	bls.n	8008640 <prvInitialiseNewTask+0x50>
 800866e:	e000      	b.n	8008672 <prvInitialiseNewTask+0x82>
			{
				break;
 8008670:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	2243      	movs	r2, #67	; 0x43
 8008676:	2100      	movs	r1, #0
 8008678:	5499      	strb	r1, [r3, r2]
 800867a:	e003      	b.n	8008684 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	2234      	movs	r2, #52	; 0x34
 8008680:	2100      	movs	r1, #0
 8008682:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	2b37      	cmp	r3, #55	; 0x37
 8008688:	d901      	bls.n	800868e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800868a:	2337      	movs	r3, #55	; 0x37
 800868c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	6a3a      	ldr	r2, [r7, #32]
 8008692:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	6a3a      	ldr	r2, [r7, #32]
 8008698:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	2200      	movs	r2, #0
 800869e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	3304      	adds	r3, #4
 80086a4:	0018      	movs	r0, r3
 80086a6:	f7ff fa5b 	bl	8007b60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	3318      	adds	r3, #24
 80086ae:	0018      	movs	r0, r3
 80086b0:	f7ff fa56 	bl	8007b60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	2238      	movs	r2, #56	; 0x38
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	2200      	movs	r2, #0
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	2258      	movs	r2, #88	; 0x58
 80086d4:	2100      	movs	r1, #0
 80086d6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	0018      	movs	r0, r3
 80086e0:	f001 f84e 	bl	8009780 <pxPortInitialiseStack>
 80086e4:	0002      	movs	r2, r0
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	46bd      	mov	sp, r7
 80086fa:	b006      	add	sp, #24
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	3fffffff 	.word	0x3fffffff

08008704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800870c:	f001 f8d0 	bl	80098b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008710:	4b2a      	ldr	r3, [pc, #168]	; (80087bc <prvAddNewTaskToReadyList+0xb8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	4b29      	ldr	r3, [pc, #164]	; (80087bc <prvAddNewTaskToReadyList+0xb8>)
 8008718:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800871a:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008722:	4b27      	ldr	r3, [pc, #156]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008728:	4b24      	ldr	r3, [pc, #144]	; (80087bc <prvAddNewTaskToReadyList+0xb8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d110      	bne.n	8008752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008730:	f000 fb90 	bl	8008e54 <prvInitialiseTaskLists>
 8008734:	e00d      	b.n	8008752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008736:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <prvAddNewTaskToReadyList+0xc0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800873e:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d802      	bhi.n	8008752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800874c:	4b1c      	ldr	r3, [pc, #112]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008752:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <prvAddNewTaskToReadyList+0xc4>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <prvAddNewTaskToReadyList+0xc4>)
 800875a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800875c:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <prvAddNewTaskToReadyList+0xc4>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4b18      	ldr	r3, [pc, #96]	; (80087cc <prvAddNewTaskToReadyList+0xc8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d903      	bls.n	8008778 <prvAddNewTaskToReadyList+0x74>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	4b15      	ldr	r3, [pc, #84]	; (80087cc <prvAddNewTaskToReadyList+0xc8>)
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	0013      	movs	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	189b      	adds	r3, r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4a12      	ldr	r2, [pc, #72]	; (80087d0 <prvAddNewTaskToReadyList+0xcc>)
 8008786:	189a      	adds	r2, r3, r2
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3304      	adds	r3, #4
 800878c:	0019      	movs	r1, r3
 800878e:	0010      	movs	r0, r2
 8008790:	f7ff f9f1 	bl	8007b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008794:	f001 f89e 	bl	80098d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <prvAddNewTaskToReadyList+0xc0>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d008      	beq.n	80087b2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d201      	bcs.n	80087b2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ae:	f001 f86f 	bl	8009890 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b002      	add	sp, #8
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	20000d90 	.word	0x20000d90
 80087c0:	200008bc 	.word	0x200008bc
 80087c4:	20000d9c 	.word	0x20000d9c
 80087c8:	20000dac 	.word	0x20000dac
 80087cc:	20000d98 	.word	0x20000d98
 80087d0:	200008c0 	.word	0x200008c0

080087d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087dc:	2300      	movs	r3, #0
 80087de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d010      	beq.n	8008808 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087e6:	4b0d      	ldr	r3, [pc, #52]	; (800881c <vTaskDelay+0x48>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <vTaskDelay+0x1e>
 80087ee:	b672      	cpsid	i
 80087f0:	e7fe      	b.n	80087f0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80087f2:	f000 f869 	bl	80088c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2100      	movs	r1, #0
 80087fa:	0018      	movs	r0, r3
 80087fc:	f000 fc5a 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008800:	f000 f86e 	bl	80088e0 <xTaskResumeAll>
 8008804:	0003      	movs	r3, r0
 8008806:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800880e:	f001 f83f 	bl	8009890 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	46bd      	mov	sp, r7
 8008816:	b004      	add	sp, #16
 8008818:	bd80      	pop	{r7, pc}
 800881a:	46c0      	nop			; (mov r8, r8)
 800881c:	20000db8 	.word	0x20000db8

08008820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008820:	b590      	push	{r4, r7, lr}
 8008822:	b089      	sub	sp, #36	; 0x24
 8008824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800882e:	003a      	movs	r2, r7
 8008830:	1d39      	adds	r1, r7, #4
 8008832:	2308      	movs	r3, #8
 8008834:	18fb      	adds	r3, r7, r3
 8008836:	0018      	movs	r0, r3
 8008838:	f7ff f944 	bl	8007ac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800883c:	683c      	ldr	r4, [r7, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	491b      	ldr	r1, [pc, #108]	; (80088b0 <vTaskStartScheduler+0x90>)
 8008844:	481b      	ldr	r0, [pc, #108]	; (80088b4 <vTaskStartScheduler+0x94>)
 8008846:	9202      	str	r2, [sp, #8]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	2300      	movs	r3, #0
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	2300      	movs	r3, #0
 8008850:	0022      	movs	r2, r4
 8008852:	f7ff fe3c 	bl	80084ce <xTaskCreateStatic>
 8008856:	0002      	movs	r2, r0
 8008858:	4b17      	ldr	r3, [pc, #92]	; (80088b8 <vTaskStartScheduler+0x98>)
 800885a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800885c:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <vTaskStartScheduler+0x98>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008864:	2301      	movs	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	e001      	b.n	800886e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d103      	bne.n	800887c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8008874:	f000 fc72 	bl	800915c <xTimerCreateTimerTask>
 8008878:	0003      	movs	r3, r0
 800887a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d10d      	bne.n	800889e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008882:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008884:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <vTaskStartScheduler+0x9c>)
 8008886:	2201      	movs	r2, #1
 8008888:	4252      	negs	r2, r2
 800888a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800888c:	4b0c      	ldr	r3, [pc, #48]	; (80088c0 <vTaskStartScheduler+0xa0>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <vTaskStartScheduler+0xa4>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008898:	f000 ffd6 	bl	8009848 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800889c:	e004      	b.n	80088a8 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	d101      	bne.n	80088a8 <vTaskStartScheduler+0x88>
 80088a4:	b672      	cpsid	i
 80088a6:	e7fe      	b.n	80088a6 <vTaskStartScheduler+0x86>
}
 80088a8:	46c0      	nop			; (mov r8, r8)
 80088aa:	46bd      	mov	sp, r7
 80088ac:	b005      	add	sp, #20
 80088ae:	bd90      	pop	{r4, r7, pc}
 80088b0:	0800cc60 	.word	0x0800cc60
 80088b4:	08008e35 	.word	0x08008e35
 80088b8:	20000db4 	.word	0x20000db4
 80088bc:	20000db0 	.word	0x20000db0
 80088c0:	20000d9c 	.word	0x20000d9c
 80088c4:	20000d94 	.word	0x20000d94

080088c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088cc:	4b03      	ldr	r3, [pc, #12]	; (80088dc <vTaskSuspendAll+0x14>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	4b02      	ldr	r3, [pc, #8]	; (80088dc <vTaskSuspendAll+0x14>)
 80088d4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	20000db8 	.word	0x20000db8

080088e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088ee:	4b3a      	ldr	r3, [pc, #232]	; (80089d8 <xTaskResumeAll+0xf8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <xTaskResumeAll+0x1a>
 80088f6:	b672      	cpsid	i
 80088f8:	e7fe      	b.n	80088f8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088fa:	f000 ffd9 	bl	80098b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088fe:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <xTaskResumeAll+0xf8>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	1e5a      	subs	r2, r3, #1
 8008904:	4b34      	ldr	r3, [pc, #208]	; (80089d8 <xTaskResumeAll+0xf8>)
 8008906:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008908:	4b33      	ldr	r3, [pc, #204]	; (80089d8 <xTaskResumeAll+0xf8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d15b      	bne.n	80089c8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008910:	4b32      	ldr	r3, [pc, #200]	; (80089dc <xTaskResumeAll+0xfc>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d057      	beq.n	80089c8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008918:	e02f      	b.n	800897a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800891a:	4b31      	ldr	r3, [pc, #196]	; (80089e0 <xTaskResumeAll+0x100>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3318      	adds	r3, #24
 8008926:	0018      	movs	r0, r3
 8008928:	f7ff f97d 	bl	8007c26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3304      	adds	r3, #4
 8008930:	0018      	movs	r0, r3
 8008932:	f7ff f978 	bl	8007c26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <xTaskResumeAll+0x104>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d903      	bls.n	800894a <xTaskResumeAll+0x6a>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008946:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <xTaskResumeAll+0x104>)
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894e:	0013      	movs	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	189b      	adds	r3, r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4a24      	ldr	r2, [pc, #144]	; (80089e8 <xTaskResumeAll+0x108>)
 8008958:	189a      	adds	r2, r3, r2
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3304      	adds	r3, #4
 800895e:	0019      	movs	r1, r3
 8008960:	0010      	movs	r0, r2
 8008962:	f7ff f908 	bl	8007b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896a:	4b20      	ldr	r3, [pc, #128]	; (80089ec <xTaskResumeAll+0x10c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	429a      	cmp	r2, r3
 8008972:	d302      	bcc.n	800897a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <xTaskResumeAll+0x110>)
 8008976:	2201      	movs	r2, #1
 8008978:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800897a:	4b19      	ldr	r3, [pc, #100]	; (80089e0 <xTaskResumeAll+0x100>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1cb      	bne.n	800891a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008988:	f000 fafe 	bl	8008f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800898c:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <xTaskResumeAll+0x114>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00f      	beq.n	80089b8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008998:	f000 f83c 	bl	8008a14 <xTaskIncrementTick>
 800899c:	1e03      	subs	r3, r0, #0
 800899e:	d002      	beq.n	80089a6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80089a0:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <xTaskResumeAll+0x110>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f2      	bne.n	8008998 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80089b2:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <xTaskResumeAll+0x114>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089b8:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <xTaskResumeAll+0x110>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089c0:	2301      	movs	r3, #1
 80089c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089c4:	f000 ff64 	bl	8009890 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089c8:	f000 ff84 	bl	80098d4 <vPortExitCritical>

	return xAlreadyYielded;
 80089cc:	68bb      	ldr	r3, [r7, #8]
}
 80089ce:	0018      	movs	r0, r3
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b004      	add	sp, #16
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	20000db8 	.word	0x20000db8
 80089dc:	20000d90 	.word	0x20000d90
 80089e0:	20000d50 	.word	0x20000d50
 80089e4:	20000d98 	.word	0x20000d98
 80089e8:	200008c0 	.word	0x200008c0
 80089ec:	200008bc 	.word	0x200008bc
 80089f0:	20000da4 	.word	0x20000da4
 80089f4:	20000da0 	.word	0x20000da0

080089f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089fe:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <xTaskGetTickCount+0x18>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a04:	687b      	ldr	r3, [r7, #4]
}
 8008a06:	0018      	movs	r0, r3
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	b002      	add	sp, #8
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	20000d94 	.word	0x20000d94

08008a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1e:	4b4a      	ldr	r3, [pc, #296]	; (8008b48 <xTaskIncrementTick+0x134>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d000      	beq.n	8008a28 <xTaskIncrementTick+0x14>
 8008a26:	e084      	b.n	8008b32 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a28:	4b48      	ldr	r3, [pc, #288]	; (8008b4c <xTaskIncrementTick+0x138>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a30:	4b46      	ldr	r3, [pc, #280]	; (8008b4c <xTaskIncrementTick+0x138>)
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d117      	bne.n	8008a6c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a3c:	4b44      	ldr	r3, [pc, #272]	; (8008b50 <xTaskIncrementTick+0x13c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <xTaskIncrementTick+0x36>
 8008a46:	b672      	cpsid	i
 8008a48:	e7fe      	b.n	8008a48 <xTaskIncrementTick+0x34>
 8008a4a:	4b41      	ldr	r3, [pc, #260]	; (8008b50 <xTaskIncrementTick+0x13c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	4b40      	ldr	r3, [pc, #256]	; (8008b54 <xTaskIncrementTick+0x140>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <xTaskIncrementTick+0x13c>)
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	4b3e      	ldr	r3, [pc, #248]	; (8008b54 <xTaskIncrementTick+0x140>)
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	4b3e      	ldr	r3, [pc, #248]	; (8008b58 <xTaskIncrementTick+0x144>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	4b3c      	ldr	r3, [pc, #240]	; (8008b58 <xTaskIncrementTick+0x144>)
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	f000 fa8e 	bl	8008f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a6c:	4b3b      	ldr	r3, [pc, #236]	; (8008b5c <xTaskIncrementTick+0x148>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d349      	bcc.n	8008b0a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a76:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <xTaskIncrementTick+0x13c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a80:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <xTaskIncrementTick+0x148>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	4252      	negs	r2, r2
 8008a86:	601a      	str	r2, [r3, #0]
					break;
 8008a88:	e03f      	b.n	8008b0a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8a:	4b31      	ldr	r3, [pc, #196]	; (8008b50 <xTaskIncrementTick+0x13c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d203      	bcs.n	8008aaa <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008aa2:	4b2e      	ldr	r3, [pc, #184]	; (8008b5c <xTaskIncrementTick+0x148>)
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008aa8:	e02f      	b.n	8008b0a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	3304      	adds	r3, #4
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7ff f8b9 	bl	8007c26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3318      	adds	r3, #24
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f7ff f8b0 	bl	8007c26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aca:	4b25      	ldr	r3, [pc, #148]	; (8008b60 <xTaskIncrementTick+0x14c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d903      	bls.n	8008ada <xTaskIncrementTick+0xc6>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	4b22      	ldr	r3, [pc, #136]	; (8008b60 <xTaskIncrementTick+0x14c>)
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	0013      	movs	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	189b      	adds	r3, r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a1f      	ldr	r2, [pc, #124]	; (8008b64 <xTaskIncrementTick+0x150>)
 8008ae8:	189a      	adds	r2, r3, r2
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	3304      	adds	r3, #4
 8008aee:	0019      	movs	r1, r3
 8008af0:	0010      	movs	r0, r2
 8008af2:	f7ff f840 	bl	8007b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <xTaskIncrementTick+0x154>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d3b8      	bcc.n	8008a76 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008b04:	2301      	movs	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b08:	e7b5      	b.n	8008a76 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b0a:	4b17      	ldr	r3, [pc, #92]	; (8008b68 <xTaskIncrementTick+0x154>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4914      	ldr	r1, [pc, #80]	; (8008b64 <xTaskIncrementTick+0x150>)
 8008b12:	0013      	movs	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	189b      	adds	r3, r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	585b      	ldr	r3, [r3, r1]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d901      	bls.n	8008b24 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <xTaskIncrementTick+0x158>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e004      	b.n	8008b3c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b32:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <xTaskIncrementTick+0x15c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <xTaskIncrementTick+0x15c>)
 8008b3a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b3c:	697b      	ldr	r3, [r7, #20]
}
 8008b3e:	0018      	movs	r0, r3
 8008b40:	46bd      	mov	sp, r7
 8008b42:	b006      	add	sp, #24
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	20000db8 	.word	0x20000db8
 8008b4c:	20000d94 	.word	0x20000d94
 8008b50:	20000d48 	.word	0x20000d48
 8008b54:	20000d4c 	.word	0x20000d4c
 8008b58:	20000da8 	.word	0x20000da8
 8008b5c:	20000db0 	.word	0x20000db0
 8008b60:	20000d98 	.word	0x20000d98
 8008b64:	200008c0 	.word	0x200008c0
 8008b68:	200008bc 	.word	0x200008bc
 8008b6c:	20000da4 	.word	0x20000da4
 8008b70:	20000da0 	.word	0x20000da0

08008b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b7a:	4b22      	ldr	r3, [pc, #136]	; (8008c04 <vTaskSwitchContext+0x90>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b82:	4b21      	ldr	r3, [pc, #132]	; (8008c08 <vTaskSwitchContext+0x94>)
 8008b84:	2201      	movs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b88:	e037      	b.n	8008bfa <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <vTaskSwitchContext+0x94>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b90:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <vTaskSwitchContext+0x98>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	e007      	b.n	8008ba8 <vTaskSwitchContext+0x34>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <vTaskSwitchContext+0x2e>
 8008b9e:	b672      	cpsid	i
 8008ba0:	e7fe      	b.n	8008ba0 <vTaskSwitchContext+0x2c>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	607b      	str	r3, [r7, #4]
 8008ba8:	4919      	ldr	r1, [pc, #100]	; (8008c10 <vTaskSwitchContext+0x9c>)
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	0013      	movs	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	189b      	adds	r3, r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	585b      	ldr	r3, [r3, r1]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0ee      	beq.n	8008b98 <vTaskSwitchContext+0x24>
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	0013      	movs	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	189b      	adds	r3, r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4a12      	ldr	r2, [pc, #72]	; (8008c10 <vTaskSwitchContext+0x9c>)
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d104      	bne.n	8008bea <vTaskSwitchContext+0x76>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	605a      	str	r2, [r3, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	4b08      	ldr	r3, [pc, #32]	; (8008c14 <vTaskSwitchContext+0xa0>)
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <vTaskSwitchContext+0x98>)
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	601a      	str	r2, [r3, #0]
}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	b002      	add	sp, #8
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	20000db8 	.word	0x20000db8
 8008c08:	20000da4 	.word	0x20000da4
 8008c0c:	20000d98 	.word	0x20000d98
 8008c10:	200008c0 	.word	0x200008c0
 8008c14:	200008bc 	.word	0x200008bc

08008c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <vTaskPlaceOnEventList+0x14>
 8008c28:	b672      	cpsid	i
 8008c2a:	e7fe      	b.n	8008c2a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <vTaskPlaceOnEventList+0x38>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3318      	adds	r3, #24
 8008c32:	001a      	movs	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	0011      	movs	r1, r2
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f7fe ffbe 	bl	8007bba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2101      	movs	r1, #1
 8008c42:	0018      	movs	r0, r3
 8008c44:	f000 fa36 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
}
 8008c48:	46c0      	nop			; (mov r8, r8)
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200008bc 	.word	0x200008bc

08008c54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <vTaskPlaceOnEventListRestricted+0x16>
 8008c66:	b672      	cpsid	i
 8008c68:	e7fe      	b.n	8008c68 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <vTaskPlaceOnEventListRestricted+0x48>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3318      	adds	r3, #24
 8008c70:	001a      	movs	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	0011      	movs	r1, r2
 8008c76:	0018      	movs	r0, r3
 8008c78:	f7fe ff7d 	bl	8007b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8008c82:	2301      	movs	r3, #1
 8008c84:	425b      	negs	r3, r3
 8008c86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	0011      	movs	r1, r2
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f000 fa10 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
	}
 8008c94:	46c0      	nop			; (mov r8, r8)
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b004      	add	sp, #16
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	200008bc 	.word	0x200008bc

08008ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <xTaskRemoveFromEventList+0x1a>
 8008cb6:	b672      	cpsid	i
 8008cb8:	e7fe      	b.n	8008cb8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	3318      	adds	r3, #24
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f7fe ffb1 	bl	8007c26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc4:	4b1e      	ldr	r3, [pc, #120]	; (8008d40 <xTaskRemoveFromEventList+0xa0>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11d      	bne.n	8008d08 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f7fe ffa8 	bl	8007c26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cda:	4b1a      	ldr	r3, [pc, #104]	; (8008d44 <xTaskRemoveFromEventList+0xa4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d903      	bls.n	8008cea <xTaskRemoveFromEventList+0x4a>
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce6:	4b17      	ldr	r3, [pc, #92]	; (8008d44 <xTaskRemoveFromEventList+0xa4>)
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	0013      	movs	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	189b      	adds	r3, r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <xTaskRemoveFromEventList+0xa8>)
 8008cf8:	189a      	adds	r2, r3, r2
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	0019      	movs	r1, r3
 8008d00:	0010      	movs	r0, r2
 8008d02:	f7fe ff38 	bl	8007b76 <vListInsertEnd>
 8008d06:	e007      	b.n	8008d18 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	3318      	adds	r3, #24
 8008d0c:	001a      	movs	r2, r3
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <xTaskRemoveFromEventList+0xac>)
 8008d10:	0011      	movs	r1, r2
 8008d12:	0018      	movs	r0, r3
 8008d14:	f7fe ff2f 	bl	8007b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <xTaskRemoveFromEventList+0xb0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d905      	bls.n	8008d32 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d26:	2301      	movs	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <xTaskRemoveFromEventList+0xb4>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e001      	b.n	8008d36 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008d36:	68fb      	ldr	r3, [r7, #12]
}
 8008d38:	0018      	movs	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	b004      	add	sp, #16
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20000db8 	.word	0x20000db8
 8008d44:	20000d98 	.word	0x20000d98
 8008d48:	200008c0 	.word	0x200008c0
 8008d4c:	20000d50 	.word	0x20000d50
 8008d50:	200008bc 	.word	0x200008bc
 8008d54:	20000da4 	.word	0x20000da4

08008d58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d60:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <vTaskInternalSetTimeOutState+0x20>)
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <vTaskInternalSetTimeOutState+0x24>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	605a      	str	r2, [r3, #4]
}
 8008d70:	46c0      	nop			; (mov r8, r8)
 8008d72:	46bd      	mov	sp, r7
 8008d74:	b002      	add	sp, #8
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000da8 	.word	0x20000da8
 8008d7c:	20000d94 	.word	0x20000d94

08008d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <xTaskCheckForTimeOut+0x14>
 8008d90:	b672      	cpsid	i
 8008d92:	e7fe      	b.n	8008d92 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <xTaskCheckForTimeOut+0x1e>
 8008d9a:	b672      	cpsid	i
 8008d9c:	e7fe      	b.n	8008d9c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008d9e:	f000 fd87 	bl	80098b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008da2:	4b1d      	ldr	r3, [pc, #116]	; (8008e18 <xTaskCheckForTimeOut+0x98>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3301      	adds	r3, #1
 8008db8:	d102      	bne.n	8008dc0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	e024      	b.n	8008e0a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <xTaskCheckForTimeOut+0x9c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d007      	beq.n	8008ddc <xTaskCheckForTimeOut+0x5c>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	e016      	b.n	8008e0a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d20c      	bcs.n	8008e00 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad2      	subs	r2, r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7ff ffaf 	bl	8008d58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	e004      	b.n	8008e0a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008e0a:	f000 fd63 	bl	80098d4 <vPortExitCritical>

	return xReturn;
 8008e0e:	697b      	ldr	r3, [r7, #20]
}
 8008e10:	0018      	movs	r0, r3
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b006      	add	sp, #24
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000d94 	.word	0x20000d94
 8008e1c:	20000da8 	.word	0x20000da8

08008e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <vTaskMissedYield+0x10>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	601a      	str	r2, [r3, #0]
}
 8008e2a:	46c0      	nop			; (mov r8, r8)
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20000da4 	.word	0x20000da4

08008e34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e3c:	f000 f84e 	bl	8008edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e40:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <prvIdleTask+0x1c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d9f9      	bls.n	8008e3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e48:	f000 fd22 	bl	8009890 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008e4c:	e7f6      	b.n	8008e3c <prvIdleTask+0x8>
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	200008c0 	.word	0x200008c0

08008e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
 8008e5e:	e00c      	b.n	8008e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	0013      	movs	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	189b      	adds	r3, r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4a14      	ldr	r2, [pc, #80]	; (8008ebc <prvInitialiseTaskLists+0x68>)
 8008e6c:	189b      	adds	r3, r3, r2
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7fe fe58 	bl	8007b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3301      	adds	r3, #1
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b37      	cmp	r3, #55	; 0x37
 8008e7e:	d9ef      	bls.n	8008e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e80:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <prvInitialiseTaskLists+0x6c>)
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7fe fe4e 	bl	8007b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e88:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <prvInitialiseTaskLists+0x70>)
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7fe fe4a 	bl	8007b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e90:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <prvInitialiseTaskLists+0x74>)
 8008e92:	0018      	movs	r0, r3
 8008e94:	f7fe fe46 	bl	8007b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e98:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <prvInitialiseTaskLists+0x78>)
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f7fe fe42 	bl	8007b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <prvInitialiseTaskLists+0x7c>)
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7fe fe3e 	bl	8007b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <prvInitialiseTaskLists+0x80>)
 8008eaa:	4a05      	ldr	r2, [pc, #20]	; (8008ec0 <prvInitialiseTaskLists+0x6c>)
 8008eac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008eae:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <prvInitialiseTaskLists+0x84>)
 8008eb0:	4a04      	ldr	r2, [pc, #16]	; (8008ec4 <prvInitialiseTaskLists+0x70>)
 8008eb2:	601a      	str	r2, [r3, #0]
}
 8008eb4:	46c0      	nop			; (mov r8, r8)
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	b002      	add	sp, #8
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200008c0 	.word	0x200008c0
 8008ec0:	20000d20 	.word	0x20000d20
 8008ec4:	20000d34 	.word	0x20000d34
 8008ec8:	20000d50 	.word	0x20000d50
 8008ecc:	20000d64 	.word	0x20000d64
 8008ed0:	20000d7c 	.word	0x20000d7c
 8008ed4:	20000d48 	.word	0x20000d48
 8008ed8:	20000d4c 	.word	0x20000d4c

08008edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ee2:	e01a      	b.n	8008f1a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008ee4:	f000 fce4 	bl	80098b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee8:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <prvCheckTasksWaitingTermination+0x50>)
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f7fe fe96 	bl	8007c26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008efa:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <prvCheckTasksWaitingTermination+0x54>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	1e5a      	subs	r2, r3, #1
 8008f00:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <prvCheckTasksWaitingTermination+0x54>)
 8008f02:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f04:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <prvCheckTasksWaitingTermination+0x58>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <prvCheckTasksWaitingTermination+0x58>)
 8008f0c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008f0e:	f000 fce1 	bl	80098d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 f80f 	bl	8008f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f1a:	4b06      	ldr	r3, [pc, #24]	; (8008f34 <prvCheckTasksWaitingTermination+0x58>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e0      	bne.n	8008ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	46c0      	nop			; (mov r8, r8)
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b002      	add	sp, #8
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20000d64 	.word	0x20000d64
 8008f30:	20000d90 	.word	0x20000d90
 8008f34:	20000d78 	.word	0x20000d78

08008f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2259      	movs	r2, #89	; 0x59
 8008f44:	5c9b      	ldrb	r3, [r3, r2]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	0018      	movs	r0, r3
 8008f50:	f000 fdf2 	bl	8009b38 <vPortFree>
				vPortFree( pxTCB );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	0018      	movs	r0, r3
 8008f58:	f000 fdee 	bl	8009b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f5c:	e010      	b.n	8008f80 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2259      	movs	r2, #89	; 0x59
 8008f62:	5c9b      	ldrb	r3, [r3, r2]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d104      	bne.n	8008f72 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f000 fde4 	bl	8009b38 <vPortFree>
	}
 8008f70:	e006      	b.n	8008f80 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2259      	movs	r2, #89	; 0x59
 8008f76:	5c9b      	ldrb	r3, [r3, r2]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d001      	beq.n	8008f80 <prvDeleteTCB+0x48>
 8008f7c:	b672      	cpsid	i
 8008f7e:	e7fe      	b.n	8008f7e <prvDeleteTCB+0x46>
	}
 8008f80:	46c0      	nop			; (mov r8, r8)
 8008f82:	46bd      	mov	sp, r7
 8008f84:	b002      	add	sp, #8
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <prvResetNextTaskUnblockTime+0x34>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	4252      	negs	r2, r2
 8008f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa0:	e008      	b.n	8008fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <prvResetNextTaskUnblockTime+0x34>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	46c0      	nop			; (mov r8, r8)
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	b002      	add	sp, #8
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000d48 	.word	0x20000d48
 8008fc0:	20000db0 	.word	0x20000db0

08008fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fca:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <xTaskGetSchedulerState+0x30>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	607b      	str	r3, [r7, #4]
 8008fd6:	e008      	b.n	8008fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fd8:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <xTaskGetSchedulerState+0x34>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d102      	bne.n	8008fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	e001      	b.n	8008fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fea:	687b      	ldr	r3, [r7, #4]
	}
 8008fec:	0018      	movs	r0, r3
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	b002      	add	sp, #8
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20000d9c 	.word	0x20000d9c
 8008ff8:	20000db8 	.word	0x20000db8

08008ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d044      	beq.n	800909c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009012:	4b25      	ldr	r3, [pc, #148]	; (80090a8 <xTaskPriorityDisinherit+0xac>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	429a      	cmp	r2, r3
 800901a:	d001      	beq.n	8009020 <xTaskPriorityDisinherit+0x24>
 800901c:	b672      	cpsid	i
 800901e:	e7fe      	b.n	800901e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <xTaskPriorityDisinherit+0x30>
 8009028:	b672      	cpsid	i
 800902a:	e7fe      	b.n	800902a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009030:	1e5a      	subs	r2, r3, #1
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800903e:	429a      	cmp	r2, r3
 8009040:	d02c      	beq.n	800909c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009046:	2b00      	cmp	r3, #0
 8009048:	d128      	bne.n	800909c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	3304      	adds	r3, #4
 800904e:	0018      	movs	r0, r3
 8009050:	f7fe fde9 	bl	8007c26 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	2238      	movs	r2, #56	; 0x38
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906c:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <xTaskPriorityDisinherit+0xb0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d903      	bls.n	800907c <xTaskPriorityDisinherit+0x80>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <xTaskPriorityDisinherit+0xb0>)
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009080:	0013      	movs	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	189b      	adds	r3, r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <xTaskPriorityDisinherit+0xb4>)
 800908a:	189a      	adds	r2, r3, r2
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3304      	adds	r3, #4
 8009090:	0019      	movs	r1, r3
 8009092:	0010      	movs	r0, r2
 8009094:	f7fe fd6f 	bl	8007b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800909c:	68fb      	ldr	r3, [r7, #12]
	}
 800909e:	0018      	movs	r0, r3
 80090a0:	46bd      	mov	sp, r7
 80090a2:	b004      	add	sp, #16
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	46c0      	nop			; (mov r8, r8)
 80090a8:	200008bc 	.word	0x200008bc
 80090ac:	20000d98 	.word	0x20000d98
 80090b0:	200008c0 	.word	0x200008c0

080090b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090be:	4b21      	ldr	r3, [pc, #132]	; (8009144 <prvAddCurrentTaskToDelayedList+0x90>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090c4:	4b20      	ldr	r3, [pc, #128]	; (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3304      	adds	r3, #4
 80090ca:	0018      	movs	r0, r3
 80090cc:	f7fe fdab 	bl	8007c26 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3301      	adds	r3, #1
 80090d4:	d10b      	bne.n	80090ee <prvAddCurrentTaskToDelayedList+0x3a>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d008      	beq.n	80090ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090dc:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	4b1a      	ldr	r3, [pc, #104]	; (800914c <prvAddCurrentTaskToDelayedList+0x98>)
 80090e4:	0011      	movs	r1, r2
 80090e6:	0018      	movs	r0, r3
 80090e8:	f7fe fd45 	bl	8007b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090ec:	e026      	b.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	18d3      	adds	r3, r2, r3
 80090f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	429a      	cmp	r2, r3
 8009104:	d209      	bcs.n	800911a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009106:	4b12      	ldr	r3, [pc, #72]	; (8009150 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3304      	adds	r3, #4
 8009110:	0019      	movs	r1, r3
 8009112:	0010      	movs	r0, r2
 8009114:	f7fe fd51 	bl	8007bba <vListInsert>
}
 8009118:	e010      	b.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800911a:	4b0e      	ldr	r3, [pc, #56]	; (8009154 <prvAddCurrentTaskToDelayedList+0xa0>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3304      	adds	r3, #4
 8009124:	0019      	movs	r1, r3
 8009126:	0010      	movs	r0, r2
 8009128:	f7fe fd47 	bl	8007bba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800912c:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <prvAddCurrentTaskToDelayedList+0xa4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	d202      	bcs.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009136:	4b08      	ldr	r3, [pc, #32]	; (8009158 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	601a      	str	r2, [r3, #0]
}
 800913c:	46c0      	nop			; (mov r8, r8)
 800913e:	46bd      	mov	sp, r7
 8009140:	b004      	add	sp, #16
 8009142:	bd80      	pop	{r7, pc}
 8009144:	20000d94 	.word	0x20000d94
 8009148:	200008bc 	.word	0x200008bc
 800914c:	20000d7c 	.word	0x20000d7c
 8009150:	20000d4c 	.word	0x20000d4c
 8009154:	20000d48 	.word	0x20000d48
 8009158:	20000db0 	.word	0x20000db0

0800915c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800915c:	b590      	push	{r4, r7, lr}
 800915e:	b089      	sub	sp, #36	; 0x24
 8009160:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009166:	f000 fac9 	bl	80096fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800916a:	4b17      	ldr	r3, [pc, #92]	; (80091c8 <xTimerCreateTimerTask+0x6c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d020      	beq.n	80091b4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800917a:	003a      	movs	r2, r7
 800917c:	1d39      	adds	r1, r7, #4
 800917e:	2308      	movs	r3, #8
 8009180:	18fb      	adds	r3, r7, r3
 8009182:	0018      	movs	r0, r3
 8009184:	f7fe fcb6 	bl	8007af4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009188:	683c      	ldr	r4, [r7, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	490f      	ldr	r1, [pc, #60]	; (80091cc <xTimerCreateTimerTask+0x70>)
 8009190:	480f      	ldr	r0, [pc, #60]	; (80091d0 <xTimerCreateTimerTask+0x74>)
 8009192:	9202      	str	r2, [sp, #8]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	2302      	movs	r3, #2
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	2300      	movs	r3, #0
 800919c:	0022      	movs	r2, r4
 800919e:	f7ff f996 	bl	80084ce <xTaskCreateStatic>
 80091a2:	0002      	movs	r2, r0
 80091a4:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <xTimerCreateTimerTask+0x78>)
 80091a6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091a8:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <xTimerCreateTimerTask+0x78>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80091b0:	2301      	movs	r3, #1
 80091b2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <xTimerCreateTimerTask+0x62>
 80091ba:	b672      	cpsid	i
 80091bc:	e7fe      	b.n	80091bc <xTimerCreateTimerTask+0x60>
	return xReturn;
 80091be:	68fb      	ldr	r3, [r7, #12]
}
 80091c0:	0018      	movs	r0, r3
 80091c2:	46bd      	mov	sp, r7
 80091c4:	b005      	add	sp, #20
 80091c6:	bd90      	pop	{r4, r7, pc}
 80091c8:	20000dec 	.word	0x20000dec
 80091cc:	0800cc68 	.word	0x0800cc68
 80091d0:	080092f5 	.word	0x080092f5
 80091d4:	20000df0 	.word	0x20000df0

080091d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091d8:	b590      	push	{r4, r7, lr}
 80091da:	b08b      	sub	sp, #44	; 0x2c
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <xTimerGenericCommand+0x1c>
 80091f0:	b672      	cpsid	i
 80091f2:	e7fe      	b.n	80091f2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091f4:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <xTimerGenericCommand+0x90>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d030      	beq.n	800925e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091fc:	2414      	movs	r4, #20
 80091fe:	193b      	adds	r3, r7, r4
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009204:	193b      	adds	r3, r7, r4
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800920a:	193b      	adds	r3, r7, r4
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b05      	cmp	r3, #5
 8009214:	dc19      	bgt.n	800924a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009216:	f7ff fed5 	bl	8008fc4 <xTaskGetSchedulerState>
 800921a:	0003      	movs	r3, r0
 800921c:	2b02      	cmp	r3, #2
 800921e:	d109      	bne.n	8009234 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009220:	4b11      	ldr	r3, [pc, #68]	; (8009268 <xTimerGenericCommand+0x90>)
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009226:	1939      	adds	r1, r7, r4
 8009228:	2300      	movs	r3, #0
 800922a:	f7fe fdeb 	bl	8007e04 <xQueueGenericSend>
 800922e:	0003      	movs	r3, r0
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
 8009232:	e014      	b.n	800925e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <xTimerGenericCommand+0x90>)
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	2314      	movs	r3, #20
 800923a:	18f9      	adds	r1, r7, r3
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	f7fe fde0 	bl	8007e04 <xQueueGenericSend>
 8009244:	0003      	movs	r3, r0
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
 8009248:	e009      	b.n	800925e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <xTimerGenericCommand+0x90>)
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	2314      	movs	r3, #20
 8009252:	18f9      	adds	r1, r7, r3
 8009254:	2300      	movs	r3, #0
 8009256:	f7fe fe99 	bl	8007f8c <xQueueGenericSendFromISR>
 800925a:	0003      	movs	r3, r0
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009260:	0018      	movs	r0, r3
 8009262:	46bd      	mov	sp, r7
 8009264:	b00b      	add	sp, #44	; 0x2c
 8009266:	bd90      	pop	{r4, r7, pc}
 8009268:	20000dec 	.word	0x20000dec

0800926c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af02      	add	r7, sp, #8
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009276:	4b1e      	ldr	r3, [pc, #120]	; (80092f0 <prvProcessExpiredTimer+0x84>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3304      	adds	r3, #4
 8009284:	0018      	movs	r0, r3
 8009286:	f7fe fcce 	bl	8007c26 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2228      	movs	r2, #40	; 0x28
 800928e:	5c9b      	ldrb	r3, [r3, r2]
 8009290:	001a      	movs	r2, r3
 8009292:	2304      	movs	r3, #4
 8009294:	4013      	ands	r3, r2
 8009296:	d019      	beq.n	80092cc <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	699a      	ldr	r2, [r3, #24]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	18d1      	adds	r1, r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f8c3 	bl	8009430 <prvInsertTimerInActiveList>
 80092aa:	1e03      	subs	r3, r0, #0
 80092ac:	d017      	beq.n	80092de <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	2300      	movs	r3, #0
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	2100      	movs	r1, #0
 80092ba:	f7ff ff8d 	bl	80091d8 <xTimerGenericCommand>
 80092be:	0003      	movs	r3, r0
 80092c0:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <prvProcessExpiredTimer+0x72>
 80092c8:	b672      	cpsid	i
 80092ca:	e7fe      	b.n	80092ca <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2228      	movs	r2, #40	; 0x28
 80092d0:	5c9b      	ldrb	r3, [r3, r2]
 80092d2:	2201      	movs	r2, #1
 80092d4:	4393      	bics	r3, r2
 80092d6:	b2d9      	uxtb	r1, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2228      	movs	r2, #40	; 0x28
 80092dc:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	0010      	movs	r0, r2
 80092e6:	4798      	blx	r3
}
 80092e8:	46c0      	nop			; (mov r8, r8)
 80092ea:	46bd      	mov	sp, r7
 80092ec:	b004      	add	sp, #16
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20000de4 	.word	0x20000de4

080092f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092fc:	2308      	movs	r3, #8
 80092fe:	18fb      	adds	r3, r7, r3
 8009300:	0018      	movs	r0, r3
 8009302:	f000 f853 	bl	80093ac <prvGetNextExpireTime>
 8009306:	0003      	movs	r3, r0
 8009308:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	0011      	movs	r1, r2
 8009310:	0018      	movs	r0, r3
 8009312:	f000 f803 	bl	800931c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009316:	f000 f8cd 	bl	80094b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800931a:	e7ef      	b.n	80092fc <prvTimerTask+0x8>

0800931c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009326:	f7ff facf 	bl	80088c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800932a:	2308      	movs	r3, #8
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	0018      	movs	r0, r3
 8009330:	f000 f85e 	bl	80093f0 <prvSampleTimeNow>
 8009334:	0003      	movs	r3, r0
 8009336:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d12b      	bne.n	8009396 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10c      	bne.n	800935e <prvProcessTimerOrBlockTask+0x42>
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	429a      	cmp	r2, r3
 800934a:	d808      	bhi.n	800935e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800934c:	f7ff fac8 	bl	80088e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	0011      	movs	r1, r2
 8009356:	0018      	movs	r0, r3
 8009358:	f7ff ff88 	bl	800926c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800935c:	e01d      	b.n	800939a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d008      	beq.n	8009376 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009364:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <prvProcessTimerOrBlockTask+0x88>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <prvProcessTimerOrBlockTask+0x56>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <prvProcessTimerOrBlockTask+0x58>
 8009372:	2300      	movs	r3, #0
 8009374:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <prvProcessTimerOrBlockTask+0x8c>)
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	0019      	movs	r1, r3
 8009384:	f7ff f870 	bl	8008468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009388:	f7ff faaa 	bl	80088e0 <xTaskResumeAll>
 800938c:	1e03      	subs	r3, r0, #0
 800938e:	d104      	bne.n	800939a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8009390:	f000 fa7e 	bl	8009890 <vPortYield>
}
 8009394:	e001      	b.n	800939a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8009396:	f7ff faa3 	bl	80088e0 <xTaskResumeAll>
}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	46bd      	mov	sp, r7
 800939e:	b004      	add	sp, #16
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	20000de8 	.word	0x20000de8
 80093a8:	20000dec 	.word	0x20000dec

080093ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093b4:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <prvGetNextExpireTime+0x40>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <prvGetNextExpireTime+0x16>
 80093be:	2201      	movs	r2, #1
 80093c0:	e000      	b.n	80093c4 <prvGetNextExpireTime+0x18>
 80093c2:	2200      	movs	r2, #0
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d105      	bne.n	80093dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <prvGetNextExpireTime+0x40>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	e001      	b.n	80093e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093e0:	68fb      	ldr	r3, [r7, #12]
}
 80093e2:	0018      	movs	r0, r3
 80093e4:	46bd      	mov	sp, r7
 80093e6:	b004      	add	sp, #16
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	46c0      	nop			; (mov r8, r8)
 80093ec:	20000de4 	.word	0x20000de4

080093f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093f8:	f7ff fafe 	bl	80089f8 <xTaskGetTickCount>
 80093fc:	0003      	movs	r3, r0
 80093fe:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <prvSampleTimeNow+0x3c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	429a      	cmp	r2, r3
 8009408:	d205      	bcs.n	8009416 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800940a:	f000 f919 	bl	8009640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	e002      	b.n	800941c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800941c:	4b03      	ldr	r3, [pc, #12]	; (800942c <prvSampleTimeNow+0x3c>)
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8009422:	68fb      	ldr	r3, [r7, #12]
}
 8009424:	0018      	movs	r0, r3
 8009426:	46bd      	mov	sp, r7
 8009428:	b004      	add	sp, #16
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20000df4 	.word	0x20000df4

08009430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	429a      	cmp	r2, r3
 8009454:	d812      	bhi.n	800947c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	429a      	cmp	r2, r3
 8009462:	d302      	bcc.n	800946a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009464:	2301      	movs	r3, #1
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e01b      	b.n	80094a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800946a:	4b10      	ldr	r3, [pc, #64]	; (80094ac <prvInsertTimerInActiveList+0x7c>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3304      	adds	r3, #4
 8009472:	0019      	movs	r1, r3
 8009474:	0010      	movs	r0, r2
 8009476:	f7fe fba0 	bl	8007bba <vListInsert>
 800947a:	e012      	b.n	80094a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d206      	bcs.n	8009492 <prvInsertTimerInActiveList+0x62>
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d302      	bcc.n	8009492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800948c:	2301      	movs	r3, #1
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e007      	b.n	80094a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009492:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <prvInsertTimerInActiveList+0x80>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3304      	adds	r3, #4
 800949a:	0019      	movs	r1, r3
 800949c:	0010      	movs	r0, r2
 800949e:	f7fe fb8c 	bl	8007bba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094a2:	697b      	ldr	r3, [r7, #20]
}
 80094a4:	0018      	movs	r0, r3
 80094a6:	46bd      	mov	sp, r7
 80094a8:	b006      	add	sp, #24
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20000de8 	.word	0x20000de8
 80094b0:	20000de4 	.word	0x20000de4

080094b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b08d      	sub	sp, #52	; 0x34
 80094b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094ba:	e0ac      	b.n	8009616 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094bc:	2208      	movs	r2, #8
 80094be:	18bb      	adds	r3, r7, r2
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da0f      	bge.n	80094e6 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094c6:	18bb      	adds	r3, r7, r2
 80094c8:	3304      	adds	r3, #4
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <prvProcessReceivedCommands+0x22>
 80094d2:	b672      	cpsid	i
 80094d4:	e7fe      	b.n	80094d4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	6858      	ldr	r0, [r3, #4]
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	0019      	movs	r1, r3
 80094e4:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094e6:	2208      	movs	r2, #8
 80094e8:	18bb      	adds	r3, r7, r2
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da00      	bge.n	80094f2 <prvProcessReceivedCommands+0x3e>
 80094f0:	e090      	b.n	8009614 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094f2:	18bb      	adds	r3, r7, r2
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	3304      	adds	r3, #4
 8009504:	0018      	movs	r0, r3
 8009506:	f7fe fb8e 	bl	8007c26 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	0018      	movs	r0, r3
 800950e:	f7ff ff6f 	bl	80093f0 <prvSampleTimeNow>
 8009512:	0003      	movs	r3, r0
 8009514:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8009516:	2308      	movs	r3, #8
 8009518:	18fb      	adds	r3, r7, r3
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b09      	cmp	r3, #9
 800951e:	d900      	bls.n	8009522 <prvProcessReceivedCommands+0x6e>
 8009520:	e079      	b.n	8009616 <prvProcessReceivedCommands+0x162>
 8009522:	009a      	lsls	r2, r3, #2
 8009524:	4b44      	ldr	r3, [pc, #272]	; (8009638 <prvProcessReceivedCommands+0x184>)
 8009526:	18d3      	adds	r3, r2, r3
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	2228      	movs	r2, #40	; 0x28
 8009530:	5c9b      	ldrb	r3, [r3, r2]
 8009532:	2201      	movs	r2, #1
 8009534:	4313      	orrs	r3, r2
 8009536:	b2d9      	uxtb	r1, r3
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	2228      	movs	r2, #40	; 0x28
 800953c:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800953e:	2408      	movs	r4, #8
 8009540:	193b      	adds	r3, r7, r4
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	18d1      	adds	r1, r2, r3
 800954a:	193b      	adds	r3, r7, r4
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	69fa      	ldr	r2, [r7, #28]
 8009550:	6a38      	ldr	r0, [r7, #32]
 8009552:	f7ff ff6d 	bl	8009430 <prvInsertTimerInActiveList>
 8009556:	1e03      	subs	r3, r0, #0
 8009558:	d05d      	beq.n	8009616 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	6a3a      	ldr	r2, [r7, #32]
 8009560:	0010      	movs	r0, r2
 8009562:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	2228      	movs	r2, #40	; 0x28
 8009568:	5c9b      	ldrb	r3, [r3, r2]
 800956a:	001a      	movs	r2, r3
 800956c:	2304      	movs	r3, #4
 800956e:	4013      	ands	r3, r2
 8009570:	d051      	beq.n	8009616 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009572:	193b      	adds	r3, r7, r4
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	18d2      	adds	r2, r2, r3
 800957c:	6a38      	ldr	r0, [r7, #32]
 800957e:	2300      	movs	r3, #0
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	2100      	movs	r1, #0
 8009586:	f7ff fe27 	bl	80091d8 <xTimerGenericCommand>
 800958a:	0003      	movs	r3, r0
 800958c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d140      	bne.n	8009616 <prvProcessReceivedCommands+0x162>
 8009594:	b672      	cpsid	i
 8009596:	e7fe      	b.n	8009596 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2228      	movs	r2, #40	; 0x28
 800959c:	5c9b      	ldrb	r3, [r3, r2]
 800959e:	2201      	movs	r2, #1
 80095a0:	4393      	bics	r3, r2
 80095a2:	b2d9      	uxtb	r1, r3
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	2228      	movs	r2, #40	; 0x28
 80095a8:	5499      	strb	r1, [r3, r2]
					break;
 80095aa:	e034      	b.n	8009616 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	2228      	movs	r2, #40	; 0x28
 80095b0:	5c9b      	ldrb	r3, [r3, r2]
 80095b2:	2201      	movs	r2, #1
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b2d9      	uxtb	r1, r3
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	2228      	movs	r2, #40	; 0x28
 80095bc:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095be:	2308      	movs	r3, #8
 80095c0:	18fb      	adds	r3, r7, r3
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	6a3b      	ldr	r3, [r7, #32]
 80095c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <prvProcessReceivedCommands+0x120>
 80095d0:	b672      	cpsid	i
 80095d2:	e7fe      	b.n	80095d2 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	18d1      	adds	r1, r2, r3
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	6a38      	ldr	r0, [r7, #32]
 80095e2:	f7ff ff25 	bl	8009430 <prvInsertTimerInActiveList>
					break;
 80095e6:	e016      	b.n	8009616 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	2228      	movs	r2, #40	; 0x28
 80095ec:	5c9b      	ldrb	r3, [r3, r2]
 80095ee:	001a      	movs	r2, r3
 80095f0:	2302      	movs	r3, #2
 80095f2:	4013      	ands	r3, r2
 80095f4:	d104      	bne.n	8009600 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	0018      	movs	r0, r3
 80095fa:	f000 fa9d 	bl	8009b38 <vPortFree>
 80095fe:	e00a      	b.n	8009616 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	2228      	movs	r2, #40	; 0x28
 8009604:	5c9b      	ldrb	r3, [r3, r2]
 8009606:	2201      	movs	r2, #1
 8009608:	4393      	bics	r3, r2
 800960a:	b2d9      	uxtb	r1, r3
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	2228      	movs	r2, #40	; 0x28
 8009610:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009612:	e000      	b.n	8009616 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009614:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009616:	4b09      	ldr	r3, [pc, #36]	; (800963c <prvProcessReceivedCommands+0x188>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2208      	movs	r2, #8
 800961c:	18b9      	adds	r1, r7, r2
 800961e:	2200      	movs	r2, #0
 8009620:	0018      	movs	r0, r3
 8009622:	f7fe fd27 	bl	8008074 <xQueueReceive>
 8009626:	1e03      	subs	r3, r0, #0
 8009628:	d000      	beq.n	800962c <prvProcessReceivedCommands+0x178>
 800962a:	e747      	b.n	80094bc <prvProcessReceivedCommands+0x8>
	}
}
 800962c:	46c0      	nop			; (mov r8, r8)
 800962e:	46c0      	nop			; (mov r8, r8)
 8009630:	46bd      	mov	sp, r7
 8009632:	b00b      	add	sp, #44	; 0x2c
 8009634:	bd90      	pop	{r4, r7, pc}
 8009636:	46c0      	nop			; (mov r8, r8)
 8009638:	0800cdf8 	.word	0x0800cdf8
 800963c:	20000dec 	.word	0x20000dec

08009640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009646:	e041      	b.n	80096cc <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009648:	4b2a      	ldr	r3, [pc, #168]	; (80096f4 <prvSwitchTimerLists+0xb4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009652:	4b28      	ldr	r3, [pc, #160]	; (80096f4 <prvSwitchTimerLists+0xb4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3304      	adds	r3, #4
 8009660:	0018      	movs	r0, r3
 8009662:	f7fe fae0 	bl	8007c26 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	0010      	movs	r0, r2
 800966e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2228      	movs	r2, #40	; 0x28
 8009674:	5c9b      	ldrb	r3, [r3, r2]
 8009676:	001a      	movs	r2, r3
 8009678:	2304      	movs	r3, #4
 800967a:	4013      	ands	r3, r2
 800967c:	d026      	beq.n	80096cc <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	18d3      	adds	r3, r2, r3
 8009686:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	429a      	cmp	r2, r3
 800968e:	d90e      	bls.n	80096ae <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800969c:	4b15      	ldr	r3, [pc, #84]	; (80096f4 <prvSwitchTimerLists+0xb4>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3304      	adds	r3, #4
 80096a4:	0019      	movs	r1, r3
 80096a6:	0010      	movs	r0, r2
 80096a8:	f7fe fa87 	bl	8007bba <vListInsert>
 80096ac:	e00e      	b.n	80096cc <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	2100      	movs	r1, #0
 80096ba:	f7ff fd8d 	bl	80091d8 <xTimerGenericCommand>
 80096be:	0003      	movs	r3, r0
 80096c0:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <prvSwitchTimerLists+0x8c>
 80096c8:	b672      	cpsid	i
 80096ca:	e7fe      	b.n	80096ca <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <prvSwitchTimerLists+0xb4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1b8      	bne.n	8009648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <prvSwitchTimerLists+0xb4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096dc:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <prvSwitchTimerLists+0xb8>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <prvSwitchTimerLists+0xb4>)
 80096e2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <prvSwitchTimerLists+0xb8>)
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	601a      	str	r2, [r3, #0]
}
 80096ea:	46c0      	nop			; (mov r8, r8)
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b006      	add	sp, #24
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	20000de4 	.word	0x20000de4
 80096f8:	20000de8 	.word	0x20000de8

080096fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009702:	f000 f8d5 	bl	80098b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <prvCheckForValidListAndQueue+0x64>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d123      	bne.n	8009756 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800970e:	4b15      	ldr	r3, [pc, #84]	; (8009764 <prvCheckForValidListAndQueue+0x68>)
 8009710:	0018      	movs	r0, r3
 8009712:	f7fe fa07 	bl	8007b24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <prvCheckForValidListAndQueue+0x6c>)
 8009718:	0018      	movs	r0, r3
 800971a:	f7fe fa03 	bl	8007b24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <prvCheckForValidListAndQueue+0x70>)
 8009720:	4a10      	ldr	r2, [pc, #64]	; (8009764 <prvCheckForValidListAndQueue+0x68>)
 8009722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009724:	4b12      	ldr	r3, [pc, #72]	; (8009770 <prvCheckForValidListAndQueue+0x74>)
 8009726:	4a10      	ldr	r2, [pc, #64]	; (8009768 <prvCheckForValidListAndQueue+0x6c>)
 8009728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800972a:	4b12      	ldr	r3, [pc, #72]	; (8009774 <prvCheckForValidListAndQueue+0x78>)
 800972c:	4a12      	ldr	r2, [pc, #72]	; (8009778 <prvCheckForValidListAndQueue+0x7c>)
 800972e:	2100      	movs	r1, #0
 8009730:	9100      	str	r1, [sp, #0]
 8009732:	2110      	movs	r1, #16
 8009734:	200a      	movs	r0, #10
 8009736:	f7fe faf2 	bl	8007d1e <xQueueGenericCreateStatic>
 800973a:	0002      	movs	r2, r0
 800973c:	4b08      	ldr	r3, [pc, #32]	; (8009760 <prvCheckForValidListAndQueue+0x64>)
 800973e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <prvCheckForValidListAndQueue+0x64>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d006      	beq.n	8009756 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <prvCheckForValidListAndQueue+0x64>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a0b      	ldr	r2, [pc, #44]	; (800977c <prvCheckForValidListAndQueue+0x80>)
 800974e:	0011      	movs	r1, r2
 8009750:	0018      	movs	r0, r3
 8009752:	f7fe fe61 	bl	8008418 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009756:	f000 f8bd 	bl	80098d4 <vPortExitCritical>
}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000dec 	.word	0x20000dec
 8009764:	20000dbc 	.word	0x20000dbc
 8009768:	20000dd0 	.word	0x20000dd0
 800976c:	20000de4 	.word	0x20000de4
 8009770:	20000de8 	.word	0x20000de8
 8009774:	20000e98 	.word	0x20000e98
 8009778:	20000df8 	.word	0x20000df8
 800977c:	0800cc70 	.word	0x0800cc70

08009780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3b04      	subs	r3, #4
 8009790:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2280      	movs	r2, #128	; 0x80
 8009796:	0452      	lsls	r2, r2, #17
 8009798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3b04      	subs	r3, #4
 800979e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097ac:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <pxPortInitialiseStack+0x50>)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3b14      	subs	r3, #20
 80097b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3b20      	subs	r3, #32
 80097c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097c4:	68fb      	ldr	r3, [r7, #12]
}
 80097c6:	0018      	movs	r0, r3
 80097c8:	46bd      	mov	sp, r7
 80097ca:	b004      	add	sp, #16
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	46c0      	nop			; (mov r8, r8)
 80097d0:	080097d5 	.word	0x080097d5

080097d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097de:	4b08      	ldr	r3, [pc, #32]	; (8009800 <prvTaskExitError+0x2c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	d001      	beq.n	80097ea <prvTaskExitError+0x16>
 80097e6:	b672      	cpsid	i
 80097e8:	e7fe      	b.n	80097e8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80097ea:	b672      	cpsid	i
	while( ulDummy == 0 )
 80097ec:	46c0      	nop			; (mov r8, r8)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0fc      	beq.n	80097ee <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097f4:	46c0      	nop			; (mov r8, r8)
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b002      	add	sp, #8
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	46c0      	nop			; (mov r8, r8)
 8009800:	2000000c 	.word	0x2000000c

08009804 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009808:	46c0      	nop			; (mov r8, r8)
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009810:	4a0b      	ldr	r2, [pc, #44]	; (8009840 <pxCurrentTCBConst2>)
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	3020      	adds	r0, #32
 8009818:	f380 8809 	msr	PSP, r0
 800981c:	2002      	movs	r0, #2
 800981e:	f380 8814 	msr	CONTROL, r0
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009828:	46ae      	mov	lr, r5
 800982a:	bc08      	pop	{r3}
 800982c:	bc04      	pop	{r2}
 800982e:	b662      	cpsie	i
 8009830:	4718      	bx	r3
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	46c0      	nop			; (mov r8, r8)
 8009836:	46c0      	nop			; (mov r8, r8)
 8009838:	46c0      	nop			; (mov r8, r8)
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	46c0      	nop			; (mov r8, r8)
 800983e:	46c0      	nop			; (mov r8, r8)

08009840 <pxCurrentTCBConst2>:
 8009840:	200008bc 	.word	0x200008bc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009844:	46c0      	nop			; (mov r8, r8)
 8009846:	46c0      	nop			; (mov r8, r8)

08009848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800984c:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <xPortStartScheduler+0x40>)
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <xPortStartScheduler+0x40>)
 8009852:	21ff      	movs	r1, #255	; 0xff
 8009854:	0409      	lsls	r1, r1, #16
 8009856:	430a      	orrs	r2, r1
 8009858:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <xPortStartScheduler+0x40>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <xPortStartScheduler+0x40>)
 8009860:	21ff      	movs	r1, #255	; 0xff
 8009862:	0609      	lsls	r1, r1, #24
 8009864:	430a      	orrs	r2, r1
 8009866:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009868:	f000 f898 	bl	800999c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800986c:	4b07      	ldr	r3, [pc, #28]	; (800988c <xPortStartScheduler+0x44>)
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009872:	f7ff ffcd 	bl	8009810 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009876:	f7ff f97d 	bl	8008b74 <vTaskSwitchContext>
	prvTaskExitError();
 800987a:	f7ff ffab 	bl	80097d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800987e:	2300      	movs	r3, #0
}
 8009880:	0018      	movs	r0, r3
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	46c0      	nop			; (mov r8, r8)
 8009888:	e000ed20 	.word	0xe000ed20
 800988c:	2000000c 	.word	0x2000000c

08009890 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009894:	4b05      	ldr	r3, [pc, #20]	; (80098ac <vPortYield+0x1c>)
 8009896:	2280      	movs	r2, #128	; 0x80
 8009898:	0552      	lsls	r2, r2, #21
 800989a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800989c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80098a0:	f3bf 8f6f 	isb	sy
}
 80098a4:	46c0      	nop			; (mov r8, r8)
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80098b4:	b672      	cpsid	i
	uxCriticalNesting++;
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <vPortEnterCritical+0x20>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <vPortEnterCritical+0x20>)
 80098be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80098c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80098c4:	f3bf 8f6f 	isb	sy
}
 80098c8:	46c0      	nop			; (mov r8, r8)
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	2000000c 	.word	0x2000000c

080098d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098d8:	4b09      	ldr	r3, [pc, #36]	; (8009900 <vPortExitCritical+0x2c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <vPortExitCritical+0x10>
 80098e0:	b672      	cpsid	i
 80098e2:	e7fe      	b.n	80098e2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80098e4:	4b06      	ldr	r3, [pc, #24]	; (8009900 <vPortExitCritical+0x2c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	1e5a      	subs	r2, r3, #1
 80098ea:	4b05      	ldr	r3, [pc, #20]	; (8009900 <vPortExitCritical+0x2c>)
 80098ec:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80098ee:	4b04      	ldr	r3, [pc, #16]	; (8009900 <vPortExitCritical+0x2c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d100      	bne.n	80098f8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80098f6:	b662      	cpsie	i
	}
}
 80098f8:	46c0      	nop			; (mov r8, r8)
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	2000000c 	.word	0x2000000c

08009904 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009904:	f3ef 8010 	mrs	r0, PRIMASK
 8009908:	b672      	cpsid	i
 800990a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800990c:	46c0      	nop			; (mov r8, r8)
 800990e:	0018      	movs	r0, r3

08009910 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009910:	f380 8810 	msr	PRIMASK, r0
 8009914:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8009916:	46c0      	nop			; (mov r8, r8)
	...

08009920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009920:	f3ef 8009 	mrs	r0, PSP
 8009924:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <pxCurrentTCBConst>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	3820      	subs	r0, #32
 800992a:	6010      	str	r0, [r2, #0]
 800992c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800992e:	4644      	mov	r4, r8
 8009930:	464d      	mov	r5, r9
 8009932:	4656      	mov	r6, sl
 8009934:	465f      	mov	r7, fp
 8009936:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009938:	b508      	push	{r3, lr}
 800993a:	b672      	cpsid	i
 800993c:	f7ff f91a 	bl	8008b74 <vTaskSwitchContext>
 8009940:	b662      	cpsie	i
 8009942:	bc0c      	pop	{r2, r3}
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	6808      	ldr	r0, [r1, #0]
 8009948:	3010      	adds	r0, #16
 800994a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800994c:	46a0      	mov	r8, r4
 800994e:	46a9      	mov	r9, r5
 8009950:	46b2      	mov	sl, r6
 8009952:	46bb      	mov	fp, r7
 8009954:	f380 8809 	msr	PSP, r0
 8009958:	3820      	subs	r0, #32
 800995a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800995c:	4718      	bx	r3
 800995e:	46c0      	nop			; (mov r8, r8)

08009960 <pxCurrentTCBConst>:
 8009960:	200008bc 	.word	0x200008bc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009964:	46c0      	nop			; (mov r8, r8)
 8009966:	46c0      	nop			; (mov r8, r8)

08009968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800996e:	f7ff ffc9 	bl	8009904 <ulSetInterruptMaskFromISR>
 8009972:	0003      	movs	r3, r0
 8009974:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009976:	f7ff f84d 	bl	8008a14 <xTaskIncrementTick>
 800997a:	1e03      	subs	r3, r0, #0
 800997c:	d003      	beq.n	8009986 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800997e:	4b06      	ldr	r3, [pc, #24]	; (8009998 <xPortSysTickHandler+0x30>)
 8009980:	2280      	movs	r2, #128	; 0x80
 8009982:	0552      	lsls	r2, r2, #21
 8009984:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	0018      	movs	r0, r3
 800998a:	f7ff ffc1 	bl	8009910 <vClearInterruptMaskFromISR>
}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	46bd      	mov	sp, r7
 8009992:	b002      	add	sp, #8
 8009994:	bd80      	pop	{r7, pc}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099a0:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <vPortSetupTimerInterrupt+0x38>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <vPortSetupTimerInterrupt+0x3c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	22fa      	movs	r2, #250	; 0xfa
 80099b2:	0091      	lsls	r1, r2, #2
 80099b4:	0018      	movs	r0, r3
 80099b6:	f7f6 fbc3 	bl	8000140 <__udivsi3>
 80099ba:	0003      	movs	r3, r0
 80099bc:	001a      	movs	r2, r3
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <vPortSetupTimerInterrupt+0x40>)
 80099c0:	3a01      	subs	r2, #1
 80099c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099c6:	2207      	movs	r2, #7
 80099c8:	601a      	str	r2, [r3, #0]
}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	e000e010 	.word	0xe000e010
 80099d4:	e000e018 	.word	0xe000e018
 80099d8:	20000000 	.word	0x20000000
 80099dc:	e000e014 	.word	0xe000e014

080099e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80099ec:	f7fe ff6c 	bl	80088c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099f0:	4b4b      	ldr	r3, [pc, #300]	; (8009b20 <pvPortMalloc+0x140>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099f8:	f000 f8ec 	bl	8009bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099fc:	4b49      	ldr	r3, [pc, #292]	; (8009b24 <pvPortMalloc+0x144>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4013      	ands	r3, r2
 8009a04:	d000      	beq.n	8009a08 <pvPortMalloc+0x28>
 8009a06:	e07e      	b.n	8009b06 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d012      	beq.n	8009a34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8009a0e:	2208      	movs	r2, #8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	189b      	adds	r3, r3, r2
 8009a14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2207      	movs	r2, #7
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	d00a      	beq.n	8009a34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2207      	movs	r2, #7
 8009a22:	4393      	bics	r3, r2
 8009a24:	3308      	adds	r3, #8
 8009a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2207      	movs	r2, #7
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	d001      	beq.n	8009a34 <pvPortMalloc+0x54>
 8009a30:	b672      	cpsid	i
 8009a32:	e7fe      	b.n	8009a32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d065      	beq.n	8009b06 <pvPortMalloc+0x126>
 8009a3a:	4b3b      	ldr	r3, [pc, #236]	; (8009b28 <pvPortMalloc+0x148>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d860      	bhi.n	8009b06 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a44:	4b39      	ldr	r3, [pc, #228]	; (8009b2c <pvPortMalloc+0x14c>)
 8009a46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009a48:	4b38      	ldr	r3, [pc, #224]	; (8009b2c <pvPortMalloc+0x14c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a4e:	e004      	b.n	8009a5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d903      	bls.n	8009a6c <pvPortMalloc+0x8c>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f1      	bne.n	8009a50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a6c:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <pvPortMalloc+0x140>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d047      	beq.n	8009b06 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2208      	movs	r2, #8
 8009a7c:	189b      	adds	r3, r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	2308      	movs	r3, #8
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d916      	bls.n	8009ac6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	18d3      	adds	r3, r2, r3
 8009a9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2207      	movs	r2, #7
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d001      	beq.n	8009aac <pvPortMalloc+0xcc>
 8009aa8:	b672      	cpsid	i
 8009aaa:	e7fe      	b.n	8009aaa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	1ad2      	subs	r2, r2, r3
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f000 f8e7 	bl	8009c94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ac6:	4b18      	ldr	r3, [pc, #96]	; (8009b28 <pvPortMalloc+0x148>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	1ad2      	subs	r2, r2, r3
 8009ad0:	4b15      	ldr	r3, [pc, #84]	; (8009b28 <pvPortMalloc+0x148>)
 8009ad2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ad4:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <pvPortMalloc+0x148>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b15      	ldr	r3, [pc, #84]	; (8009b30 <pvPortMalloc+0x150>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d203      	bcs.n	8009ae8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ae0:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <pvPortMalloc+0x148>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <pvPortMalloc+0x150>)
 8009ae6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <pvPortMalloc+0x144>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	431a      	orrs	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <pvPortMalloc+0x154>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <pvPortMalloc+0x154>)
 8009b04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b06:	f7fe feeb 	bl	80088e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2207      	movs	r2, #7
 8009b0e:	4013      	ands	r3, r2
 8009b10:	d001      	beq.n	8009b16 <pvPortMalloc+0x136>
 8009b12:	b672      	cpsid	i
 8009b14:	e7fe      	b.n	8009b14 <pvPortMalloc+0x134>
	return pvReturn;
 8009b16:	68fb      	ldr	r3, [r7, #12]
}
 8009b18:	0018      	movs	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	b006      	add	sp, #24
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20001af0 	.word	0x20001af0
 8009b24:	20001b04 	.word	0x20001b04
 8009b28:	20001af4 	.word	0x20001af4
 8009b2c:	20001ae8 	.word	0x20001ae8
 8009b30:	20001af8 	.word	0x20001af8
 8009b34:	20001afc 	.word	0x20001afc

08009b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d03a      	beq.n	8009bc0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	18d3      	adds	r3, r2, r3
 8009b52:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <vPortFree+0x90>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4013      	ands	r3, r2
 8009b62:	d101      	bne.n	8009b68 <vPortFree+0x30>
 8009b64:	b672      	cpsid	i
 8009b66:	e7fe      	b.n	8009b66 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <vPortFree+0x3c>
 8009b70:	b672      	cpsid	i
 8009b72:	e7fe      	b.n	8009b72 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <vPortFree+0x90>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d01f      	beq.n	8009bc0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d11b      	bne.n	8009bc0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <vPortFree+0x90>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	43db      	mvns	r3, r3
 8009b92:	401a      	ands	r2, r3
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b98:	f7fe fe96 	bl	80088c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <vPortFree+0x94>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	18d2      	adds	r2, r2, r3
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <vPortFree+0x94>)
 8009ba8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	0018      	movs	r0, r3
 8009bae:	f000 f871 	bl	8009c94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <vPortFree+0x98>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <vPortFree+0x98>)
 8009bba:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8009bbc:	f7fe fe90 	bl	80088e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bc0:	46c0      	nop			; (mov r8, r8)
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b004      	add	sp, #16
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20001b04 	.word	0x20001b04
 8009bcc:	20001af4 	.word	0x20001af4
 8009bd0:	20001b00 	.word	0x20001b00

08009bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bda:	23c0      	movs	r3, #192	; 0xc0
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009be0:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <prvHeapInit+0xa8>)
 8009be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2207      	movs	r2, #7
 8009be8:	4013      	ands	r3, r2
 8009bea:	d00c      	beq.n	8009c06 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3307      	adds	r3, #7
 8009bf0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2207      	movs	r2, #7
 8009bf6:	4393      	bics	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	4b1e      	ldr	r3, [pc, #120]	; (8009c7c <prvHeapInit+0xa8>)
 8009c02:	18d3      	adds	r3, r2, r3
 8009c04:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c0a:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <prvHeapInit+0xac>)
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c10:	4b1b      	ldr	r3, [pc, #108]	; (8009c80 <prvHeapInit+0xac>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	18d3      	adds	r3, r2, r3
 8009c1c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c1e:	2208      	movs	r2, #8
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2207      	movs	r2, #7
 8009c2a:	4393      	bics	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4b14      	ldr	r3, [pc, #80]	; (8009c84 <prvHeapInit+0xb0>)
 8009c32:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009c34:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <prvHeapInit+0xb0>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c3c:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <prvHeapInit+0xb0>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	1ad2      	subs	r2, r2, r3
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c52:	4b0c      	ldr	r3, [pc, #48]	; (8009c84 <prvHeapInit+0xb0>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <prvHeapInit+0xb4>)
 8009c60:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <prvHeapInit+0xb8>)
 8009c68:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c6a:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <prvHeapInit+0xbc>)
 8009c6c:	2280      	movs	r2, #128	; 0x80
 8009c6e:	0612      	lsls	r2, r2, #24
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	46bd      	mov	sp, r7
 8009c76:	b004      	add	sp, #16
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	20000ee8 	.word	0x20000ee8
 8009c80:	20001ae8 	.word	0x20001ae8
 8009c84:	20001af0 	.word	0x20001af0
 8009c88:	20001af8 	.word	0x20001af8
 8009c8c:	20001af4 	.word	0x20001af4
 8009c90:	20001b04 	.word	0x20001b04

08009c94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c9c:	4b27      	ldr	r3, [pc, #156]	; (8009d3c <prvInsertBlockIntoFreeList+0xa8>)
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e002      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x14>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d8f7      	bhi.n	8009ca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	18d3      	adds	r3, r2, r3
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d108      	bne.n	8009cd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	18d2      	adds	r2, r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	18d2      	adds	r2, r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d118      	bne.n	8009d1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <prvInsertBlockIntoFreeList+0xac>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d00d      	beq.n	8009d12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	18d2      	adds	r2, r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e008      	b.n	8009d24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d12:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <prvInsertBlockIntoFreeList+0xac>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	e003      	b.n	8009d24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d002      	beq.n	8009d32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	46bd      	mov	sp, r7
 8009d36:	b004      	add	sp, #16
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	20001ae8 	.word	0x20001ae8
 8009d40:	20001af0 	.word	0x20001af0

08009d44 <__errno>:
 8009d44:	4b01      	ldr	r3, [pc, #4]	; (8009d4c <__errno+0x8>)
 8009d46:	6818      	ldr	r0, [r3, #0]
 8009d48:	4770      	bx	lr
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	20000010 	.word	0x20000010

08009d50 <__libc_init_array>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	2600      	movs	r6, #0
 8009d54:	4d0c      	ldr	r5, [pc, #48]	; (8009d88 <__libc_init_array+0x38>)
 8009d56:	4c0d      	ldr	r4, [pc, #52]	; (8009d8c <__libc_init_array+0x3c>)
 8009d58:	1b64      	subs	r4, r4, r5
 8009d5a:	10a4      	asrs	r4, r4, #2
 8009d5c:	42a6      	cmp	r6, r4
 8009d5e:	d109      	bne.n	8009d74 <__libc_init_array+0x24>
 8009d60:	2600      	movs	r6, #0
 8009d62:	f002 ff11 	bl	800cb88 <_init>
 8009d66:	4d0a      	ldr	r5, [pc, #40]	; (8009d90 <__libc_init_array+0x40>)
 8009d68:	4c0a      	ldr	r4, [pc, #40]	; (8009d94 <__libc_init_array+0x44>)
 8009d6a:	1b64      	subs	r4, r4, r5
 8009d6c:	10a4      	asrs	r4, r4, #2
 8009d6e:	42a6      	cmp	r6, r4
 8009d70:	d105      	bne.n	8009d7e <__libc_init_array+0x2e>
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	00b3      	lsls	r3, r6, #2
 8009d76:	58eb      	ldr	r3, [r5, r3]
 8009d78:	4798      	blx	r3
 8009d7a:	3601      	adds	r6, #1
 8009d7c:	e7ee      	b.n	8009d5c <__libc_init_array+0xc>
 8009d7e:	00b3      	lsls	r3, r6, #2
 8009d80:	58eb      	ldr	r3, [r5, r3]
 8009d82:	4798      	blx	r3
 8009d84:	3601      	adds	r6, #1
 8009d86:	e7f2      	b.n	8009d6e <__libc_init_array+0x1e>
 8009d88:	0800d20c 	.word	0x0800d20c
 8009d8c:	0800d20c 	.word	0x0800d20c
 8009d90:	0800d20c 	.word	0x0800d20c
 8009d94:	0800d210 	.word	0x0800d210

08009d98 <memcpy>:
 8009d98:	2300      	movs	r3, #0
 8009d9a:	b510      	push	{r4, lr}
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d100      	bne.n	8009da2 <memcpy+0xa>
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	5ccc      	ldrb	r4, [r1, r3]
 8009da4:	54c4      	strb	r4, [r0, r3]
 8009da6:	3301      	adds	r3, #1
 8009da8:	e7f8      	b.n	8009d9c <memcpy+0x4>

08009daa <memset>:
 8009daa:	0003      	movs	r3, r0
 8009dac:	1882      	adds	r2, r0, r2
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d100      	bne.n	8009db4 <memset+0xa>
 8009db2:	4770      	bx	lr
 8009db4:	7019      	strb	r1, [r3, #0]
 8009db6:	3301      	adds	r3, #1
 8009db8:	e7f9      	b.n	8009dae <memset+0x4>

08009dba <__cvt>:
 8009dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dbc:	001e      	movs	r6, r3
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	0014      	movs	r4, r2
 8009dc2:	b08b      	sub	sp, #44	; 0x2c
 8009dc4:	429e      	cmp	r6, r3
 8009dc6:	da04      	bge.n	8009dd2 <__cvt+0x18>
 8009dc8:	2180      	movs	r1, #128	; 0x80
 8009dca:	0609      	lsls	r1, r1, #24
 8009dcc:	1873      	adds	r3, r6, r1
 8009dce:	001e      	movs	r6, r3
 8009dd0:	232d      	movs	r3, #45	; 0x2d
 8009dd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dd4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009dd6:	7013      	strb	r3, [r2, #0]
 8009dd8:	2320      	movs	r3, #32
 8009dda:	2203      	movs	r2, #3
 8009ddc:	439f      	bics	r7, r3
 8009dde:	2f46      	cmp	r7, #70	; 0x46
 8009de0:	d007      	beq.n	8009df2 <__cvt+0x38>
 8009de2:	003b      	movs	r3, r7
 8009de4:	3b45      	subs	r3, #69	; 0x45
 8009de6:	4259      	negs	r1, r3
 8009de8:	414b      	adcs	r3, r1
 8009dea:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009dec:	3a01      	subs	r2, #1
 8009dee:	18cb      	adds	r3, r1, r3
 8009df0:	9310      	str	r3, [sp, #64]	; 0x40
 8009df2:	ab09      	add	r3, sp, #36	; 0x24
 8009df4:	9304      	str	r3, [sp, #16]
 8009df6:	ab08      	add	r3, sp, #32
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dfc:	9200      	str	r2, [sp, #0]
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e02:	0022      	movs	r2, r4
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	0033      	movs	r3, r6
 8009e08:	f000 ff14 	bl	800ac34 <_dtoa_r>
 8009e0c:	0005      	movs	r5, r0
 8009e0e:	2f47      	cmp	r7, #71	; 0x47
 8009e10:	d102      	bne.n	8009e18 <__cvt+0x5e>
 8009e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e14:	07db      	lsls	r3, r3, #31
 8009e16:	d528      	bpl.n	8009e6a <__cvt+0xb0>
 8009e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e1a:	18eb      	adds	r3, r5, r3
 8009e1c:	9307      	str	r3, [sp, #28]
 8009e1e:	2f46      	cmp	r7, #70	; 0x46
 8009e20:	d114      	bne.n	8009e4c <__cvt+0x92>
 8009e22:	782b      	ldrb	r3, [r5, #0]
 8009e24:	2b30      	cmp	r3, #48	; 0x30
 8009e26:	d10c      	bne.n	8009e42 <__cvt+0x88>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	0020      	movs	r0, r4
 8009e2e:	0031      	movs	r1, r6
 8009e30:	f7f6 fb0c 	bl	800044c <__aeabi_dcmpeq>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d104      	bne.n	8009e42 <__cvt+0x88>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e44:	9a07      	ldr	r2, [sp, #28]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	18d3      	adds	r3, r2, r3
 8009e4a:	9307      	str	r3, [sp, #28]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2300      	movs	r3, #0
 8009e50:	0020      	movs	r0, r4
 8009e52:	0031      	movs	r1, r6
 8009e54:	f7f6 fafa 	bl	800044c <__aeabi_dcmpeq>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d001      	beq.n	8009e60 <__cvt+0xa6>
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	2230      	movs	r2, #48	; 0x30
 8009e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e64:	9907      	ldr	r1, [sp, #28]
 8009e66:	428b      	cmp	r3, r1
 8009e68:	d306      	bcc.n	8009e78 <__cvt+0xbe>
 8009e6a:	0028      	movs	r0, r5
 8009e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e70:	1b5b      	subs	r3, r3, r5
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	b00b      	add	sp, #44	; 0x2c
 8009e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e78:	1c59      	adds	r1, r3, #1
 8009e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8009e7c:	701a      	strb	r2, [r3, #0]
 8009e7e:	e7f0      	b.n	8009e62 <__cvt+0xa8>

08009e80 <__exponent>:
 8009e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e82:	1c83      	adds	r3, r0, #2
 8009e84:	b087      	sub	sp, #28
 8009e86:	9303      	str	r3, [sp, #12]
 8009e88:	0005      	movs	r5, r0
 8009e8a:	000c      	movs	r4, r1
 8009e8c:	232b      	movs	r3, #43	; 0x2b
 8009e8e:	7002      	strb	r2, [r0, #0]
 8009e90:	2900      	cmp	r1, #0
 8009e92:	da01      	bge.n	8009e98 <__exponent+0x18>
 8009e94:	424c      	negs	r4, r1
 8009e96:	3302      	adds	r3, #2
 8009e98:	706b      	strb	r3, [r5, #1]
 8009e9a:	2c09      	cmp	r4, #9
 8009e9c:	dd31      	ble.n	8009f02 <__exponent+0x82>
 8009e9e:	270a      	movs	r7, #10
 8009ea0:	ab04      	add	r3, sp, #16
 8009ea2:	1dde      	adds	r6, r3, #7
 8009ea4:	0020      	movs	r0, r4
 8009ea6:	0039      	movs	r1, r7
 8009ea8:	9601      	str	r6, [sp, #4]
 8009eaa:	f7f6 fab9 	bl	8000420 <__aeabi_idivmod>
 8009eae:	3e01      	subs	r6, #1
 8009eb0:	3130      	adds	r1, #48	; 0x30
 8009eb2:	0020      	movs	r0, r4
 8009eb4:	7031      	strb	r1, [r6, #0]
 8009eb6:	0039      	movs	r1, r7
 8009eb8:	9402      	str	r4, [sp, #8]
 8009eba:	f7f6 f9cb 	bl	8000254 <__divsi3>
 8009ebe:	9b02      	ldr	r3, [sp, #8]
 8009ec0:	0004      	movs	r4, r0
 8009ec2:	2b63      	cmp	r3, #99	; 0x63
 8009ec4:	dcee      	bgt.n	8009ea4 <__exponent+0x24>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	3430      	adds	r4, #48	; 0x30
 8009eca:	1e9a      	subs	r2, r3, #2
 8009ecc:	0013      	movs	r3, r2
 8009ece:	9903      	ldr	r1, [sp, #12]
 8009ed0:	7014      	strb	r4, [r2, #0]
 8009ed2:	a804      	add	r0, sp, #16
 8009ed4:	3007      	adds	r0, #7
 8009ed6:	4298      	cmp	r0, r3
 8009ed8:	d80e      	bhi.n	8009ef8 <__exponent+0x78>
 8009eda:	ab04      	add	r3, sp, #16
 8009edc:	3307      	adds	r3, #7
 8009ede:	2000      	movs	r0, #0
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d804      	bhi.n	8009eee <__exponent+0x6e>
 8009ee4:	ab04      	add	r3, sp, #16
 8009ee6:	3009      	adds	r0, #9
 8009ee8:	18c0      	adds	r0, r0, r3
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	1ac0      	subs	r0, r0, r3
 8009eee:	9b03      	ldr	r3, [sp, #12]
 8009ef0:	1818      	adds	r0, r3, r0
 8009ef2:	1b40      	subs	r0, r0, r5
 8009ef4:	b007      	add	sp, #28
 8009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef8:	7818      	ldrb	r0, [r3, #0]
 8009efa:	3301      	adds	r3, #1
 8009efc:	7008      	strb	r0, [r1, #0]
 8009efe:	3101      	adds	r1, #1
 8009f00:	e7e7      	b.n	8009ed2 <__exponent+0x52>
 8009f02:	2330      	movs	r3, #48	; 0x30
 8009f04:	18e4      	adds	r4, r4, r3
 8009f06:	70ab      	strb	r3, [r5, #2]
 8009f08:	1d28      	adds	r0, r5, #4
 8009f0a:	70ec      	strb	r4, [r5, #3]
 8009f0c:	e7f1      	b.n	8009ef2 <__exponent+0x72>
	...

08009f10 <_printf_float>:
 8009f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f12:	b095      	sub	sp, #84	; 0x54
 8009f14:	000c      	movs	r4, r1
 8009f16:	9208      	str	r2, [sp, #32]
 8009f18:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1c:	0007      	movs	r7, r0
 8009f1e:	f001 fe75 	bl	800bc0c <_localeconv_r>
 8009f22:	6803      	ldr	r3, [r0, #0]
 8009f24:	0018      	movs	r0, r3
 8009f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f28:	f7f6 f8ee 	bl	8000108 <strlen>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9312      	str	r3, [sp, #72]	; 0x48
 8009f30:	7e23      	ldrb	r3, [r4, #24]
 8009f32:	2207      	movs	r2, #7
 8009f34:	001e      	movs	r6, r3
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	900d      	str	r0, [sp, #52]	; 0x34
 8009f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	05c9      	lsls	r1, r1, #23
 8009f42:	d547      	bpl.n	8009fd4 <_printf_float+0xc4>
 8009f44:	189b      	adds	r3, r3, r2
 8009f46:	4393      	bics	r3, r2
 8009f48:	001a      	movs	r2, r3
 8009f4a:	3208      	adds	r2, #8
 8009f4c:	602a      	str	r2, [r5, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	64a2      	str	r2, [r4, #72]	; 0x48
 8009f54:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009f56:	2201      	movs	r2, #1
 8009f58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009f5a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f5e:	006b      	lsls	r3, r5, #1
 8009f60:	085b      	lsrs	r3, r3, #1
 8009f62:	930e      	str	r3, [sp, #56]	; 0x38
 8009f64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f66:	4ba8      	ldr	r3, [pc, #672]	; (800a208 <_printf_float+0x2f8>)
 8009f68:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f6a:	4252      	negs	r2, r2
 8009f6c:	f7f8 f8f6 	bl	800215c <__aeabi_dcmpun>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d131      	bne.n	8009fd8 <_printf_float+0xc8>
 8009f74:	2201      	movs	r2, #1
 8009f76:	4ba4      	ldr	r3, [pc, #656]	; (800a208 <_printf_float+0x2f8>)
 8009f78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009f7c:	4252      	negs	r2, r2
 8009f7e:	f7f6 fa75 	bl	800046c <__aeabi_dcmple>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d128      	bne.n	8009fd8 <_printf_float+0xc8>
 8009f86:	2200      	movs	r2, #0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	0029      	movs	r1, r5
 8009f8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f8e:	f7f6 fa63 	bl	8000458 <__aeabi_dcmplt>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d003      	beq.n	8009f9e <_printf_float+0x8e>
 8009f96:	0023      	movs	r3, r4
 8009f98:	222d      	movs	r2, #45	; 0x2d
 8009f9a:	3343      	adds	r3, #67	; 0x43
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	4d9b      	ldr	r5, [pc, #620]	; (800a20c <_printf_float+0x2fc>)
 8009fa0:	2e47      	cmp	r6, #71	; 0x47
 8009fa2:	d900      	bls.n	8009fa6 <_printf_float+0x96>
 8009fa4:	4d9a      	ldr	r5, [pc, #616]	; (800a210 <_printf_float+0x300>)
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	3301      	adds	r3, #1
 8009fae:	439a      	bics	r2, r3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6022      	str	r2, [r4, #0]
 8009fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8009fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb8:	0021      	movs	r1, r4
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	0038      	movs	r0, r7
 8009fbe:	9b08      	ldr	r3, [sp, #32]
 8009fc0:	aa13      	add	r2, sp, #76	; 0x4c
 8009fc2:	f000 f9f3 	bl	800a3ac <_printf_common>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d000      	beq.n	8009fcc <_printf_float+0xbc>
 8009fca:	e09e      	b.n	800a10a <_printf_float+0x1fa>
 8009fcc:	2001      	movs	r0, #1
 8009fce:	4240      	negs	r0, r0
 8009fd0:	b015      	add	sp, #84	; 0x54
 8009fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd4:	3307      	adds	r3, #7
 8009fd6:	e7b6      	b.n	8009f46 <_printf_float+0x36>
 8009fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fda:	002b      	movs	r3, r5
 8009fdc:	0010      	movs	r0, r2
 8009fde:	0029      	movs	r1, r5
 8009fe0:	f7f8 f8bc 	bl	800215c <__aeabi_dcmpun>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d00a      	beq.n	8009ffe <_printf_float+0xee>
 8009fe8:	2d00      	cmp	r5, #0
 8009fea:	da03      	bge.n	8009ff4 <_printf_float+0xe4>
 8009fec:	0023      	movs	r3, r4
 8009fee:	222d      	movs	r2, #45	; 0x2d
 8009ff0:	3343      	adds	r3, #67	; 0x43
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	4d87      	ldr	r5, [pc, #540]	; (800a214 <_printf_float+0x304>)
 8009ff6:	2e47      	cmp	r6, #71	; 0x47
 8009ff8:	d9d5      	bls.n	8009fa6 <_printf_float+0x96>
 8009ffa:	4d87      	ldr	r5, [pc, #540]	; (800a218 <_printf_float+0x308>)
 8009ffc:	e7d3      	b.n	8009fa6 <_printf_float+0x96>
 8009ffe:	2220      	movs	r2, #32
 800a000:	0031      	movs	r1, r6
 800a002:	6863      	ldr	r3, [r4, #4]
 800a004:	4391      	bics	r1, r2
 800a006:	910e      	str	r1, [sp, #56]	; 0x38
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	d147      	bne.n	800a09c <_printf_float+0x18c>
 800a00c:	3307      	adds	r3, #7
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	2380      	movs	r3, #128	; 0x80
 800a012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	4313      	orrs	r3, r2
 800a018:	2200      	movs	r2, #0
 800a01a:	9206      	str	r2, [sp, #24]
 800a01c:	aa12      	add	r2, sp, #72	; 0x48
 800a01e:	9205      	str	r2, [sp, #20]
 800a020:	aa11      	add	r2, sp, #68	; 0x44
 800a022:	9203      	str	r2, [sp, #12]
 800a024:	2223      	movs	r2, #35	; 0x23
 800a026:	a908      	add	r1, sp, #32
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	6863      	ldr	r3, [r4, #4]
 800a02e:	1852      	adds	r2, r2, r1
 800a030:	9202      	str	r2, [sp, #8]
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	0038      	movs	r0, r7
 800a036:	002b      	movs	r3, r5
 800a038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a03a:	9604      	str	r6, [sp, #16]
 800a03c:	f7ff febd 	bl	8009dba <__cvt>
 800a040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a042:	0005      	movs	r5, r0
 800a044:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a046:	2b47      	cmp	r3, #71	; 0x47
 800a048:	d108      	bne.n	800a05c <_printf_float+0x14c>
 800a04a:	1ccb      	adds	r3, r1, #3
 800a04c:	db02      	blt.n	800a054 <_printf_float+0x144>
 800a04e:	6863      	ldr	r3, [r4, #4]
 800a050:	4299      	cmp	r1, r3
 800a052:	dd46      	ble.n	800a0e2 <_printf_float+0x1d2>
 800a054:	0033      	movs	r3, r6
 800a056:	3b02      	subs	r3, #2
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	001e      	movs	r6, r3
 800a05c:	2e65      	cmp	r6, #101	; 0x65
 800a05e:	d824      	bhi.n	800a0aa <_printf_float+0x19a>
 800a060:	0020      	movs	r0, r4
 800a062:	0032      	movs	r2, r6
 800a064:	3901      	subs	r1, #1
 800a066:	3050      	adds	r0, #80	; 0x50
 800a068:	9111      	str	r1, [sp, #68]	; 0x44
 800a06a:	f7ff ff09 	bl	8009e80 <__exponent>
 800a06e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a070:	900a      	str	r0, [sp, #40]	; 0x28
 800a072:	1813      	adds	r3, r2, r0
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	2a01      	cmp	r2, #1
 800a078:	dc02      	bgt.n	800a080 <_printf_float+0x170>
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	07d2      	lsls	r2, r2, #31
 800a07e:	d501      	bpl.n	800a084 <_printf_float+0x174>
 800a080:	3301      	adds	r3, #1
 800a082:	6123      	str	r3, [r4, #16]
 800a084:	2323      	movs	r3, #35	; 0x23
 800a086:	aa08      	add	r2, sp, #32
 800a088:	189b      	adds	r3, r3, r2
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d100      	bne.n	800a092 <_printf_float+0x182>
 800a090:	e791      	b.n	8009fb6 <_printf_float+0xa6>
 800a092:	0023      	movs	r3, r4
 800a094:	222d      	movs	r2, #45	; 0x2d
 800a096:	3343      	adds	r3, #67	; 0x43
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	e78c      	b.n	8009fb6 <_printf_float+0xa6>
 800a09c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a09e:	2a47      	cmp	r2, #71	; 0x47
 800a0a0:	d1b6      	bne.n	800a010 <_printf_float+0x100>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1b4      	bne.n	800a010 <_printf_float+0x100>
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	e7b1      	b.n	800a00e <_printf_float+0xfe>
 800a0aa:	2e66      	cmp	r6, #102	; 0x66
 800a0ac:	d11b      	bne.n	800a0e6 <_printf_float+0x1d6>
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	dd0d      	ble.n	800a0d0 <_printf_float+0x1c0>
 800a0b4:	6121      	str	r1, [r4, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <_printf_float+0x1b0>
 800a0ba:	6822      	ldr	r2, [r4, #0]
 800a0bc:	07d2      	lsls	r2, r2, #31
 800a0be:	d502      	bpl.n	800a0c6 <_printf_float+0x1b6>
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	1859      	adds	r1, r3, r1
 800a0c4:	6121      	str	r1, [r4, #16]
 800a0c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ce:	e7d9      	b.n	800a084 <_printf_float+0x174>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <_printf_float+0x1cc>
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	6821      	ldr	r1, [r4, #0]
 800a0d8:	4211      	tst	r1, r2
 800a0da:	d000      	beq.n	800a0de <_printf_float+0x1ce>
 800a0dc:	1c9a      	adds	r2, r3, #2
 800a0de:	6122      	str	r2, [r4, #16]
 800a0e0:	e7f1      	b.n	800a0c6 <_printf_float+0x1b6>
 800a0e2:	2367      	movs	r3, #103	; 0x67
 800a0e4:	001e      	movs	r6, r3
 800a0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	db06      	blt.n	800a0fc <_printf_float+0x1ec>
 800a0ee:	6822      	ldr	r2, [r4, #0]
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	07d2      	lsls	r2, r2, #31
 800a0f4:	d5e7      	bpl.n	800a0c6 <_printf_float+0x1b6>
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	e7e4      	b.n	800a0c6 <_printf_float+0x1b6>
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	dc01      	bgt.n	800a106 <_printf_float+0x1f6>
 800a102:	1849      	adds	r1, r1, r1
 800a104:	1ac9      	subs	r1, r1, r3
 800a106:	1852      	adds	r2, r2, r1
 800a108:	e7e9      	b.n	800a0de <_printf_float+0x1ce>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	0553      	lsls	r3, r2, #21
 800a10e:	d408      	bmi.n	800a122 <_printf_float+0x212>
 800a110:	6923      	ldr	r3, [r4, #16]
 800a112:	002a      	movs	r2, r5
 800a114:	0038      	movs	r0, r7
 800a116:	9908      	ldr	r1, [sp, #32]
 800a118:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a11a:	47a8      	blx	r5
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d129      	bne.n	800a174 <_printf_float+0x264>
 800a120:	e754      	b.n	8009fcc <_printf_float+0xbc>
 800a122:	2e65      	cmp	r6, #101	; 0x65
 800a124:	d800      	bhi.n	800a128 <_printf_float+0x218>
 800a126:	e0ec      	b.n	800a302 <_printf_float+0x3f2>
 800a128:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a12a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a12c:	2200      	movs	r2, #0
 800a12e:	2300      	movs	r3, #0
 800a130:	f7f6 f98c 	bl	800044c <__aeabi_dcmpeq>
 800a134:	2800      	cmp	r0, #0
 800a136:	d034      	beq.n	800a1a2 <_printf_float+0x292>
 800a138:	2301      	movs	r3, #1
 800a13a:	0038      	movs	r0, r7
 800a13c:	4a37      	ldr	r2, [pc, #220]	; (800a21c <_printf_float+0x30c>)
 800a13e:	9908      	ldr	r1, [sp, #32]
 800a140:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a142:	47a8      	blx	r5
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d100      	bne.n	800a14a <_printf_float+0x23a>
 800a148:	e740      	b.n	8009fcc <_printf_float+0xbc>
 800a14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a14c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a14e:	4293      	cmp	r3, r2
 800a150:	db02      	blt.n	800a158 <_printf_float+0x248>
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	07db      	lsls	r3, r3, #31
 800a156:	d50d      	bpl.n	800a174 <_printf_float+0x264>
 800a158:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a15a:	0038      	movs	r0, r7
 800a15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a15e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a160:	9908      	ldr	r1, [sp, #32]
 800a162:	47a8      	blx	r5
 800a164:	2500      	movs	r5, #0
 800a166:	1c43      	adds	r3, r0, #1
 800a168:	d100      	bne.n	800a16c <_printf_float+0x25c>
 800a16a:	e72f      	b.n	8009fcc <_printf_float+0xbc>
 800a16c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a16e:	3b01      	subs	r3, #1
 800a170:	42ab      	cmp	r3, r5
 800a172:	dc0a      	bgt.n	800a18a <_printf_float+0x27a>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	079b      	lsls	r3, r3, #30
 800a178:	d500      	bpl.n	800a17c <_printf_float+0x26c>
 800a17a:	e114      	b.n	800a3a6 <_printf_float+0x496>
 800a17c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a17e:	68e0      	ldr	r0, [r4, #12]
 800a180:	4298      	cmp	r0, r3
 800a182:	db00      	blt.n	800a186 <_printf_float+0x276>
 800a184:	e724      	b.n	8009fd0 <_printf_float+0xc0>
 800a186:	0018      	movs	r0, r3
 800a188:	e722      	b.n	8009fd0 <_printf_float+0xc0>
 800a18a:	0022      	movs	r2, r4
 800a18c:	2301      	movs	r3, #1
 800a18e:	0038      	movs	r0, r7
 800a190:	9908      	ldr	r1, [sp, #32]
 800a192:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a194:	321a      	adds	r2, #26
 800a196:	47b0      	blx	r6
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d100      	bne.n	800a19e <_printf_float+0x28e>
 800a19c:	e716      	b.n	8009fcc <_printf_float+0xbc>
 800a19e:	3501      	adds	r5, #1
 800a1a0:	e7e4      	b.n	800a16c <_printf_float+0x25c>
 800a1a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	dc3b      	bgt.n	800a220 <_printf_float+0x310>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	0038      	movs	r0, r7
 800a1ac:	4a1b      	ldr	r2, [pc, #108]	; (800a21c <_printf_float+0x30c>)
 800a1ae:	9908      	ldr	r1, [sp, #32]
 800a1b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1b2:	47b0      	blx	r6
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	d100      	bne.n	800a1ba <_printf_float+0x2aa>
 800a1b8:	e708      	b.n	8009fcc <_printf_float+0xbc>
 800a1ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	d102      	bne.n	800a1c8 <_printf_float+0x2b8>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	07db      	lsls	r3, r3, #31
 800a1c6:	d5d5      	bpl.n	800a174 <_printf_float+0x264>
 800a1c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ca:	0038      	movs	r0, r7
 800a1cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1ce:	9908      	ldr	r1, [sp, #32]
 800a1d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1d2:	47b0      	blx	r6
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d100      	bne.n	800a1da <_printf_float+0x2ca>
 800a1d8:	e6f8      	b.n	8009fcc <_printf_float+0xbc>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	930a      	str	r3, [sp, #40]	; 0x28
 800a1de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e2:	425b      	negs	r3, r3
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	dc01      	bgt.n	800a1ec <_printf_float+0x2dc>
 800a1e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ea:	e792      	b.n	800a112 <_printf_float+0x202>
 800a1ec:	0022      	movs	r2, r4
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	0038      	movs	r0, r7
 800a1f2:	9908      	ldr	r1, [sp, #32]
 800a1f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1f6:	321a      	adds	r2, #26
 800a1f8:	47b0      	blx	r6
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d100      	bne.n	800a200 <_printf_float+0x2f0>
 800a1fe:	e6e5      	b.n	8009fcc <_printf_float+0xbc>
 800a200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a202:	3301      	adds	r3, #1
 800a204:	e7ea      	b.n	800a1dc <_printf_float+0x2cc>
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	7fefffff 	.word	0x7fefffff
 800a20c:	0800ce24 	.word	0x0800ce24
 800a210:	0800ce28 	.word	0x0800ce28
 800a214:	0800ce2c 	.word	0x0800ce2c
 800a218:	0800ce30 	.word	0x0800ce30
 800a21c:	0800ce34 	.word	0x0800ce34
 800a220:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a224:	920a      	str	r2, [sp, #40]	; 0x28
 800a226:	429a      	cmp	r2, r3
 800a228:	dd00      	ble.n	800a22c <_printf_float+0x31c>
 800a22a:	930a      	str	r3, [sp, #40]	; 0x28
 800a22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dc3d      	bgt.n	800a2ae <_printf_float+0x39e>
 800a232:	2300      	movs	r3, #0
 800a234:	930e      	str	r3, [sp, #56]	; 0x38
 800a236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a238:	43db      	mvns	r3, r3
 800a23a:	17db      	asrs	r3, r3, #31
 800a23c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a23e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a242:	930c      	str	r3, [sp, #48]	; 0x30
 800a244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a246:	4013      	ands	r3, r2
 800a248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a24e:	4293      	cmp	r3, r2
 800a250:	dc36      	bgt.n	800a2c0 <_printf_float+0x3b0>
 800a252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a256:	4293      	cmp	r3, r2
 800a258:	db40      	blt.n	800a2dc <_printf_float+0x3cc>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	07db      	lsls	r3, r3, #31
 800a25e:	d43d      	bmi.n	800a2dc <_printf_float+0x3cc>
 800a260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a264:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	1a52      	subs	r2, r2, r1
 800a26a:	920a      	str	r2, [sp, #40]	; 0x28
 800a26c:	429a      	cmp	r2, r3
 800a26e:	dd00      	ble.n	800a272 <_printf_float+0x362>
 800a270:	930a      	str	r3, [sp, #40]	; 0x28
 800a272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a274:	2b00      	cmp	r3, #0
 800a276:	dc3a      	bgt.n	800a2ee <_printf_float+0x3de>
 800a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27a:	2500      	movs	r5, #0
 800a27c:	43db      	mvns	r3, r3
 800a27e:	17db      	asrs	r3, r3, #31
 800a280:	930b      	str	r3, [sp, #44]	; 0x2c
 800a282:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a286:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a288:	1a9b      	subs	r3, r3, r2
 800a28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a28c:	400a      	ands	r2, r1
 800a28e:	1a9b      	subs	r3, r3, r2
 800a290:	42ab      	cmp	r3, r5
 800a292:	dc00      	bgt.n	800a296 <_printf_float+0x386>
 800a294:	e76e      	b.n	800a174 <_printf_float+0x264>
 800a296:	0022      	movs	r2, r4
 800a298:	2301      	movs	r3, #1
 800a29a:	0038      	movs	r0, r7
 800a29c:	9908      	ldr	r1, [sp, #32]
 800a29e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2a0:	321a      	adds	r2, #26
 800a2a2:	47b0      	blx	r6
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d100      	bne.n	800a2aa <_printf_float+0x39a>
 800a2a8:	e690      	b.n	8009fcc <_printf_float+0xbc>
 800a2aa:	3501      	adds	r5, #1
 800a2ac:	e7e9      	b.n	800a282 <_printf_float+0x372>
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b0:	002a      	movs	r2, r5
 800a2b2:	0038      	movs	r0, r7
 800a2b4:	9908      	ldr	r1, [sp, #32]
 800a2b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2b8:	47b0      	blx	r6
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	d1b9      	bne.n	800a232 <_printf_float+0x322>
 800a2be:	e685      	b.n	8009fcc <_printf_float+0xbc>
 800a2c0:	0022      	movs	r2, r4
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	0038      	movs	r0, r7
 800a2c6:	9908      	ldr	r1, [sp, #32]
 800a2c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2ca:	321a      	adds	r2, #26
 800a2cc:	47b0      	blx	r6
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	d100      	bne.n	800a2d4 <_printf_float+0x3c4>
 800a2d2:	e67b      	b.n	8009fcc <_printf_float+0xbc>
 800a2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	930e      	str	r3, [sp, #56]	; 0x38
 800a2da:	e7b0      	b.n	800a23e <_printf_float+0x32e>
 800a2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2de:	0038      	movs	r0, r7
 800a2e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2e2:	9908      	ldr	r1, [sp, #32]
 800a2e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2e6:	47b0      	blx	r6
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d1b9      	bne.n	800a260 <_printf_float+0x350>
 800a2ec:	e66e      	b.n	8009fcc <_printf_float+0xbc>
 800a2ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2f0:	0038      	movs	r0, r7
 800a2f2:	18ea      	adds	r2, r5, r3
 800a2f4:	9908      	ldr	r1, [sp, #32]
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a2fa:	47a8      	blx	r5
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d1bb      	bne.n	800a278 <_printf_float+0x368>
 800a300:	e664      	b.n	8009fcc <_printf_float+0xbc>
 800a302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a304:	2b01      	cmp	r3, #1
 800a306:	dc02      	bgt.n	800a30e <_printf_float+0x3fe>
 800a308:	2301      	movs	r3, #1
 800a30a:	421a      	tst	r2, r3
 800a30c:	d038      	beq.n	800a380 <_printf_float+0x470>
 800a30e:	2301      	movs	r3, #1
 800a310:	002a      	movs	r2, r5
 800a312:	0038      	movs	r0, r7
 800a314:	9908      	ldr	r1, [sp, #32]
 800a316:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a318:	47b0      	blx	r6
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	d100      	bne.n	800a320 <_printf_float+0x410>
 800a31e:	e655      	b.n	8009fcc <_printf_float+0xbc>
 800a320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a322:	0038      	movs	r0, r7
 800a324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a326:	9908      	ldr	r1, [sp, #32]
 800a328:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a32a:	47b0      	blx	r6
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d100      	bne.n	800a332 <_printf_float+0x422>
 800a330:	e64c      	b.n	8009fcc <_printf_float+0xbc>
 800a332:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a334:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a336:	2200      	movs	r2, #0
 800a338:	2300      	movs	r3, #0
 800a33a:	f7f6 f887 	bl	800044c <__aeabi_dcmpeq>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d11c      	bne.n	800a37c <_printf_float+0x46c>
 800a342:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a344:	1c6a      	adds	r2, r5, #1
 800a346:	3b01      	subs	r3, #1
 800a348:	0038      	movs	r0, r7
 800a34a:	9908      	ldr	r1, [sp, #32]
 800a34c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a34e:	47a8      	blx	r5
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d10f      	bne.n	800a374 <_printf_float+0x464>
 800a354:	e63a      	b.n	8009fcc <_printf_float+0xbc>
 800a356:	0022      	movs	r2, r4
 800a358:	2301      	movs	r3, #1
 800a35a:	0038      	movs	r0, r7
 800a35c:	9908      	ldr	r1, [sp, #32]
 800a35e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a360:	321a      	adds	r2, #26
 800a362:	47b0      	blx	r6
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d100      	bne.n	800a36a <_printf_float+0x45a>
 800a368:	e630      	b.n	8009fcc <_printf_float+0xbc>
 800a36a:	3501      	adds	r5, #1
 800a36c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a36e:	3b01      	subs	r3, #1
 800a370:	42ab      	cmp	r3, r5
 800a372:	dcf0      	bgt.n	800a356 <_printf_float+0x446>
 800a374:	0022      	movs	r2, r4
 800a376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a378:	3250      	adds	r2, #80	; 0x50
 800a37a:	e6cb      	b.n	800a114 <_printf_float+0x204>
 800a37c:	2500      	movs	r5, #0
 800a37e:	e7f5      	b.n	800a36c <_printf_float+0x45c>
 800a380:	002a      	movs	r2, r5
 800a382:	e7e1      	b.n	800a348 <_printf_float+0x438>
 800a384:	0022      	movs	r2, r4
 800a386:	2301      	movs	r3, #1
 800a388:	0038      	movs	r0, r7
 800a38a:	9908      	ldr	r1, [sp, #32]
 800a38c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a38e:	3219      	adds	r2, #25
 800a390:	47b0      	blx	r6
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d100      	bne.n	800a398 <_printf_float+0x488>
 800a396:	e619      	b.n	8009fcc <_printf_float+0xbc>
 800a398:	3501      	adds	r5, #1
 800a39a:	68e3      	ldr	r3, [r4, #12]
 800a39c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a39e:	1a9b      	subs	r3, r3, r2
 800a3a0:	42ab      	cmp	r3, r5
 800a3a2:	dcef      	bgt.n	800a384 <_printf_float+0x474>
 800a3a4:	e6ea      	b.n	800a17c <_printf_float+0x26c>
 800a3a6:	2500      	movs	r5, #0
 800a3a8:	e7f7      	b.n	800a39a <_printf_float+0x48a>
 800a3aa:	46c0      	nop			; (mov r8, r8)

0800a3ac <_printf_common>:
 800a3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ae:	0015      	movs	r5, r2
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	688a      	ldr	r2, [r1, #8]
 800a3b4:	690b      	ldr	r3, [r1, #16]
 800a3b6:	000c      	movs	r4, r1
 800a3b8:	9000      	str	r0, [sp, #0]
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	da00      	bge.n	800a3c0 <_printf_common+0x14>
 800a3be:	0013      	movs	r3, r2
 800a3c0:	0022      	movs	r2, r4
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	3243      	adds	r2, #67	; 0x43
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	d001      	beq.n	800a3d0 <_printf_common+0x24>
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	069b      	lsls	r3, r3, #26
 800a3d4:	d502      	bpl.n	800a3dc <_printf_common+0x30>
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	3302      	adds	r3, #2
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	6822      	ldr	r2, [r4, #0]
 800a3de:	2306      	movs	r3, #6
 800a3e0:	0017      	movs	r7, r2
 800a3e2:	401f      	ands	r7, r3
 800a3e4:	421a      	tst	r2, r3
 800a3e6:	d027      	beq.n	800a438 <_printf_common+0x8c>
 800a3e8:	0023      	movs	r3, r4
 800a3ea:	3343      	adds	r3, #67	; 0x43
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	1e5a      	subs	r2, r3, #1
 800a3f0:	4193      	sbcs	r3, r2
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	0692      	lsls	r2, r2, #26
 800a3f6:	d430      	bmi.n	800a45a <_printf_common+0xae>
 800a3f8:	0022      	movs	r2, r4
 800a3fa:	9901      	ldr	r1, [sp, #4]
 800a3fc:	9800      	ldr	r0, [sp, #0]
 800a3fe:	9e08      	ldr	r6, [sp, #32]
 800a400:	3243      	adds	r2, #67	; 0x43
 800a402:	47b0      	blx	r6
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d025      	beq.n	800a454 <_printf_common+0xa8>
 800a408:	2306      	movs	r3, #6
 800a40a:	6820      	ldr	r0, [r4, #0]
 800a40c:	682a      	ldr	r2, [r5, #0]
 800a40e:	68e1      	ldr	r1, [r4, #12]
 800a410:	2500      	movs	r5, #0
 800a412:	4003      	ands	r3, r0
 800a414:	2b04      	cmp	r3, #4
 800a416:	d103      	bne.n	800a420 <_printf_common+0x74>
 800a418:	1a8d      	subs	r5, r1, r2
 800a41a:	43eb      	mvns	r3, r5
 800a41c:	17db      	asrs	r3, r3, #31
 800a41e:	401d      	ands	r5, r3
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	6922      	ldr	r2, [r4, #16]
 800a424:	4293      	cmp	r3, r2
 800a426:	dd01      	ble.n	800a42c <_printf_common+0x80>
 800a428:	1a9b      	subs	r3, r3, r2
 800a42a:	18ed      	adds	r5, r5, r3
 800a42c:	2700      	movs	r7, #0
 800a42e:	42bd      	cmp	r5, r7
 800a430:	d120      	bne.n	800a474 <_printf_common+0xc8>
 800a432:	2000      	movs	r0, #0
 800a434:	e010      	b.n	800a458 <_printf_common+0xac>
 800a436:	3701      	adds	r7, #1
 800a438:	68e3      	ldr	r3, [r4, #12]
 800a43a:	682a      	ldr	r2, [r5, #0]
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	42bb      	cmp	r3, r7
 800a440:	ddd2      	ble.n	800a3e8 <_printf_common+0x3c>
 800a442:	0022      	movs	r2, r4
 800a444:	2301      	movs	r3, #1
 800a446:	9901      	ldr	r1, [sp, #4]
 800a448:	9800      	ldr	r0, [sp, #0]
 800a44a:	9e08      	ldr	r6, [sp, #32]
 800a44c:	3219      	adds	r2, #25
 800a44e:	47b0      	blx	r6
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d1f0      	bne.n	800a436 <_printf_common+0x8a>
 800a454:	2001      	movs	r0, #1
 800a456:	4240      	negs	r0, r0
 800a458:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a45a:	2030      	movs	r0, #48	; 0x30
 800a45c:	18e1      	adds	r1, r4, r3
 800a45e:	3143      	adds	r1, #67	; 0x43
 800a460:	7008      	strb	r0, [r1, #0]
 800a462:	0021      	movs	r1, r4
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	3145      	adds	r1, #69	; 0x45
 800a468:	7809      	ldrb	r1, [r1, #0]
 800a46a:	18a2      	adds	r2, r4, r2
 800a46c:	3243      	adds	r2, #67	; 0x43
 800a46e:	3302      	adds	r3, #2
 800a470:	7011      	strb	r1, [r2, #0]
 800a472:	e7c1      	b.n	800a3f8 <_printf_common+0x4c>
 800a474:	0022      	movs	r2, r4
 800a476:	2301      	movs	r3, #1
 800a478:	9901      	ldr	r1, [sp, #4]
 800a47a:	9800      	ldr	r0, [sp, #0]
 800a47c:	9e08      	ldr	r6, [sp, #32]
 800a47e:	321a      	adds	r2, #26
 800a480:	47b0      	blx	r6
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d0e6      	beq.n	800a454 <_printf_common+0xa8>
 800a486:	3701      	adds	r7, #1
 800a488:	e7d1      	b.n	800a42e <_printf_common+0x82>
	...

0800a48c <_printf_i>:
 800a48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a48e:	b08b      	sub	sp, #44	; 0x2c
 800a490:	9206      	str	r2, [sp, #24]
 800a492:	000a      	movs	r2, r1
 800a494:	3243      	adds	r2, #67	; 0x43
 800a496:	9307      	str	r3, [sp, #28]
 800a498:	9005      	str	r0, [sp, #20]
 800a49a:	9204      	str	r2, [sp, #16]
 800a49c:	7e0a      	ldrb	r2, [r1, #24]
 800a49e:	000c      	movs	r4, r1
 800a4a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4a2:	2a78      	cmp	r2, #120	; 0x78
 800a4a4:	d806      	bhi.n	800a4b4 <_printf_i+0x28>
 800a4a6:	2a62      	cmp	r2, #98	; 0x62
 800a4a8:	d808      	bhi.n	800a4bc <_printf_i+0x30>
 800a4aa:	2a00      	cmp	r2, #0
 800a4ac:	d100      	bne.n	800a4b0 <_printf_i+0x24>
 800a4ae:	e0c0      	b.n	800a632 <_printf_i+0x1a6>
 800a4b0:	2a58      	cmp	r2, #88	; 0x58
 800a4b2:	d052      	beq.n	800a55a <_printf_i+0xce>
 800a4b4:	0026      	movs	r6, r4
 800a4b6:	3642      	adds	r6, #66	; 0x42
 800a4b8:	7032      	strb	r2, [r6, #0]
 800a4ba:	e022      	b.n	800a502 <_printf_i+0x76>
 800a4bc:	0010      	movs	r0, r2
 800a4be:	3863      	subs	r0, #99	; 0x63
 800a4c0:	2815      	cmp	r0, #21
 800a4c2:	d8f7      	bhi.n	800a4b4 <_printf_i+0x28>
 800a4c4:	f7f5 fe32 	bl	800012c <__gnu_thumb1_case_shi>
 800a4c8:	001f0016 	.word	0x001f0016
 800a4cc:	fff6fff6 	.word	0xfff6fff6
 800a4d0:	fff6fff6 	.word	0xfff6fff6
 800a4d4:	fff6001f 	.word	0xfff6001f
 800a4d8:	fff6fff6 	.word	0xfff6fff6
 800a4dc:	00a8fff6 	.word	0x00a8fff6
 800a4e0:	009a0036 	.word	0x009a0036
 800a4e4:	fff6fff6 	.word	0xfff6fff6
 800a4e8:	fff600b9 	.word	0xfff600b9
 800a4ec:	fff60036 	.word	0xfff60036
 800a4f0:	009efff6 	.word	0x009efff6
 800a4f4:	0026      	movs	r6, r4
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	3642      	adds	r6, #66	; 0x42
 800a4fa:	1d11      	adds	r1, r2, #4
 800a4fc:	6019      	str	r1, [r3, #0]
 800a4fe:	6813      	ldr	r3, [r2, #0]
 800a500:	7033      	strb	r3, [r6, #0]
 800a502:	2301      	movs	r3, #1
 800a504:	e0a7      	b.n	800a656 <_printf_i+0x1ca>
 800a506:	6808      	ldr	r0, [r1, #0]
 800a508:	6819      	ldr	r1, [r3, #0]
 800a50a:	1d0a      	adds	r2, r1, #4
 800a50c:	0605      	lsls	r5, r0, #24
 800a50e:	d50b      	bpl.n	800a528 <_printf_i+0x9c>
 800a510:	680d      	ldr	r5, [r1, #0]
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	2d00      	cmp	r5, #0
 800a516:	da03      	bge.n	800a520 <_printf_i+0x94>
 800a518:	232d      	movs	r3, #45	; 0x2d
 800a51a:	9a04      	ldr	r2, [sp, #16]
 800a51c:	426d      	negs	r5, r5
 800a51e:	7013      	strb	r3, [r2, #0]
 800a520:	4b61      	ldr	r3, [pc, #388]	; (800a6a8 <_printf_i+0x21c>)
 800a522:	270a      	movs	r7, #10
 800a524:	9303      	str	r3, [sp, #12]
 800a526:	e032      	b.n	800a58e <_printf_i+0x102>
 800a528:	680d      	ldr	r5, [r1, #0]
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	0641      	lsls	r1, r0, #25
 800a52e:	d5f1      	bpl.n	800a514 <_printf_i+0x88>
 800a530:	b22d      	sxth	r5, r5
 800a532:	e7ef      	b.n	800a514 <_printf_i+0x88>
 800a534:	680d      	ldr	r5, [r1, #0]
 800a536:	6819      	ldr	r1, [r3, #0]
 800a538:	1d08      	adds	r0, r1, #4
 800a53a:	6018      	str	r0, [r3, #0]
 800a53c:	062e      	lsls	r6, r5, #24
 800a53e:	d501      	bpl.n	800a544 <_printf_i+0xb8>
 800a540:	680d      	ldr	r5, [r1, #0]
 800a542:	e003      	b.n	800a54c <_printf_i+0xc0>
 800a544:	066d      	lsls	r5, r5, #25
 800a546:	d5fb      	bpl.n	800a540 <_printf_i+0xb4>
 800a548:	680d      	ldr	r5, [r1, #0]
 800a54a:	b2ad      	uxth	r5, r5
 800a54c:	4b56      	ldr	r3, [pc, #344]	; (800a6a8 <_printf_i+0x21c>)
 800a54e:	270a      	movs	r7, #10
 800a550:	9303      	str	r3, [sp, #12]
 800a552:	2a6f      	cmp	r2, #111	; 0x6f
 800a554:	d117      	bne.n	800a586 <_printf_i+0xfa>
 800a556:	2708      	movs	r7, #8
 800a558:	e015      	b.n	800a586 <_printf_i+0xfa>
 800a55a:	3145      	adds	r1, #69	; 0x45
 800a55c:	700a      	strb	r2, [r1, #0]
 800a55e:	4a52      	ldr	r2, [pc, #328]	; (800a6a8 <_printf_i+0x21c>)
 800a560:	9203      	str	r2, [sp, #12]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6821      	ldr	r1, [r4, #0]
 800a566:	ca20      	ldmia	r2!, {r5}
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	0608      	lsls	r0, r1, #24
 800a56c:	d550      	bpl.n	800a610 <_printf_i+0x184>
 800a56e:	07cb      	lsls	r3, r1, #31
 800a570:	d502      	bpl.n	800a578 <_printf_i+0xec>
 800a572:	2320      	movs	r3, #32
 800a574:	4319      	orrs	r1, r3
 800a576:	6021      	str	r1, [r4, #0]
 800a578:	2710      	movs	r7, #16
 800a57a:	2d00      	cmp	r5, #0
 800a57c:	d103      	bne.n	800a586 <_printf_i+0xfa>
 800a57e:	2320      	movs	r3, #32
 800a580:	6822      	ldr	r2, [r4, #0]
 800a582:	439a      	bics	r2, r3
 800a584:	6022      	str	r2, [r4, #0]
 800a586:	0023      	movs	r3, r4
 800a588:	2200      	movs	r2, #0
 800a58a:	3343      	adds	r3, #67	; 0x43
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	60a3      	str	r3, [r4, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	db03      	blt.n	800a59e <_printf_i+0x112>
 800a596:	2204      	movs	r2, #4
 800a598:	6821      	ldr	r1, [r4, #0]
 800a59a:	4391      	bics	r1, r2
 800a59c:	6021      	str	r1, [r4, #0]
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	d102      	bne.n	800a5a8 <_printf_i+0x11c>
 800a5a2:	9e04      	ldr	r6, [sp, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00c      	beq.n	800a5c2 <_printf_i+0x136>
 800a5a8:	9e04      	ldr	r6, [sp, #16]
 800a5aa:	0028      	movs	r0, r5
 800a5ac:	0039      	movs	r1, r7
 800a5ae:	f7f5 fe4d 	bl	800024c <__aeabi_uidivmod>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	3e01      	subs	r6, #1
 800a5b6:	5c5b      	ldrb	r3, [r3, r1]
 800a5b8:	7033      	strb	r3, [r6, #0]
 800a5ba:	002b      	movs	r3, r5
 800a5bc:	0005      	movs	r5, r0
 800a5be:	429f      	cmp	r7, r3
 800a5c0:	d9f3      	bls.n	800a5aa <_printf_i+0x11e>
 800a5c2:	2f08      	cmp	r7, #8
 800a5c4:	d109      	bne.n	800a5da <_printf_i+0x14e>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	07db      	lsls	r3, r3, #31
 800a5ca:	d506      	bpl.n	800a5da <_printf_i+0x14e>
 800a5cc:	6863      	ldr	r3, [r4, #4]
 800a5ce:	6922      	ldr	r2, [r4, #16]
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	dc02      	bgt.n	800a5da <_printf_i+0x14e>
 800a5d4:	2330      	movs	r3, #48	; 0x30
 800a5d6:	3e01      	subs	r6, #1
 800a5d8:	7033      	strb	r3, [r6, #0]
 800a5da:	9b04      	ldr	r3, [sp, #16]
 800a5dc:	1b9b      	subs	r3, r3, r6
 800a5de:	6123      	str	r3, [r4, #16]
 800a5e0:	9b07      	ldr	r3, [sp, #28]
 800a5e2:	0021      	movs	r1, r4
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	9805      	ldr	r0, [sp, #20]
 800a5e8:	9b06      	ldr	r3, [sp, #24]
 800a5ea:	aa09      	add	r2, sp, #36	; 0x24
 800a5ec:	f7ff fede 	bl	800a3ac <_printf_common>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d135      	bne.n	800a660 <_printf_i+0x1d4>
 800a5f4:	2001      	movs	r0, #1
 800a5f6:	4240      	negs	r0, r0
 800a5f8:	b00b      	add	sp, #44	; 0x2c
 800a5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	6809      	ldr	r1, [r1, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	6022      	str	r2, [r4, #0]
 800a604:	0022      	movs	r2, r4
 800a606:	2178      	movs	r1, #120	; 0x78
 800a608:	3245      	adds	r2, #69	; 0x45
 800a60a:	7011      	strb	r1, [r2, #0]
 800a60c:	4a27      	ldr	r2, [pc, #156]	; (800a6ac <_printf_i+0x220>)
 800a60e:	e7a7      	b.n	800a560 <_printf_i+0xd4>
 800a610:	0648      	lsls	r0, r1, #25
 800a612:	d5ac      	bpl.n	800a56e <_printf_i+0xe2>
 800a614:	b2ad      	uxth	r5, r5
 800a616:	e7aa      	b.n	800a56e <_printf_i+0xe2>
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	680d      	ldr	r5, [r1, #0]
 800a61c:	1d10      	adds	r0, r2, #4
 800a61e:	6949      	ldr	r1, [r1, #20]
 800a620:	6018      	str	r0, [r3, #0]
 800a622:	6813      	ldr	r3, [r2, #0]
 800a624:	062e      	lsls	r6, r5, #24
 800a626:	d501      	bpl.n	800a62c <_printf_i+0x1a0>
 800a628:	6019      	str	r1, [r3, #0]
 800a62a:	e002      	b.n	800a632 <_printf_i+0x1a6>
 800a62c:	066d      	lsls	r5, r5, #25
 800a62e:	d5fb      	bpl.n	800a628 <_printf_i+0x19c>
 800a630:	8019      	strh	r1, [r3, #0]
 800a632:	2300      	movs	r3, #0
 800a634:	9e04      	ldr	r6, [sp, #16]
 800a636:	6123      	str	r3, [r4, #16]
 800a638:	e7d2      	b.n	800a5e0 <_printf_i+0x154>
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	1d11      	adds	r1, r2, #4
 800a63e:	6019      	str	r1, [r3, #0]
 800a640:	6816      	ldr	r6, [r2, #0]
 800a642:	2100      	movs	r1, #0
 800a644:	0030      	movs	r0, r6
 800a646:	6862      	ldr	r2, [r4, #4]
 800a648:	f001 fb5e 	bl	800bd08 <memchr>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d001      	beq.n	800a654 <_printf_i+0x1c8>
 800a650:	1b80      	subs	r0, r0, r6
 800a652:	6060      	str	r0, [r4, #4]
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	2300      	movs	r3, #0
 800a65a:	9a04      	ldr	r2, [sp, #16]
 800a65c:	7013      	strb	r3, [r2, #0]
 800a65e:	e7bf      	b.n	800a5e0 <_printf_i+0x154>
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	0032      	movs	r2, r6
 800a664:	9906      	ldr	r1, [sp, #24]
 800a666:	9805      	ldr	r0, [sp, #20]
 800a668:	9d07      	ldr	r5, [sp, #28]
 800a66a:	47a8      	blx	r5
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d0c1      	beq.n	800a5f4 <_printf_i+0x168>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	079b      	lsls	r3, r3, #30
 800a674:	d415      	bmi.n	800a6a2 <_printf_i+0x216>
 800a676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a678:	68e0      	ldr	r0, [r4, #12]
 800a67a:	4298      	cmp	r0, r3
 800a67c:	dabc      	bge.n	800a5f8 <_printf_i+0x16c>
 800a67e:	0018      	movs	r0, r3
 800a680:	e7ba      	b.n	800a5f8 <_printf_i+0x16c>
 800a682:	0022      	movs	r2, r4
 800a684:	2301      	movs	r3, #1
 800a686:	9906      	ldr	r1, [sp, #24]
 800a688:	9805      	ldr	r0, [sp, #20]
 800a68a:	9e07      	ldr	r6, [sp, #28]
 800a68c:	3219      	adds	r2, #25
 800a68e:	47b0      	blx	r6
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d0af      	beq.n	800a5f4 <_printf_i+0x168>
 800a694:	3501      	adds	r5, #1
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	42ab      	cmp	r3, r5
 800a69e:	dcf0      	bgt.n	800a682 <_printf_i+0x1f6>
 800a6a0:	e7e9      	b.n	800a676 <_printf_i+0x1ea>
 800a6a2:	2500      	movs	r5, #0
 800a6a4:	e7f7      	b.n	800a696 <_printf_i+0x20a>
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	0800ce36 	.word	0x0800ce36
 800a6ac:	0800ce47 	.word	0x0800ce47

0800a6b0 <iprintf>:
 800a6b0:	b40f      	push	{r0, r1, r2, r3}
 800a6b2:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <iprintf+0x30>)
 800a6b4:	b513      	push	{r0, r1, r4, lr}
 800a6b6:	681c      	ldr	r4, [r3, #0]
 800a6b8:	2c00      	cmp	r4, #0
 800a6ba:	d005      	beq.n	800a6c8 <iprintf+0x18>
 800a6bc:	69a3      	ldr	r3, [r4, #24]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d102      	bne.n	800a6c8 <iprintf+0x18>
 800a6c2:	0020      	movs	r0, r4
 800a6c4:	f001 fa02 	bl	800bacc <__sinit>
 800a6c8:	ab05      	add	r3, sp, #20
 800a6ca:	0020      	movs	r0, r4
 800a6cc:	9a04      	ldr	r2, [sp, #16]
 800a6ce:	68a1      	ldr	r1, [r4, #8]
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	f001 ffa1 	bl	800c618 <_vfiprintf_r>
 800a6d6:	bc16      	pop	{r1, r2, r4}
 800a6d8:	bc08      	pop	{r3}
 800a6da:	b004      	add	sp, #16
 800a6dc:	4718      	bx	r3
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	20000010 	.word	0x20000010

0800a6e4 <_puts_r>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	0005      	movs	r5, r0
 800a6e8:	000e      	movs	r6, r1
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d004      	beq.n	800a6f8 <_puts_r+0x14>
 800a6ee:	6983      	ldr	r3, [r0, #24]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <_puts_r+0x14>
 800a6f4:	f001 f9ea 	bl	800bacc <__sinit>
 800a6f8:	69ab      	ldr	r3, [r5, #24]
 800a6fa:	68ac      	ldr	r4, [r5, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d102      	bne.n	800a706 <_puts_r+0x22>
 800a700:	0028      	movs	r0, r5
 800a702:	f001 f9e3 	bl	800bacc <__sinit>
 800a706:	4b2d      	ldr	r3, [pc, #180]	; (800a7bc <_puts_r+0xd8>)
 800a708:	429c      	cmp	r4, r3
 800a70a:	d122      	bne.n	800a752 <_puts_r+0x6e>
 800a70c:	686c      	ldr	r4, [r5, #4]
 800a70e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a710:	07db      	lsls	r3, r3, #31
 800a712:	d405      	bmi.n	800a720 <_puts_r+0x3c>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	059b      	lsls	r3, r3, #22
 800a718:	d402      	bmi.n	800a720 <_puts_r+0x3c>
 800a71a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a71c:	f001 fa7b 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	071b      	lsls	r3, r3, #28
 800a724:	d502      	bpl.n	800a72c <_puts_r+0x48>
 800a726:	6923      	ldr	r3, [r4, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d129      	bne.n	800a780 <_puts_r+0x9c>
 800a72c:	0021      	movs	r1, r4
 800a72e:	0028      	movs	r0, r5
 800a730:	f000 f97c 	bl	800aa2c <__swsetup_r>
 800a734:	2800      	cmp	r0, #0
 800a736:	d023      	beq.n	800a780 <_puts_r+0x9c>
 800a738:	2501      	movs	r5, #1
 800a73a:	426d      	negs	r5, r5
 800a73c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a73e:	07db      	lsls	r3, r3, #31
 800a740:	d405      	bmi.n	800a74e <_puts_r+0x6a>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	059b      	lsls	r3, r3, #22
 800a746:	d402      	bmi.n	800a74e <_puts_r+0x6a>
 800a748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a74a:	f001 fa65 	bl	800bc18 <__retarget_lock_release_recursive>
 800a74e:	0028      	movs	r0, r5
 800a750:	bd70      	pop	{r4, r5, r6, pc}
 800a752:	4b1b      	ldr	r3, [pc, #108]	; (800a7c0 <_puts_r+0xdc>)
 800a754:	429c      	cmp	r4, r3
 800a756:	d101      	bne.n	800a75c <_puts_r+0x78>
 800a758:	68ac      	ldr	r4, [r5, #8]
 800a75a:	e7d8      	b.n	800a70e <_puts_r+0x2a>
 800a75c:	4b19      	ldr	r3, [pc, #100]	; (800a7c4 <_puts_r+0xe0>)
 800a75e:	429c      	cmp	r4, r3
 800a760:	d1d5      	bne.n	800a70e <_puts_r+0x2a>
 800a762:	68ec      	ldr	r4, [r5, #12]
 800a764:	e7d3      	b.n	800a70e <_puts_r+0x2a>
 800a766:	3601      	adds	r6, #1
 800a768:	60a3      	str	r3, [r4, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	da04      	bge.n	800a778 <_puts_r+0x94>
 800a76e:	69a2      	ldr	r2, [r4, #24]
 800a770:	429a      	cmp	r2, r3
 800a772:	dc16      	bgt.n	800a7a2 <_puts_r+0xbe>
 800a774:	290a      	cmp	r1, #10
 800a776:	d014      	beq.n	800a7a2 <_puts_r+0xbe>
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	6022      	str	r2, [r4, #0]
 800a77e:	7019      	strb	r1, [r3, #0]
 800a780:	68a3      	ldr	r3, [r4, #8]
 800a782:	7831      	ldrb	r1, [r6, #0]
 800a784:	3b01      	subs	r3, #1
 800a786:	2900      	cmp	r1, #0
 800a788:	d1ed      	bne.n	800a766 <_puts_r+0x82>
 800a78a:	60a3      	str	r3, [r4, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	da0f      	bge.n	800a7b0 <_puts_r+0xcc>
 800a790:	0028      	movs	r0, r5
 800a792:	0022      	movs	r2, r4
 800a794:	310a      	adds	r1, #10
 800a796:	f000 f8f3 	bl	800a980 <__swbuf_r>
 800a79a:	250a      	movs	r5, #10
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d1cd      	bne.n	800a73c <_puts_r+0x58>
 800a7a0:	e7ca      	b.n	800a738 <_puts_r+0x54>
 800a7a2:	0022      	movs	r2, r4
 800a7a4:	0028      	movs	r0, r5
 800a7a6:	f000 f8eb 	bl	800a980 <__swbuf_r>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d1e8      	bne.n	800a780 <_puts_r+0x9c>
 800a7ae:	e7c3      	b.n	800a738 <_puts_r+0x54>
 800a7b0:	250a      	movs	r5, #10
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	6022      	str	r2, [r4, #0]
 800a7b8:	701d      	strb	r5, [r3, #0]
 800a7ba:	e7bf      	b.n	800a73c <_puts_r+0x58>
 800a7bc:	0800cf0c 	.word	0x0800cf0c
 800a7c0:	0800cf2c 	.word	0x0800cf2c
 800a7c4:	0800ceec 	.word	0x0800ceec

0800a7c8 <puts>:
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	4b03      	ldr	r3, [pc, #12]	; (800a7d8 <puts+0x10>)
 800a7cc:	0001      	movs	r1, r0
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	f7ff ff88 	bl	800a6e4 <_puts_r>
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	46c0      	nop			; (mov r8, r8)
 800a7d8:	20000010 	.word	0x20000010

0800a7dc <setbuf>:
 800a7dc:	424a      	negs	r2, r1
 800a7de:	414a      	adcs	r2, r1
 800a7e0:	2380      	movs	r3, #128	; 0x80
 800a7e2:	b510      	push	{r4, lr}
 800a7e4:	0052      	lsls	r2, r2, #1
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	f000 f802 	bl	800a7f0 <setvbuf>
 800a7ec:	bd10      	pop	{r4, pc}
	...

0800a7f0 <setvbuf>:
 800a7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7f2:	001d      	movs	r5, r3
 800a7f4:	4b5d      	ldr	r3, [pc, #372]	; (800a96c <setvbuf+0x17c>)
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	681e      	ldr	r6, [r3, #0]
 800a7fa:	0004      	movs	r4, r0
 800a7fc:	000f      	movs	r7, r1
 800a7fe:	9200      	str	r2, [sp, #0]
 800a800:	2e00      	cmp	r6, #0
 800a802:	d005      	beq.n	800a810 <setvbuf+0x20>
 800a804:	69b3      	ldr	r3, [r6, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <setvbuf+0x20>
 800a80a:	0030      	movs	r0, r6
 800a80c:	f001 f95e 	bl	800bacc <__sinit>
 800a810:	4b57      	ldr	r3, [pc, #348]	; (800a970 <setvbuf+0x180>)
 800a812:	429c      	cmp	r4, r3
 800a814:	d161      	bne.n	800a8da <setvbuf+0xea>
 800a816:	6874      	ldr	r4, [r6, #4]
 800a818:	9b00      	ldr	r3, [sp, #0]
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d005      	beq.n	800a82a <setvbuf+0x3a>
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d900      	bls.n	800a824 <setvbuf+0x34>
 800a822:	e09d      	b.n	800a960 <setvbuf+0x170>
 800a824:	2d00      	cmp	r5, #0
 800a826:	da00      	bge.n	800a82a <setvbuf+0x3a>
 800a828:	e09a      	b.n	800a960 <setvbuf+0x170>
 800a82a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a82c:	07db      	lsls	r3, r3, #31
 800a82e:	d405      	bmi.n	800a83c <setvbuf+0x4c>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	059b      	lsls	r3, r3, #22
 800a834:	d402      	bmi.n	800a83c <setvbuf+0x4c>
 800a836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a838:	f001 f9ed 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800a83c:	0021      	movs	r1, r4
 800a83e:	0030      	movs	r0, r6
 800a840:	f001 f8a2 	bl	800b988 <_fflush_r>
 800a844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a846:	2900      	cmp	r1, #0
 800a848:	d008      	beq.n	800a85c <setvbuf+0x6c>
 800a84a:	0023      	movs	r3, r4
 800a84c:	3344      	adds	r3, #68	; 0x44
 800a84e:	4299      	cmp	r1, r3
 800a850:	d002      	beq.n	800a858 <setvbuf+0x68>
 800a852:	0030      	movs	r0, r6
 800a854:	f001 fe10 	bl	800c478 <_free_r>
 800a858:	2300      	movs	r3, #0
 800a85a:	6363      	str	r3, [r4, #52]	; 0x34
 800a85c:	2300      	movs	r3, #0
 800a85e:	61a3      	str	r3, [r4, #24]
 800a860:	6063      	str	r3, [r4, #4]
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	061b      	lsls	r3, r3, #24
 800a866:	d503      	bpl.n	800a870 <setvbuf+0x80>
 800a868:	0030      	movs	r0, r6
 800a86a:	6921      	ldr	r1, [r4, #16]
 800a86c:	f001 fe04 	bl	800c478 <_free_r>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	4a40      	ldr	r2, [pc, #256]	; (800a974 <setvbuf+0x184>)
 800a874:	4013      	ands	r3, r2
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d100      	bne.n	800a880 <setvbuf+0x90>
 800a87e:	e069      	b.n	800a954 <setvbuf+0x164>
 800a880:	ab03      	add	r3, sp, #12
 800a882:	0021      	movs	r1, r4
 800a884:	0030      	movs	r0, r6
 800a886:	aa02      	add	r2, sp, #8
 800a888:	f001 f9c8 	bl	800bc1c <__swhatbuf_r>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	4303      	orrs	r3, r0
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	2d00      	cmp	r5, #0
 800a894:	d12b      	bne.n	800a8ee <setvbuf+0xfe>
 800a896:	9d02      	ldr	r5, [sp, #8]
 800a898:	0028      	movs	r0, r5
 800a89a:	f001 fa2b 	bl	800bcf4 <malloc>
 800a89e:	1e07      	subs	r7, r0, #0
 800a8a0:	d153      	bne.n	800a94a <setvbuf+0x15a>
 800a8a2:	9b02      	ldr	r3, [sp, #8]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	42ab      	cmp	r3, r5
 800a8a8:	d149      	bne.n	800a93e <setvbuf+0x14e>
 800a8aa:	2501      	movs	r5, #1
 800a8ac:	426d      	negs	r5, r5
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	89a2      	ldrh	r2, [r4, #12]
 800a8b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	60a2      	str	r2, [r4, #8]
 800a8ba:	0022      	movs	r2, r4
 800a8bc:	3247      	adds	r2, #71	; 0x47
 800a8be:	6022      	str	r2, [r4, #0]
 800a8c0:	6122      	str	r2, [r4, #16]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	b21b      	sxth	r3, r3
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	6162      	str	r2, [r4, #20]
 800a8ca:	4211      	tst	r1, r2
 800a8cc:	d134      	bne.n	800a938 <setvbuf+0x148>
 800a8ce:	059b      	lsls	r3, r3, #22
 800a8d0:	d432      	bmi.n	800a938 <setvbuf+0x148>
 800a8d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8d4:	f001 f9a0 	bl	800bc18 <__retarget_lock_release_recursive>
 800a8d8:	e02e      	b.n	800a938 <setvbuf+0x148>
 800a8da:	4b27      	ldr	r3, [pc, #156]	; (800a978 <setvbuf+0x188>)
 800a8dc:	429c      	cmp	r4, r3
 800a8de:	d101      	bne.n	800a8e4 <setvbuf+0xf4>
 800a8e0:	68b4      	ldr	r4, [r6, #8]
 800a8e2:	e799      	b.n	800a818 <setvbuf+0x28>
 800a8e4:	4b25      	ldr	r3, [pc, #148]	; (800a97c <setvbuf+0x18c>)
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d196      	bne.n	800a818 <setvbuf+0x28>
 800a8ea:	68f4      	ldr	r4, [r6, #12]
 800a8ec:	e794      	b.n	800a818 <setvbuf+0x28>
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	d0d2      	beq.n	800a898 <setvbuf+0xa8>
 800a8f2:	69b3      	ldr	r3, [r6, #24]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <setvbuf+0x10e>
 800a8f8:	0030      	movs	r0, r6
 800a8fa:	f001 f8e7 	bl	800bacc <__sinit>
 800a8fe:	9b00      	ldr	r3, [sp, #0]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d102      	bne.n	800a90a <setvbuf+0x11a>
 800a904:	89a2      	ldrh	r2, [r4, #12]
 800a906:	4313      	orrs	r3, r2
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	89a2      	ldrh	r2, [r4, #12]
 800a90c:	2308      	movs	r3, #8
 800a90e:	0011      	movs	r1, r2
 800a910:	6027      	str	r7, [r4, #0]
 800a912:	6127      	str	r7, [r4, #16]
 800a914:	6165      	str	r5, [r4, #20]
 800a916:	4019      	ands	r1, r3
 800a918:	421a      	tst	r2, r3
 800a91a:	d01f      	beq.n	800a95c <setvbuf+0x16c>
 800a91c:	07d3      	lsls	r3, r2, #31
 800a91e:	d51b      	bpl.n	800a958 <setvbuf+0x168>
 800a920:	2300      	movs	r3, #0
 800a922:	426d      	negs	r5, r5
 800a924:	60a3      	str	r3, [r4, #8]
 800a926:	61a5      	str	r5, [r4, #24]
 800a928:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a92a:	2301      	movs	r3, #1
 800a92c:	000d      	movs	r5, r1
 800a92e:	401d      	ands	r5, r3
 800a930:	4219      	tst	r1, r3
 800a932:	d118      	bne.n	800a966 <setvbuf+0x176>
 800a934:	0593      	lsls	r3, r2, #22
 800a936:	d5cc      	bpl.n	800a8d2 <setvbuf+0xe2>
 800a938:	0028      	movs	r0, r5
 800a93a:	b005      	add	sp, #20
 800a93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a93e:	9801      	ldr	r0, [sp, #4]
 800a940:	f001 f9d8 	bl	800bcf4 <malloc>
 800a944:	9d01      	ldr	r5, [sp, #4]
 800a946:	1e07      	subs	r7, r0, #0
 800a948:	d0af      	beq.n	800a8aa <setvbuf+0xba>
 800a94a:	2380      	movs	r3, #128	; 0x80
 800a94c:	89a2      	ldrh	r2, [r4, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	81a3      	strh	r3, [r4, #12]
 800a952:	e7ce      	b.n	800a8f2 <setvbuf+0x102>
 800a954:	2500      	movs	r5, #0
 800a956:	e7aa      	b.n	800a8ae <setvbuf+0xbe>
 800a958:	60a5      	str	r5, [r4, #8]
 800a95a:	e7e5      	b.n	800a928 <setvbuf+0x138>
 800a95c:	60a1      	str	r1, [r4, #8]
 800a95e:	e7e3      	b.n	800a928 <setvbuf+0x138>
 800a960:	2501      	movs	r5, #1
 800a962:	426d      	negs	r5, r5
 800a964:	e7e8      	b.n	800a938 <setvbuf+0x148>
 800a966:	2500      	movs	r5, #0
 800a968:	e7e6      	b.n	800a938 <setvbuf+0x148>
 800a96a:	46c0      	nop			; (mov r8, r8)
 800a96c:	20000010 	.word	0x20000010
 800a970:	0800cf0c 	.word	0x0800cf0c
 800a974:	fffff35c 	.word	0xfffff35c
 800a978:	0800cf2c 	.word	0x0800cf2c
 800a97c:	0800ceec 	.word	0x0800ceec

0800a980 <__swbuf_r>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	0005      	movs	r5, r0
 800a984:	000e      	movs	r6, r1
 800a986:	0014      	movs	r4, r2
 800a988:	2800      	cmp	r0, #0
 800a98a:	d004      	beq.n	800a996 <__swbuf_r+0x16>
 800a98c:	6983      	ldr	r3, [r0, #24]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <__swbuf_r+0x16>
 800a992:	f001 f89b 	bl	800bacc <__sinit>
 800a996:	4b22      	ldr	r3, [pc, #136]	; (800aa20 <__swbuf_r+0xa0>)
 800a998:	429c      	cmp	r4, r3
 800a99a:	d12e      	bne.n	800a9fa <__swbuf_r+0x7a>
 800a99c:	686c      	ldr	r4, [r5, #4]
 800a99e:	69a3      	ldr	r3, [r4, #24]
 800a9a0:	60a3      	str	r3, [r4, #8]
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	071b      	lsls	r3, r3, #28
 800a9a6:	d532      	bpl.n	800aa0e <__swbuf_r+0x8e>
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d02f      	beq.n	800aa0e <__swbuf_r+0x8e>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	6922      	ldr	r2, [r4, #16]
 800a9b2:	b2f7      	uxtb	r7, r6
 800a9b4:	1a98      	subs	r0, r3, r2
 800a9b6:	6963      	ldr	r3, [r4, #20]
 800a9b8:	b2f6      	uxtb	r6, r6
 800a9ba:	4283      	cmp	r3, r0
 800a9bc:	dc05      	bgt.n	800a9ca <__swbuf_r+0x4a>
 800a9be:	0021      	movs	r1, r4
 800a9c0:	0028      	movs	r0, r5
 800a9c2:	f000 ffe1 	bl	800b988 <_fflush_r>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d127      	bne.n	800aa1a <__swbuf_r+0x9a>
 800a9ca:	68a3      	ldr	r3, [r4, #8]
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	6022      	str	r2, [r4, #0]
 800a9d8:	701f      	strb	r7, [r3, #0]
 800a9da:	6963      	ldr	r3, [r4, #20]
 800a9dc:	4283      	cmp	r3, r0
 800a9de:	d004      	beq.n	800a9ea <__swbuf_r+0x6a>
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	07db      	lsls	r3, r3, #31
 800a9e4:	d507      	bpl.n	800a9f6 <__swbuf_r+0x76>
 800a9e6:	2e0a      	cmp	r6, #10
 800a9e8:	d105      	bne.n	800a9f6 <__swbuf_r+0x76>
 800a9ea:	0021      	movs	r1, r4
 800a9ec:	0028      	movs	r0, r5
 800a9ee:	f000 ffcb 	bl	800b988 <_fflush_r>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d111      	bne.n	800aa1a <__swbuf_r+0x9a>
 800a9f6:	0030      	movs	r0, r6
 800a9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <__swbuf_r+0xa4>)
 800a9fc:	429c      	cmp	r4, r3
 800a9fe:	d101      	bne.n	800aa04 <__swbuf_r+0x84>
 800aa00:	68ac      	ldr	r4, [r5, #8]
 800aa02:	e7cc      	b.n	800a99e <__swbuf_r+0x1e>
 800aa04:	4b08      	ldr	r3, [pc, #32]	; (800aa28 <__swbuf_r+0xa8>)
 800aa06:	429c      	cmp	r4, r3
 800aa08:	d1c9      	bne.n	800a99e <__swbuf_r+0x1e>
 800aa0a:	68ec      	ldr	r4, [r5, #12]
 800aa0c:	e7c7      	b.n	800a99e <__swbuf_r+0x1e>
 800aa0e:	0021      	movs	r1, r4
 800aa10:	0028      	movs	r0, r5
 800aa12:	f000 f80b 	bl	800aa2c <__swsetup_r>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d0c9      	beq.n	800a9ae <__swbuf_r+0x2e>
 800aa1a:	2601      	movs	r6, #1
 800aa1c:	4276      	negs	r6, r6
 800aa1e:	e7ea      	b.n	800a9f6 <__swbuf_r+0x76>
 800aa20:	0800cf0c 	.word	0x0800cf0c
 800aa24:	0800cf2c 	.word	0x0800cf2c
 800aa28:	0800ceec 	.word	0x0800ceec

0800aa2c <__swsetup_r>:
 800aa2c:	4b37      	ldr	r3, [pc, #220]	; (800ab0c <__swsetup_r+0xe0>)
 800aa2e:	b570      	push	{r4, r5, r6, lr}
 800aa30:	681d      	ldr	r5, [r3, #0]
 800aa32:	0006      	movs	r6, r0
 800aa34:	000c      	movs	r4, r1
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	d005      	beq.n	800aa46 <__swsetup_r+0x1a>
 800aa3a:	69ab      	ldr	r3, [r5, #24]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d102      	bne.n	800aa46 <__swsetup_r+0x1a>
 800aa40:	0028      	movs	r0, r5
 800aa42:	f001 f843 	bl	800bacc <__sinit>
 800aa46:	4b32      	ldr	r3, [pc, #200]	; (800ab10 <__swsetup_r+0xe4>)
 800aa48:	429c      	cmp	r4, r3
 800aa4a:	d10f      	bne.n	800aa6c <__swsetup_r+0x40>
 800aa4c:	686c      	ldr	r4, [r5, #4]
 800aa4e:	230c      	movs	r3, #12
 800aa50:	5ee2      	ldrsh	r2, [r4, r3]
 800aa52:	b293      	uxth	r3, r2
 800aa54:	0711      	lsls	r1, r2, #28
 800aa56:	d42d      	bmi.n	800aab4 <__swsetup_r+0x88>
 800aa58:	06d9      	lsls	r1, r3, #27
 800aa5a:	d411      	bmi.n	800aa80 <__swsetup_r+0x54>
 800aa5c:	2309      	movs	r3, #9
 800aa5e:	2001      	movs	r0, #1
 800aa60:	6033      	str	r3, [r6, #0]
 800aa62:	3337      	adds	r3, #55	; 0x37
 800aa64:	4313      	orrs	r3, r2
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	4240      	negs	r0, r0
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <__swsetup_r+0xe8>)
 800aa6e:	429c      	cmp	r4, r3
 800aa70:	d101      	bne.n	800aa76 <__swsetup_r+0x4a>
 800aa72:	68ac      	ldr	r4, [r5, #8]
 800aa74:	e7eb      	b.n	800aa4e <__swsetup_r+0x22>
 800aa76:	4b28      	ldr	r3, [pc, #160]	; (800ab18 <__swsetup_r+0xec>)
 800aa78:	429c      	cmp	r4, r3
 800aa7a:	d1e8      	bne.n	800aa4e <__swsetup_r+0x22>
 800aa7c:	68ec      	ldr	r4, [r5, #12]
 800aa7e:	e7e6      	b.n	800aa4e <__swsetup_r+0x22>
 800aa80:	075b      	lsls	r3, r3, #29
 800aa82:	d513      	bpl.n	800aaac <__swsetup_r+0x80>
 800aa84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa86:	2900      	cmp	r1, #0
 800aa88:	d008      	beq.n	800aa9c <__swsetup_r+0x70>
 800aa8a:	0023      	movs	r3, r4
 800aa8c:	3344      	adds	r3, #68	; 0x44
 800aa8e:	4299      	cmp	r1, r3
 800aa90:	d002      	beq.n	800aa98 <__swsetup_r+0x6c>
 800aa92:	0030      	movs	r0, r6
 800aa94:	f001 fcf0 	bl	800c478 <_free_r>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6363      	str	r3, [r4, #52]	; 0x34
 800aa9c:	2224      	movs	r2, #36	; 0x24
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	4393      	bics	r3, r2
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	6063      	str	r3, [r4, #4]
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	2308      	movs	r3, #8
 800aaae:	89a2      	ldrh	r2, [r4, #12]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10b      	bne.n	800aad2 <__swsetup_r+0xa6>
 800aaba:	21a0      	movs	r1, #160	; 0xa0
 800aabc:	2280      	movs	r2, #128	; 0x80
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	0089      	lsls	r1, r1, #2
 800aac2:	0092      	lsls	r2, r2, #2
 800aac4:	400b      	ands	r3, r1
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d003      	beq.n	800aad2 <__swsetup_r+0xa6>
 800aaca:	0021      	movs	r1, r4
 800aacc:	0030      	movs	r0, r6
 800aace:	f001 f8cd 	bl	800bc6c <__smakebuf_r>
 800aad2:	220c      	movs	r2, #12
 800aad4:	5ea3      	ldrsh	r3, [r4, r2]
 800aad6:	2001      	movs	r0, #1
 800aad8:	001a      	movs	r2, r3
 800aada:	b299      	uxth	r1, r3
 800aadc:	4002      	ands	r2, r0
 800aade:	4203      	tst	r3, r0
 800aae0:	d00f      	beq.n	800ab02 <__swsetup_r+0xd6>
 800aae2:	2200      	movs	r2, #0
 800aae4:	60a2      	str	r2, [r4, #8]
 800aae6:	6962      	ldr	r2, [r4, #20]
 800aae8:	4252      	negs	r2, r2
 800aaea:	61a2      	str	r2, [r4, #24]
 800aaec:	2000      	movs	r0, #0
 800aaee:	6922      	ldr	r2, [r4, #16]
 800aaf0:	4282      	cmp	r2, r0
 800aaf2:	d1ba      	bne.n	800aa6a <__swsetup_r+0x3e>
 800aaf4:	060a      	lsls	r2, r1, #24
 800aaf6:	d5b8      	bpl.n	800aa6a <__swsetup_r+0x3e>
 800aaf8:	2240      	movs	r2, #64	; 0x40
 800aafa:	4313      	orrs	r3, r2
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	3801      	subs	r0, #1
 800ab00:	e7b3      	b.n	800aa6a <__swsetup_r+0x3e>
 800ab02:	0788      	lsls	r0, r1, #30
 800ab04:	d400      	bmi.n	800ab08 <__swsetup_r+0xdc>
 800ab06:	6962      	ldr	r2, [r4, #20]
 800ab08:	60a2      	str	r2, [r4, #8]
 800ab0a:	e7ef      	b.n	800aaec <__swsetup_r+0xc0>
 800ab0c:	20000010 	.word	0x20000010
 800ab10:	0800cf0c 	.word	0x0800cf0c
 800ab14:	0800cf2c 	.word	0x0800cf2c
 800ab18:	0800ceec 	.word	0x0800ceec

0800ab1c <quorem>:
 800ab1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1e:	0006      	movs	r6, r0
 800ab20:	690d      	ldr	r5, [r1, #16]
 800ab22:	6933      	ldr	r3, [r6, #16]
 800ab24:	b087      	sub	sp, #28
 800ab26:	2000      	movs	r0, #0
 800ab28:	9102      	str	r1, [sp, #8]
 800ab2a:	42ab      	cmp	r3, r5
 800ab2c:	db6b      	blt.n	800ac06 <quorem+0xea>
 800ab2e:	000b      	movs	r3, r1
 800ab30:	3d01      	subs	r5, #1
 800ab32:	00ac      	lsls	r4, r5, #2
 800ab34:	3314      	adds	r3, #20
 800ab36:	9305      	str	r3, [sp, #20]
 800ab38:	191b      	adds	r3, r3, r4
 800ab3a:	9303      	str	r3, [sp, #12]
 800ab3c:	0033      	movs	r3, r6
 800ab3e:	3314      	adds	r3, #20
 800ab40:	9301      	str	r3, [sp, #4]
 800ab42:	191c      	adds	r4, r3, r4
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	6827      	ldr	r7, [r4, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	0038      	movs	r0, r7
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	0019      	movs	r1, r3
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	f7f5 faf4 	bl	8000140 <__udivsi3>
 800ab58:	9b04      	ldr	r3, [sp, #16]
 800ab5a:	9000      	str	r0, [sp, #0]
 800ab5c:	429f      	cmp	r7, r3
 800ab5e:	d329      	bcc.n	800abb4 <quorem+0x98>
 800ab60:	2300      	movs	r3, #0
 800ab62:	469c      	mov	ip, r3
 800ab64:	9801      	ldr	r0, [sp, #4]
 800ab66:	9f05      	ldr	r7, [sp, #20]
 800ab68:	9304      	str	r3, [sp, #16]
 800ab6a:	cf08      	ldmia	r7!, {r3}
 800ab6c:	9a00      	ldr	r2, [sp, #0]
 800ab6e:	b299      	uxth	r1, r3
 800ab70:	4351      	muls	r1, r2
 800ab72:	0c1b      	lsrs	r3, r3, #16
 800ab74:	4353      	muls	r3, r2
 800ab76:	4461      	add	r1, ip
 800ab78:	0c0a      	lsrs	r2, r1, #16
 800ab7a:	189b      	adds	r3, r3, r2
 800ab7c:	0c1a      	lsrs	r2, r3, #16
 800ab7e:	9305      	str	r3, [sp, #20]
 800ab80:	6803      	ldr	r3, [r0, #0]
 800ab82:	4694      	mov	ip, r2
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	b289      	uxth	r1, r1
 800ab8a:	18d2      	adds	r2, r2, r3
 800ab8c:	6803      	ldr	r3, [r0, #0]
 800ab8e:	1a52      	subs	r2, r2, r1
 800ab90:	0c19      	lsrs	r1, r3, #16
 800ab92:	466b      	mov	r3, sp
 800ab94:	8a9b      	ldrh	r3, [r3, #20]
 800ab96:	1acb      	subs	r3, r1, r3
 800ab98:	1411      	asrs	r1, r2, #16
 800ab9a:	185b      	adds	r3, r3, r1
 800ab9c:	1419      	asrs	r1, r3, #16
 800ab9e:	b292      	uxth	r2, r2
 800aba0:	041b      	lsls	r3, r3, #16
 800aba2:	431a      	orrs	r2, r3
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	9104      	str	r1, [sp, #16]
 800aba8:	c004      	stmia	r0!, {r2}
 800abaa:	42bb      	cmp	r3, r7
 800abac:	d2dd      	bcs.n	800ab6a <quorem+0x4e>
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d02e      	beq.n	800ac12 <quorem+0xf6>
 800abb4:	0030      	movs	r0, r6
 800abb6:	9902      	ldr	r1, [sp, #8]
 800abb8:	f001 fb38 	bl	800c22c <__mcmp>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	db21      	blt.n	800ac04 <quorem+0xe8>
 800abc0:	0030      	movs	r0, r6
 800abc2:	2400      	movs	r4, #0
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	9902      	ldr	r1, [sp, #8]
 800abc8:	3301      	adds	r3, #1
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	3014      	adds	r0, #20
 800abce:	3114      	adds	r1, #20
 800abd0:	6802      	ldr	r2, [r0, #0]
 800abd2:	c908      	ldmia	r1!, {r3}
 800abd4:	b292      	uxth	r2, r2
 800abd6:	1914      	adds	r4, r2, r4
 800abd8:	b29a      	uxth	r2, r3
 800abda:	1aa2      	subs	r2, r4, r2
 800abdc:	6804      	ldr	r4, [r0, #0]
 800abde:	0c1b      	lsrs	r3, r3, #16
 800abe0:	0c24      	lsrs	r4, r4, #16
 800abe2:	1ae3      	subs	r3, r4, r3
 800abe4:	1414      	asrs	r4, r2, #16
 800abe6:	191b      	adds	r3, r3, r4
 800abe8:	141c      	asrs	r4, r3, #16
 800abea:	b292      	uxth	r2, r2
 800abec:	041b      	lsls	r3, r3, #16
 800abee:	4313      	orrs	r3, r2
 800abf0:	c008      	stmia	r0!, {r3}
 800abf2:	9b03      	ldr	r3, [sp, #12]
 800abf4:	428b      	cmp	r3, r1
 800abf6:	d2eb      	bcs.n	800abd0 <quorem+0xb4>
 800abf8:	9a01      	ldr	r2, [sp, #4]
 800abfa:	00ab      	lsls	r3, r5, #2
 800abfc:	18d3      	adds	r3, r2, r3
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	d010      	beq.n	800ac26 <quorem+0x10a>
 800ac04:	9800      	ldr	r0, [sp, #0]
 800ac06:	b007      	add	sp, #28
 800ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d104      	bne.n	800ac1a <quorem+0xfe>
 800ac10:	3d01      	subs	r5, #1
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	3c04      	subs	r4, #4
 800ac16:	42a3      	cmp	r3, r4
 800ac18:	d3f7      	bcc.n	800ac0a <quorem+0xee>
 800ac1a:	6135      	str	r5, [r6, #16]
 800ac1c:	e7ca      	b.n	800abb4 <quorem+0x98>
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	d104      	bne.n	800ac2e <quorem+0x112>
 800ac24:	3d01      	subs	r5, #1
 800ac26:	9a01      	ldr	r2, [sp, #4]
 800ac28:	3b04      	subs	r3, #4
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d3f7      	bcc.n	800ac1e <quorem+0x102>
 800ac2e:	6135      	str	r5, [r6, #16]
 800ac30:	e7e8      	b.n	800ac04 <quorem+0xe8>
	...

0800ac34 <_dtoa_r>:
 800ac34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac36:	b09d      	sub	sp, #116	; 0x74
 800ac38:	9202      	str	r2, [sp, #8]
 800ac3a:	9303      	str	r3, [sp, #12]
 800ac3c:	9b02      	ldr	r3, [sp, #8]
 800ac3e:	9c03      	ldr	r4, [sp, #12]
 800ac40:	930a      	str	r3, [sp, #40]	; 0x28
 800ac42:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac44:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ac46:	0007      	movs	r7, r0
 800ac48:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ac4a:	2c00      	cmp	r4, #0
 800ac4c:	d10e      	bne.n	800ac6c <_dtoa_r+0x38>
 800ac4e:	2010      	movs	r0, #16
 800ac50:	f001 f850 	bl	800bcf4 <malloc>
 800ac54:	1e02      	subs	r2, r0, #0
 800ac56:	6278      	str	r0, [r7, #36]	; 0x24
 800ac58:	d104      	bne.n	800ac64 <_dtoa_r+0x30>
 800ac5a:	21ea      	movs	r1, #234	; 0xea
 800ac5c:	4bc0      	ldr	r3, [pc, #768]	; (800af60 <_dtoa_r+0x32c>)
 800ac5e:	48c1      	ldr	r0, [pc, #772]	; (800af64 <_dtoa_r+0x330>)
 800ac60:	f001 fe86 	bl	800c970 <__assert_func>
 800ac64:	6044      	str	r4, [r0, #4]
 800ac66:	6084      	str	r4, [r0, #8]
 800ac68:	6004      	str	r4, [r0, #0]
 800ac6a:	60c4      	str	r4, [r0, #12]
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	6819      	ldr	r1, [r3, #0]
 800ac70:	2900      	cmp	r1, #0
 800ac72:	d00a      	beq.n	800ac8a <_dtoa_r+0x56>
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	2301      	movs	r3, #1
 800ac78:	4093      	lsls	r3, r2
 800ac7a:	604a      	str	r2, [r1, #4]
 800ac7c:	608b      	str	r3, [r1, #8]
 800ac7e:	0038      	movs	r0, r7
 800ac80:	f001 f892 	bl	800bda8 <_Bfree>
 800ac84:	2200      	movs	r2, #0
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	601a      	str	r2, [r3, #0]
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	da21      	bge.n	800acd4 <_dtoa_r+0xa0>
 800ac90:	2301      	movs	r3, #1
 800ac92:	602b      	str	r3, [r5, #0]
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	085b      	lsrs	r3, r3, #1
 800ac9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ac9e:	4bb2      	ldr	r3, [pc, #712]	; (800af68 <_dtoa_r+0x334>)
 800aca0:	002a      	movs	r2, r5
 800aca2:	9318      	str	r3, [sp, #96]	; 0x60
 800aca4:	401a      	ands	r2, r3
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d117      	bne.n	800acda <_dtoa_r+0xa6>
 800acaa:	4bb0      	ldr	r3, [pc, #704]	; (800af6c <_dtoa_r+0x338>)
 800acac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800acae:	0328      	lsls	r0, r5, #12
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	9b02      	ldr	r3, [sp, #8]
 800acb4:	0b00      	lsrs	r0, r0, #12
 800acb6:	4318      	orrs	r0, r3
 800acb8:	d101      	bne.n	800acbe <_dtoa_r+0x8a>
 800acba:	f000 fdc3 	bl	800b844 <_dtoa_r+0xc10>
 800acbe:	48ac      	ldr	r0, [pc, #688]	; (800af70 <_dtoa_r+0x33c>)
 800acc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acc2:	9005      	str	r0, [sp, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <_dtoa_r+0x9a>
 800acc8:	4baa      	ldr	r3, [pc, #680]	; (800af74 <_dtoa_r+0x340>)
 800acca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800accc:	6013      	str	r3, [r2, #0]
 800acce:	9805      	ldr	r0, [sp, #20]
 800acd0:	b01d      	add	sp, #116	; 0x74
 800acd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd4:	2300      	movs	r3, #0
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	e7e0      	b.n	800ac9c <_dtoa_r+0x68>
 800acda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800acde:	9312      	str	r3, [sp, #72]	; 0x48
 800ace0:	9413      	str	r4, [sp, #76]	; 0x4c
 800ace2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ace4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ace6:	2200      	movs	r2, #0
 800ace8:	2300      	movs	r3, #0
 800acea:	f7f5 fbaf 	bl	800044c <__aeabi_dcmpeq>
 800acee:	1e04      	subs	r4, r0, #0
 800acf0:	d00b      	beq.n	800ad0a <_dtoa_r+0xd6>
 800acf2:	2301      	movs	r3, #1
 800acf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	4b9f      	ldr	r3, [pc, #636]	; (800af78 <_dtoa_r+0x344>)
 800acfa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800acfc:	9305      	str	r3, [sp, #20]
 800acfe:	2a00      	cmp	r2, #0
 800ad00:	d0e5      	beq.n	800acce <_dtoa_r+0x9a>
 800ad02:	4a9e      	ldr	r2, [pc, #632]	; (800af7c <_dtoa_r+0x348>)
 800ad04:	9926      	ldr	r1, [sp, #152]	; 0x98
 800ad06:	600a      	str	r2, [r1, #0]
 800ad08:	e7e1      	b.n	800acce <_dtoa_r+0x9a>
 800ad0a:	ab1a      	add	r3, sp, #104	; 0x68
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	ab1b      	add	r3, sp, #108	; 0x6c
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	0038      	movs	r0, r7
 800ad14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad18:	f001 fb3c 	bl	800c394 <__d2b>
 800ad1c:	006e      	lsls	r6, r5, #1
 800ad1e:	9004      	str	r0, [sp, #16]
 800ad20:	0d76      	lsrs	r6, r6, #21
 800ad22:	d100      	bne.n	800ad26 <_dtoa_r+0xf2>
 800ad24:	e07c      	b.n	800ae20 <_dtoa_r+0x1ec>
 800ad26:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ad28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ad2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad2c:	4a94      	ldr	r2, [pc, #592]	; (800af80 <_dtoa_r+0x34c>)
 800ad2e:	031b      	lsls	r3, r3, #12
 800ad30:	0b1b      	lsrs	r3, r3, #12
 800ad32:	431a      	orrs	r2, r3
 800ad34:	0011      	movs	r1, r2
 800ad36:	4b93      	ldr	r3, [pc, #588]	; (800af84 <_dtoa_r+0x350>)
 800ad38:	9416      	str	r4, [sp, #88]	; 0x58
 800ad3a:	18f6      	adds	r6, r6, r3
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4b92      	ldr	r3, [pc, #584]	; (800af88 <_dtoa_r+0x354>)
 800ad40:	f7f6 fe7a 	bl	8001a38 <__aeabi_dsub>
 800ad44:	4a91      	ldr	r2, [pc, #580]	; (800af8c <_dtoa_r+0x358>)
 800ad46:	4b92      	ldr	r3, [pc, #584]	; (800af90 <_dtoa_r+0x35c>)
 800ad48:	f7f6 fc0a 	bl	8001560 <__aeabi_dmul>
 800ad4c:	4a91      	ldr	r2, [pc, #580]	; (800af94 <_dtoa_r+0x360>)
 800ad4e:	4b92      	ldr	r3, [pc, #584]	; (800af98 <_dtoa_r+0x364>)
 800ad50:	f7f5 fc96 	bl	8000680 <__aeabi_dadd>
 800ad54:	0004      	movs	r4, r0
 800ad56:	0030      	movs	r0, r6
 800ad58:	000d      	movs	r5, r1
 800ad5a:	f7f7 fa53 	bl	8002204 <__aeabi_i2d>
 800ad5e:	4a8f      	ldr	r2, [pc, #572]	; (800af9c <_dtoa_r+0x368>)
 800ad60:	4b8f      	ldr	r3, [pc, #572]	; (800afa0 <_dtoa_r+0x36c>)
 800ad62:	f7f6 fbfd 	bl	8001560 <__aeabi_dmul>
 800ad66:	0002      	movs	r2, r0
 800ad68:	000b      	movs	r3, r1
 800ad6a:	0020      	movs	r0, r4
 800ad6c:	0029      	movs	r1, r5
 800ad6e:	f7f5 fc87 	bl	8000680 <__aeabi_dadd>
 800ad72:	0004      	movs	r4, r0
 800ad74:	000d      	movs	r5, r1
 800ad76:	f7f7 fa0f 	bl	8002198 <__aeabi_d2iz>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	9002      	str	r0, [sp, #8]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	0020      	movs	r0, r4
 800ad82:	0029      	movs	r1, r5
 800ad84:	f7f5 fb68 	bl	8000458 <__aeabi_dcmplt>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d00b      	beq.n	800ada4 <_dtoa_r+0x170>
 800ad8c:	9802      	ldr	r0, [sp, #8]
 800ad8e:	f7f7 fa39 	bl	8002204 <__aeabi_i2d>
 800ad92:	002b      	movs	r3, r5
 800ad94:	0022      	movs	r2, r4
 800ad96:	f7f5 fb59 	bl	800044c <__aeabi_dcmpeq>
 800ad9a:	4243      	negs	r3, r0
 800ad9c:	4158      	adcs	r0, r3
 800ad9e:	9b02      	ldr	r3, [sp, #8]
 800ada0:	1a1b      	subs	r3, r3, r0
 800ada2:	9302      	str	r3, [sp, #8]
 800ada4:	2301      	movs	r3, #1
 800ada6:	9315      	str	r3, [sp, #84]	; 0x54
 800ada8:	9b02      	ldr	r3, [sp, #8]
 800adaa:	2b16      	cmp	r3, #22
 800adac:	d80f      	bhi.n	800adce <_dtoa_r+0x19a>
 800adae:	9812      	ldr	r0, [sp, #72]	; 0x48
 800adb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800adb2:	00da      	lsls	r2, r3, #3
 800adb4:	4b7b      	ldr	r3, [pc, #492]	; (800afa4 <_dtoa_r+0x370>)
 800adb6:	189b      	adds	r3, r3, r2
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f7f5 fb4c 	bl	8000458 <__aeabi_dcmplt>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d049      	beq.n	800ae58 <_dtoa_r+0x224>
 800adc4:	9b02      	ldr	r3, [sp, #8]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	9302      	str	r3, [sp, #8]
 800adca:	2300      	movs	r3, #0
 800adcc:	9315      	str	r3, [sp, #84]	; 0x54
 800adce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800add0:	1b9e      	subs	r6, r3, r6
 800add2:	2300      	movs	r3, #0
 800add4:	9308      	str	r3, [sp, #32]
 800add6:	0033      	movs	r3, r6
 800add8:	3b01      	subs	r3, #1
 800adda:	930d      	str	r3, [sp, #52]	; 0x34
 800addc:	d504      	bpl.n	800ade8 <_dtoa_r+0x1b4>
 800adde:	2301      	movs	r3, #1
 800ade0:	1b9b      	subs	r3, r3, r6
 800ade2:	9308      	str	r3, [sp, #32]
 800ade4:	2300      	movs	r3, #0
 800ade6:	930d      	str	r3, [sp, #52]	; 0x34
 800ade8:	9b02      	ldr	r3, [sp, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	db36      	blt.n	800ae5c <_dtoa_r+0x228>
 800adee:	9a02      	ldr	r2, [sp, #8]
 800adf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adf2:	4694      	mov	ip, r2
 800adf4:	4463      	add	r3, ip
 800adf6:	930d      	str	r3, [sp, #52]	; 0x34
 800adf8:	2300      	movs	r3, #0
 800adfa:	9214      	str	r2, [sp, #80]	; 0x50
 800adfc:	930e      	str	r3, [sp, #56]	; 0x38
 800adfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae00:	2401      	movs	r4, #1
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	d862      	bhi.n	800aecc <_dtoa_r+0x298>
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	dd02      	ble.n	800ae10 <_dtoa_r+0x1dc>
 800ae0a:	2400      	movs	r4, #0
 800ae0c:	3b04      	subs	r3, #4
 800ae0e:	9322      	str	r3, [sp, #136]	; 0x88
 800ae10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae12:	1e98      	subs	r0, r3, #2
 800ae14:	2803      	cmp	r0, #3
 800ae16:	d862      	bhi.n	800aede <_dtoa_r+0x2aa>
 800ae18:	f7f5 f97e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ae1c:	56343629 	.word	0x56343629
 800ae20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ae22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ae24:	189e      	adds	r6, r3, r2
 800ae26:	4b60      	ldr	r3, [pc, #384]	; (800afa8 <_dtoa_r+0x374>)
 800ae28:	18f2      	adds	r2, r6, r3
 800ae2a:	2a20      	cmp	r2, #32
 800ae2c:	dd0f      	ble.n	800ae4e <_dtoa_r+0x21a>
 800ae2e:	2340      	movs	r3, #64	; 0x40
 800ae30:	1a9b      	subs	r3, r3, r2
 800ae32:	409d      	lsls	r5, r3
 800ae34:	4b5d      	ldr	r3, [pc, #372]	; (800afac <_dtoa_r+0x378>)
 800ae36:	9802      	ldr	r0, [sp, #8]
 800ae38:	18f3      	adds	r3, r6, r3
 800ae3a:	40d8      	lsrs	r0, r3
 800ae3c:	4328      	orrs	r0, r5
 800ae3e:	f7f7 fa11 	bl	8002264 <__aeabi_ui2d>
 800ae42:	2301      	movs	r3, #1
 800ae44:	4c5a      	ldr	r4, [pc, #360]	; (800afb0 <_dtoa_r+0x37c>)
 800ae46:	3e01      	subs	r6, #1
 800ae48:	1909      	adds	r1, r1, r4
 800ae4a:	9316      	str	r3, [sp, #88]	; 0x58
 800ae4c:	e776      	b.n	800ad3c <_dtoa_r+0x108>
 800ae4e:	2320      	movs	r3, #32
 800ae50:	9802      	ldr	r0, [sp, #8]
 800ae52:	1a9b      	subs	r3, r3, r2
 800ae54:	4098      	lsls	r0, r3
 800ae56:	e7f2      	b.n	800ae3e <_dtoa_r+0x20a>
 800ae58:	9015      	str	r0, [sp, #84]	; 0x54
 800ae5a:	e7b8      	b.n	800adce <_dtoa_r+0x19a>
 800ae5c:	9b08      	ldr	r3, [sp, #32]
 800ae5e:	9a02      	ldr	r2, [sp, #8]
 800ae60:	1a9b      	subs	r3, r3, r2
 800ae62:	9308      	str	r3, [sp, #32]
 800ae64:	4253      	negs	r3, r2
 800ae66:	930e      	str	r3, [sp, #56]	; 0x38
 800ae68:	2300      	movs	r3, #0
 800ae6a:	9314      	str	r3, [sp, #80]	; 0x50
 800ae6c:	e7c7      	b.n	800adfe <_dtoa_r+0x1ca>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	dc36      	bgt.n	800aee6 <_dtoa_r+0x2b2>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	001a      	movs	r2, r3
 800ae7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae7e:	9306      	str	r3, [sp, #24]
 800ae80:	9223      	str	r2, [sp, #140]	; 0x8c
 800ae82:	e00d      	b.n	800aea0 <_dtoa_r+0x26c>
 800ae84:	2301      	movs	r3, #1
 800ae86:	e7f3      	b.n	800ae70 <_dtoa_r+0x23c>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ae8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae8e:	4694      	mov	ip, r2
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	4463      	add	r3, ip
 800ae94:	930c      	str	r3, [sp, #48]	; 0x30
 800ae96:	3301      	adds	r3, #1
 800ae98:	9306      	str	r3, [sp, #24]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dc00      	bgt.n	800aea0 <_dtoa_r+0x26c>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	2200      	movs	r2, #0
 800aea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aea4:	6042      	str	r2, [r0, #4]
 800aea6:	3204      	adds	r2, #4
 800aea8:	0015      	movs	r5, r2
 800aeaa:	3514      	adds	r5, #20
 800aeac:	6841      	ldr	r1, [r0, #4]
 800aeae:	429d      	cmp	r5, r3
 800aeb0:	d91d      	bls.n	800aeee <_dtoa_r+0x2ba>
 800aeb2:	0038      	movs	r0, r7
 800aeb4:	f000 ff34 	bl	800bd20 <_Balloc>
 800aeb8:	9005      	str	r0, [sp, #20]
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d11b      	bne.n	800aef6 <_dtoa_r+0x2c2>
 800aebe:	21d5      	movs	r1, #213	; 0xd5
 800aec0:	0002      	movs	r2, r0
 800aec2:	4b3c      	ldr	r3, [pc, #240]	; (800afb4 <_dtoa_r+0x380>)
 800aec4:	0049      	lsls	r1, r1, #1
 800aec6:	e6ca      	b.n	800ac5e <_dtoa_r+0x2a>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e7de      	b.n	800ae8a <_dtoa_r+0x256>
 800aecc:	2300      	movs	r3, #0
 800aece:	940f      	str	r4, [sp, #60]	; 0x3c
 800aed0:	9322      	str	r3, [sp, #136]	; 0x88
 800aed2:	3b01      	subs	r3, #1
 800aed4:	930c      	str	r3, [sp, #48]	; 0x30
 800aed6:	9306      	str	r3, [sp, #24]
 800aed8:	2200      	movs	r2, #0
 800aeda:	3313      	adds	r3, #19
 800aedc:	e7d0      	b.n	800ae80 <_dtoa_r+0x24c>
 800aede:	2301      	movs	r3, #1
 800aee0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aee2:	3b02      	subs	r3, #2
 800aee4:	e7f6      	b.n	800aed4 <_dtoa_r+0x2a0>
 800aee6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aee8:	930c      	str	r3, [sp, #48]	; 0x30
 800aeea:	9306      	str	r3, [sp, #24]
 800aeec:	e7d8      	b.n	800aea0 <_dtoa_r+0x26c>
 800aeee:	3101      	adds	r1, #1
 800aef0:	6041      	str	r1, [r0, #4]
 800aef2:	0052      	lsls	r2, r2, #1
 800aef4:	e7d8      	b.n	800aea8 <_dtoa_r+0x274>
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	9a05      	ldr	r2, [sp, #20]
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	2b0e      	cmp	r3, #14
 800af00:	d900      	bls.n	800af04 <_dtoa_r+0x2d0>
 800af02:	e0eb      	b.n	800b0dc <_dtoa_r+0x4a8>
 800af04:	2c00      	cmp	r4, #0
 800af06:	d100      	bne.n	800af0a <_dtoa_r+0x2d6>
 800af08:	e0e8      	b.n	800b0dc <_dtoa_r+0x4a8>
 800af0a:	9b02      	ldr	r3, [sp, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dd68      	ble.n	800afe2 <_dtoa_r+0x3ae>
 800af10:	001a      	movs	r2, r3
 800af12:	210f      	movs	r1, #15
 800af14:	4b23      	ldr	r3, [pc, #140]	; (800afa4 <_dtoa_r+0x370>)
 800af16:	400a      	ands	r2, r1
 800af18:	00d2      	lsls	r2, r2, #3
 800af1a:	189b      	adds	r3, r3, r2
 800af1c:	681d      	ldr	r5, [r3, #0]
 800af1e:	685e      	ldr	r6, [r3, #4]
 800af20:	9b02      	ldr	r3, [sp, #8]
 800af22:	111c      	asrs	r4, r3, #4
 800af24:	2302      	movs	r3, #2
 800af26:	9310      	str	r3, [sp, #64]	; 0x40
 800af28:	9b02      	ldr	r3, [sp, #8]
 800af2a:	05db      	lsls	r3, r3, #23
 800af2c:	d50b      	bpl.n	800af46 <_dtoa_r+0x312>
 800af2e:	4b22      	ldr	r3, [pc, #136]	; (800afb8 <_dtoa_r+0x384>)
 800af30:	400c      	ands	r4, r1
 800af32:	6a1a      	ldr	r2, [r3, #32]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af38:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800af3a:	f7f5 ff0b 	bl	8000d54 <__aeabi_ddiv>
 800af3e:	2303      	movs	r3, #3
 800af40:	900a      	str	r0, [sp, #40]	; 0x28
 800af42:	910b      	str	r1, [sp, #44]	; 0x2c
 800af44:	9310      	str	r3, [sp, #64]	; 0x40
 800af46:	4b1c      	ldr	r3, [pc, #112]	; (800afb8 <_dtoa_r+0x384>)
 800af48:	9307      	str	r3, [sp, #28]
 800af4a:	2c00      	cmp	r4, #0
 800af4c:	d136      	bne.n	800afbc <_dtoa_r+0x388>
 800af4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af52:	002a      	movs	r2, r5
 800af54:	0033      	movs	r3, r6
 800af56:	f7f5 fefd 	bl	8000d54 <__aeabi_ddiv>
 800af5a:	900a      	str	r0, [sp, #40]	; 0x28
 800af5c:	910b      	str	r1, [sp, #44]	; 0x2c
 800af5e:	e05c      	b.n	800b01a <_dtoa_r+0x3e6>
 800af60:	0800ce65 	.word	0x0800ce65
 800af64:	0800ce7c 	.word	0x0800ce7c
 800af68:	7ff00000 	.word	0x7ff00000
 800af6c:	0000270f 	.word	0x0000270f
 800af70:	0800ce61 	.word	0x0800ce61
 800af74:	0800ce64 	.word	0x0800ce64
 800af78:	0800ce34 	.word	0x0800ce34
 800af7c:	0800ce35 	.word	0x0800ce35
 800af80:	3ff00000 	.word	0x3ff00000
 800af84:	fffffc01 	.word	0xfffffc01
 800af88:	3ff80000 	.word	0x3ff80000
 800af8c:	636f4361 	.word	0x636f4361
 800af90:	3fd287a7 	.word	0x3fd287a7
 800af94:	8b60c8b3 	.word	0x8b60c8b3
 800af98:	3fc68a28 	.word	0x3fc68a28
 800af9c:	509f79fb 	.word	0x509f79fb
 800afa0:	3fd34413 	.word	0x3fd34413
 800afa4:	0800cfd8 	.word	0x0800cfd8
 800afa8:	00000432 	.word	0x00000432
 800afac:	00000412 	.word	0x00000412
 800afb0:	fe100000 	.word	0xfe100000
 800afb4:	0800cedb 	.word	0x0800cedb
 800afb8:	0800cfb0 	.word	0x0800cfb0
 800afbc:	2301      	movs	r3, #1
 800afbe:	421c      	tst	r4, r3
 800afc0:	d00b      	beq.n	800afda <_dtoa_r+0x3a6>
 800afc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afc4:	0028      	movs	r0, r5
 800afc6:	3301      	adds	r3, #1
 800afc8:	9310      	str	r3, [sp, #64]	; 0x40
 800afca:	9b07      	ldr	r3, [sp, #28]
 800afcc:	0031      	movs	r1, r6
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f7f6 fac5 	bl	8001560 <__aeabi_dmul>
 800afd6:	0005      	movs	r5, r0
 800afd8:	000e      	movs	r6, r1
 800afda:	9b07      	ldr	r3, [sp, #28]
 800afdc:	1064      	asrs	r4, r4, #1
 800afde:	3308      	adds	r3, #8
 800afe0:	e7b2      	b.n	800af48 <_dtoa_r+0x314>
 800afe2:	2302      	movs	r3, #2
 800afe4:	9310      	str	r3, [sp, #64]	; 0x40
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d016      	beq.n	800b01a <_dtoa_r+0x3e6>
 800afec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800afee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aff0:	425c      	negs	r4, r3
 800aff2:	230f      	movs	r3, #15
 800aff4:	4ab5      	ldr	r2, [pc, #724]	; (800b2cc <_dtoa_r+0x698>)
 800aff6:	4023      	ands	r3, r4
 800aff8:	00db      	lsls	r3, r3, #3
 800affa:	18d3      	adds	r3, r2, r3
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f7f6 faae 	bl	8001560 <__aeabi_dmul>
 800b004:	2601      	movs	r6, #1
 800b006:	2300      	movs	r3, #0
 800b008:	900a      	str	r0, [sp, #40]	; 0x28
 800b00a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b00c:	4db0      	ldr	r5, [pc, #704]	; (800b2d0 <_dtoa_r+0x69c>)
 800b00e:	1124      	asrs	r4, r4, #4
 800b010:	2c00      	cmp	r4, #0
 800b012:	d000      	beq.n	800b016 <_dtoa_r+0x3e2>
 800b014:	e094      	b.n	800b140 <_dtoa_r+0x50c>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d19f      	bne.n	800af5a <_dtoa_r+0x326>
 800b01a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d100      	bne.n	800b022 <_dtoa_r+0x3ee>
 800b020:	e09b      	b.n	800b15a <_dtoa_r+0x526>
 800b022:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b024:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b026:	2200      	movs	r2, #0
 800b028:	0020      	movs	r0, r4
 800b02a:	0029      	movs	r1, r5
 800b02c:	4ba9      	ldr	r3, [pc, #676]	; (800b2d4 <_dtoa_r+0x6a0>)
 800b02e:	f7f5 fa13 	bl	8000458 <__aeabi_dcmplt>
 800b032:	2800      	cmp	r0, #0
 800b034:	d100      	bne.n	800b038 <_dtoa_r+0x404>
 800b036:	e090      	b.n	800b15a <_dtoa_r+0x526>
 800b038:	9b06      	ldr	r3, [sp, #24]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d100      	bne.n	800b040 <_dtoa_r+0x40c>
 800b03e:	e08c      	b.n	800b15a <_dtoa_r+0x526>
 800b040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b042:	2b00      	cmp	r3, #0
 800b044:	dd46      	ble.n	800b0d4 <_dtoa_r+0x4a0>
 800b046:	9b02      	ldr	r3, [sp, #8]
 800b048:	2200      	movs	r2, #0
 800b04a:	0020      	movs	r0, r4
 800b04c:	0029      	movs	r1, r5
 800b04e:	1e5e      	subs	r6, r3, #1
 800b050:	4ba1      	ldr	r3, [pc, #644]	; (800b2d8 <_dtoa_r+0x6a4>)
 800b052:	f7f6 fa85 	bl	8001560 <__aeabi_dmul>
 800b056:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b058:	900a      	str	r0, [sp, #40]	; 0x28
 800b05a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b05c:	3301      	adds	r3, #1
 800b05e:	9310      	str	r3, [sp, #64]	; 0x40
 800b060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b062:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b066:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b068:	9307      	str	r3, [sp, #28]
 800b06a:	f7f7 f8cb 	bl	8002204 <__aeabi_i2d>
 800b06e:	0022      	movs	r2, r4
 800b070:	002b      	movs	r3, r5
 800b072:	f7f6 fa75 	bl	8001560 <__aeabi_dmul>
 800b076:	2200      	movs	r2, #0
 800b078:	4b98      	ldr	r3, [pc, #608]	; (800b2dc <_dtoa_r+0x6a8>)
 800b07a:	f7f5 fb01 	bl	8000680 <__aeabi_dadd>
 800b07e:	9010      	str	r0, [sp, #64]	; 0x40
 800b080:	9111      	str	r1, [sp, #68]	; 0x44
 800b082:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b086:	920a      	str	r2, [sp, #40]	; 0x28
 800b088:	930b      	str	r3, [sp, #44]	; 0x2c
 800b08a:	4a95      	ldr	r2, [pc, #596]	; (800b2e0 <_dtoa_r+0x6ac>)
 800b08c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b08e:	4694      	mov	ip, r2
 800b090:	4463      	add	r3, ip
 800b092:	9317      	str	r3, [sp, #92]	; 0x5c
 800b094:	930b      	str	r3, [sp, #44]	; 0x2c
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d161      	bne.n	800b160 <_dtoa_r+0x52c>
 800b09c:	2200      	movs	r2, #0
 800b09e:	0020      	movs	r0, r4
 800b0a0:	0029      	movs	r1, r5
 800b0a2:	4b90      	ldr	r3, [pc, #576]	; (800b2e4 <_dtoa_r+0x6b0>)
 800b0a4:	f7f6 fcc8 	bl	8001a38 <__aeabi_dsub>
 800b0a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0ac:	0004      	movs	r4, r0
 800b0ae:	000d      	movs	r5, r1
 800b0b0:	f7f5 f9e6 	bl	8000480 <__aeabi_dcmpgt>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d000      	beq.n	800b0ba <_dtoa_r+0x486>
 800b0b8:	e2b5      	b.n	800b626 <_dtoa_r+0x9f2>
 800b0ba:	488b      	ldr	r0, [pc, #556]	; (800b2e8 <_dtoa_r+0x6b4>)
 800b0bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b0be:	4684      	mov	ip, r0
 800b0c0:	4461      	add	r1, ip
 800b0c2:	000b      	movs	r3, r1
 800b0c4:	0020      	movs	r0, r4
 800b0c6:	0029      	movs	r1, r5
 800b0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ca:	f7f5 f9c5 	bl	8000458 <__aeabi_dcmplt>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d000      	beq.n	800b0d4 <_dtoa_r+0x4a0>
 800b0d2:	e2a5      	b.n	800b620 <_dtoa_r+0x9ec>
 800b0d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b0d8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0da:	940b      	str	r4, [sp, #44]	; 0x2c
 800b0dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	da00      	bge.n	800b0e4 <_dtoa_r+0x4b0>
 800b0e2:	e171      	b.n	800b3c8 <_dtoa_r+0x794>
 800b0e4:	9a02      	ldr	r2, [sp, #8]
 800b0e6:	2a0e      	cmp	r2, #14
 800b0e8:	dd00      	ble.n	800b0ec <_dtoa_r+0x4b8>
 800b0ea:	e16d      	b.n	800b3c8 <_dtoa_r+0x794>
 800b0ec:	4b77      	ldr	r3, [pc, #476]	; (800b2cc <_dtoa_r+0x698>)
 800b0ee:	00d2      	lsls	r2, r2, #3
 800b0f0:	189b      	adds	r3, r3, r2
 800b0f2:	685c      	ldr	r4, [r3, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	9308      	str	r3, [sp, #32]
 800b0f8:	9409      	str	r4, [sp, #36]	; 0x24
 800b0fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	db00      	blt.n	800b102 <_dtoa_r+0x4ce>
 800b100:	e0f6      	b.n	800b2f0 <_dtoa_r+0x6bc>
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd00      	ble.n	800b10a <_dtoa_r+0x4d6>
 800b108:	e0f2      	b.n	800b2f0 <_dtoa_r+0x6bc>
 800b10a:	d000      	beq.n	800b10e <_dtoa_r+0x4da>
 800b10c:	e288      	b.n	800b620 <_dtoa_r+0x9ec>
 800b10e:	9808      	ldr	r0, [sp, #32]
 800b110:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b112:	2200      	movs	r2, #0
 800b114:	4b73      	ldr	r3, [pc, #460]	; (800b2e4 <_dtoa_r+0x6b0>)
 800b116:	f7f6 fa23 	bl	8001560 <__aeabi_dmul>
 800b11a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b11c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b11e:	f7f5 f9b9 	bl	8000494 <__aeabi_dcmpge>
 800b122:	9e06      	ldr	r6, [sp, #24]
 800b124:	0035      	movs	r5, r6
 800b126:	2800      	cmp	r0, #0
 800b128:	d000      	beq.n	800b12c <_dtoa_r+0x4f8>
 800b12a:	e25f      	b.n	800b5ec <_dtoa_r+0x9b8>
 800b12c:	9b05      	ldr	r3, [sp, #20]
 800b12e:	9a05      	ldr	r2, [sp, #20]
 800b130:	3301      	adds	r3, #1
 800b132:	9307      	str	r3, [sp, #28]
 800b134:	2331      	movs	r3, #49	; 0x31
 800b136:	7013      	strb	r3, [r2, #0]
 800b138:	9b02      	ldr	r3, [sp, #8]
 800b13a:	3301      	adds	r3, #1
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	e25a      	b.n	800b5f6 <_dtoa_r+0x9c2>
 800b140:	4234      	tst	r4, r6
 800b142:	d007      	beq.n	800b154 <_dtoa_r+0x520>
 800b144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b146:	3301      	adds	r3, #1
 800b148:	9310      	str	r3, [sp, #64]	; 0x40
 800b14a:	682a      	ldr	r2, [r5, #0]
 800b14c:	686b      	ldr	r3, [r5, #4]
 800b14e:	f7f6 fa07 	bl	8001560 <__aeabi_dmul>
 800b152:	0033      	movs	r3, r6
 800b154:	1064      	asrs	r4, r4, #1
 800b156:	3508      	adds	r5, #8
 800b158:	e75a      	b.n	800b010 <_dtoa_r+0x3dc>
 800b15a:	9e02      	ldr	r6, [sp, #8]
 800b15c:	9b06      	ldr	r3, [sp, #24]
 800b15e:	e780      	b.n	800b062 <_dtoa_r+0x42e>
 800b160:	9b07      	ldr	r3, [sp, #28]
 800b162:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b164:	1e5a      	subs	r2, r3, #1
 800b166:	4b59      	ldr	r3, [pc, #356]	; (800b2cc <_dtoa_r+0x698>)
 800b168:	00d2      	lsls	r2, r2, #3
 800b16a:	189b      	adds	r3, r3, r2
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	2900      	cmp	r1, #0
 800b172:	d051      	beq.n	800b218 <_dtoa_r+0x5e4>
 800b174:	2000      	movs	r0, #0
 800b176:	495d      	ldr	r1, [pc, #372]	; (800b2ec <_dtoa_r+0x6b8>)
 800b178:	f7f5 fdec 	bl	8000d54 <__aeabi_ddiv>
 800b17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b17e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b180:	f7f6 fc5a 	bl	8001a38 <__aeabi_dsub>
 800b184:	9a05      	ldr	r2, [sp, #20]
 800b186:	9b05      	ldr	r3, [sp, #20]
 800b188:	4694      	mov	ip, r2
 800b18a:	9310      	str	r3, [sp, #64]	; 0x40
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	900a      	str	r0, [sp, #40]	; 0x28
 800b190:	910b      	str	r1, [sp, #44]	; 0x2c
 800b192:	4463      	add	r3, ip
 800b194:	9319      	str	r3, [sp, #100]	; 0x64
 800b196:	0029      	movs	r1, r5
 800b198:	0020      	movs	r0, r4
 800b19a:	f7f6 fffd 	bl	8002198 <__aeabi_d2iz>
 800b19e:	9017      	str	r0, [sp, #92]	; 0x5c
 800b1a0:	f7f7 f830 	bl	8002204 <__aeabi_i2d>
 800b1a4:	0002      	movs	r2, r0
 800b1a6:	000b      	movs	r3, r1
 800b1a8:	0020      	movs	r0, r4
 800b1aa:	0029      	movs	r1, r5
 800b1ac:	f7f6 fc44 	bl	8001a38 <__aeabi_dsub>
 800b1b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	9307      	str	r3, [sp, #28]
 800b1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ba:	0004      	movs	r4, r0
 800b1bc:	3330      	adds	r3, #48	; 0x30
 800b1be:	7013      	strb	r3, [r2, #0]
 800b1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1c4:	000d      	movs	r5, r1
 800b1c6:	f7f5 f947 	bl	8000458 <__aeabi_dcmplt>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d175      	bne.n	800b2ba <_dtoa_r+0x686>
 800b1ce:	0022      	movs	r2, r4
 800b1d0:	002b      	movs	r3, r5
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	493f      	ldr	r1, [pc, #252]	; (800b2d4 <_dtoa_r+0x6a0>)
 800b1d6:	f7f6 fc2f 	bl	8001a38 <__aeabi_dsub>
 800b1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1de:	f7f5 f93b 	bl	8000458 <__aeabi_dcmplt>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d000      	beq.n	800b1e8 <_dtoa_r+0x5b4>
 800b1e6:	e0d1      	b.n	800b38c <_dtoa_r+0x758>
 800b1e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1ea:	9a07      	ldr	r2, [sp, #28]
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d100      	bne.n	800b1f2 <_dtoa_r+0x5be>
 800b1f0:	e770      	b.n	800b0d4 <_dtoa_r+0x4a0>
 800b1f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	4b37      	ldr	r3, [pc, #220]	; (800b2d8 <_dtoa_r+0x6a4>)
 800b1fa:	f7f6 f9b1 	bl	8001560 <__aeabi_dmul>
 800b1fe:	4b36      	ldr	r3, [pc, #216]	; (800b2d8 <_dtoa_r+0x6a4>)
 800b200:	900a      	str	r0, [sp, #40]	; 0x28
 800b202:	910b      	str	r1, [sp, #44]	; 0x2c
 800b204:	2200      	movs	r2, #0
 800b206:	0020      	movs	r0, r4
 800b208:	0029      	movs	r1, r5
 800b20a:	f7f6 f9a9 	bl	8001560 <__aeabi_dmul>
 800b20e:	9b07      	ldr	r3, [sp, #28]
 800b210:	0004      	movs	r4, r0
 800b212:	000d      	movs	r5, r1
 800b214:	9310      	str	r3, [sp, #64]	; 0x40
 800b216:	e7be      	b.n	800b196 <_dtoa_r+0x562>
 800b218:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b21a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b21c:	f7f6 f9a0 	bl	8001560 <__aeabi_dmul>
 800b220:	9a05      	ldr	r2, [sp, #20]
 800b222:	9b05      	ldr	r3, [sp, #20]
 800b224:	4694      	mov	ip, r2
 800b226:	930a      	str	r3, [sp, #40]	; 0x28
 800b228:	9b07      	ldr	r3, [sp, #28]
 800b22a:	9010      	str	r0, [sp, #64]	; 0x40
 800b22c:	9111      	str	r1, [sp, #68]	; 0x44
 800b22e:	4463      	add	r3, ip
 800b230:	9319      	str	r3, [sp, #100]	; 0x64
 800b232:	0029      	movs	r1, r5
 800b234:	0020      	movs	r0, r4
 800b236:	f7f6 ffaf 	bl	8002198 <__aeabi_d2iz>
 800b23a:	9017      	str	r0, [sp, #92]	; 0x5c
 800b23c:	f7f6 ffe2 	bl	8002204 <__aeabi_i2d>
 800b240:	0002      	movs	r2, r0
 800b242:	000b      	movs	r3, r1
 800b244:	0020      	movs	r0, r4
 800b246:	0029      	movs	r1, r5
 800b248:	f7f6 fbf6 	bl	8001a38 <__aeabi_dsub>
 800b24c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b24e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b250:	3330      	adds	r3, #48	; 0x30
 800b252:	7013      	strb	r3, [r2, #0]
 800b254:	0013      	movs	r3, r2
 800b256:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b258:	3301      	adds	r3, #1
 800b25a:	0004      	movs	r4, r0
 800b25c:	000d      	movs	r5, r1
 800b25e:	930a      	str	r3, [sp, #40]	; 0x28
 800b260:	4293      	cmp	r3, r2
 800b262:	d12c      	bne.n	800b2be <_dtoa_r+0x68a>
 800b264:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b266:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b268:	9a05      	ldr	r2, [sp, #20]
 800b26a:	9b07      	ldr	r3, [sp, #28]
 800b26c:	4694      	mov	ip, r2
 800b26e:	4463      	add	r3, ip
 800b270:	2200      	movs	r2, #0
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	4b1d      	ldr	r3, [pc, #116]	; (800b2ec <_dtoa_r+0x6b8>)
 800b276:	f7f5 fa03 	bl	8000680 <__aeabi_dadd>
 800b27a:	0002      	movs	r2, r0
 800b27c:	000b      	movs	r3, r1
 800b27e:	0020      	movs	r0, r4
 800b280:	0029      	movs	r1, r5
 800b282:	f7f5 f8fd 	bl	8000480 <__aeabi_dcmpgt>
 800b286:	2800      	cmp	r0, #0
 800b288:	d000      	beq.n	800b28c <_dtoa_r+0x658>
 800b28a:	e07f      	b.n	800b38c <_dtoa_r+0x758>
 800b28c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b28e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b290:	2000      	movs	r0, #0
 800b292:	4916      	ldr	r1, [pc, #88]	; (800b2ec <_dtoa_r+0x6b8>)
 800b294:	f7f6 fbd0 	bl	8001a38 <__aeabi_dsub>
 800b298:	0002      	movs	r2, r0
 800b29a:	000b      	movs	r3, r1
 800b29c:	0020      	movs	r0, r4
 800b29e:	0029      	movs	r1, r5
 800b2a0:	f7f5 f8da 	bl	8000458 <__aeabi_dcmplt>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d100      	bne.n	800b2aa <_dtoa_r+0x676>
 800b2a8:	e714      	b.n	800b0d4 <_dtoa_r+0x4a0>
 800b2aa:	9b07      	ldr	r3, [sp, #28]
 800b2ac:	001a      	movs	r2, r3
 800b2ae:	3a01      	subs	r2, #1
 800b2b0:	9207      	str	r2, [sp, #28]
 800b2b2:	7812      	ldrb	r2, [r2, #0]
 800b2b4:	2a30      	cmp	r2, #48	; 0x30
 800b2b6:	d0f8      	beq.n	800b2aa <_dtoa_r+0x676>
 800b2b8:	9307      	str	r3, [sp, #28]
 800b2ba:	9602      	str	r6, [sp, #8]
 800b2bc:	e054      	b.n	800b368 <_dtoa_r+0x734>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <_dtoa_r+0x6a4>)
 800b2c2:	f7f6 f94d 	bl	8001560 <__aeabi_dmul>
 800b2c6:	0004      	movs	r4, r0
 800b2c8:	000d      	movs	r5, r1
 800b2ca:	e7b2      	b.n	800b232 <_dtoa_r+0x5fe>
 800b2cc:	0800cfd8 	.word	0x0800cfd8
 800b2d0:	0800cfb0 	.word	0x0800cfb0
 800b2d4:	3ff00000 	.word	0x3ff00000
 800b2d8:	40240000 	.word	0x40240000
 800b2dc:	401c0000 	.word	0x401c0000
 800b2e0:	fcc00000 	.word	0xfcc00000
 800b2e4:	40140000 	.word	0x40140000
 800b2e8:	7cc00000 	.word	0x7cc00000
 800b2ec:	3fe00000 	.word	0x3fe00000
 800b2f0:	9b06      	ldr	r3, [sp, #24]
 800b2f2:	9e05      	ldr	r6, [sp, #20]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	199b      	adds	r3, r3, r6
 800b2f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b2fc:	930a      	str	r3, [sp, #40]	; 0x28
 800b2fe:	9a08      	ldr	r2, [sp, #32]
 800b300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b302:	0020      	movs	r0, r4
 800b304:	0029      	movs	r1, r5
 800b306:	f7f5 fd25 	bl	8000d54 <__aeabi_ddiv>
 800b30a:	f7f6 ff45 	bl	8002198 <__aeabi_d2iz>
 800b30e:	9006      	str	r0, [sp, #24]
 800b310:	f7f6 ff78 	bl	8002204 <__aeabi_i2d>
 800b314:	9a08      	ldr	r2, [sp, #32]
 800b316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b318:	f7f6 f922 	bl	8001560 <__aeabi_dmul>
 800b31c:	0002      	movs	r2, r0
 800b31e:	000b      	movs	r3, r1
 800b320:	0020      	movs	r0, r4
 800b322:	0029      	movs	r1, r5
 800b324:	f7f6 fb88 	bl	8001a38 <__aeabi_dsub>
 800b328:	0033      	movs	r3, r6
 800b32a:	9a06      	ldr	r2, [sp, #24]
 800b32c:	3601      	adds	r6, #1
 800b32e:	3230      	adds	r2, #48	; 0x30
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b334:	9607      	str	r6, [sp, #28]
 800b336:	429a      	cmp	r2, r3
 800b338:	d139      	bne.n	800b3ae <_dtoa_r+0x77a>
 800b33a:	0002      	movs	r2, r0
 800b33c:	000b      	movs	r3, r1
 800b33e:	f7f5 f99f 	bl	8000680 <__aeabi_dadd>
 800b342:	9a08      	ldr	r2, [sp, #32]
 800b344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b346:	0004      	movs	r4, r0
 800b348:	000d      	movs	r5, r1
 800b34a:	f7f5 f899 	bl	8000480 <__aeabi_dcmpgt>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d11b      	bne.n	800b38a <_dtoa_r+0x756>
 800b352:	9a08      	ldr	r2, [sp, #32]
 800b354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b356:	0020      	movs	r0, r4
 800b358:	0029      	movs	r1, r5
 800b35a:	f7f5 f877 	bl	800044c <__aeabi_dcmpeq>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d002      	beq.n	800b368 <_dtoa_r+0x734>
 800b362:	9b06      	ldr	r3, [sp, #24]
 800b364:	07db      	lsls	r3, r3, #31
 800b366:	d410      	bmi.n	800b38a <_dtoa_r+0x756>
 800b368:	0038      	movs	r0, r7
 800b36a:	9904      	ldr	r1, [sp, #16]
 800b36c:	f000 fd1c 	bl	800bda8 <_Bfree>
 800b370:	2300      	movs	r3, #0
 800b372:	9a07      	ldr	r2, [sp, #28]
 800b374:	9802      	ldr	r0, [sp, #8]
 800b376:	7013      	strb	r3, [r2, #0]
 800b378:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b37a:	3001      	adds	r0, #1
 800b37c:	6018      	str	r0, [r3, #0]
 800b37e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b380:	2b00      	cmp	r3, #0
 800b382:	d100      	bne.n	800b386 <_dtoa_r+0x752>
 800b384:	e4a3      	b.n	800acce <_dtoa_r+0x9a>
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	e4a1      	b.n	800acce <_dtoa_r+0x9a>
 800b38a:	9e02      	ldr	r6, [sp, #8]
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	9307      	str	r3, [sp, #28]
 800b390:	3b01      	subs	r3, #1
 800b392:	781a      	ldrb	r2, [r3, #0]
 800b394:	2a39      	cmp	r2, #57	; 0x39
 800b396:	d106      	bne.n	800b3a6 <_dtoa_r+0x772>
 800b398:	9a05      	ldr	r2, [sp, #20]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d1f7      	bne.n	800b38e <_dtoa_r+0x75a>
 800b39e:	2230      	movs	r2, #48	; 0x30
 800b3a0:	9905      	ldr	r1, [sp, #20]
 800b3a2:	3601      	adds	r6, #1
 800b3a4:	700a      	strb	r2, [r1, #0]
 800b3a6:	781a      	ldrb	r2, [r3, #0]
 800b3a8:	3201      	adds	r2, #1
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e785      	b.n	800b2ba <_dtoa_r+0x686>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	4bad      	ldr	r3, [pc, #692]	; (800b668 <_dtoa_r+0xa34>)
 800b3b2:	f7f6 f8d5 	bl	8001560 <__aeabi_dmul>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	0004      	movs	r4, r0
 800b3bc:	000d      	movs	r5, r1
 800b3be:	f7f5 f845 	bl	800044c <__aeabi_dcmpeq>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d09b      	beq.n	800b2fe <_dtoa_r+0x6ca>
 800b3c6:	e7cf      	b.n	800b368 <_dtoa_r+0x734>
 800b3c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3ca:	2a00      	cmp	r2, #0
 800b3cc:	d100      	bne.n	800b3d0 <_dtoa_r+0x79c>
 800b3ce:	e082      	b.n	800b4d6 <_dtoa_r+0x8a2>
 800b3d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b3d2:	2a01      	cmp	r2, #1
 800b3d4:	dc66      	bgt.n	800b4a4 <_dtoa_r+0x870>
 800b3d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3d8:	2a00      	cmp	r2, #0
 800b3da:	d05f      	beq.n	800b49c <_dtoa_r+0x868>
 800b3dc:	4aa3      	ldr	r2, [pc, #652]	; (800b66c <_dtoa_r+0xa38>)
 800b3de:	189b      	adds	r3, r3, r2
 800b3e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b3e2:	9c08      	ldr	r4, [sp, #32]
 800b3e4:	9a08      	ldr	r2, [sp, #32]
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	18d2      	adds	r2, r2, r3
 800b3ea:	9208      	str	r2, [sp, #32]
 800b3ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3ee:	0038      	movs	r0, r7
 800b3f0:	18d3      	adds	r3, r2, r3
 800b3f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b3f4:	f000 fd88 	bl	800bf08 <__i2b>
 800b3f8:	0005      	movs	r5, r0
 800b3fa:	2c00      	cmp	r4, #0
 800b3fc:	dd0e      	ble.n	800b41c <_dtoa_r+0x7e8>
 800b3fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b400:	2b00      	cmp	r3, #0
 800b402:	dd0b      	ble.n	800b41c <_dtoa_r+0x7e8>
 800b404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b406:	0023      	movs	r3, r4
 800b408:	4294      	cmp	r4, r2
 800b40a:	dd00      	ble.n	800b40e <_dtoa_r+0x7da>
 800b40c:	0013      	movs	r3, r2
 800b40e:	9a08      	ldr	r2, [sp, #32]
 800b410:	1ae4      	subs	r4, r4, r3
 800b412:	1ad2      	subs	r2, r2, r3
 800b414:	9208      	str	r2, [sp, #32]
 800b416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	930d      	str	r3, [sp, #52]	; 0x34
 800b41c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d01f      	beq.n	800b462 <_dtoa_r+0x82e>
 800b422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d05a      	beq.n	800b4de <_dtoa_r+0x8aa>
 800b428:	2e00      	cmp	r6, #0
 800b42a:	dd11      	ble.n	800b450 <_dtoa_r+0x81c>
 800b42c:	0029      	movs	r1, r5
 800b42e:	0032      	movs	r2, r6
 800b430:	0038      	movs	r0, r7
 800b432:	f000 fe2f 	bl	800c094 <__pow5mult>
 800b436:	9a04      	ldr	r2, [sp, #16]
 800b438:	0001      	movs	r1, r0
 800b43a:	0005      	movs	r5, r0
 800b43c:	0038      	movs	r0, r7
 800b43e:	f000 fd79 	bl	800bf34 <__multiply>
 800b442:	9904      	ldr	r1, [sp, #16]
 800b444:	9007      	str	r0, [sp, #28]
 800b446:	0038      	movs	r0, r7
 800b448:	f000 fcae 	bl	800bda8 <_Bfree>
 800b44c:	9b07      	ldr	r3, [sp, #28]
 800b44e:	9304      	str	r3, [sp, #16]
 800b450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b452:	1b9a      	subs	r2, r3, r6
 800b454:	42b3      	cmp	r3, r6
 800b456:	d004      	beq.n	800b462 <_dtoa_r+0x82e>
 800b458:	0038      	movs	r0, r7
 800b45a:	9904      	ldr	r1, [sp, #16]
 800b45c:	f000 fe1a 	bl	800c094 <__pow5mult>
 800b460:	9004      	str	r0, [sp, #16]
 800b462:	2101      	movs	r1, #1
 800b464:	0038      	movs	r0, r7
 800b466:	f000 fd4f 	bl	800bf08 <__i2b>
 800b46a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b46c:	0006      	movs	r6, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	dd37      	ble.n	800b4e2 <_dtoa_r+0x8ae>
 800b472:	001a      	movs	r2, r3
 800b474:	0001      	movs	r1, r0
 800b476:	0038      	movs	r0, r7
 800b478:	f000 fe0c 	bl	800c094 <__pow5mult>
 800b47c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b47e:	0006      	movs	r6, r0
 800b480:	2b01      	cmp	r3, #1
 800b482:	dd33      	ble.n	800b4ec <_dtoa_r+0x8b8>
 800b484:	2300      	movs	r3, #0
 800b486:	9307      	str	r3, [sp, #28]
 800b488:	6933      	ldr	r3, [r6, #16]
 800b48a:	3303      	adds	r3, #3
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	18f3      	adds	r3, r6, r3
 800b490:	6858      	ldr	r0, [r3, #4]
 800b492:	f000 fcf1 	bl	800be78 <__hi0bits>
 800b496:	2320      	movs	r3, #32
 800b498:	1a18      	subs	r0, r3, r0
 800b49a:	e03f      	b.n	800b51c <_dtoa_r+0x8e8>
 800b49c:	2336      	movs	r3, #54	; 0x36
 800b49e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b4a0:	1a9b      	subs	r3, r3, r2
 800b4a2:	e79d      	b.n	800b3e0 <_dtoa_r+0x7ac>
 800b4a4:	9b06      	ldr	r3, [sp, #24]
 800b4a6:	1e5e      	subs	r6, r3, #1
 800b4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4aa:	42b3      	cmp	r3, r6
 800b4ac:	db08      	blt.n	800b4c0 <_dtoa_r+0x88c>
 800b4ae:	1b9e      	subs	r6, r3, r6
 800b4b0:	9b06      	ldr	r3, [sp, #24]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	da0c      	bge.n	800b4d0 <_dtoa_r+0x89c>
 800b4b6:	9b08      	ldr	r3, [sp, #32]
 800b4b8:	9a06      	ldr	r2, [sp, #24]
 800b4ba:	1a9c      	subs	r4, r3, r2
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e791      	b.n	800b3e4 <_dtoa_r+0x7b0>
 800b4c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4c4:	1af3      	subs	r3, r6, r3
 800b4c6:	18d3      	adds	r3, r2, r3
 800b4c8:	960e      	str	r6, [sp, #56]	; 0x38
 800b4ca:	9314      	str	r3, [sp, #80]	; 0x50
 800b4cc:	2600      	movs	r6, #0
 800b4ce:	e7ef      	b.n	800b4b0 <_dtoa_r+0x87c>
 800b4d0:	9c08      	ldr	r4, [sp, #32]
 800b4d2:	9b06      	ldr	r3, [sp, #24]
 800b4d4:	e786      	b.n	800b3e4 <_dtoa_r+0x7b0>
 800b4d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b4d8:	9c08      	ldr	r4, [sp, #32]
 800b4da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4dc:	e78d      	b.n	800b3fa <_dtoa_r+0x7c6>
 800b4de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4e0:	e7ba      	b.n	800b458 <_dtoa_r+0x824>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	9307      	str	r3, [sp, #28]
 800b4e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	dc13      	bgt.n	800b514 <_dtoa_r+0x8e0>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10e      	bne.n	800b514 <_dtoa_r+0x8e0>
 800b4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4f8:	031b      	lsls	r3, r3, #12
 800b4fa:	d10b      	bne.n	800b514 <_dtoa_r+0x8e0>
 800b4fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b4fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b500:	4213      	tst	r3, r2
 800b502:	d007      	beq.n	800b514 <_dtoa_r+0x8e0>
 800b504:	9b08      	ldr	r3, [sp, #32]
 800b506:	3301      	adds	r3, #1
 800b508:	9308      	str	r3, [sp, #32]
 800b50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b50c:	3301      	adds	r3, #1
 800b50e:	930d      	str	r3, [sp, #52]	; 0x34
 800b510:	2301      	movs	r3, #1
 800b512:	9307      	str	r3, [sp, #28]
 800b514:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b516:	2001      	movs	r0, #1
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1b5      	bne.n	800b488 <_dtoa_r+0x854>
 800b51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51e:	221f      	movs	r2, #31
 800b520:	1818      	adds	r0, r3, r0
 800b522:	0003      	movs	r3, r0
 800b524:	4013      	ands	r3, r2
 800b526:	4210      	tst	r0, r2
 800b528:	d046      	beq.n	800b5b8 <_dtoa_r+0x984>
 800b52a:	3201      	adds	r2, #1
 800b52c:	1ad2      	subs	r2, r2, r3
 800b52e:	2a04      	cmp	r2, #4
 800b530:	dd3f      	ble.n	800b5b2 <_dtoa_r+0x97e>
 800b532:	221c      	movs	r2, #28
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	9a08      	ldr	r2, [sp, #32]
 800b538:	18e4      	adds	r4, r4, r3
 800b53a:	18d2      	adds	r2, r2, r3
 800b53c:	9208      	str	r2, [sp, #32]
 800b53e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b540:	18d3      	adds	r3, r2, r3
 800b542:	930d      	str	r3, [sp, #52]	; 0x34
 800b544:	9b08      	ldr	r3, [sp, #32]
 800b546:	2b00      	cmp	r3, #0
 800b548:	dd05      	ble.n	800b556 <_dtoa_r+0x922>
 800b54a:	001a      	movs	r2, r3
 800b54c:	0038      	movs	r0, r7
 800b54e:	9904      	ldr	r1, [sp, #16]
 800b550:	f000 fdfc 	bl	800c14c <__lshift>
 800b554:	9004      	str	r0, [sp, #16]
 800b556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b558:	2b00      	cmp	r3, #0
 800b55a:	dd05      	ble.n	800b568 <_dtoa_r+0x934>
 800b55c:	0031      	movs	r1, r6
 800b55e:	001a      	movs	r2, r3
 800b560:	0038      	movs	r0, r7
 800b562:	f000 fdf3 	bl	800c14c <__lshift>
 800b566:	0006      	movs	r6, r0
 800b568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d026      	beq.n	800b5bc <_dtoa_r+0x988>
 800b56e:	0031      	movs	r1, r6
 800b570:	9804      	ldr	r0, [sp, #16]
 800b572:	f000 fe5b 	bl	800c22c <__mcmp>
 800b576:	2800      	cmp	r0, #0
 800b578:	da20      	bge.n	800b5bc <_dtoa_r+0x988>
 800b57a:	9b02      	ldr	r3, [sp, #8]
 800b57c:	220a      	movs	r2, #10
 800b57e:	3b01      	subs	r3, #1
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	0038      	movs	r0, r7
 800b584:	2300      	movs	r3, #0
 800b586:	9904      	ldr	r1, [sp, #16]
 800b588:	f000 fc32 	bl	800bdf0 <__multadd>
 800b58c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b58e:	9004      	str	r0, [sp, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d100      	bne.n	800b596 <_dtoa_r+0x962>
 800b594:	e160      	b.n	800b858 <_dtoa_r+0xc24>
 800b596:	2300      	movs	r3, #0
 800b598:	0029      	movs	r1, r5
 800b59a:	220a      	movs	r2, #10
 800b59c:	0038      	movs	r0, r7
 800b59e:	f000 fc27 	bl	800bdf0 <__multadd>
 800b5a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a4:	0005      	movs	r5, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	dc47      	bgt.n	800b63a <_dtoa_r+0xa06>
 800b5aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	dc0d      	bgt.n	800b5cc <_dtoa_r+0x998>
 800b5b0:	e043      	b.n	800b63a <_dtoa_r+0xa06>
 800b5b2:	2a04      	cmp	r2, #4
 800b5b4:	d0c6      	beq.n	800b544 <_dtoa_r+0x910>
 800b5b6:	0013      	movs	r3, r2
 800b5b8:	331c      	adds	r3, #28
 800b5ba:	e7bc      	b.n	800b536 <_dtoa_r+0x902>
 800b5bc:	9b06      	ldr	r3, [sp, #24]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dc35      	bgt.n	800b62e <_dtoa_r+0x9fa>
 800b5c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	dd32      	ble.n	800b62e <_dtoa_r+0x9fa>
 800b5c8:	9b06      	ldr	r3, [sp, #24]
 800b5ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b5cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10c      	bne.n	800b5ec <_dtoa_r+0x9b8>
 800b5d2:	0031      	movs	r1, r6
 800b5d4:	2205      	movs	r2, #5
 800b5d6:	0038      	movs	r0, r7
 800b5d8:	f000 fc0a 	bl	800bdf0 <__multadd>
 800b5dc:	0006      	movs	r6, r0
 800b5de:	0001      	movs	r1, r0
 800b5e0:	9804      	ldr	r0, [sp, #16]
 800b5e2:	f000 fe23 	bl	800c22c <__mcmp>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	dd00      	ble.n	800b5ec <_dtoa_r+0x9b8>
 800b5ea:	e59f      	b.n	800b12c <_dtoa_r+0x4f8>
 800b5ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5ee:	43db      	mvns	r3, r3
 800b5f0:	9302      	str	r3, [sp, #8]
 800b5f2:	9b05      	ldr	r3, [sp, #20]
 800b5f4:	9307      	str	r3, [sp, #28]
 800b5f6:	2400      	movs	r4, #0
 800b5f8:	0031      	movs	r1, r6
 800b5fa:	0038      	movs	r0, r7
 800b5fc:	f000 fbd4 	bl	800bda8 <_Bfree>
 800b600:	2d00      	cmp	r5, #0
 800b602:	d100      	bne.n	800b606 <_dtoa_r+0x9d2>
 800b604:	e6b0      	b.n	800b368 <_dtoa_r+0x734>
 800b606:	2c00      	cmp	r4, #0
 800b608:	d005      	beq.n	800b616 <_dtoa_r+0x9e2>
 800b60a:	42ac      	cmp	r4, r5
 800b60c:	d003      	beq.n	800b616 <_dtoa_r+0x9e2>
 800b60e:	0021      	movs	r1, r4
 800b610:	0038      	movs	r0, r7
 800b612:	f000 fbc9 	bl	800bda8 <_Bfree>
 800b616:	0029      	movs	r1, r5
 800b618:	0038      	movs	r0, r7
 800b61a:	f000 fbc5 	bl	800bda8 <_Bfree>
 800b61e:	e6a3      	b.n	800b368 <_dtoa_r+0x734>
 800b620:	2600      	movs	r6, #0
 800b622:	0035      	movs	r5, r6
 800b624:	e7e2      	b.n	800b5ec <_dtoa_r+0x9b8>
 800b626:	9602      	str	r6, [sp, #8]
 800b628:	9e07      	ldr	r6, [sp, #28]
 800b62a:	0035      	movs	r5, r6
 800b62c:	e57e      	b.n	800b12c <_dtoa_r+0x4f8>
 800b62e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b630:	2b00      	cmp	r3, #0
 800b632:	d100      	bne.n	800b636 <_dtoa_r+0xa02>
 800b634:	e0c8      	b.n	800b7c8 <_dtoa_r+0xb94>
 800b636:	9b06      	ldr	r3, [sp, #24]
 800b638:	930c      	str	r3, [sp, #48]	; 0x30
 800b63a:	2c00      	cmp	r4, #0
 800b63c:	dd05      	ble.n	800b64a <_dtoa_r+0xa16>
 800b63e:	0029      	movs	r1, r5
 800b640:	0022      	movs	r2, r4
 800b642:	0038      	movs	r0, r7
 800b644:	f000 fd82 	bl	800c14c <__lshift>
 800b648:	0005      	movs	r5, r0
 800b64a:	9b07      	ldr	r3, [sp, #28]
 800b64c:	0028      	movs	r0, r5
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d01f      	beq.n	800b692 <_dtoa_r+0xa5e>
 800b652:	0038      	movs	r0, r7
 800b654:	6869      	ldr	r1, [r5, #4]
 800b656:	f000 fb63 	bl	800bd20 <_Balloc>
 800b65a:	1e04      	subs	r4, r0, #0
 800b65c:	d10c      	bne.n	800b678 <_dtoa_r+0xa44>
 800b65e:	0002      	movs	r2, r0
 800b660:	4b03      	ldr	r3, [pc, #12]	; (800b670 <_dtoa_r+0xa3c>)
 800b662:	4904      	ldr	r1, [pc, #16]	; (800b674 <_dtoa_r+0xa40>)
 800b664:	f7ff fafb 	bl	800ac5e <_dtoa_r+0x2a>
 800b668:	40240000 	.word	0x40240000
 800b66c:	00000433 	.word	0x00000433
 800b670:	0800cedb 	.word	0x0800cedb
 800b674:	000002ea 	.word	0x000002ea
 800b678:	0029      	movs	r1, r5
 800b67a:	692b      	ldr	r3, [r5, #16]
 800b67c:	310c      	adds	r1, #12
 800b67e:	1c9a      	adds	r2, r3, #2
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	300c      	adds	r0, #12
 800b684:	f7fe fb88 	bl	8009d98 <memcpy>
 800b688:	2201      	movs	r2, #1
 800b68a:	0021      	movs	r1, r4
 800b68c:	0038      	movs	r0, r7
 800b68e:	f000 fd5d 	bl	800c14c <__lshift>
 800b692:	002c      	movs	r4, r5
 800b694:	0005      	movs	r5, r0
 800b696:	9b05      	ldr	r3, [sp, #20]
 800b698:	9308      	str	r3, [sp, #32]
 800b69a:	0031      	movs	r1, r6
 800b69c:	9804      	ldr	r0, [sp, #16]
 800b69e:	f7ff fa3d 	bl	800ab1c <quorem>
 800b6a2:	0003      	movs	r3, r0
 800b6a4:	0021      	movs	r1, r4
 800b6a6:	3330      	adds	r3, #48	; 0x30
 800b6a8:	900e      	str	r0, [sp, #56]	; 0x38
 800b6aa:	9804      	ldr	r0, [sp, #16]
 800b6ac:	9306      	str	r3, [sp, #24]
 800b6ae:	f000 fdbd 	bl	800c22c <__mcmp>
 800b6b2:	002a      	movs	r2, r5
 800b6b4:	900f      	str	r0, [sp, #60]	; 0x3c
 800b6b6:	0031      	movs	r1, r6
 800b6b8:	0038      	movs	r0, r7
 800b6ba:	f000 fdd3 	bl	800c264 <__mdiff>
 800b6be:	68c3      	ldr	r3, [r0, #12]
 800b6c0:	9007      	str	r0, [sp, #28]
 800b6c2:	9310      	str	r3, [sp, #64]	; 0x40
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	930d      	str	r3, [sp, #52]	; 0x34
 800b6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d104      	bne.n	800b6d8 <_dtoa_r+0xaa4>
 800b6ce:	0001      	movs	r1, r0
 800b6d0:	9804      	ldr	r0, [sp, #16]
 800b6d2:	f000 fdab 	bl	800c22c <__mcmp>
 800b6d6:	900d      	str	r0, [sp, #52]	; 0x34
 800b6d8:	0038      	movs	r0, r7
 800b6da:	9907      	ldr	r1, [sp, #28]
 800b6dc:	f000 fb64 	bl	800bda8 <_Bfree>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6e6:	4018      	ands	r0, r3
 800b6e8:	9b08      	ldr	r3, [sp, #32]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	9307      	str	r3, [sp, #28]
 800b6ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	4303      	orrs	r3, r0
 800b6f4:	d10c      	bne.n	800b710 <_dtoa_r+0xadc>
 800b6f6:	9b06      	ldr	r3, [sp, #24]
 800b6f8:	2b39      	cmp	r3, #57	; 0x39
 800b6fa:	d025      	beq.n	800b748 <_dtoa_r+0xb14>
 800b6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	dd02      	ble.n	800b708 <_dtoa_r+0xad4>
 800b702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b704:	3331      	adds	r3, #49	; 0x31
 800b706:	9306      	str	r3, [sp, #24]
 800b708:	9b08      	ldr	r3, [sp, #32]
 800b70a:	9a06      	ldr	r2, [sp, #24]
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	e773      	b.n	800b5f8 <_dtoa_r+0x9c4>
 800b710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b712:	2b00      	cmp	r3, #0
 800b714:	db03      	blt.n	800b71e <_dtoa_r+0xaea>
 800b716:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b718:	4313      	orrs	r3, r2
 800b71a:	4303      	orrs	r3, r0
 800b71c:	d11f      	bne.n	800b75e <_dtoa_r+0xb2a>
 800b71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b720:	2b00      	cmp	r3, #0
 800b722:	ddf1      	ble.n	800b708 <_dtoa_r+0xad4>
 800b724:	9904      	ldr	r1, [sp, #16]
 800b726:	2201      	movs	r2, #1
 800b728:	0038      	movs	r0, r7
 800b72a:	f000 fd0f 	bl	800c14c <__lshift>
 800b72e:	0031      	movs	r1, r6
 800b730:	9004      	str	r0, [sp, #16]
 800b732:	f000 fd7b 	bl	800c22c <__mcmp>
 800b736:	2800      	cmp	r0, #0
 800b738:	dc03      	bgt.n	800b742 <_dtoa_r+0xb0e>
 800b73a:	d1e5      	bne.n	800b708 <_dtoa_r+0xad4>
 800b73c:	9b06      	ldr	r3, [sp, #24]
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d5e2      	bpl.n	800b708 <_dtoa_r+0xad4>
 800b742:	9b06      	ldr	r3, [sp, #24]
 800b744:	2b39      	cmp	r3, #57	; 0x39
 800b746:	d1dc      	bne.n	800b702 <_dtoa_r+0xace>
 800b748:	2339      	movs	r3, #57	; 0x39
 800b74a:	9a08      	ldr	r2, [sp, #32]
 800b74c:	7013      	strb	r3, [r2, #0]
 800b74e:	9b07      	ldr	r3, [sp, #28]
 800b750:	9307      	str	r3, [sp, #28]
 800b752:	3b01      	subs	r3, #1
 800b754:	781a      	ldrb	r2, [r3, #0]
 800b756:	2a39      	cmp	r2, #57	; 0x39
 800b758:	d06c      	beq.n	800b834 <_dtoa_r+0xc00>
 800b75a:	3201      	adds	r2, #1
 800b75c:	e7d6      	b.n	800b70c <_dtoa_r+0xad8>
 800b75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b760:	2b00      	cmp	r3, #0
 800b762:	dd07      	ble.n	800b774 <_dtoa_r+0xb40>
 800b764:	9b06      	ldr	r3, [sp, #24]
 800b766:	2b39      	cmp	r3, #57	; 0x39
 800b768:	d0ee      	beq.n	800b748 <_dtoa_r+0xb14>
 800b76a:	9b06      	ldr	r3, [sp, #24]
 800b76c:	9a08      	ldr	r2, [sp, #32]
 800b76e:	3301      	adds	r3, #1
 800b770:	7013      	strb	r3, [r2, #0]
 800b772:	e741      	b.n	800b5f8 <_dtoa_r+0x9c4>
 800b774:	9b08      	ldr	r3, [sp, #32]
 800b776:	9a06      	ldr	r2, [sp, #24]
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	2301      	movs	r3, #1
 800b77c:	9a05      	ldr	r2, [sp, #20]
 800b77e:	1a9b      	subs	r3, r3, r2
 800b780:	9a08      	ldr	r2, [sp, #32]
 800b782:	189b      	adds	r3, r3, r2
 800b784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b786:	429a      	cmp	r2, r3
 800b788:	d03e      	beq.n	800b808 <_dtoa_r+0xbd4>
 800b78a:	2300      	movs	r3, #0
 800b78c:	220a      	movs	r2, #10
 800b78e:	9904      	ldr	r1, [sp, #16]
 800b790:	0038      	movs	r0, r7
 800b792:	f000 fb2d 	bl	800bdf0 <__multadd>
 800b796:	2300      	movs	r3, #0
 800b798:	9004      	str	r0, [sp, #16]
 800b79a:	220a      	movs	r2, #10
 800b79c:	0021      	movs	r1, r4
 800b79e:	0038      	movs	r0, r7
 800b7a0:	42ac      	cmp	r4, r5
 800b7a2:	d106      	bne.n	800b7b2 <_dtoa_r+0xb7e>
 800b7a4:	f000 fb24 	bl	800bdf0 <__multadd>
 800b7a8:	0004      	movs	r4, r0
 800b7aa:	0005      	movs	r5, r0
 800b7ac:	9b07      	ldr	r3, [sp, #28]
 800b7ae:	9308      	str	r3, [sp, #32]
 800b7b0:	e773      	b.n	800b69a <_dtoa_r+0xa66>
 800b7b2:	f000 fb1d 	bl	800bdf0 <__multadd>
 800b7b6:	0029      	movs	r1, r5
 800b7b8:	0004      	movs	r4, r0
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	220a      	movs	r2, #10
 800b7be:	0038      	movs	r0, r7
 800b7c0:	f000 fb16 	bl	800bdf0 <__multadd>
 800b7c4:	0005      	movs	r5, r0
 800b7c6:	e7f1      	b.n	800b7ac <_dtoa_r+0xb78>
 800b7c8:	9b06      	ldr	r3, [sp, #24]
 800b7ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b7cc:	2400      	movs	r4, #0
 800b7ce:	0031      	movs	r1, r6
 800b7d0:	9804      	ldr	r0, [sp, #16]
 800b7d2:	f7ff f9a3 	bl	800ab1c <quorem>
 800b7d6:	9b05      	ldr	r3, [sp, #20]
 800b7d8:	3030      	adds	r0, #48	; 0x30
 800b7da:	5518      	strb	r0, [r3, r4]
 800b7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7de:	3401      	adds	r4, #1
 800b7e0:	9006      	str	r0, [sp, #24]
 800b7e2:	42a3      	cmp	r3, r4
 800b7e4:	dd07      	ble.n	800b7f6 <_dtoa_r+0xbc2>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	0038      	movs	r0, r7
 800b7ec:	9904      	ldr	r1, [sp, #16]
 800b7ee:	f000 faff 	bl	800bdf0 <__multadd>
 800b7f2:	9004      	str	r0, [sp, #16]
 800b7f4:	e7eb      	b.n	800b7ce <_dtoa_r+0xb9a>
 800b7f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dd00      	ble.n	800b800 <_dtoa_r+0xbcc>
 800b7fe:	0018      	movs	r0, r3
 800b800:	2400      	movs	r4, #0
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	181b      	adds	r3, r3, r0
 800b806:	9307      	str	r3, [sp, #28]
 800b808:	9904      	ldr	r1, [sp, #16]
 800b80a:	2201      	movs	r2, #1
 800b80c:	0038      	movs	r0, r7
 800b80e:	f000 fc9d 	bl	800c14c <__lshift>
 800b812:	0031      	movs	r1, r6
 800b814:	9004      	str	r0, [sp, #16]
 800b816:	f000 fd09 	bl	800c22c <__mcmp>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	dc97      	bgt.n	800b74e <_dtoa_r+0xb1a>
 800b81e:	d102      	bne.n	800b826 <_dtoa_r+0xbf2>
 800b820:	9b06      	ldr	r3, [sp, #24]
 800b822:	07db      	lsls	r3, r3, #31
 800b824:	d493      	bmi.n	800b74e <_dtoa_r+0xb1a>
 800b826:	9b07      	ldr	r3, [sp, #28]
 800b828:	9307      	str	r3, [sp, #28]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	2a30      	cmp	r2, #48	; 0x30
 800b830:	d0fa      	beq.n	800b828 <_dtoa_r+0xbf4>
 800b832:	e6e1      	b.n	800b5f8 <_dtoa_r+0x9c4>
 800b834:	9a05      	ldr	r2, [sp, #20]
 800b836:	429a      	cmp	r2, r3
 800b838:	d18a      	bne.n	800b750 <_dtoa_r+0xb1c>
 800b83a:	9b02      	ldr	r3, [sp, #8]
 800b83c:	3301      	adds	r3, #1
 800b83e:	9302      	str	r3, [sp, #8]
 800b840:	2331      	movs	r3, #49	; 0x31
 800b842:	e795      	b.n	800b770 <_dtoa_r+0xb3c>
 800b844:	4b08      	ldr	r3, [pc, #32]	; (800b868 <_dtoa_r+0xc34>)
 800b846:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b848:	9305      	str	r3, [sp, #20]
 800b84a:	4b08      	ldr	r3, [pc, #32]	; (800b86c <_dtoa_r+0xc38>)
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	d001      	beq.n	800b854 <_dtoa_r+0xc20>
 800b850:	f7ff fa3b 	bl	800acca <_dtoa_r+0x96>
 800b854:	f7ff fa3b 	bl	800acce <_dtoa_r+0x9a>
 800b858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dcb6      	bgt.n	800b7cc <_dtoa_r+0xb98>
 800b85e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b860:	2b02      	cmp	r3, #2
 800b862:	dd00      	ble.n	800b866 <_dtoa_r+0xc32>
 800b864:	e6b2      	b.n	800b5cc <_dtoa_r+0x998>
 800b866:	e7b1      	b.n	800b7cc <_dtoa_r+0xb98>
 800b868:	0800ce58 	.word	0x0800ce58
 800b86c:	0800ce60 	.word	0x0800ce60

0800b870 <__sflush_r>:
 800b870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b872:	898b      	ldrh	r3, [r1, #12]
 800b874:	0005      	movs	r5, r0
 800b876:	000c      	movs	r4, r1
 800b878:	071a      	lsls	r2, r3, #28
 800b87a:	d45f      	bmi.n	800b93c <__sflush_r+0xcc>
 800b87c:	684a      	ldr	r2, [r1, #4]
 800b87e:	2a00      	cmp	r2, #0
 800b880:	dc04      	bgt.n	800b88c <__sflush_r+0x1c>
 800b882:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b884:	2a00      	cmp	r2, #0
 800b886:	dc01      	bgt.n	800b88c <__sflush_r+0x1c>
 800b888:	2000      	movs	r0, #0
 800b88a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b88c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b88e:	2f00      	cmp	r7, #0
 800b890:	d0fa      	beq.n	800b888 <__sflush_r+0x18>
 800b892:	2200      	movs	r2, #0
 800b894:	2180      	movs	r1, #128	; 0x80
 800b896:	682e      	ldr	r6, [r5, #0]
 800b898:	602a      	str	r2, [r5, #0]
 800b89a:	001a      	movs	r2, r3
 800b89c:	0149      	lsls	r1, r1, #5
 800b89e:	400a      	ands	r2, r1
 800b8a0:	420b      	tst	r3, r1
 800b8a2:	d034      	beq.n	800b90e <__sflush_r+0x9e>
 800b8a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	075b      	lsls	r3, r3, #29
 800b8aa:	d506      	bpl.n	800b8ba <__sflush_r+0x4a>
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	1ac0      	subs	r0, r0, r3
 800b8b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <__sflush_r+0x4a>
 800b8b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8b8:	1ac0      	subs	r0, r0, r3
 800b8ba:	0002      	movs	r2, r0
 800b8bc:	6a21      	ldr	r1, [r4, #32]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	0028      	movs	r0, r5
 800b8c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b8c4:	47b8      	blx	r7
 800b8c6:	89a1      	ldrh	r1, [r4, #12]
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d106      	bne.n	800b8da <__sflush_r+0x6a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	2b1d      	cmp	r3, #29
 800b8d0:	d831      	bhi.n	800b936 <__sflush_r+0xc6>
 800b8d2:	4a2c      	ldr	r2, [pc, #176]	; (800b984 <__sflush_r+0x114>)
 800b8d4:	40da      	lsrs	r2, r3
 800b8d6:	07d3      	lsls	r3, r2, #31
 800b8d8:	d52d      	bpl.n	800b936 <__sflush_r+0xc6>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	6063      	str	r3, [r4, #4]
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	04cb      	lsls	r3, r1, #19
 800b8e4:	d505      	bpl.n	800b8f2 <__sflush_r+0x82>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d102      	bne.n	800b8f0 <__sflush_r+0x80>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d100      	bne.n	800b8f2 <__sflush_r+0x82>
 800b8f0:	6560      	str	r0, [r4, #84]	; 0x54
 800b8f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f4:	602e      	str	r6, [r5, #0]
 800b8f6:	2900      	cmp	r1, #0
 800b8f8:	d0c6      	beq.n	800b888 <__sflush_r+0x18>
 800b8fa:	0023      	movs	r3, r4
 800b8fc:	3344      	adds	r3, #68	; 0x44
 800b8fe:	4299      	cmp	r1, r3
 800b900:	d002      	beq.n	800b908 <__sflush_r+0x98>
 800b902:	0028      	movs	r0, r5
 800b904:	f000 fdb8 	bl	800c478 <_free_r>
 800b908:	2000      	movs	r0, #0
 800b90a:	6360      	str	r0, [r4, #52]	; 0x34
 800b90c:	e7bd      	b.n	800b88a <__sflush_r+0x1a>
 800b90e:	2301      	movs	r3, #1
 800b910:	0028      	movs	r0, r5
 800b912:	6a21      	ldr	r1, [r4, #32]
 800b914:	47b8      	blx	r7
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d1c5      	bne.n	800b8a6 <__sflush_r+0x36>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0c2      	beq.n	800b8a6 <__sflush_r+0x36>
 800b920:	2b1d      	cmp	r3, #29
 800b922:	d001      	beq.n	800b928 <__sflush_r+0xb8>
 800b924:	2b16      	cmp	r3, #22
 800b926:	d101      	bne.n	800b92c <__sflush_r+0xbc>
 800b928:	602e      	str	r6, [r5, #0]
 800b92a:	e7ad      	b.n	800b888 <__sflush_r+0x18>
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	89a2      	ldrh	r2, [r4, #12]
 800b930:	4313      	orrs	r3, r2
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	e7a9      	b.n	800b88a <__sflush_r+0x1a>
 800b936:	2340      	movs	r3, #64	; 0x40
 800b938:	430b      	orrs	r3, r1
 800b93a:	e7fa      	b.n	800b932 <__sflush_r+0xc2>
 800b93c:	690f      	ldr	r7, [r1, #16]
 800b93e:	2f00      	cmp	r7, #0
 800b940:	d0a2      	beq.n	800b888 <__sflush_r+0x18>
 800b942:	680a      	ldr	r2, [r1, #0]
 800b944:	600f      	str	r7, [r1, #0]
 800b946:	1bd2      	subs	r2, r2, r7
 800b948:	9201      	str	r2, [sp, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	079b      	lsls	r3, r3, #30
 800b94e:	d100      	bne.n	800b952 <__sflush_r+0xe2>
 800b950:	694a      	ldr	r2, [r1, #20]
 800b952:	60a2      	str	r2, [r4, #8]
 800b954:	9b01      	ldr	r3, [sp, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	dc00      	bgt.n	800b95c <__sflush_r+0xec>
 800b95a:	e795      	b.n	800b888 <__sflush_r+0x18>
 800b95c:	003a      	movs	r2, r7
 800b95e:	0028      	movs	r0, r5
 800b960:	9b01      	ldr	r3, [sp, #4]
 800b962:	6a21      	ldr	r1, [r4, #32]
 800b964:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b966:	47b0      	blx	r6
 800b968:	2800      	cmp	r0, #0
 800b96a:	dc06      	bgt.n	800b97a <__sflush_r+0x10a>
 800b96c:	2340      	movs	r3, #64	; 0x40
 800b96e:	2001      	movs	r0, #1
 800b970:	89a2      	ldrh	r2, [r4, #12]
 800b972:	4240      	negs	r0, r0
 800b974:	4313      	orrs	r3, r2
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	e787      	b.n	800b88a <__sflush_r+0x1a>
 800b97a:	9b01      	ldr	r3, [sp, #4]
 800b97c:	183f      	adds	r7, r7, r0
 800b97e:	1a1b      	subs	r3, r3, r0
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	e7e7      	b.n	800b954 <__sflush_r+0xe4>
 800b984:	20400001 	.word	0x20400001

0800b988 <_fflush_r>:
 800b988:	690b      	ldr	r3, [r1, #16]
 800b98a:	b570      	push	{r4, r5, r6, lr}
 800b98c:	0005      	movs	r5, r0
 800b98e:	000c      	movs	r4, r1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d102      	bne.n	800b99a <_fflush_r+0x12>
 800b994:	2500      	movs	r5, #0
 800b996:	0028      	movs	r0, r5
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d004      	beq.n	800b9a8 <_fflush_r+0x20>
 800b99e:	6983      	ldr	r3, [r0, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <_fflush_r+0x20>
 800b9a4:	f000 f892 	bl	800bacc <__sinit>
 800b9a8:	4b14      	ldr	r3, [pc, #80]	; (800b9fc <_fflush_r+0x74>)
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	d11b      	bne.n	800b9e6 <_fflush_r+0x5e>
 800b9ae:	686c      	ldr	r4, [r5, #4]
 800b9b0:	220c      	movs	r2, #12
 800b9b2:	5ea3      	ldrsh	r3, [r4, r2]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0ed      	beq.n	800b994 <_fflush_r+0xc>
 800b9b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9ba:	07d2      	lsls	r2, r2, #31
 800b9bc:	d404      	bmi.n	800b9c8 <_fflush_r+0x40>
 800b9be:	059b      	lsls	r3, r3, #22
 800b9c0:	d402      	bmi.n	800b9c8 <_fflush_r+0x40>
 800b9c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9c4:	f000 f927 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800b9c8:	0028      	movs	r0, r5
 800b9ca:	0021      	movs	r1, r4
 800b9cc:	f7ff ff50 	bl	800b870 <__sflush_r>
 800b9d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9d2:	0005      	movs	r5, r0
 800b9d4:	07db      	lsls	r3, r3, #31
 800b9d6:	d4de      	bmi.n	800b996 <_fflush_r+0xe>
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	059b      	lsls	r3, r3, #22
 800b9dc:	d4db      	bmi.n	800b996 <_fflush_r+0xe>
 800b9de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9e0:	f000 f91a 	bl	800bc18 <__retarget_lock_release_recursive>
 800b9e4:	e7d7      	b.n	800b996 <_fflush_r+0xe>
 800b9e6:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <_fflush_r+0x78>)
 800b9e8:	429c      	cmp	r4, r3
 800b9ea:	d101      	bne.n	800b9f0 <_fflush_r+0x68>
 800b9ec:	68ac      	ldr	r4, [r5, #8]
 800b9ee:	e7df      	b.n	800b9b0 <_fflush_r+0x28>
 800b9f0:	4b04      	ldr	r3, [pc, #16]	; (800ba04 <_fflush_r+0x7c>)
 800b9f2:	429c      	cmp	r4, r3
 800b9f4:	d1dc      	bne.n	800b9b0 <_fflush_r+0x28>
 800b9f6:	68ec      	ldr	r4, [r5, #12]
 800b9f8:	e7da      	b.n	800b9b0 <_fflush_r+0x28>
 800b9fa:	46c0      	nop			; (mov r8, r8)
 800b9fc:	0800cf0c 	.word	0x0800cf0c
 800ba00:	0800cf2c 	.word	0x0800cf2c
 800ba04:	0800ceec 	.word	0x0800ceec

0800ba08 <std>:
 800ba08:	2300      	movs	r3, #0
 800ba0a:	b510      	push	{r4, lr}
 800ba0c:	0004      	movs	r4, r0
 800ba0e:	6003      	str	r3, [r0, #0]
 800ba10:	6043      	str	r3, [r0, #4]
 800ba12:	6083      	str	r3, [r0, #8]
 800ba14:	8181      	strh	r1, [r0, #12]
 800ba16:	6643      	str	r3, [r0, #100]	; 0x64
 800ba18:	0019      	movs	r1, r3
 800ba1a:	81c2      	strh	r2, [r0, #14]
 800ba1c:	6103      	str	r3, [r0, #16]
 800ba1e:	6143      	str	r3, [r0, #20]
 800ba20:	6183      	str	r3, [r0, #24]
 800ba22:	2208      	movs	r2, #8
 800ba24:	305c      	adds	r0, #92	; 0x5c
 800ba26:	f7fe f9c0 	bl	8009daa <memset>
 800ba2a:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <std+0x38>)
 800ba2c:	6263      	str	r3, [r4, #36]	; 0x24
 800ba2e:	4b05      	ldr	r3, [pc, #20]	; (800ba44 <std+0x3c>)
 800ba30:	6224      	str	r4, [r4, #32]
 800ba32:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba34:	4b04      	ldr	r3, [pc, #16]	; (800ba48 <std+0x40>)
 800ba36:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba38:	4b04      	ldr	r3, [pc, #16]	; (800ba4c <std+0x44>)
 800ba3a:	6323      	str	r3, [r4, #48]	; 0x30
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	46c0      	nop			; (mov r8, r8)
 800ba40:	0800c8b1 	.word	0x0800c8b1
 800ba44:	0800c8d9 	.word	0x0800c8d9
 800ba48:	0800c911 	.word	0x0800c911
 800ba4c:	0800c93d 	.word	0x0800c93d

0800ba50 <_cleanup_r>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	4902      	ldr	r1, [pc, #8]	; (800ba5c <_cleanup_r+0xc>)
 800ba54:	f000 f8ba 	bl	800bbcc <_fwalk_reent>
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	46c0      	nop			; (mov r8, r8)
 800ba5c:	0800b989 	.word	0x0800b989

0800ba60 <__sfmoreglue>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	2568      	movs	r5, #104	; 0x68
 800ba64:	1e4a      	subs	r2, r1, #1
 800ba66:	4355      	muls	r5, r2
 800ba68:	000e      	movs	r6, r1
 800ba6a:	0029      	movs	r1, r5
 800ba6c:	3174      	adds	r1, #116	; 0x74
 800ba6e:	f000 fd4d 	bl	800c50c <_malloc_r>
 800ba72:	1e04      	subs	r4, r0, #0
 800ba74:	d008      	beq.n	800ba88 <__sfmoreglue+0x28>
 800ba76:	2100      	movs	r1, #0
 800ba78:	002a      	movs	r2, r5
 800ba7a:	6001      	str	r1, [r0, #0]
 800ba7c:	6046      	str	r6, [r0, #4]
 800ba7e:	300c      	adds	r0, #12
 800ba80:	60a0      	str	r0, [r4, #8]
 800ba82:	3268      	adds	r2, #104	; 0x68
 800ba84:	f7fe f991 	bl	8009daa <memset>
 800ba88:	0020      	movs	r0, r4
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}

0800ba8c <__sfp_lock_acquire>:
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	4802      	ldr	r0, [pc, #8]	; (800ba98 <__sfp_lock_acquire+0xc>)
 800ba90:	f000 f8c1 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	46c0      	nop			; (mov r8, r8)
 800ba98:	20001db4 	.word	0x20001db4

0800ba9c <__sfp_lock_release>:
 800ba9c:	b510      	push	{r4, lr}
 800ba9e:	4802      	ldr	r0, [pc, #8]	; (800baa8 <__sfp_lock_release+0xc>)
 800baa0:	f000 f8ba 	bl	800bc18 <__retarget_lock_release_recursive>
 800baa4:	bd10      	pop	{r4, pc}
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	20001db4 	.word	0x20001db4

0800baac <__sinit_lock_acquire>:
 800baac:	b510      	push	{r4, lr}
 800baae:	4802      	ldr	r0, [pc, #8]	; (800bab8 <__sinit_lock_acquire+0xc>)
 800bab0:	f000 f8b1 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800bab4:	bd10      	pop	{r4, pc}
 800bab6:	46c0      	nop			; (mov r8, r8)
 800bab8:	20001daf 	.word	0x20001daf

0800babc <__sinit_lock_release>:
 800babc:	b510      	push	{r4, lr}
 800babe:	4802      	ldr	r0, [pc, #8]	; (800bac8 <__sinit_lock_release+0xc>)
 800bac0:	f000 f8aa 	bl	800bc18 <__retarget_lock_release_recursive>
 800bac4:	bd10      	pop	{r4, pc}
 800bac6:	46c0      	nop			; (mov r8, r8)
 800bac8:	20001daf 	.word	0x20001daf

0800bacc <__sinit>:
 800bacc:	b513      	push	{r0, r1, r4, lr}
 800bace:	0004      	movs	r4, r0
 800bad0:	f7ff ffec 	bl	800baac <__sinit_lock_acquire>
 800bad4:	69a3      	ldr	r3, [r4, #24]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <__sinit+0x14>
 800bada:	f7ff ffef 	bl	800babc <__sinit_lock_release>
 800bade:	bd13      	pop	{r0, r1, r4, pc}
 800bae0:	64a3      	str	r3, [r4, #72]	; 0x48
 800bae2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bae4:	6523      	str	r3, [r4, #80]	; 0x50
 800bae6:	4b13      	ldr	r3, [pc, #76]	; (800bb34 <__sinit+0x68>)
 800bae8:	4a13      	ldr	r2, [pc, #76]	; (800bb38 <__sinit+0x6c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	62a2      	str	r2, [r4, #40]	; 0x28
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	d101      	bne.n	800baf8 <__sinit+0x2c>
 800baf4:	2301      	movs	r3, #1
 800baf6:	61a3      	str	r3, [r4, #24]
 800baf8:	0020      	movs	r0, r4
 800bafa:	f000 f81f 	bl	800bb3c <__sfp>
 800bafe:	6060      	str	r0, [r4, #4]
 800bb00:	0020      	movs	r0, r4
 800bb02:	f000 f81b 	bl	800bb3c <__sfp>
 800bb06:	60a0      	str	r0, [r4, #8]
 800bb08:	0020      	movs	r0, r4
 800bb0a:	f000 f817 	bl	800bb3c <__sfp>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2104      	movs	r1, #4
 800bb12:	60e0      	str	r0, [r4, #12]
 800bb14:	6860      	ldr	r0, [r4, #4]
 800bb16:	f7ff ff77 	bl	800ba08 <std>
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	2109      	movs	r1, #9
 800bb1e:	68a0      	ldr	r0, [r4, #8]
 800bb20:	f7ff ff72 	bl	800ba08 <std>
 800bb24:	2202      	movs	r2, #2
 800bb26:	2112      	movs	r1, #18
 800bb28:	68e0      	ldr	r0, [r4, #12]
 800bb2a:	f7ff ff6d 	bl	800ba08 <std>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	61a3      	str	r3, [r4, #24]
 800bb32:	e7d2      	b.n	800bada <__sinit+0xe>
 800bb34:	0800ce20 	.word	0x0800ce20
 800bb38:	0800ba51 	.word	0x0800ba51

0800bb3c <__sfp>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	0007      	movs	r7, r0
 800bb40:	f7ff ffa4 	bl	800ba8c <__sfp_lock_acquire>
 800bb44:	4b1f      	ldr	r3, [pc, #124]	; (800bbc4 <__sfp+0x88>)
 800bb46:	681e      	ldr	r6, [r3, #0]
 800bb48:	69b3      	ldr	r3, [r6, #24]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <__sfp+0x18>
 800bb4e:	0030      	movs	r0, r6
 800bb50:	f7ff ffbc 	bl	800bacc <__sinit>
 800bb54:	3648      	adds	r6, #72	; 0x48
 800bb56:	68b4      	ldr	r4, [r6, #8]
 800bb58:	6873      	ldr	r3, [r6, #4]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	d504      	bpl.n	800bb68 <__sfp+0x2c>
 800bb5e:	6833      	ldr	r3, [r6, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d022      	beq.n	800bbaa <__sfp+0x6e>
 800bb64:	6836      	ldr	r6, [r6, #0]
 800bb66:	e7f6      	b.n	800bb56 <__sfp+0x1a>
 800bb68:	220c      	movs	r2, #12
 800bb6a:	5ea5      	ldrsh	r5, [r4, r2]
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	d11a      	bne.n	800bba6 <__sfp+0x6a>
 800bb70:	0020      	movs	r0, r4
 800bb72:	4b15      	ldr	r3, [pc, #84]	; (800bbc8 <__sfp+0x8c>)
 800bb74:	3058      	adds	r0, #88	; 0x58
 800bb76:	60e3      	str	r3, [r4, #12]
 800bb78:	6665      	str	r5, [r4, #100]	; 0x64
 800bb7a:	f000 f84b 	bl	800bc14 <__retarget_lock_init_recursive>
 800bb7e:	f7ff ff8d 	bl	800ba9c <__sfp_lock_release>
 800bb82:	0020      	movs	r0, r4
 800bb84:	2208      	movs	r2, #8
 800bb86:	0029      	movs	r1, r5
 800bb88:	6025      	str	r5, [r4, #0]
 800bb8a:	60a5      	str	r5, [r4, #8]
 800bb8c:	6065      	str	r5, [r4, #4]
 800bb8e:	6125      	str	r5, [r4, #16]
 800bb90:	6165      	str	r5, [r4, #20]
 800bb92:	61a5      	str	r5, [r4, #24]
 800bb94:	305c      	adds	r0, #92	; 0x5c
 800bb96:	f7fe f908 	bl	8009daa <memset>
 800bb9a:	6365      	str	r5, [r4, #52]	; 0x34
 800bb9c:	63a5      	str	r5, [r4, #56]	; 0x38
 800bb9e:	64a5      	str	r5, [r4, #72]	; 0x48
 800bba0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bba2:	0020      	movs	r0, r4
 800bba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba6:	3468      	adds	r4, #104	; 0x68
 800bba8:	e7d7      	b.n	800bb5a <__sfp+0x1e>
 800bbaa:	2104      	movs	r1, #4
 800bbac:	0038      	movs	r0, r7
 800bbae:	f7ff ff57 	bl	800ba60 <__sfmoreglue>
 800bbb2:	1e04      	subs	r4, r0, #0
 800bbb4:	6030      	str	r0, [r6, #0]
 800bbb6:	d1d5      	bne.n	800bb64 <__sfp+0x28>
 800bbb8:	f7ff ff70 	bl	800ba9c <__sfp_lock_release>
 800bbbc:	230c      	movs	r3, #12
 800bbbe:	603b      	str	r3, [r7, #0]
 800bbc0:	e7ef      	b.n	800bba2 <__sfp+0x66>
 800bbc2:	46c0      	nop			; (mov r8, r8)
 800bbc4:	0800ce20 	.word	0x0800ce20
 800bbc8:	ffff0001 	.word	0xffff0001

0800bbcc <_fwalk_reent>:
 800bbcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbce:	0004      	movs	r4, r0
 800bbd0:	0006      	movs	r6, r0
 800bbd2:	2700      	movs	r7, #0
 800bbd4:	9101      	str	r1, [sp, #4]
 800bbd6:	3448      	adds	r4, #72	; 0x48
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	68a5      	ldr	r5, [r4, #8]
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	9b00      	ldr	r3, [sp, #0]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	d504      	bpl.n	800bbf0 <_fwalk_reent+0x24>
 800bbe6:	6824      	ldr	r4, [r4, #0]
 800bbe8:	2c00      	cmp	r4, #0
 800bbea:	d1f5      	bne.n	800bbd8 <_fwalk_reent+0xc>
 800bbec:	0038      	movs	r0, r7
 800bbee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbf0:	89ab      	ldrh	r3, [r5, #12]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d908      	bls.n	800bc08 <_fwalk_reent+0x3c>
 800bbf6:	220e      	movs	r2, #14
 800bbf8:	5eab      	ldrsh	r3, [r5, r2]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	d004      	beq.n	800bc08 <_fwalk_reent+0x3c>
 800bbfe:	0029      	movs	r1, r5
 800bc00:	0030      	movs	r0, r6
 800bc02:	9b01      	ldr	r3, [sp, #4]
 800bc04:	4798      	blx	r3
 800bc06:	4307      	orrs	r7, r0
 800bc08:	3568      	adds	r5, #104	; 0x68
 800bc0a:	e7e8      	b.n	800bbde <_fwalk_reent+0x12>

0800bc0c <_localeconv_r>:
 800bc0c:	4800      	ldr	r0, [pc, #0]	; (800bc10 <_localeconv_r+0x4>)
 800bc0e:	4770      	bx	lr
 800bc10:	20000164 	.word	0x20000164

0800bc14 <__retarget_lock_init_recursive>:
 800bc14:	4770      	bx	lr

0800bc16 <__retarget_lock_acquire_recursive>:
 800bc16:	4770      	bx	lr

0800bc18 <__retarget_lock_release_recursive>:
 800bc18:	4770      	bx	lr
	...

0800bc1c <__swhatbuf_r>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	000e      	movs	r6, r1
 800bc20:	001d      	movs	r5, r3
 800bc22:	230e      	movs	r3, #14
 800bc24:	5ec9      	ldrsh	r1, [r1, r3]
 800bc26:	0014      	movs	r4, r2
 800bc28:	b096      	sub	sp, #88	; 0x58
 800bc2a:	2900      	cmp	r1, #0
 800bc2c:	da07      	bge.n	800bc3e <__swhatbuf_r+0x22>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	602b      	str	r3, [r5, #0]
 800bc32:	89b3      	ldrh	r3, [r6, #12]
 800bc34:	061b      	lsls	r3, r3, #24
 800bc36:	d411      	bmi.n	800bc5c <__swhatbuf_r+0x40>
 800bc38:	2380      	movs	r3, #128	; 0x80
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	e00f      	b.n	800bc5e <__swhatbuf_r+0x42>
 800bc3e:	466a      	mov	r2, sp
 800bc40:	f000 fed6 	bl	800c9f0 <_fstat_r>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	dbf2      	blt.n	800bc2e <__swhatbuf_r+0x12>
 800bc48:	23f0      	movs	r3, #240	; 0xf0
 800bc4a:	9901      	ldr	r1, [sp, #4]
 800bc4c:	021b      	lsls	r3, r3, #8
 800bc4e:	4019      	ands	r1, r3
 800bc50:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <__swhatbuf_r+0x4c>)
 800bc52:	18c9      	adds	r1, r1, r3
 800bc54:	424b      	negs	r3, r1
 800bc56:	4159      	adcs	r1, r3
 800bc58:	6029      	str	r1, [r5, #0]
 800bc5a:	e7ed      	b.n	800bc38 <__swhatbuf_r+0x1c>
 800bc5c:	2340      	movs	r3, #64	; 0x40
 800bc5e:	2000      	movs	r0, #0
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	b016      	add	sp, #88	; 0x58
 800bc64:	bd70      	pop	{r4, r5, r6, pc}
 800bc66:	46c0      	nop			; (mov r8, r8)
 800bc68:	ffffe000 	.word	0xffffe000

0800bc6c <__smakebuf_r>:
 800bc6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc6e:	2602      	movs	r6, #2
 800bc70:	898b      	ldrh	r3, [r1, #12]
 800bc72:	0005      	movs	r5, r0
 800bc74:	000c      	movs	r4, r1
 800bc76:	4233      	tst	r3, r6
 800bc78:	d006      	beq.n	800bc88 <__smakebuf_r+0x1c>
 800bc7a:	0023      	movs	r3, r4
 800bc7c:	3347      	adds	r3, #71	; 0x47
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	2301      	movs	r3, #1
 800bc84:	6163      	str	r3, [r4, #20]
 800bc86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bc88:	466a      	mov	r2, sp
 800bc8a:	ab01      	add	r3, sp, #4
 800bc8c:	f7ff ffc6 	bl	800bc1c <__swhatbuf_r>
 800bc90:	9900      	ldr	r1, [sp, #0]
 800bc92:	0007      	movs	r7, r0
 800bc94:	0028      	movs	r0, r5
 800bc96:	f000 fc39 	bl	800c50c <_malloc_r>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d108      	bne.n	800bcb0 <__smakebuf_r+0x44>
 800bc9e:	220c      	movs	r2, #12
 800bca0:	5ea3      	ldrsh	r3, [r4, r2]
 800bca2:	059a      	lsls	r2, r3, #22
 800bca4:	d4ef      	bmi.n	800bc86 <__smakebuf_r+0x1a>
 800bca6:	2203      	movs	r2, #3
 800bca8:	4393      	bics	r3, r2
 800bcaa:	431e      	orrs	r6, r3
 800bcac:	81a6      	strh	r6, [r4, #12]
 800bcae:	e7e4      	b.n	800bc7a <__smakebuf_r+0xe>
 800bcb0:	4b0f      	ldr	r3, [pc, #60]	; (800bcf0 <__smakebuf_r+0x84>)
 800bcb2:	62ab      	str	r3, [r5, #40]	; 0x28
 800bcb4:	2380      	movs	r3, #128	; 0x80
 800bcb6:	89a2      	ldrh	r2, [r4, #12]
 800bcb8:	6020      	str	r0, [r4, #0]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	81a3      	strh	r3, [r4, #12]
 800bcbe:	9b00      	ldr	r3, [sp, #0]
 800bcc0:	6120      	str	r0, [r4, #16]
 800bcc2:	6163      	str	r3, [r4, #20]
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00d      	beq.n	800bce6 <__smakebuf_r+0x7a>
 800bcca:	0028      	movs	r0, r5
 800bccc:	230e      	movs	r3, #14
 800bcce:	5ee1      	ldrsh	r1, [r4, r3]
 800bcd0:	f000 fea0 	bl	800ca14 <_isatty_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d006      	beq.n	800bce6 <__smakebuf_r+0x7a>
 800bcd8:	2203      	movs	r2, #3
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	4393      	bics	r3, r2
 800bcde:	001a      	movs	r2, r3
 800bce0:	2301      	movs	r3, #1
 800bce2:	4313      	orrs	r3, r2
 800bce4:	81a3      	strh	r3, [r4, #12]
 800bce6:	89a0      	ldrh	r0, [r4, #12]
 800bce8:	4307      	orrs	r7, r0
 800bcea:	81a7      	strh	r7, [r4, #12]
 800bcec:	e7cb      	b.n	800bc86 <__smakebuf_r+0x1a>
 800bcee:	46c0      	nop			; (mov r8, r8)
 800bcf0:	0800ba51 	.word	0x0800ba51

0800bcf4 <malloc>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <malloc+0x10>)
 800bcf8:	0001      	movs	r1, r0
 800bcfa:	6818      	ldr	r0, [r3, #0]
 800bcfc:	f000 fc06 	bl	800c50c <_malloc_r>
 800bd00:	bd10      	pop	{r4, pc}
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	20000010 	.word	0x20000010

0800bd08 <memchr>:
 800bd08:	b2c9      	uxtb	r1, r1
 800bd0a:	1882      	adds	r2, r0, r2
 800bd0c:	4290      	cmp	r0, r2
 800bd0e:	d101      	bne.n	800bd14 <memchr+0xc>
 800bd10:	2000      	movs	r0, #0
 800bd12:	4770      	bx	lr
 800bd14:	7803      	ldrb	r3, [r0, #0]
 800bd16:	428b      	cmp	r3, r1
 800bd18:	d0fb      	beq.n	800bd12 <memchr+0xa>
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	e7f6      	b.n	800bd0c <memchr+0x4>
	...

0800bd20 <_Balloc>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd24:	0006      	movs	r6, r0
 800bd26:	000c      	movs	r4, r1
 800bd28:	2d00      	cmp	r5, #0
 800bd2a:	d10e      	bne.n	800bd4a <_Balloc+0x2a>
 800bd2c:	2010      	movs	r0, #16
 800bd2e:	f7ff ffe1 	bl	800bcf4 <malloc>
 800bd32:	1e02      	subs	r2, r0, #0
 800bd34:	6270      	str	r0, [r6, #36]	; 0x24
 800bd36:	d104      	bne.n	800bd42 <_Balloc+0x22>
 800bd38:	2166      	movs	r1, #102	; 0x66
 800bd3a:	4b19      	ldr	r3, [pc, #100]	; (800bda0 <_Balloc+0x80>)
 800bd3c:	4819      	ldr	r0, [pc, #100]	; (800bda4 <_Balloc+0x84>)
 800bd3e:	f000 fe17 	bl	800c970 <__assert_func>
 800bd42:	6045      	str	r5, [r0, #4]
 800bd44:	6085      	str	r5, [r0, #8]
 800bd46:	6005      	str	r5, [r0, #0]
 800bd48:	60c5      	str	r5, [r0, #12]
 800bd4a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bd4c:	68eb      	ldr	r3, [r5, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d013      	beq.n	800bd7a <_Balloc+0x5a>
 800bd52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd54:	00a2      	lsls	r2, r4, #2
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	189b      	adds	r3, r3, r2
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d118      	bne.n	800bd92 <_Balloc+0x72>
 800bd60:	2101      	movs	r1, #1
 800bd62:	000d      	movs	r5, r1
 800bd64:	40a5      	lsls	r5, r4
 800bd66:	1d6a      	adds	r2, r5, #5
 800bd68:	0030      	movs	r0, r6
 800bd6a:	0092      	lsls	r2, r2, #2
 800bd6c:	f000 fb76 	bl	800c45c <_calloc_r>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d00c      	beq.n	800bd8e <_Balloc+0x6e>
 800bd74:	6044      	str	r4, [r0, #4]
 800bd76:	6085      	str	r5, [r0, #8]
 800bd78:	e00d      	b.n	800bd96 <_Balloc+0x76>
 800bd7a:	2221      	movs	r2, #33	; 0x21
 800bd7c:	2104      	movs	r1, #4
 800bd7e:	0030      	movs	r0, r6
 800bd80:	f000 fb6c 	bl	800c45c <_calloc_r>
 800bd84:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd86:	60e8      	str	r0, [r5, #12]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e1      	bne.n	800bd52 <_Balloc+0x32>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	6802      	ldr	r2, [r0, #0]
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	2300      	movs	r3, #0
 800bd98:	6103      	str	r3, [r0, #16]
 800bd9a:	60c3      	str	r3, [r0, #12]
 800bd9c:	e7f8      	b.n	800bd90 <_Balloc+0x70>
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	0800ce65 	.word	0x0800ce65
 800bda4:	0800cf4c 	.word	0x0800cf4c

0800bda8 <_Bfree>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bdac:	0005      	movs	r5, r0
 800bdae:	000c      	movs	r4, r1
 800bdb0:	2e00      	cmp	r6, #0
 800bdb2:	d10e      	bne.n	800bdd2 <_Bfree+0x2a>
 800bdb4:	2010      	movs	r0, #16
 800bdb6:	f7ff ff9d 	bl	800bcf4 <malloc>
 800bdba:	1e02      	subs	r2, r0, #0
 800bdbc:	6268      	str	r0, [r5, #36]	; 0x24
 800bdbe:	d104      	bne.n	800bdca <_Bfree+0x22>
 800bdc0:	218a      	movs	r1, #138	; 0x8a
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <_Bfree+0x40>)
 800bdc4:	4809      	ldr	r0, [pc, #36]	; (800bdec <_Bfree+0x44>)
 800bdc6:	f000 fdd3 	bl	800c970 <__assert_func>
 800bdca:	6046      	str	r6, [r0, #4]
 800bdcc:	6086      	str	r6, [r0, #8]
 800bdce:	6006      	str	r6, [r0, #0]
 800bdd0:	60c6      	str	r6, [r0, #12]
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	d007      	beq.n	800bde6 <_Bfree+0x3e>
 800bdd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdd8:	6862      	ldr	r2, [r4, #4]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	0092      	lsls	r2, r2, #2
 800bdde:	189b      	adds	r3, r3, r2
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	6022      	str	r2, [r4, #0]
 800bde4:	601c      	str	r4, [r3, #0]
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	0800ce65 	.word	0x0800ce65
 800bdec:	0800cf4c 	.word	0x0800cf4c

0800bdf0 <__multadd>:
 800bdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf2:	000e      	movs	r6, r1
 800bdf4:	9001      	str	r0, [sp, #4]
 800bdf6:	000c      	movs	r4, r1
 800bdf8:	001d      	movs	r5, r3
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	690f      	ldr	r7, [r1, #16]
 800bdfe:	3614      	adds	r6, #20
 800be00:	6833      	ldr	r3, [r6, #0]
 800be02:	3001      	adds	r0, #1
 800be04:	b299      	uxth	r1, r3
 800be06:	4351      	muls	r1, r2
 800be08:	0c1b      	lsrs	r3, r3, #16
 800be0a:	4353      	muls	r3, r2
 800be0c:	1949      	adds	r1, r1, r5
 800be0e:	0c0d      	lsrs	r5, r1, #16
 800be10:	195b      	adds	r3, r3, r5
 800be12:	0c1d      	lsrs	r5, r3, #16
 800be14:	b289      	uxth	r1, r1
 800be16:	041b      	lsls	r3, r3, #16
 800be18:	185b      	adds	r3, r3, r1
 800be1a:	c608      	stmia	r6!, {r3}
 800be1c:	4287      	cmp	r7, r0
 800be1e:	dcef      	bgt.n	800be00 <__multadd+0x10>
 800be20:	2d00      	cmp	r5, #0
 800be22:	d022      	beq.n	800be6a <__multadd+0x7a>
 800be24:	68a3      	ldr	r3, [r4, #8]
 800be26:	42bb      	cmp	r3, r7
 800be28:	dc19      	bgt.n	800be5e <__multadd+0x6e>
 800be2a:	6863      	ldr	r3, [r4, #4]
 800be2c:	9801      	ldr	r0, [sp, #4]
 800be2e:	1c59      	adds	r1, r3, #1
 800be30:	f7ff ff76 	bl	800bd20 <_Balloc>
 800be34:	1e06      	subs	r6, r0, #0
 800be36:	d105      	bne.n	800be44 <__multadd+0x54>
 800be38:	0002      	movs	r2, r0
 800be3a:	21b5      	movs	r1, #181	; 0xb5
 800be3c:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <__multadd+0x80>)
 800be3e:	480d      	ldr	r0, [pc, #52]	; (800be74 <__multadd+0x84>)
 800be40:	f000 fd96 	bl	800c970 <__assert_func>
 800be44:	0021      	movs	r1, r4
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	310c      	adds	r1, #12
 800be4a:	1c9a      	adds	r2, r3, #2
 800be4c:	0092      	lsls	r2, r2, #2
 800be4e:	300c      	adds	r0, #12
 800be50:	f7fd ffa2 	bl	8009d98 <memcpy>
 800be54:	0021      	movs	r1, r4
 800be56:	9801      	ldr	r0, [sp, #4]
 800be58:	f7ff ffa6 	bl	800bda8 <_Bfree>
 800be5c:	0034      	movs	r4, r6
 800be5e:	1d3b      	adds	r3, r7, #4
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	18e3      	adds	r3, r4, r3
 800be64:	605d      	str	r5, [r3, #4]
 800be66:	1c7b      	adds	r3, r7, #1
 800be68:	6123      	str	r3, [r4, #16]
 800be6a:	0020      	movs	r0, r4
 800be6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be6e:	46c0      	nop			; (mov r8, r8)
 800be70:	0800cedb 	.word	0x0800cedb
 800be74:	0800cf4c 	.word	0x0800cf4c

0800be78 <__hi0bits>:
 800be78:	0003      	movs	r3, r0
 800be7a:	0c02      	lsrs	r2, r0, #16
 800be7c:	2000      	movs	r0, #0
 800be7e:	4282      	cmp	r2, r0
 800be80:	d101      	bne.n	800be86 <__hi0bits+0xe>
 800be82:	041b      	lsls	r3, r3, #16
 800be84:	3010      	adds	r0, #16
 800be86:	0e1a      	lsrs	r2, r3, #24
 800be88:	d101      	bne.n	800be8e <__hi0bits+0x16>
 800be8a:	3008      	adds	r0, #8
 800be8c:	021b      	lsls	r3, r3, #8
 800be8e:	0f1a      	lsrs	r2, r3, #28
 800be90:	d101      	bne.n	800be96 <__hi0bits+0x1e>
 800be92:	3004      	adds	r0, #4
 800be94:	011b      	lsls	r3, r3, #4
 800be96:	0f9a      	lsrs	r2, r3, #30
 800be98:	d101      	bne.n	800be9e <__hi0bits+0x26>
 800be9a:	3002      	adds	r0, #2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	db03      	blt.n	800beaa <__hi0bits+0x32>
 800bea2:	3001      	adds	r0, #1
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	d400      	bmi.n	800beaa <__hi0bits+0x32>
 800bea8:	2020      	movs	r0, #32
 800beaa:	4770      	bx	lr

0800beac <__lo0bits>:
 800beac:	6803      	ldr	r3, [r0, #0]
 800beae:	0002      	movs	r2, r0
 800beb0:	2107      	movs	r1, #7
 800beb2:	0018      	movs	r0, r3
 800beb4:	4008      	ands	r0, r1
 800beb6:	420b      	tst	r3, r1
 800beb8:	d00d      	beq.n	800bed6 <__lo0bits+0x2a>
 800beba:	3906      	subs	r1, #6
 800bebc:	2000      	movs	r0, #0
 800bebe:	420b      	tst	r3, r1
 800bec0:	d105      	bne.n	800bece <__lo0bits+0x22>
 800bec2:	3002      	adds	r0, #2
 800bec4:	4203      	tst	r3, r0
 800bec6:	d003      	beq.n	800bed0 <__lo0bits+0x24>
 800bec8:	40cb      	lsrs	r3, r1
 800beca:	0008      	movs	r0, r1
 800becc:	6013      	str	r3, [r2, #0]
 800bece:	4770      	bx	lr
 800bed0:	089b      	lsrs	r3, r3, #2
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	e7fb      	b.n	800bece <__lo0bits+0x22>
 800bed6:	b299      	uxth	r1, r3
 800bed8:	2900      	cmp	r1, #0
 800beda:	d101      	bne.n	800bee0 <__lo0bits+0x34>
 800bedc:	2010      	movs	r0, #16
 800bede:	0c1b      	lsrs	r3, r3, #16
 800bee0:	b2d9      	uxtb	r1, r3
 800bee2:	2900      	cmp	r1, #0
 800bee4:	d101      	bne.n	800beea <__lo0bits+0x3e>
 800bee6:	3008      	adds	r0, #8
 800bee8:	0a1b      	lsrs	r3, r3, #8
 800beea:	0719      	lsls	r1, r3, #28
 800beec:	d101      	bne.n	800bef2 <__lo0bits+0x46>
 800beee:	3004      	adds	r0, #4
 800bef0:	091b      	lsrs	r3, r3, #4
 800bef2:	0799      	lsls	r1, r3, #30
 800bef4:	d101      	bne.n	800befa <__lo0bits+0x4e>
 800bef6:	3002      	adds	r0, #2
 800bef8:	089b      	lsrs	r3, r3, #2
 800befa:	07d9      	lsls	r1, r3, #31
 800befc:	d4e9      	bmi.n	800bed2 <__lo0bits+0x26>
 800befe:	3001      	adds	r0, #1
 800bf00:	085b      	lsrs	r3, r3, #1
 800bf02:	d1e6      	bne.n	800bed2 <__lo0bits+0x26>
 800bf04:	2020      	movs	r0, #32
 800bf06:	e7e2      	b.n	800bece <__lo0bits+0x22>

0800bf08 <__i2b>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	000c      	movs	r4, r1
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	f7ff ff07 	bl	800bd20 <_Balloc>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d106      	bne.n	800bf24 <__i2b+0x1c>
 800bf16:	21a0      	movs	r1, #160	; 0xa0
 800bf18:	0002      	movs	r2, r0
 800bf1a:	4b04      	ldr	r3, [pc, #16]	; (800bf2c <__i2b+0x24>)
 800bf1c:	4804      	ldr	r0, [pc, #16]	; (800bf30 <__i2b+0x28>)
 800bf1e:	0049      	lsls	r1, r1, #1
 800bf20:	f000 fd26 	bl	800c970 <__assert_func>
 800bf24:	2301      	movs	r3, #1
 800bf26:	6144      	str	r4, [r0, #20]
 800bf28:	6103      	str	r3, [r0, #16]
 800bf2a:	bd10      	pop	{r4, pc}
 800bf2c:	0800cedb 	.word	0x0800cedb
 800bf30:	0800cf4c 	.word	0x0800cf4c

0800bf34 <__multiply>:
 800bf34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf36:	690b      	ldr	r3, [r1, #16]
 800bf38:	0014      	movs	r4, r2
 800bf3a:	6912      	ldr	r2, [r2, #16]
 800bf3c:	000d      	movs	r5, r1
 800bf3e:	b089      	sub	sp, #36	; 0x24
 800bf40:	4293      	cmp	r3, r2
 800bf42:	da01      	bge.n	800bf48 <__multiply+0x14>
 800bf44:	0025      	movs	r5, r4
 800bf46:	000c      	movs	r4, r1
 800bf48:	692f      	ldr	r7, [r5, #16]
 800bf4a:	6926      	ldr	r6, [r4, #16]
 800bf4c:	6869      	ldr	r1, [r5, #4]
 800bf4e:	19bb      	adds	r3, r7, r6
 800bf50:	9302      	str	r3, [sp, #8]
 800bf52:	68ab      	ldr	r3, [r5, #8]
 800bf54:	19ba      	adds	r2, r7, r6
 800bf56:	4293      	cmp	r3, r2
 800bf58:	da00      	bge.n	800bf5c <__multiply+0x28>
 800bf5a:	3101      	adds	r1, #1
 800bf5c:	f7ff fee0 	bl	800bd20 <_Balloc>
 800bf60:	9001      	str	r0, [sp, #4]
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d106      	bne.n	800bf74 <__multiply+0x40>
 800bf66:	215e      	movs	r1, #94	; 0x5e
 800bf68:	0002      	movs	r2, r0
 800bf6a:	4b48      	ldr	r3, [pc, #288]	; (800c08c <__multiply+0x158>)
 800bf6c:	4848      	ldr	r0, [pc, #288]	; (800c090 <__multiply+0x15c>)
 800bf6e:	31ff      	adds	r1, #255	; 0xff
 800bf70:	f000 fcfe 	bl	800c970 <__assert_func>
 800bf74:	9b01      	ldr	r3, [sp, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	3314      	adds	r3, #20
 800bf7a:	469c      	mov	ip, r3
 800bf7c:	19bb      	adds	r3, r7, r6
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4463      	add	r3, ip
 800bf82:	9303      	str	r3, [sp, #12]
 800bf84:	4663      	mov	r3, ip
 800bf86:	9903      	ldr	r1, [sp, #12]
 800bf88:	428b      	cmp	r3, r1
 800bf8a:	d32c      	bcc.n	800bfe6 <__multiply+0xb2>
 800bf8c:	002b      	movs	r3, r5
 800bf8e:	0022      	movs	r2, r4
 800bf90:	3314      	adds	r3, #20
 800bf92:	00bf      	lsls	r7, r7, #2
 800bf94:	3214      	adds	r2, #20
 800bf96:	9306      	str	r3, [sp, #24]
 800bf98:	00b6      	lsls	r6, r6, #2
 800bf9a:	19db      	adds	r3, r3, r7
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	1993      	adds	r3, r2, r6
 800bfa0:	9307      	str	r3, [sp, #28]
 800bfa2:	2304      	movs	r3, #4
 800bfa4:	9305      	str	r3, [sp, #20]
 800bfa6:	002b      	movs	r3, r5
 800bfa8:	9904      	ldr	r1, [sp, #16]
 800bfaa:	3315      	adds	r3, #21
 800bfac:	9200      	str	r2, [sp, #0]
 800bfae:	4299      	cmp	r1, r3
 800bfb0:	d305      	bcc.n	800bfbe <__multiply+0x8a>
 800bfb2:	1b4b      	subs	r3, r1, r5
 800bfb4:	3b15      	subs	r3, #21
 800bfb6:	089b      	lsrs	r3, r3, #2
 800bfb8:	3301      	adds	r3, #1
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	9b07      	ldr	r3, [sp, #28]
 800bfc0:	9a00      	ldr	r2, [sp, #0]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d311      	bcc.n	800bfea <__multiply+0xb6>
 800bfc6:	9b02      	ldr	r3, [sp, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dd06      	ble.n	800bfda <__multiply+0xa6>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	3b04      	subs	r3, #4
 800bfd0:	9303      	str	r3, [sp, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d054      	beq.n	800c084 <__multiply+0x150>
 800bfda:	9b01      	ldr	r3, [sp, #4]
 800bfdc:	9a02      	ldr	r2, [sp, #8]
 800bfde:	0018      	movs	r0, r3
 800bfe0:	611a      	str	r2, [r3, #16]
 800bfe2:	b009      	add	sp, #36	; 0x24
 800bfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe6:	c304      	stmia	r3!, {r2}
 800bfe8:	e7cd      	b.n	800bf86 <__multiply+0x52>
 800bfea:	9b00      	ldr	r3, [sp, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	b298      	uxth	r0, r3
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d01c      	beq.n	800c02e <__multiply+0xfa>
 800bff4:	4667      	mov	r7, ip
 800bff6:	2400      	movs	r4, #0
 800bff8:	9e06      	ldr	r6, [sp, #24]
 800bffa:	ce02      	ldmia	r6!, {r1}
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	b28b      	uxth	r3, r1
 800c000:	4343      	muls	r3, r0
 800c002:	0c09      	lsrs	r1, r1, #16
 800c004:	4341      	muls	r1, r0
 800c006:	b292      	uxth	r2, r2
 800c008:	189b      	adds	r3, r3, r2
 800c00a:	191b      	adds	r3, r3, r4
 800c00c:	000c      	movs	r4, r1
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	0c11      	lsrs	r1, r2, #16
 800c012:	1861      	adds	r1, r4, r1
 800c014:	0c1c      	lsrs	r4, r3, #16
 800c016:	1909      	adds	r1, r1, r4
 800c018:	0c0c      	lsrs	r4, r1, #16
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	0409      	lsls	r1, r1, #16
 800c01e:	430b      	orrs	r3, r1
 800c020:	c708      	stmia	r7!, {r3}
 800c022:	9b04      	ldr	r3, [sp, #16]
 800c024:	42b3      	cmp	r3, r6
 800c026:	d8e8      	bhi.n	800bffa <__multiply+0xc6>
 800c028:	4663      	mov	r3, ip
 800c02a:	9a05      	ldr	r2, [sp, #20]
 800c02c:	509c      	str	r4, [r3, r2]
 800c02e:	9b00      	ldr	r3, [sp, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	0c1e      	lsrs	r6, r3, #16
 800c034:	d020      	beq.n	800c078 <__multiply+0x144>
 800c036:	4663      	mov	r3, ip
 800c038:	002c      	movs	r4, r5
 800c03a:	4660      	mov	r0, ip
 800c03c:	2700      	movs	r7, #0
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3414      	adds	r4, #20
 800c042:	6822      	ldr	r2, [r4, #0]
 800c044:	b29b      	uxth	r3, r3
 800c046:	b291      	uxth	r1, r2
 800c048:	4371      	muls	r1, r6
 800c04a:	6802      	ldr	r2, [r0, #0]
 800c04c:	0c12      	lsrs	r2, r2, #16
 800c04e:	1889      	adds	r1, r1, r2
 800c050:	19cf      	adds	r7, r1, r7
 800c052:	0439      	lsls	r1, r7, #16
 800c054:	430b      	orrs	r3, r1
 800c056:	6003      	str	r3, [r0, #0]
 800c058:	cc02      	ldmia	r4!, {r1}
 800c05a:	6843      	ldr	r3, [r0, #4]
 800c05c:	0c09      	lsrs	r1, r1, #16
 800c05e:	4371      	muls	r1, r6
 800c060:	b29b      	uxth	r3, r3
 800c062:	0c3f      	lsrs	r7, r7, #16
 800c064:	18cb      	adds	r3, r1, r3
 800c066:	9a04      	ldr	r2, [sp, #16]
 800c068:	19db      	adds	r3, r3, r7
 800c06a:	0c1f      	lsrs	r7, r3, #16
 800c06c:	3004      	adds	r0, #4
 800c06e:	42a2      	cmp	r2, r4
 800c070:	d8e7      	bhi.n	800c042 <__multiply+0x10e>
 800c072:	4662      	mov	r2, ip
 800c074:	9905      	ldr	r1, [sp, #20]
 800c076:	5053      	str	r3, [r2, r1]
 800c078:	9b00      	ldr	r3, [sp, #0]
 800c07a:	3304      	adds	r3, #4
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	2304      	movs	r3, #4
 800c080:	449c      	add	ip, r3
 800c082:	e79c      	b.n	800bfbe <__multiply+0x8a>
 800c084:	9b02      	ldr	r3, [sp, #8]
 800c086:	3b01      	subs	r3, #1
 800c088:	9302      	str	r3, [sp, #8]
 800c08a:	e79c      	b.n	800bfc6 <__multiply+0x92>
 800c08c:	0800cedb 	.word	0x0800cedb
 800c090:	0800cf4c 	.word	0x0800cf4c

0800c094 <__pow5mult>:
 800c094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c096:	2303      	movs	r3, #3
 800c098:	0015      	movs	r5, r2
 800c09a:	0007      	movs	r7, r0
 800c09c:	000e      	movs	r6, r1
 800c09e:	401a      	ands	r2, r3
 800c0a0:	421d      	tst	r5, r3
 800c0a2:	d008      	beq.n	800c0b6 <__pow5mult+0x22>
 800c0a4:	4925      	ldr	r1, [pc, #148]	; (800c13c <__pow5mult+0xa8>)
 800c0a6:	3a01      	subs	r2, #1
 800c0a8:	0092      	lsls	r2, r2, #2
 800c0aa:	5852      	ldr	r2, [r2, r1]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	0031      	movs	r1, r6
 800c0b0:	f7ff fe9e 	bl	800bdf0 <__multadd>
 800c0b4:	0006      	movs	r6, r0
 800c0b6:	10ad      	asrs	r5, r5, #2
 800c0b8:	d03d      	beq.n	800c136 <__pow5mult+0xa2>
 800c0ba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	d10f      	bne.n	800c0e0 <__pow5mult+0x4c>
 800c0c0:	2010      	movs	r0, #16
 800c0c2:	f7ff fe17 	bl	800bcf4 <malloc>
 800c0c6:	1e02      	subs	r2, r0, #0
 800c0c8:	6278      	str	r0, [r7, #36]	; 0x24
 800c0ca:	d105      	bne.n	800c0d8 <__pow5mult+0x44>
 800c0cc:	21d7      	movs	r1, #215	; 0xd7
 800c0ce:	4b1c      	ldr	r3, [pc, #112]	; (800c140 <__pow5mult+0xac>)
 800c0d0:	481c      	ldr	r0, [pc, #112]	; (800c144 <__pow5mult+0xb0>)
 800c0d2:	0049      	lsls	r1, r1, #1
 800c0d4:	f000 fc4c 	bl	800c970 <__assert_func>
 800c0d8:	6044      	str	r4, [r0, #4]
 800c0da:	6084      	str	r4, [r0, #8]
 800c0dc:	6004      	str	r4, [r0, #0]
 800c0de:	60c4      	str	r4, [r0, #12]
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	689c      	ldr	r4, [r3, #8]
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	2c00      	cmp	r4, #0
 800c0e8:	d108      	bne.n	800c0fc <__pow5mult+0x68>
 800c0ea:	0038      	movs	r0, r7
 800c0ec:	4916      	ldr	r1, [pc, #88]	; (800c148 <__pow5mult+0xb4>)
 800c0ee:	f7ff ff0b 	bl	800bf08 <__i2b>
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	0004      	movs	r4, r0
 800c0f6:	6098      	str	r0, [r3, #8]
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	6003      	str	r3, [r0, #0]
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	421d      	tst	r5, r3
 800c100:	d00a      	beq.n	800c118 <__pow5mult+0x84>
 800c102:	0031      	movs	r1, r6
 800c104:	0022      	movs	r2, r4
 800c106:	0038      	movs	r0, r7
 800c108:	f7ff ff14 	bl	800bf34 <__multiply>
 800c10c:	0031      	movs	r1, r6
 800c10e:	9001      	str	r0, [sp, #4]
 800c110:	0038      	movs	r0, r7
 800c112:	f7ff fe49 	bl	800bda8 <_Bfree>
 800c116:	9e01      	ldr	r6, [sp, #4]
 800c118:	106d      	asrs	r5, r5, #1
 800c11a:	d00c      	beq.n	800c136 <__pow5mult+0xa2>
 800c11c:	6820      	ldr	r0, [r4, #0]
 800c11e:	2800      	cmp	r0, #0
 800c120:	d107      	bne.n	800c132 <__pow5mult+0x9e>
 800c122:	0022      	movs	r2, r4
 800c124:	0021      	movs	r1, r4
 800c126:	0038      	movs	r0, r7
 800c128:	f7ff ff04 	bl	800bf34 <__multiply>
 800c12c:	2300      	movs	r3, #0
 800c12e:	6020      	str	r0, [r4, #0]
 800c130:	6003      	str	r3, [r0, #0]
 800c132:	0004      	movs	r4, r0
 800c134:	e7e2      	b.n	800c0fc <__pow5mult+0x68>
 800c136:	0030      	movs	r0, r6
 800c138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c13a:	46c0      	nop			; (mov r8, r8)
 800c13c:	0800d0a0 	.word	0x0800d0a0
 800c140:	0800ce65 	.word	0x0800ce65
 800c144:	0800cf4c 	.word	0x0800cf4c
 800c148:	00000271 	.word	0x00000271

0800c14c <__lshift>:
 800c14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14e:	000c      	movs	r4, r1
 800c150:	0017      	movs	r7, r2
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	1155      	asrs	r5, r2, #5
 800c156:	b087      	sub	sp, #28
 800c158:	18eb      	adds	r3, r5, r3
 800c15a:	9302      	str	r3, [sp, #8]
 800c15c:	3301      	adds	r3, #1
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	6849      	ldr	r1, [r1, #4]
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	9004      	str	r0, [sp, #16]
 800c166:	9a01      	ldr	r2, [sp, #4]
 800c168:	4293      	cmp	r3, r2
 800c16a:	db11      	blt.n	800c190 <__lshift+0x44>
 800c16c:	9804      	ldr	r0, [sp, #16]
 800c16e:	f7ff fdd7 	bl	800bd20 <_Balloc>
 800c172:	0002      	movs	r2, r0
 800c174:	2300      	movs	r3, #0
 800c176:	3214      	adds	r2, #20
 800c178:	0006      	movs	r6, r0
 800c17a:	0011      	movs	r1, r2
 800c17c:	9203      	str	r2, [sp, #12]
 800c17e:	4298      	cmp	r0, r3
 800c180:	d10d      	bne.n	800c19e <__lshift+0x52>
 800c182:	21da      	movs	r1, #218	; 0xda
 800c184:	0002      	movs	r2, r0
 800c186:	4b27      	ldr	r3, [pc, #156]	; (800c224 <__lshift+0xd8>)
 800c188:	4827      	ldr	r0, [pc, #156]	; (800c228 <__lshift+0xdc>)
 800c18a:	31ff      	adds	r1, #255	; 0xff
 800c18c:	f000 fbf0 	bl	800c970 <__assert_func>
 800c190:	3101      	adds	r1, #1
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	e7e7      	b.n	800c166 <__lshift+0x1a>
 800c196:	2200      	movs	r2, #0
 800c198:	0098      	lsls	r0, r3, #2
 800c19a:	500a      	str	r2, [r1, r0]
 800c19c:	3301      	adds	r3, #1
 800c19e:	42ab      	cmp	r3, r5
 800c1a0:	dbf9      	blt.n	800c196 <__lshift+0x4a>
 800c1a2:	43eb      	mvns	r3, r5
 800c1a4:	17db      	asrs	r3, r3, #31
 800c1a6:	401d      	ands	r5, r3
 800c1a8:	9b03      	ldr	r3, [sp, #12]
 800c1aa:	00ad      	lsls	r5, r5, #2
 800c1ac:	211f      	movs	r1, #31
 800c1ae:	0038      	movs	r0, r7
 800c1b0:	195d      	adds	r5, r3, r5
 800c1b2:	0023      	movs	r3, r4
 800c1b4:	6922      	ldr	r2, [r4, #16]
 800c1b6:	3314      	adds	r3, #20
 800c1b8:	0092      	lsls	r2, r2, #2
 800c1ba:	4008      	ands	r0, r1
 800c1bc:	4684      	mov	ip, r0
 800c1be:	189a      	adds	r2, r3, r2
 800c1c0:	420f      	tst	r7, r1
 800c1c2:	d02a      	beq.n	800c21a <__lshift+0xce>
 800c1c4:	3101      	adds	r1, #1
 800c1c6:	1a09      	subs	r1, r1, r0
 800c1c8:	9105      	str	r1, [sp, #20]
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	9503      	str	r5, [sp, #12]
 800c1ce:	4667      	mov	r7, ip
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	40b8      	lsls	r0, r7
 800c1d4:	4301      	orrs	r1, r0
 800c1d6:	9803      	ldr	r0, [sp, #12]
 800c1d8:	c002      	stmia	r0!, {r1}
 800c1da:	cb02      	ldmia	r3!, {r1}
 800c1dc:	9003      	str	r0, [sp, #12]
 800c1de:	9805      	ldr	r0, [sp, #20]
 800c1e0:	40c1      	lsrs	r1, r0
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d8f3      	bhi.n	800c1ce <__lshift+0x82>
 800c1e6:	0020      	movs	r0, r4
 800c1e8:	3015      	adds	r0, #21
 800c1ea:	2304      	movs	r3, #4
 800c1ec:	4282      	cmp	r2, r0
 800c1ee:	d304      	bcc.n	800c1fa <__lshift+0xae>
 800c1f0:	1b13      	subs	r3, r2, r4
 800c1f2:	3b15      	subs	r3, #21
 800c1f4:	089b      	lsrs	r3, r3, #2
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	50e9      	str	r1, [r5, r3]
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	d002      	beq.n	800c206 <__lshift+0xba>
 800c200:	9b02      	ldr	r3, [sp, #8]
 800c202:	3302      	adds	r3, #2
 800c204:	9301      	str	r3, [sp, #4]
 800c206:	9b01      	ldr	r3, [sp, #4]
 800c208:	9804      	ldr	r0, [sp, #16]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	0021      	movs	r1, r4
 800c20e:	6133      	str	r3, [r6, #16]
 800c210:	f7ff fdca 	bl	800bda8 <_Bfree>
 800c214:	0030      	movs	r0, r6
 800c216:	b007      	add	sp, #28
 800c218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c21a:	cb02      	ldmia	r3!, {r1}
 800c21c:	c502      	stmia	r5!, {r1}
 800c21e:	429a      	cmp	r2, r3
 800c220:	d8fb      	bhi.n	800c21a <__lshift+0xce>
 800c222:	e7f0      	b.n	800c206 <__lshift+0xba>
 800c224:	0800cedb 	.word	0x0800cedb
 800c228:	0800cf4c 	.word	0x0800cf4c

0800c22c <__mcmp>:
 800c22c:	6902      	ldr	r2, [r0, #16]
 800c22e:	690b      	ldr	r3, [r1, #16]
 800c230:	b530      	push	{r4, r5, lr}
 800c232:	0004      	movs	r4, r0
 800c234:	1ad0      	subs	r0, r2, r3
 800c236:	429a      	cmp	r2, r3
 800c238:	d10d      	bne.n	800c256 <__mcmp+0x2a>
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	3414      	adds	r4, #20
 800c23e:	3114      	adds	r1, #20
 800c240:	18e2      	adds	r2, r4, r3
 800c242:	18c9      	adds	r1, r1, r3
 800c244:	3a04      	subs	r2, #4
 800c246:	3904      	subs	r1, #4
 800c248:	6815      	ldr	r5, [r2, #0]
 800c24a:	680b      	ldr	r3, [r1, #0]
 800c24c:	429d      	cmp	r5, r3
 800c24e:	d003      	beq.n	800c258 <__mcmp+0x2c>
 800c250:	2001      	movs	r0, #1
 800c252:	429d      	cmp	r5, r3
 800c254:	d303      	bcc.n	800c25e <__mcmp+0x32>
 800c256:	bd30      	pop	{r4, r5, pc}
 800c258:	4294      	cmp	r4, r2
 800c25a:	d3f3      	bcc.n	800c244 <__mcmp+0x18>
 800c25c:	e7fb      	b.n	800c256 <__mcmp+0x2a>
 800c25e:	4240      	negs	r0, r0
 800c260:	e7f9      	b.n	800c256 <__mcmp+0x2a>
	...

0800c264 <__mdiff>:
 800c264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c266:	000e      	movs	r6, r1
 800c268:	0007      	movs	r7, r0
 800c26a:	0011      	movs	r1, r2
 800c26c:	0030      	movs	r0, r6
 800c26e:	b087      	sub	sp, #28
 800c270:	0014      	movs	r4, r2
 800c272:	f7ff ffdb 	bl	800c22c <__mcmp>
 800c276:	1e05      	subs	r5, r0, #0
 800c278:	d110      	bne.n	800c29c <__mdiff+0x38>
 800c27a:	0001      	movs	r1, r0
 800c27c:	0038      	movs	r0, r7
 800c27e:	f7ff fd4f 	bl	800bd20 <_Balloc>
 800c282:	1e02      	subs	r2, r0, #0
 800c284:	d104      	bne.n	800c290 <__mdiff+0x2c>
 800c286:	4b40      	ldr	r3, [pc, #256]	; (800c388 <__mdiff+0x124>)
 800c288:	4940      	ldr	r1, [pc, #256]	; (800c38c <__mdiff+0x128>)
 800c28a:	4841      	ldr	r0, [pc, #260]	; (800c390 <__mdiff+0x12c>)
 800c28c:	f000 fb70 	bl	800c970 <__assert_func>
 800c290:	2301      	movs	r3, #1
 800c292:	6145      	str	r5, [r0, #20]
 800c294:	6103      	str	r3, [r0, #16]
 800c296:	0010      	movs	r0, r2
 800c298:	b007      	add	sp, #28
 800c29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c29c:	2301      	movs	r3, #1
 800c29e:	9301      	str	r3, [sp, #4]
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	db04      	blt.n	800c2ae <__mdiff+0x4a>
 800c2a4:	0023      	movs	r3, r4
 800c2a6:	0034      	movs	r4, r6
 800c2a8:	001e      	movs	r6, r3
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	0038      	movs	r0, r7
 800c2b0:	6861      	ldr	r1, [r4, #4]
 800c2b2:	f7ff fd35 	bl	800bd20 <_Balloc>
 800c2b6:	1e02      	subs	r2, r0, #0
 800c2b8:	d103      	bne.n	800c2c2 <__mdiff+0x5e>
 800c2ba:	2190      	movs	r1, #144	; 0x90
 800c2bc:	4b32      	ldr	r3, [pc, #200]	; (800c388 <__mdiff+0x124>)
 800c2be:	0089      	lsls	r1, r1, #2
 800c2c0:	e7e3      	b.n	800c28a <__mdiff+0x26>
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	2700      	movs	r7, #0
 800c2c6:	60c3      	str	r3, [r0, #12]
 800c2c8:	6920      	ldr	r0, [r4, #16]
 800c2ca:	3414      	adds	r4, #20
 800c2cc:	9401      	str	r4, [sp, #4]
 800c2ce:	9b01      	ldr	r3, [sp, #4]
 800c2d0:	0084      	lsls	r4, r0, #2
 800c2d2:	191b      	adds	r3, r3, r4
 800c2d4:	0034      	movs	r4, r6
 800c2d6:	9302      	str	r3, [sp, #8]
 800c2d8:	6933      	ldr	r3, [r6, #16]
 800c2da:	3414      	adds	r4, #20
 800c2dc:	0099      	lsls	r1, r3, #2
 800c2de:	1863      	adds	r3, r4, r1
 800c2e0:	9303      	str	r3, [sp, #12]
 800c2e2:	0013      	movs	r3, r2
 800c2e4:	3314      	adds	r3, #20
 800c2e6:	469c      	mov	ip, r3
 800c2e8:	9305      	str	r3, [sp, #20]
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	cc02      	ldmia	r4!, {r1}
 800c2f2:	cb20      	ldmia	r3!, {r5}
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	b2ab      	uxth	r3, r5
 800c2f8:	19df      	adds	r7, r3, r7
 800c2fa:	b28b      	uxth	r3, r1
 800c2fc:	1afb      	subs	r3, r7, r3
 800c2fe:	0c2d      	lsrs	r5, r5, #16
 800c300:	0c09      	lsrs	r1, r1, #16
 800c302:	1a69      	subs	r1, r5, r1
 800c304:	141d      	asrs	r5, r3, #16
 800c306:	1949      	adds	r1, r1, r5
 800c308:	140f      	asrs	r7, r1, #16
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	0409      	lsls	r1, r1, #16
 800c30e:	430b      	orrs	r3, r1
 800c310:	4661      	mov	r1, ip
 800c312:	c108      	stmia	r1!, {r3}
 800c314:	9b03      	ldr	r3, [sp, #12]
 800c316:	468c      	mov	ip, r1
 800c318:	42a3      	cmp	r3, r4
 800c31a:	d8e8      	bhi.n	800c2ee <__mdiff+0x8a>
 800c31c:	0031      	movs	r1, r6
 800c31e:	9c03      	ldr	r4, [sp, #12]
 800c320:	3115      	adds	r1, #21
 800c322:	2304      	movs	r3, #4
 800c324:	428c      	cmp	r4, r1
 800c326:	d304      	bcc.n	800c332 <__mdiff+0xce>
 800c328:	1ba3      	subs	r3, r4, r6
 800c32a:	3b15      	subs	r3, #21
 800c32c:	089b      	lsrs	r3, r3, #2
 800c32e:	3301      	adds	r3, #1
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	9901      	ldr	r1, [sp, #4]
 800c334:	18cc      	adds	r4, r1, r3
 800c336:	9905      	ldr	r1, [sp, #20]
 800c338:	0026      	movs	r6, r4
 800c33a:	18cb      	adds	r3, r1, r3
 800c33c:	469c      	mov	ip, r3
 800c33e:	9902      	ldr	r1, [sp, #8]
 800c340:	428e      	cmp	r6, r1
 800c342:	d310      	bcc.n	800c366 <__mdiff+0x102>
 800c344:	9e02      	ldr	r6, [sp, #8]
 800c346:	1ee5      	subs	r5, r4, #3
 800c348:	2100      	movs	r1, #0
 800c34a:	42ae      	cmp	r6, r5
 800c34c:	d304      	bcc.n	800c358 <__mdiff+0xf4>
 800c34e:	0031      	movs	r1, r6
 800c350:	3103      	adds	r1, #3
 800c352:	1b09      	subs	r1, r1, r4
 800c354:	0889      	lsrs	r1, r1, #2
 800c356:	0089      	lsls	r1, r1, #2
 800c358:	185b      	adds	r3, r3, r1
 800c35a:	3b04      	subs	r3, #4
 800c35c:	6819      	ldr	r1, [r3, #0]
 800c35e:	2900      	cmp	r1, #0
 800c360:	d00f      	beq.n	800c382 <__mdiff+0x11e>
 800c362:	6110      	str	r0, [r2, #16]
 800c364:	e797      	b.n	800c296 <__mdiff+0x32>
 800c366:	ce02      	ldmia	r6!, {r1}
 800c368:	b28d      	uxth	r5, r1
 800c36a:	19ed      	adds	r5, r5, r7
 800c36c:	0c0f      	lsrs	r7, r1, #16
 800c36e:	1429      	asrs	r1, r5, #16
 800c370:	1879      	adds	r1, r7, r1
 800c372:	140f      	asrs	r7, r1, #16
 800c374:	b2ad      	uxth	r5, r5
 800c376:	0409      	lsls	r1, r1, #16
 800c378:	430d      	orrs	r5, r1
 800c37a:	4661      	mov	r1, ip
 800c37c:	c120      	stmia	r1!, {r5}
 800c37e:	468c      	mov	ip, r1
 800c380:	e7dd      	b.n	800c33e <__mdiff+0xda>
 800c382:	3801      	subs	r0, #1
 800c384:	e7e9      	b.n	800c35a <__mdiff+0xf6>
 800c386:	46c0      	nop			; (mov r8, r8)
 800c388:	0800cedb 	.word	0x0800cedb
 800c38c:	00000232 	.word	0x00000232
 800c390:	0800cf4c 	.word	0x0800cf4c

0800c394 <__d2b>:
 800c394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c396:	2101      	movs	r1, #1
 800c398:	0014      	movs	r4, r2
 800c39a:	001e      	movs	r6, r3
 800c39c:	9f08      	ldr	r7, [sp, #32]
 800c39e:	f7ff fcbf 	bl	800bd20 <_Balloc>
 800c3a2:	1e05      	subs	r5, r0, #0
 800c3a4:	d105      	bne.n	800c3b2 <__d2b+0x1e>
 800c3a6:	0002      	movs	r2, r0
 800c3a8:	4b26      	ldr	r3, [pc, #152]	; (800c444 <__d2b+0xb0>)
 800c3aa:	4927      	ldr	r1, [pc, #156]	; (800c448 <__d2b+0xb4>)
 800c3ac:	4827      	ldr	r0, [pc, #156]	; (800c44c <__d2b+0xb8>)
 800c3ae:	f000 fadf 	bl	800c970 <__assert_func>
 800c3b2:	0333      	lsls	r3, r6, #12
 800c3b4:	0076      	lsls	r6, r6, #1
 800c3b6:	0b1b      	lsrs	r3, r3, #12
 800c3b8:	0d76      	lsrs	r6, r6, #21
 800c3ba:	d124      	bne.n	800c406 <__d2b+0x72>
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	2c00      	cmp	r4, #0
 800c3c0:	d027      	beq.n	800c412 <__d2b+0x7e>
 800c3c2:	4668      	mov	r0, sp
 800c3c4:	9400      	str	r4, [sp, #0]
 800c3c6:	f7ff fd71 	bl	800beac <__lo0bits>
 800c3ca:	9c00      	ldr	r4, [sp, #0]
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d01e      	beq.n	800c40e <__d2b+0x7a>
 800c3d0:	9b01      	ldr	r3, [sp, #4]
 800c3d2:	2120      	movs	r1, #32
 800c3d4:	001a      	movs	r2, r3
 800c3d6:	1a09      	subs	r1, r1, r0
 800c3d8:	408a      	lsls	r2, r1
 800c3da:	40c3      	lsrs	r3, r0
 800c3dc:	4322      	orrs	r2, r4
 800c3de:	616a      	str	r2, [r5, #20]
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	9c01      	ldr	r4, [sp, #4]
 800c3e4:	61ac      	str	r4, [r5, #24]
 800c3e6:	1e63      	subs	r3, r4, #1
 800c3e8:	419c      	sbcs	r4, r3
 800c3ea:	3401      	adds	r4, #1
 800c3ec:	612c      	str	r4, [r5, #16]
 800c3ee:	2e00      	cmp	r6, #0
 800c3f0:	d018      	beq.n	800c424 <__d2b+0x90>
 800c3f2:	4b17      	ldr	r3, [pc, #92]	; (800c450 <__d2b+0xbc>)
 800c3f4:	18f6      	adds	r6, r6, r3
 800c3f6:	2335      	movs	r3, #53	; 0x35
 800c3f8:	1836      	adds	r6, r6, r0
 800c3fa:	1a18      	subs	r0, r3, r0
 800c3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fe:	603e      	str	r6, [r7, #0]
 800c400:	6018      	str	r0, [r3, #0]
 800c402:	0028      	movs	r0, r5
 800c404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c406:	2280      	movs	r2, #128	; 0x80
 800c408:	0352      	lsls	r2, r2, #13
 800c40a:	4313      	orrs	r3, r2
 800c40c:	e7d6      	b.n	800c3bc <__d2b+0x28>
 800c40e:	616c      	str	r4, [r5, #20]
 800c410:	e7e7      	b.n	800c3e2 <__d2b+0x4e>
 800c412:	a801      	add	r0, sp, #4
 800c414:	f7ff fd4a 	bl	800beac <__lo0bits>
 800c418:	2401      	movs	r4, #1
 800c41a:	9b01      	ldr	r3, [sp, #4]
 800c41c:	612c      	str	r4, [r5, #16]
 800c41e:	616b      	str	r3, [r5, #20]
 800c420:	3020      	adds	r0, #32
 800c422:	e7e4      	b.n	800c3ee <__d2b+0x5a>
 800c424:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <__d2b+0xc0>)
 800c426:	18c0      	adds	r0, r0, r3
 800c428:	4b0b      	ldr	r3, [pc, #44]	; (800c458 <__d2b+0xc4>)
 800c42a:	6038      	str	r0, [r7, #0]
 800c42c:	18e3      	adds	r3, r4, r3
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	18eb      	adds	r3, r5, r3
 800c432:	6958      	ldr	r0, [r3, #20]
 800c434:	f7ff fd20 	bl	800be78 <__hi0bits>
 800c438:	0164      	lsls	r4, r4, #5
 800c43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43c:	1a24      	subs	r4, r4, r0
 800c43e:	601c      	str	r4, [r3, #0]
 800c440:	e7df      	b.n	800c402 <__d2b+0x6e>
 800c442:	46c0      	nop			; (mov r8, r8)
 800c444:	0800cedb 	.word	0x0800cedb
 800c448:	0000030a 	.word	0x0000030a
 800c44c:	0800cf4c 	.word	0x0800cf4c
 800c450:	fffffbcd 	.word	0xfffffbcd
 800c454:	fffffbce 	.word	0xfffffbce
 800c458:	3fffffff 	.word	0x3fffffff

0800c45c <_calloc_r>:
 800c45c:	434a      	muls	r2, r1
 800c45e:	b570      	push	{r4, r5, r6, lr}
 800c460:	0011      	movs	r1, r2
 800c462:	0015      	movs	r5, r2
 800c464:	f000 f852 	bl	800c50c <_malloc_r>
 800c468:	1e04      	subs	r4, r0, #0
 800c46a:	d003      	beq.n	800c474 <_calloc_r+0x18>
 800c46c:	002a      	movs	r2, r5
 800c46e:	2100      	movs	r1, #0
 800c470:	f7fd fc9b 	bl	8009daa <memset>
 800c474:	0020      	movs	r0, r4
 800c476:	bd70      	pop	{r4, r5, r6, pc}

0800c478 <_free_r>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	0005      	movs	r5, r0
 800c47c:	2900      	cmp	r1, #0
 800c47e:	d010      	beq.n	800c4a2 <_free_r+0x2a>
 800c480:	1f0c      	subs	r4, r1, #4
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	da00      	bge.n	800c48a <_free_r+0x12>
 800c488:	18e4      	adds	r4, r4, r3
 800c48a:	0028      	movs	r0, r5
 800c48c:	f000 fafa 	bl	800ca84 <__malloc_lock>
 800c490:	4a1d      	ldr	r2, [pc, #116]	; (800c508 <_free_r+0x90>)
 800c492:	6813      	ldr	r3, [r2, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d105      	bne.n	800c4a4 <_free_r+0x2c>
 800c498:	6063      	str	r3, [r4, #4]
 800c49a:	6014      	str	r4, [r2, #0]
 800c49c:	0028      	movs	r0, r5
 800c49e:	f000 faf9 	bl	800ca94 <__malloc_unlock>
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	d908      	bls.n	800c4ba <_free_r+0x42>
 800c4a8:	6821      	ldr	r1, [r4, #0]
 800c4aa:	1860      	adds	r0, r4, r1
 800c4ac:	4283      	cmp	r3, r0
 800c4ae:	d1f3      	bne.n	800c498 <_free_r+0x20>
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	1841      	adds	r1, r0, r1
 800c4b6:	6021      	str	r1, [r4, #0]
 800c4b8:	e7ee      	b.n	800c498 <_free_r+0x20>
 800c4ba:	001a      	movs	r2, r3
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <_free_r+0x4e>
 800c4c2:	42a3      	cmp	r3, r4
 800c4c4:	d9f9      	bls.n	800c4ba <_free_r+0x42>
 800c4c6:	6811      	ldr	r1, [r2, #0]
 800c4c8:	1850      	adds	r0, r2, r1
 800c4ca:	42a0      	cmp	r0, r4
 800c4cc:	d10b      	bne.n	800c4e6 <_free_r+0x6e>
 800c4ce:	6820      	ldr	r0, [r4, #0]
 800c4d0:	1809      	adds	r1, r1, r0
 800c4d2:	1850      	adds	r0, r2, r1
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	4283      	cmp	r3, r0
 800c4d8:	d1e0      	bne.n	800c49c <_free_r+0x24>
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	1841      	adds	r1, r0, r1
 800c4e0:	6011      	str	r1, [r2, #0]
 800c4e2:	6053      	str	r3, [r2, #4]
 800c4e4:	e7da      	b.n	800c49c <_free_r+0x24>
 800c4e6:	42a0      	cmp	r0, r4
 800c4e8:	d902      	bls.n	800c4f0 <_free_r+0x78>
 800c4ea:	230c      	movs	r3, #12
 800c4ec:	602b      	str	r3, [r5, #0]
 800c4ee:	e7d5      	b.n	800c49c <_free_r+0x24>
 800c4f0:	6821      	ldr	r1, [r4, #0]
 800c4f2:	1860      	adds	r0, r4, r1
 800c4f4:	4283      	cmp	r3, r0
 800c4f6:	d103      	bne.n	800c500 <_free_r+0x88>
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	1841      	adds	r1, r0, r1
 800c4fe:	6021      	str	r1, [r4, #0]
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	6054      	str	r4, [r2, #4]
 800c504:	e7ca      	b.n	800c49c <_free_r+0x24>
 800c506:	46c0      	nop			; (mov r8, r8)
 800c508:	20001b08 	.word	0x20001b08

0800c50c <_malloc_r>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	2303      	movs	r3, #3
 800c510:	1ccd      	adds	r5, r1, #3
 800c512:	439d      	bics	r5, r3
 800c514:	3508      	adds	r5, #8
 800c516:	0006      	movs	r6, r0
 800c518:	2d0c      	cmp	r5, #12
 800c51a:	d21f      	bcs.n	800c55c <_malloc_r+0x50>
 800c51c:	250c      	movs	r5, #12
 800c51e:	42a9      	cmp	r1, r5
 800c520:	d81e      	bhi.n	800c560 <_malloc_r+0x54>
 800c522:	0030      	movs	r0, r6
 800c524:	f000 faae 	bl	800ca84 <__malloc_lock>
 800c528:	4925      	ldr	r1, [pc, #148]	; (800c5c0 <_malloc_r+0xb4>)
 800c52a:	680a      	ldr	r2, [r1, #0]
 800c52c:	0014      	movs	r4, r2
 800c52e:	2c00      	cmp	r4, #0
 800c530:	d11a      	bne.n	800c568 <_malloc_r+0x5c>
 800c532:	4f24      	ldr	r7, [pc, #144]	; (800c5c4 <_malloc_r+0xb8>)
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d104      	bne.n	800c544 <_malloc_r+0x38>
 800c53a:	0021      	movs	r1, r4
 800c53c:	0030      	movs	r0, r6
 800c53e:	f000 f9a5 	bl	800c88c <_sbrk_r>
 800c542:	6038      	str	r0, [r7, #0]
 800c544:	0029      	movs	r1, r5
 800c546:	0030      	movs	r0, r6
 800c548:	f000 f9a0 	bl	800c88c <_sbrk_r>
 800c54c:	1c43      	adds	r3, r0, #1
 800c54e:	d12b      	bne.n	800c5a8 <_malloc_r+0x9c>
 800c550:	230c      	movs	r3, #12
 800c552:	0030      	movs	r0, r6
 800c554:	6033      	str	r3, [r6, #0]
 800c556:	f000 fa9d 	bl	800ca94 <__malloc_unlock>
 800c55a:	e003      	b.n	800c564 <_malloc_r+0x58>
 800c55c:	2d00      	cmp	r5, #0
 800c55e:	dade      	bge.n	800c51e <_malloc_r+0x12>
 800c560:	230c      	movs	r3, #12
 800c562:	6033      	str	r3, [r6, #0]
 800c564:	2000      	movs	r0, #0
 800c566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c568:	6823      	ldr	r3, [r4, #0]
 800c56a:	1b5b      	subs	r3, r3, r5
 800c56c:	d419      	bmi.n	800c5a2 <_malloc_r+0x96>
 800c56e:	2b0b      	cmp	r3, #11
 800c570:	d903      	bls.n	800c57a <_malloc_r+0x6e>
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	18e4      	adds	r4, r4, r3
 800c576:	6025      	str	r5, [r4, #0]
 800c578:	e003      	b.n	800c582 <_malloc_r+0x76>
 800c57a:	6863      	ldr	r3, [r4, #4]
 800c57c:	42a2      	cmp	r2, r4
 800c57e:	d10e      	bne.n	800c59e <_malloc_r+0x92>
 800c580:	600b      	str	r3, [r1, #0]
 800c582:	0030      	movs	r0, r6
 800c584:	f000 fa86 	bl	800ca94 <__malloc_unlock>
 800c588:	0020      	movs	r0, r4
 800c58a:	2207      	movs	r2, #7
 800c58c:	300b      	adds	r0, #11
 800c58e:	1d23      	adds	r3, r4, #4
 800c590:	4390      	bics	r0, r2
 800c592:	1ac2      	subs	r2, r0, r3
 800c594:	4298      	cmp	r0, r3
 800c596:	d0e6      	beq.n	800c566 <_malloc_r+0x5a>
 800c598:	1a1b      	subs	r3, r3, r0
 800c59a:	50a3      	str	r3, [r4, r2]
 800c59c:	e7e3      	b.n	800c566 <_malloc_r+0x5a>
 800c59e:	6053      	str	r3, [r2, #4]
 800c5a0:	e7ef      	b.n	800c582 <_malloc_r+0x76>
 800c5a2:	0022      	movs	r2, r4
 800c5a4:	6864      	ldr	r4, [r4, #4]
 800c5a6:	e7c2      	b.n	800c52e <_malloc_r+0x22>
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	1cc4      	adds	r4, r0, #3
 800c5ac:	439c      	bics	r4, r3
 800c5ae:	42a0      	cmp	r0, r4
 800c5b0:	d0e1      	beq.n	800c576 <_malloc_r+0x6a>
 800c5b2:	1a21      	subs	r1, r4, r0
 800c5b4:	0030      	movs	r0, r6
 800c5b6:	f000 f969 	bl	800c88c <_sbrk_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	d1db      	bne.n	800c576 <_malloc_r+0x6a>
 800c5be:	e7c7      	b.n	800c550 <_malloc_r+0x44>
 800c5c0:	20001b08 	.word	0x20001b08
 800c5c4:	20001b0c 	.word	0x20001b0c

0800c5c8 <__sfputc_r>:
 800c5c8:	6893      	ldr	r3, [r2, #8]
 800c5ca:	b510      	push	{r4, lr}
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	6093      	str	r3, [r2, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	da04      	bge.n	800c5de <__sfputc_r+0x16>
 800c5d4:	6994      	ldr	r4, [r2, #24]
 800c5d6:	42a3      	cmp	r3, r4
 800c5d8:	db07      	blt.n	800c5ea <__sfputc_r+0x22>
 800c5da:	290a      	cmp	r1, #10
 800c5dc:	d005      	beq.n	800c5ea <__sfputc_r+0x22>
 800c5de:	6813      	ldr	r3, [r2, #0]
 800c5e0:	1c58      	adds	r0, r3, #1
 800c5e2:	6010      	str	r0, [r2, #0]
 800c5e4:	7019      	strb	r1, [r3, #0]
 800c5e6:	0008      	movs	r0, r1
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	f7fe f9c9 	bl	800a980 <__swbuf_r>
 800c5ee:	0001      	movs	r1, r0
 800c5f0:	e7f9      	b.n	800c5e6 <__sfputc_r+0x1e>

0800c5f2 <__sfputs_r>:
 800c5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f4:	0006      	movs	r6, r0
 800c5f6:	000f      	movs	r7, r1
 800c5f8:	0014      	movs	r4, r2
 800c5fa:	18d5      	adds	r5, r2, r3
 800c5fc:	42ac      	cmp	r4, r5
 800c5fe:	d101      	bne.n	800c604 <__sfputs_r+0x12>
 800c600:	2000      	movs	r0, #0
 800c602:	e007      	b.n	800c614 <__sfputs_r+0x22>
 800c604:	7821      	ldrb	r1, [r4, #0]
 800c606:	003a      	movs	r2, r7
 800c608:	0030      	movs	r0, r6
 800c60a:	f7ff ffdd 	bl	800c5c8 <__sfputc_r>
 800c60e:	3401      	adds	r4, #1
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d1f3      	bne.n	800c5fc <__sfputs_r+0xa>
 800c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c618 <_vfiprintf_r>:
 800c618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c61a:	b0a1      	sub	sp, #132	; 0x84
 800c61c:	0006      	movs	r6, r0
 800c61e:	000c      	movs	r4, r1
 800c620:	001f      	movs	r7, r3
 800c622:	9203      	str	r2, [sp, #12]
 800c624:	2800      	cmp	r0, #0
 800c626:	d004      	beq.n	800c632 <_vfiprintf_r+0x1a>
 800c628:	6983      	ldr	r3, [r0, #24]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <_vfiprintf_r+0x1a>
 800c62e:	f7ff fa4d 	bl	800bacc <__sinit>
 800c632:	4b8e      	ldr	r3, [pc, #568]	; (800c86c <_vfiprintf_r+0x254>)
 800c634:	429c      	cmp	r4, r3
 800c636:	d11c      	bne.n	800c672 <_vfiprintf_r+0x5a>
 800c638:	6874      	ldr	r4, [r6, #4]
 800c63a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c63c:	07db      	lsls	r3, r3, #31
 800c63e:	d405      	bmi.n	800c64c <_vfiprintf_r+0x34>
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	059b      	lsls	r3, r3, #22
 800c644:	d402      	bmi.n	800c64c <_vfiprintf_r+0x34>
 800c646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c648:	f7ff fae5 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	071b      	lsls	r3, r3, #28
 800c650:	d502      	bpl.n	800c658 <_vfiprintf_r+0x40>
 800c652:	6923      	ldr	r3, [r4, #16]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d11d      	bne.n	800c694 <_vfiprintf_r+0x7c>
 800c658:	0021      	movs	r1, r4
 800c65a:	0030      	movs	r0, r6
 800c65c:	f7fe f9e6 	bl	800aa2c <__swsetup_r>
 800c660:	2800      	cmp	r0, #0
 800c662:	d017      	beq.n	800c694 <_vfiprintf_r+0x7c>
 800c664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c666:	07db      	lsls	r3, r3, #31
 800c668:	d50d      	bpl.n	800c686 <_vfiprintf_r+0x6e>
 800c66a:	2001      	movs	r0, #1
 800c66c:	4240      	negs	r0, r0
 800c66e:	b021      	add	sp, #132	; 0x84
 800c670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c672:	4b7f      	ldr	r3, [pc, #508]	; (800c870 <_vfiprintf_r+0x258>)
 800c674:	429c      	cmp	r4, r3
 800c676:	d101      	bne.n	800c67c <_vfiprintf_r+0x64>
 800c678:	68b4      	ldr	r4, [r6, #8]
 800c67a:	e7de      	b.n	800c63a <_vfiprintf_r+0x22>
 800c67c:	4b7d      	ldr	r3, [pc, #500]	; (800c874 <_vfiprintf_r+0x25c>)
 800c67e:	429c      	cmp	r4, r3
 800c680:	d1db      	bne.n	800c63a <_vfiprintf_r+0x22>
 800c682:	68f4      	ldr	r4, [r6, #12]
 800c684:	e7d9      	b.n	800c63a <_vfiprintf_r+0x22>
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	059b      	lsls	r3, r3, #22
 800c68a:	d4ee      	bmi.n	800c66a <_vfiprintf_r+0x52>
 800c68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c68e:	f7ff fac3 	bl	800bc18 <__retarget_lock_release_recursive>
 800c692:	e7ea      	b.n	800c66a <_vfiprintf_r+0x52>
 800c694:	2300      	movs	r3, #0
 800c696:	ad08      	add	r5, sp, #32
 800c698:	616b      	str	r3, [r5, #20]
 800c69a:	3320      	adds	r3, #32
 800c69c:	766b      	strb	r3, [r5, #25]
 800c69e:	3310      	adds	r3, #16
 800c6a0:	76ab      	strb	r3, [r5, #26]
 800c6a2:	9707      	str	r7, [sp, #28]
 800c6a4:	9f03      	ldr	r7, [sp, #12]
 800c6a6:	783b      	ldrb	r3, [r7, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <_vfiprintf_r+0x98>
 800c6ac:	2b25      	cmp	r3, #37	; 0x25
 800c6ae:	d14e      	bne.n	800c74e <_vfiprintf_r+0x136>
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	1afb      	subs	r3, r7, r3
 800c6b4:	9305      	str	r3, [sp, #20]
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	429f      	cmp	r7, r3
 800c6ba:	d00d      	beq.n	800c6d8 <_vfiprintf_r+0xc0>
 800c6bc:	9b05      	ldr	r3, [sp, #20]
 800c6be:	0021      	movs	r1, r4
 800c6c0:	0030      	movs	r0, r6
 800c6c2:	9a03      	ldr	r2, [sp, #12]
 800c6c4:	f7ff ff95 	bl	800c5f2 <__sfputs_r>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d100      	bne.n	800c6ce <_vfiprintf_r+0xb6>
 800c6cc:	e0b5      	b.n	800c83a <_vfiprintf_r+0x222>
 800c6ce:	696a      	ldr	r2, [r5, #20]
 800c6d0:	9b05      	ldr	r3, [sp, #20]
 800c6d2:	4694      	mov	ip, r2
 800c6d4:	4463      	add	r3, ip
 800c6d6:	616b      	str	r3, [r5, #20]
 800c6d8:	783b      	ldrb	r3, [r7, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d100      	bne.n	800c6e0 <_vfiprintf_r+0xc8>
 800c6de:	e0ac      	b.n	800c83a <_vfiprintf_r+0x222>
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	1c7b      	adds	r3, r7, #1
 800c6e4:	9303      	str	r3, [sp, #12]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	4252      	negs	r2, r2
 800c6ea:	606a      	str	r2, [r5, #4]
 800c6ec:	a904      	add	r1, sp, #16
 800c6ee:	3254      	adds	r2, #84	; 0x54
 800c6f0:	1852      	adds	r2, r2, r1
 800c6f2:	602b      	str	r3, [r5, #0]
 800c6f4:	60eb      	str	r3, [r5, #12]
 800c6f6:	60ab      	str	r3, [r5, #8]
 800c6f8:	7013      	strb	r3, [r2, #0]
 800c6fa:	65ab      	str	r3, [r5, #88]	; 0x58
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	2205      	movs	r2, #5
 800c700:	7819      	ldrb	r1, [r3, #0]
 800c702:	485d      	ldr	r0, [pc, #372]	; (800c878 <_vfiprintf_r+0x260>)
 800c704:	f7ff fb00 	bl	800bd08 <memchr>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	1c5f      	adds	r7, r3, #1
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d120      	bne.n	800c752 <_vfiprintf_r+0x13a>
 800c710:	682a      	ldr	r2, [r5, #0]
 800c712:	06d3      	lsls	r3, r2, #27
 800c714:	d504      	bpl.n	800c720 <_vfiprintf_r+0x108>
 800c716:	2353      	movs	r3, #83	; 0x53
 800c718:	a904      	add	r1, sp, #16
 800c71a:	185b      	adds	r3, r3, r1
 800c71c:	2120      	movs	r1, #32
 800c71e:	7019      	strb	r1, [r3, #0]
 800c720:	0713      	lsls	r3, r2, #28
 800c722:	d504      	bpl.n	800c72e <_vfiprintf_r+0x116>
 800c724:	2353      	movs	r3, #83	; 0x53
 800c726:	a904      	add	r1, sp, #16
 800c728:	185b      	adds	r3, r3, r1
 800c72a:	212b      	movs	r1, #43	; 0x2b
 800c72c:	7019      	strb	r1, [r3, #0]
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	2b2a      	cmp	r3, #42	; 0x2a
 800c734:	d016      	beq.n	800c764 <_vfiprintf_r+0x14c>
 800c736:	2100      	movs	r1, #0
 800c738:	68eb      	ldr	r3, [r5, #12]
 800c73a:	9f03      	ldr	r7, [sp, #12]
 800c73c:	783a      	ldrb	r2, [r7, #0]
 800c73e:	1c78      	adds	r0, r7, #1
 800c740:	3a30      	subs	r2, #48	; 0x30
 800c742:	4684      	mov	ip, r0
 800c744:	2a09      	cmp	r2, #9
 800c746:	d94f      	bls.n	800c7e8 <_vfiprintf_r+0x1d0>
 800c748:	2900      	cmp	r1, #0
 800c74a:	d111      	bne.n	800c770 <_vfiprintf_r+0x158>
 800c74c:	e017      	b.n	800c77e <_vfiprintf_r+0x166>
 800c74e:	3701      	adds	r7, #1
 800c750:	e7a9      	b.n	800c6a6 <_vfiprintf_r+0x8e>
 800c752:	4b49      	ldr	r3, [pc, #292]	; (800c878 <_vfiprintf_r+0x260>)
 800c754:	682a      	ldr	r2, [r5, #0]
 800c756:	1ac0      	subs	r0, r0, r3
 800c758:	2301      	movs	r3, #1
 800c75a:	4083      	lsls	r3, r0
 800c75c:	4313      	orrs	r3, r2
 800c75e:	602b      	str	r3, [r5, #0]
 800c760:	9703      	str	r7, [sp, #12]
 800c762:	e7cb      	b.n	800c6fc <_vfiprintf_r+0xe4>
 800c764:	9b07      	ldr	r3, [sp, #28]
 800c766:	1d19      	adds	r1, r3, #4
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	9107      	str	r1, [sp, #28]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	db01      	blt.n	800c774 <_vfiprintf_r+0x15c>
 800c770:	930b      	str	r3, [sp, #44]	; 0x2c
 800c772:	e004      	b.n	800c77e <_vfiprintf_r+0x166>
 800c774:	425b      	negs	r3, r3
 800c776:	60eb      	str	r3, [r5, #12]
 800c778:	2302      	movs	r3, #2
 800c77a:	4313      	orrs	r3, r2
 800c77c:	602b      	str	r3, [r5, #0]
 800c77e:	783b      	ldrb	r3, [r7, #0]
 800c780:	2b2e      	cmp	r3, #46	; 0x2e
 800c782:	d10a      	bne.n	800c79a <_vfiprintf_r+0x182>
 800c784:	787b      	ldrb	r3, [r7, #1]
 800c786:	2b2a      	cmp	r3, #42	; 0x2a
 800c788:	d137      	bne.n	800c7fa <_vfiprintf_r+0x1e2>
 800c78a:	9b07      	ldr	r3, [sp, #28]
 800c78c:	3702      	adds	r7, #2
 800c78e:	1d1a      	adds	r2, r3, #4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	9207      	str	r2, [sp, #28]
 800c794:	2b00      	cmp	r3, #0
 800c796:	db2d      	blt.n	800c7f4 <_vfiprintf_r+0x1dc>
 800c798:	9309      	str	r3, [sp, #36]	; 0x24
 800c79a:	2203      	movs	r2, #3
 800c79c:	7839      	ldrb	r1, [r7, #0]
 800c79e:	4837      	ldr	r0, [pc, #220]	; (800c87c <_vfiprintf_r+0x264>)
 800c7a0:	f7ff fab2 	bl	800bd08 <memchr>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d007      	beq.n	800c7b8 <_vfiprintf_r+0x1a0>
 800c7a8:	4b34      	ldr	r3, [pc, #208]	; (800c87c <_vfiprintf_r+0x264>)
 800c7aa:	682a      	ldr	r2, [r5, #0]
 800c7ac:	1ac0      	subs	r0, r0, r3
 800c7ae:	2340      	movs	r3, #64	; 0x40
 800c7b0:	4083      	lsls	r3, r0
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	3701      	adds	r7, #1
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	7839      	ldrb	r1, [r7, #0]
 800c7ba:	1c7b      	adds	r3, r7, #1
 800c7bc:	2206      	movs	r2, #6
 800c7be:	4830      	ldr	r0, [pc, #192]	; (800c880 <_vfiprintf_r+0x268>)
 800c7c0:	9303      	str	r3, [sp, #12]
 800c7c2:	7629      	strb	r1, [r5, #24]
 800c7c4:	f7ff faa0 	bl	800bd08 <memchr>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d045      	beq.n	800c858 <_vfiprintf_r+0x240>
 800c7cc:	4b2d      	ldr	r3, [pc, #180]	; (800c884 <_vfiprintf_r+0x26c>)
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d127      	bne.n	800c822 <_vfiprintf_r+0x20a>
 800c7d2:	2207      	movs	r2, #7
 800c7d4:	9b07      	ldr	r3, [sp, #28]
 800c7d6:	3307      	adds	r3, #7
 800c7d8:	4393      	bics	r3, r2
 800c7da:	3308      	adds	r3, #8
 800c7dc:	9307      	str	r3, [sp, #28]
 800c7de:	696b      	ldr	r3, [r5, #20]
 800c7e0:	9a04      	ldr	r2, [sp, #16]
 800c7e2:	189b      	adds	r3, r3, r2
 800c7e4:	616b      	str	r3, [r5, #20]
 800c7e6:	e75d      	b.n	800c6a4 <_vfiprintf_r+0x8c>
 800c7e8:	210a      	movs	r1, #10
 800c7ea:	434b      	muls	r3, r1
 800c7ec:	4667      	mov	r7, ip
 800c7ee:	189b      	adds	r3, r3, r2
 800c7f0:	3909      	subs	r1, #9
 800c7f2:	e7a3      	b.n	800c73c <_vfiprintf_r+0x124>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	425b      	negs	r3, r3
 800c7f8:	e7ce      	b.n	800c798 <_vfiprintf_r+0x180>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	001a      	movs	r2, r3
 800c7fe:	3701      	adds	r7, #1
 800c800:	606b      	str	r3, [r5, #4]
 800c802:	7839      	ldrb	r1, [r7, #0]
 800c804:	1c78      	adds	r0, r7, #1
 800c806:	3930      	subs	r1, #48	; 0x30
 800c808:	4684      	mov	ip, r0
 800c80a:	2909      	cmp	r1, #9
 800c80c:	d903      	bls.n	800c816 <_vfiprintf_r+0x1fe>
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0c3      	beq.n	800c79a <_vfiprintf_r+0x182>
 800c812:	9209      	str	r2, [sp, #36]	; 0x24
 800c814:	e7c1      	b.n	800c79a <_vfiprintf_r+0x182>
 800c816:	230a      	movs	r3, #10
 800c818:	435a      	muls	r2, r3
 800c81a:	4667      	mov	r7, ip
 800c81c:	1852      	adds	r2, r2, r1
 800c81e:	3b09      	subs	r3, #9
 800c820:	e7ef      	b.n	800c802 <_vfiprintf_r+0x1ea>
 800c822:	ab07      	add	r3, sp, #28
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	0022      	movs	r2, r4
 800c828:	0029      	movs	r1, r5
 800c82a:	0030      	movs	r0, r6
 800c82c:	4b16      	ldr	r3, [pc, #88]	; (800c888 <_vfiprintf_r+0x270>)
 800c82e:	f7fd fb6f 	bl	8009f10 <_printf_float>
 800c832:	9004      	str	r0, [sp, #16]
 800c834:	9b04      	ldr	r3, [sp, #16]
 800c836:	3301      	adds	r3, #1
 800c838:	d1d1      	bne.n	800c7de <_vfiprintf_r+0x1c6>
 800c83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c83c:	07db      	lsls	r3, r3, #31
 800c83e:	d405      	bmi.n	800c84c <_vfiprintf_r+0x234>
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	059b      	lsls	r3, r3, #22
 800c844:	d402      	bmi.n	800c84c <_vfiprintf_r+0x234>
 800c846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c848:	f7ff f9e6 	bl	800bc18 <__retarget_lock_release_recursive>
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	065b      	lsls	r3, r3, #25
 800c850:	d500      	bpl.n	800c854 <_vfiprintf_r+0x23c>
 800c852:	e70a      	b.n	800c66a <_vfiprintf_r+0x52>
 800c854:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c856:	e70a      	b.n	800c66e <_vfiprintf_r+0x56>
 800c858:	ab07      	add	r3, sp, #28
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	0022      	movs	r2, r4
 800c85e:	0029      	movs	r1, r5
 800c860:	0030      	movs	r0, r6
 800c862:	4b09      	ldr	r3, [pc, #36]	; (800c888 <_vfiprintf_r+0x270>)
 800c864:	f7fd fe12 	bl	800a48c <_printf_i>
 800c868:	e7e3      	b.n	800c832 <_vfiprintf_r+0x21a>
 800c86a:	46c0      	nop			; (mov r8, r8)
 800c86c:	0800cf0c 	.word	0x0800cf0c
 800c870:	0800cf2c 	.word	0x0800cf2c
 800c874:	0800ceec 	.word	0x0800ceec
 800c878:	0800d0ac 	.word	0x0800d0ac
 800c87c:	0800d0b2 	.word	0x0800d0b2
 800c880:	0800d0b6 	.word	0x0800d0b6
 800c884:	08009f11 	.word	0x08009f11
 800c888:	0800c5f3 	.word	0x0800c5f3

0800c88c <_sbrk_r>:
 800c88c:	2300      	movs	r3, #0
 800c88e:	b570      	push	{r4, r5, r6, lr}
 800c890:	4d06      	ldr	r5, [pc, #24]	; (800c8ac <_sbrk_r+0x20>)
 800c892:	0004      	movs	r4, r0
 800c894:	0008      	movs	r0, r1
 800c896:	602b      	str	r3, [r5, #0]
 800c898:	f7f6 fbb0 	bl	8002ffc <_sbrk>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d103      	bne.n	800c8a8 <_sbrk_r+0x1c>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d000      	beq.n	800c8a8 <_sbrk_r+0x1c>
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	bd70      	pop	{r4, r5, r6, pc}
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	20001db8 	.word	0x20001db8

0800c8b0 <__sread>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	000c      	movs	r4, r1
 800c8b4:	250e      	movs	r5, #14
 800c8b6:	5f49      	ldrsh	r1, [r1, r5]
 800c8b8:	f000 f8f4 	bl	800caa4 <_read_r>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	db03      	blt.n	800c8c8 <__sread+0x18>
 800c8c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c8c2:	181b      	adds	r3, r3, r0
 800c8c4:	6563      	str	r3, [r4, #84]	; 0x54
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	4a02      	ldr	r2, [pc, #8]	; (800c8d4 <__sread+0x24>)
 800c8cc:	4013      	ands	r3, r2
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	e7f9      	b.n	800c8c6 <__sread+0x16>
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	ffffefff 	.word	0xffffefff

0800c8d8 <__swrite>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	001f      	movs	r7, r3
 800c8dc:	898b      	ldrh	r3, [r1, #12]
 800c8de:	0005      	movs	r5, r0
 800c8e0:	000c      	movs	r4, r1
 800c8e2:	0016      	movs	r6, r2
 800c8e4:	05db      	lsls	r3, r3, #23
 800c8e6:	d505      	bpl.n	800c8f4 <__swrite+0x1c>
 800c8e8:	230e      	movs	r3, #14
 800c8ea:	5ec9      	ldrsh	r1, [r1, r3]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	f000 f8a2 	bl	800ca38 <_lseek_r>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	4a05      	ldr	r2, [pc, #20]	; (800c90c <__swrite+0x34>)
 800c8f8:	0028      	movs	r0, r5
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	81a3      	strh	r3, [r4, #12]
 800c8fe:	0032      	movs	r2, r6
 800c900:	230e      	movs	r3, #14
 800c902:	5ee1      	ldrsh	r1, [r4, r3]
 800c904:	003b      	movs	r3, r7
 800c906:	f000 f81f 	bl	800c948 <_write_r>
 800c90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c90c:	ffffefff 	.word	0xffffefff

0800c910 <__sseek>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	000c      	movs	r4, r1
 800c914:	250e      	movs	r5, #14
 800c916:	5f49      	ldrsh	r1, [r1, r5]
 800c918:	f000 f88e 	bl	800ca38 <_lseek_r>
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	1c42      	adds	r2, r0, #1
 800c920:	d103      	bne.n	800c92a <__sseek+0x1a>
 800c922:	4a05      	ldr	r2, [pc, #20]	; (800c938 <__sseek+0x28>)
 800c924:	4013      	ands	r3, r2
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	bd70      	pop	{r4, r5, r6, pc}
 800c92a:	2280      	movs	r2, #128	; 0x80
 800c92c:	0152      	lsls	r2, r2, #5
 800c92e:	4313      	orrs	r3, r2
 800c930:	81a3      	strh	r3, [r4, #12]
 800c932:	6560      	str	r0, [r4, #84]	; 0x54
 800c934:	e7f8      	b.n	800c928 <__sseek+0x18>
 800c936:	46c0      	nop			; (mov r8, r8)
 800c938:	ffffefff 	.word	0xffffefff

0800c93c <__sclose>:
 800c93c:	b510      	push	{r4, lr}
 800c93e:	230e      	movs	r3, #14
 800c940:	5ec9      	ldrsh	r1, [r1, r3]
 800c942:	f000 f833 	bl	800c9ac <_close_r>
 800c946:	bd10      	pop	{r4, pc}

0800c948 <_write_r>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	0004      	movs	r4, r0
 800c94c:	0008      	movs	r0, r1
 800c94e:	0011      	movs	r1, r2
 800c950:	001a      	movs	r2, r3
 800c952:	2300      	movs	r3, #0
 800c954:	4d05      	ldr	r5, [pc, #20]	; (800c96c <_write_r+0x24>)
 800c956:	602b      	str	r3, [r5, #0]
 800c958:	f7f6 fb07 	bl	8002f6a <_write>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d103      	bne.n	800c968 <_write_r+0x20>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d000      	beq.n	800c968 <_write_r+0x20>
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	bd70      	pop	{r4, r5, r6, pc}
 800c96a:	46c0      	nop			; (mov r8, r8)
 800c96c:	20001db8 	.word	0x20001db8

0800c970 <__assert_func>:
 800c970:	b530      	push	{r4, r5, lr}
 800c972:	0014      	movs	r4, r2
 800c974:	001a      	movs	r2, r3
 800c976:	4b09      	ldr	r3, [pc, #36]	; (800c99c <__assert_func+0x2c>)
 800c978:	0005      	movs	r5, r0
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	b085      	sub	sp, #20
 800c97e:	68d8      	ldr	r0, [r3, #12]
 800c980:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <__assert_func+0x30>)
 800c982:	2c00      	cmp	r4, #0
 800c984:	d101      	bne.n	800c98a <__assert_func+0x1a>
 800c986:	4b07      	ldr	r3, [pc, #28]	; (800c9a4 <__assert_func+0x34>)
 800c988:	001c      	movs	r4, r3
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	9100      	str	r1, [sp, #0]
 800c98e:	002b      	movs	r3, r5
 800c990:	4905      	ldr	r1, [pc, #20]	; (800c9a8 <__assert_func+0x38>)
 800c992:	9402      	str	r4, [sp, #8]
 800c994:	f000 f81c 	bl	800c9d0 <fiprintf>
 800c998:	f000 f8a5 	bl	800cae6 <abort>
 800c99c:	20000010 	.word	0x20000010
 800c9a0:	0800d0bd 	.word	0x0800d0bd
 800c9a4:	0800d0f8 	.word	0x0800d0f8
 800c9a8:	0800d0ca 	.word	0x0800d0ca

0800c9ac <_close_r>:
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	4d06      	ldr	r5, [pc, #24]	; (800c9cc <_close_r+0x20>)
 800c9b2:	0004      	movs	r4, r0
 800c9b4:	0008      	movs	r0, r1
 800c9b6:	602b      	str	r3, [r5, #0]
 800c9b8:	f7f6 faf3 	bl	8002fa2 <_close>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	d103      	bne.n	800c9c8 <_close_r+0x1c>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d000      	beq.n	800c9c8 <_close_r+0x1c>
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	46c0      	nop			; (mov r8, r8)
 800c9cc:	20001db8 	.word	0x20001db8

0800c9d0 <fiprintf>:
 800c9d0:	b40e      	push	{r1, r2, r3}
 800c9d2:	b503      	push	{r0, r1, lr}
 800c9d4:	0001      	movs	r1, r0
 800c9d6:	ab03      	add	r3, sp, #12
 800c9d8:	4804      	ldr	r0, [pc, #16]	; (800c9ec <fiprintf+0x1c>)
 800c9da:	cb04      	ldmia	r3!, {r2}
 800c9dc:	6800      	ldr	r0, [r0, #0]
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	f7ff fe1a 	bl	800c618 <_vfiprintf_r>
 800c9e4:	b002      	add	sp, #8
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	b003      	add	sp, #12
 800c9ea:	4718      	bx	r3
 800c9ec:	20000010 	.word	0x20000010

0800c9f0 <_fstat_r>:
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	b570      	push	{r4, r5, r6, lr}
 800c9f4:	4d06      	ldr	r5, [pc, #24]	; (800ca10 <_fstat_r+0x20>)
 800c9f6:	0004      	movs	r4, r0
 800c9f8:	0008      	movs	r0, r1
 800c9fa:	0011      	movs	r1, r2
 800c9fc:	602b      	str	r3, [r5, #0]
 800c9fe:	f7f6 fada 	bl	8002fb6 <_fstat>
 800ca02:	1c43      	adds	r3, r0, #1
 800ca04:	d103      	bne.n	800ca0e <_fstat_r+0x1e>
 800ca06:	682b      	ldr	r3, [r5, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d000      	beq.n	800ca0e <_fstat_r+0x1e>
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	20001db8 	.word	0x20001db8

0800ca14 <_isatty_r>:
 800ca14:	2300      	movs	r3, #0
 800ca16:	b570      	push	{r4, r5, r6, lr}
 800ca18:	4d06      	ldr	r5, [pc, #24]	; (800ca34 <_isatty_r+0x20>)
 800ca1a:	0004      	movs	r4, r0
 800ca1c:	0008      	movs	r0, r1
 800ca1e:	602b      	str	r3, [r5, #0]
 800ca20:	f7f6 fad7 	bl	8002fd2 <_isatty>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d103      	bne.n	800ca30 <_isatty_r+0x1c>
 800ca28:	682b      	ldr	r3, [r5, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d000      	beq.n	800ca30 <_isatty_r+0x1c>
 800ca2e:	6023      	str	r3, [r4, #0]
 800ca30:	bd70      	pop	{r4, r5, r6, pc}
 800ca32:	46c0      	nop			; (mov r8, r8)
 800ca34:	20001db8 	.word	0x20001db8

0800ca38 <_lseek_r>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	0004      	movs	r4, r0
 800ca3c:	0008      	movs	r0, r1
 800ca3e:	0011      	movs	r1, r2
 800ca40:	001a      	movs	r2, r3
 800ca42:	2300      	movs	r3, #0
 800ca44:	4d05      	ldr	r5, [pc, #20]	; (800ca5c <_lseek_r+0x24>)
 800ca46:	602b      	str	r3, [r5, #0]
 800ca48:	f7f6 facc 	bl	8002fe4 <_lseek>
 800ca4c:	1c43      	adds	r3, r0, #1
 800ca4e:	d103      	bne.n	800ca58 <_lseek_r+0x20>
 800ca50:	682b      	ldr	r3, [r5, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d000      	beq.n	800ca58 <_lseek_r+0x20>
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	bd70      	pop	{r4, r5, r6, pc}
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	20001db8 	.word	0x20001db8

0800ca60 <__ascii_mbtowc>:
 800ca60:	b082      	sub	sp, #8
 800ca62:	2900      	cmp	r1, #0
 800ca64:	d100      	bne.n	800ca68 <__ascii_mbtowc+0x8>
 800ca66:	a901      	add	r1, sp, #4
 800ca68:	1e10      	subs	r0, r2, #0
 800ca6a:	d006      	beq.n	800ca7a <__ascii_mbtowc+0x1a>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d006      	beq.n	800ca7e <__ascii_mbtowc+0x1e>
 800ca70:	7813      	ldrb	r3, [r2, #0]
 800ca72:	600b      	str	r3, [r1, #0]
 800ca74:	7810      	ldrb	r0, [r2, #0]
 800ca76:	1e43      	subs	r3, r0, #1
 800ca78:	4198      	sbcs	r0, r3
 800ca7a:	b002      	add	sp, #8
 800ca7c:	4770      	bx	lr
 800ca7e:	2002      	movs	r0, #2
 800ca80:	4240      	negs	r0, r0
 800ca82:	e7fa      	b.n	800ca7a <__ascii_mbtowc+0x1a>

0800ca84 <__malloc_lock>:
 800ca84:	b510      	push	{r4, lr}
 800ca86:	4802      	ldr	r0, [pc, #8]	; (800ca90 <__malloc_lock+0xc>)
 800ca88:	f7ff f8c5 	bl	800bc16 <__retarget_lock_acquire_recursive>
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	20001db0 	.word	0x20001db0

0800ca94 <__malloc_unlock>:
 800ca94:	b510      	push	{r4, lr}
 800ca96:	4802      	ldr	r0, [pc, #8]	; (800caa0 <__malloc_unlock+0xc>)
 800ca98:	f7ff f8be 	bl	800bc18 <__retarget_lock_release_recursive>
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	46c0      	nop			; (mov r8, r8)
 800caa0:	20001db0 	.word	0x20001db0

0800caa4 <_read_r>:
 800caa4:	b570      	push	{r4, r5, r6, lr}
 800caa6:	0004      	movs	r4, r0
 800caa8:	0008      	movs	r0, r1
 800caaa:	0011      	movs	r1, r2
 800caac:	001a      	movs	r2, r3
 800caae:	2300      	movs	r3, #0
 800cab0:	4d05      	ldr	r5, [pc, #20]	; (800cac8 <_read_r+0x24>)
 800cab2:	602b      	str	r3, [r5, #0]
 800cab4:	f7f6 fa3c 	bl	8002f30 <_read>
 800cab8:	1c43      	adds	r3, r0, #1
 800caba:	d103      	bne.n	800cac4 <_read_r+0x20>
 800cabc:	682b      	ldr	r3, [r5, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d000      	beq.n	800cac4 <_read_r+0x20>
 800cac2:	6023      	str	r3, [r4, #0]
 800cac4:	bd70      	pop	{r4, r5, r6, pc}
 800cac6:	46c0      	nop			; (mov r8, r8)
 800cac8:	20001db8 	.word	0x20001db8

0800cacc <__ascii_wctomb>:
 800cacc:	0003      	movs	r3, r0
 800cace:	1e08      	subs	r0, r1, #0
 800cad0:	d005      	beq.n	800cade <__ascii_wctomb+0x12>
 800cad2:	2aff      	cmp	r2, #255	; 0xff
 800cad4:	d904      	bls.n	800cae0 <__ascii_wctomb+0x14>
 800cad6:	228a      	movs	r2, #138	; 0x8a
 800cad8:	2001      	movs	r0, #1
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	4240      	negs	r0, r0
 800cade:	4770      	bx	lr
 800cae0:	2001      	movs	r0, #1
 800cae2:	700a      	strb	r2, [r1, #0]
 800cae4:	e7fb      	b.n	800cade <__ascii_wctomb+0x12>

0800cae6 <abort>:
 800cae6:	2006      	movs	r0, #6
 800cae8:	b510      	push	{r4, lr}
 800caea:	f000 f82d 	bl	800cb48 <raise>
 800caee:	2001      	movs	r0, #1
 800caf0:	f7f6 fa12 	bl	8002f18 <_exit>

0800caf4 <_raise_r>:
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	0004      	movs	r4, r0
 800caf8:	000d      	movs	r5, r1
 800cafa:	291f      	cmp	r1, #31
 800cafc:	d904      	bls.n	800cb08 <_raise_r+0x14>
 800cafe:	2316      	movs	r3, #22
 800cb00:	6003      	str	r3, [r0, #0]
 800cb02:	2001      	movs	r0, #1
 800cb04:	4240      	negs	r0, r0
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d004      	beq.n	800cb18 <_raise_r+0x24>
 800cb0e:	008a      	lsls	r2, r1, #2
 800cb10:	189b      	adds	r3, r3, r2
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	2a00      	cmp	r2, #0
 800cb16:	d108      	bne.n	800cb2a <_raise_r+0x36>
 800cb18:	0020      	movs	r0, r4
 800cb1a:	f000 f831 	bl	800cb80 <_getpid_r>
 800cb1e:	002a      	movs	r2, r5
 800cb20:	0001      	movs	r1, r0
 800cb22:	0020      	movs	r0, r4
 800cb24:	f000 f81a 	bl	800cb5c <_kill_r>
 800cb28:	e7ed      	b.n	800cb06 <_raise_r+0x12>
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	2a01      	cmp	r2, #1
 800cb2e:	d0ea      	beq.n	800cb06 <_raise_r+0x12>
 800cb30:	1c51      	adds	r1, r2, #1
 800cb32:	d103      	bne.n	800cb3c <_raise_r+0x48>
 800cb34:	2316      	movs	r3, #22
 800cb36:	3001      	adds	r0, #1
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	e7e4      	b.n	800cb06 <_raise_r+0x12>
 800cb3c:	2400      	movs	r4, #0
 800cb3e:	0028      	movs	r0, r5
 800cb40:	601c      	str	r4, [r3, #0]
 800cb42:	4790      	blx	r2
 800cb44:	0020      	movs	r0, r4
 800cb46:	e7de      	b.n	800cb06 <_raise_r+0x12>

0800cb48 <raise>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	4b03      	ldr	r3, [pc, #12]	; (800cb58 <raise+0x10>)
 800cb4c:	0001      	movs	r1, r0
 800cb4e:	6818      	ldr	r0, [r3, #0]
 800cb50:	f7ff ffd0 	bl	800caf4 <_raise_r>
 800cb54:	bd10      	pop	{r4, pc}
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	20000010 	.word	0x20000010

0800cb5c <_kill_r>:
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	b570      	push	{r4, r5, r6, lr}
 800cb60:	4d06      	ldr	r5, [pc, #24]	; (800cb7c <_kill_r+0x20>)
 800cb62:	0004      	movs	r4, r0
 800cb64:	0008      	movs	r0, r1
 800cb66:	0011      	movs	r1, r2
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	f7f6 f9c5 	bl	8002ef8 <_kill>
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	d103      	bne.n	800cb7a <_kill_r+0x1e>
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d000      	beq.n	800cb7a <_kill_r+0x1e>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	20001db8 	.word	0x20001db8

0800cb80 <_getpid_r>:
 800cb80:	b510      	push	{r4, lr}
 800cb82:	f7f6 f9b3 	bl	8002eec <_getpid>
 800cb86:	bd10      	pop	{r4, pc}

0800cb88 <_init>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	46c0      	nop			; (mov r8, r8)
 800cb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb8e:	bc08      	pop	{r3}
 800cb90:	469e      	mov	lr, r3
 800cb92:	4770      	bx	lr

0800cb94 <_fini>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	46c0      	nop			; (mov r8, r8)
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr
