
WIPNAENAE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e88  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006040  08006040  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006048  08006048  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000010  08006060  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  08006060  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c15c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b4  00000000  00000000  0003c194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  00040b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034fb  00000000  00000000  00041f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017803  00000000  00000000  0004543b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab808  00000000  00000000  0005cc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108446  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb8  00000000  00000000  0010849c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f30 	.word	0x08005f30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005f30 	.word	0x08005f30

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8d8 	bl	8000608 <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8d3 	bl	8000608 <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <__clzdi2>:
 8000608:	b510      	push	{r4, lr}
 800060a:	2900      	cmp	r1, #0
 800060c:	d103      	bne.n	8000616 <__clzdi2+0xe>
 800060e:	f7ff ffdd 	bl	80005cc <__clzsi2>
 8000612:	3020      	adds	r0, #32
 8000614:	e002      	b.n	800061c <__clzdi2+0x14>
 8000616:	1c08      	adds	r0, r1, #0
 8000618:	f7ff ffd8 	bl	80005cc <__clzsi2>
 800061c:	bd10      	pop	{r4, pc}
 800061e:	46c0      	nop			; (mov r8, r8)

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fc16 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f81e 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f99c 	bl	8000968 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000630:	f000 f862 	bl	80006f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000634:	f000 f8ca 	bl	80007cc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000638:	f000 f908 	bl	800084c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f946 	bl	80008cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000640:	f003 fa02 	bl	8003a48 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000644:	4a05      	ldr	r2, [pc, #20]	; (800065c <main+0x3c>)
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <main+0x40>)
 8000648:	2100      	movs	r1, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f003 fa44 	bl	8003ad8 <osThreadNew>
 8000650:	0002      	movs	r2, r0
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <main+0x44>)
 8000654:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f003 fa19 	bl	8003a8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x3a>
 800065c:	08005f6c 	.word	0x08005f6c
 8000660:	08000a9d 	.word	0x08000a9d
 8000664:	20001934 	.word	0x20001934

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b093      	sub	sp, #76	; 0x4c
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	2410      	movs	r4, #16
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2338      	movs	r3, #56	; 0x38
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f005 fc50 	bl	8005f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067e:	003b      	movs	r3, r7
 8000680:	0018      	movs	r0, r3
 8000682:	2310      	movs	r3, #16
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f005 fc49 	bl	8005f1e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fc7d 	bl	8001f90 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2240      	movs	r2, #64	; 0x40
 80006ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fcb5 	bl	8002028 <HAL_RCC_OscConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006c2:	f000 f9f3 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	003b      	movs	r3, r7
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006de:	003b      	movs	r3, r7
 80006e0:	2100      	movs	r1, #0
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 ffc0 	bl	8002668 <HAL_RCC_ClockConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006ec:	f000 f9de 	bl	8000aac <Error_Handler>
  }
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b013      	add	sp, #76	; 0x4c
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	0018      	movs	r0, r3
 8000702:	230c      	movs	r3, #12
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f005 fc09 	bl	8005f1e <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800070e:	4a2e      	ldr	r2, [pc, #184]	; (80007c8 <MX_ADC1_Init+0xd0>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	05d2      	lsls	r2, r2, #23
 8000718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800072e:	2204      	movs	r2, #4
 8000730:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000734:	2200      	movs	r2, #0
 8000736:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800073a:	2200      	movs	r2, #0
 800073c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000740:	2200      	movs	r2, #0
 8000742:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000746:	2201      	movs	r2, #1
 8000748:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800074c:	2220      	movs	r2, #32
 800074e:	2100      	movs	r1, #0
 8000750:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000760:	222c      	movs	r2, #44	; 0x2c
 8000762:	2100      	movs	r1, #0
 8000764:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000768:	2200      	movs	r2, #0
 800076a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000774:	2200      	movs	r2, #0
 8000776:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_ADC1_Init+0xcc>)
 800077a:	223c      	movs	r2, #60	; 0x3c
 800077c:	2100      	movs	r1, #0
 800077e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000782:	2200      	movs	r2, #0
 8000784:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0xcc>)
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fce7 	bl	800115c <HAL_ADC_Init>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000792:	f000 f98b 	bl	8000aac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	1d3a      	adds	r2, r7, #4
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_ADC1_Init+0xcc>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 feb2 	bl	8001518 <HAL_ADC_ConfigChannel>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80007b8:	f000 f978 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b004      	add	sp, #16
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200019d0 	.word	0x200019d0
 80007c8:	40012400 	.word	0x40012400

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_I2C1_Init+0x74>)
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fa93 	bl	8001d34 <HAL_I2C_Init>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 f94b 	bl	8000aac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_I2C1_Init+0x74>)
 8000818:	2100      	movs	r1, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fb20 	bl	8001e60 <HAL_I2CEx_ConfigAnalogFilter>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 f942 	bl	8000aac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <MX_I2C1_Init+0x74>)
 800082a:	2100      	movs	r1, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fb63 	bl	8001ef8 <HAL_I2CEx_ConfigDigitalFilter>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f939 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20001938 	.word	0x20001938
 8000844:	40005400 	.word	0x40005400
 8000848:	00303d5b 	.word	0x00303d5b

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fa53 	bl	8001d34 <HAL_I2C_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 f90b 	bl	8000aac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000898:	2100      	movs	r1, #0
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fae0 	bl	8001e60 <HAL_I2CEx_ConfigAnalogFilter>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 f902 	bl	8000aac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fb23 	bl	8001ef8 <HAL_I2CEx_ConfigDigitalFilter>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f8f9 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20001984 	.word	0x20001984
 80008c4:	40005800 	.word	0x40005800
 80008c8:	00303d5b 	.word	0x00303d5b

080008cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008d2:	4a24      	ldr	r2, [pc, #144]	; (8000964 <MX_USART1_UART_Init+0x98>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008d8:	22e1      	movs	r2, #225	; 0xe1
 80008da:	0252      	lsls	r2, r2, #9
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_USART1_UART_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_USART1_UART_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_USART1_UART_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART1_UART_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_USART1_UART_Init+0x94>)
 8000916:	0018      	movs	r0, r3
 8000918:	f002 fa08 	bl	8002d2c <HAL_UART_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 f8c4 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART1_UART_Init+0x94>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f002 ff33 	bl	8003794 <HAL_UARTEx_SetTxFifoThreshold>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000932:	f000 f8bb 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_USART1_UART_Init+0x94>)
 8000938:	2100      	movs	r1, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f002 ff6a 	bl	8003814 <HAL_UARTEx_SetRxFifoThreshold>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000944:	f000 f8b2 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_USART1_UART_Init+0x94>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fee8 	bl	8003720 <HAL_UARTEx_DisableFifoMode>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 f8aa 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20001a34 	.word	0x20001a34
 8000964:	40013800 	.word	0x40013800

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	240c      	movs	r4, #12
 8000970:	193b      	adds	r3, r7, r4
 8000972:	0018      	movs	r0, r3
 8000974:	2314      	movs	r3, #20
 8000976:	001a      	movs	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	f005 fad0 	bl	8005f1e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b44      	ldr	r3, [pc, #272]	; (8000a90 <MX_GPIO_Init+0x128>)
 8000980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000982:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x128>)
 8000984:	2102      	movs	r1, #2
 8000986:	430a      	orrs	r2, r1
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <MX_GPIO_Init+0x128>)
 800098c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098e:	2202      	movs	r2, #2
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <MX_GPIO_Init+0x128>)
 8000998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800099a:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <MX_GPIO_Init+0x128>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <MX_GPIO_Init+0x128>)
 80009a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <MX_GPIO_Init+0x128>)
 80009b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <MX_GPIO_Init+0x128>)
 80009b4:	2104      	movs	r1, #4
 80009b6:	430a      	orrs	r2, r1
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ba:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <MX_GPIO_Init+0x128>)
 80009bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009be:	2204      	movs	r2, #4
 80009c0:	4013      	ands	r3, r2
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2200      	movs	r2, #0
 80009cc:	2102      	movs	r1, #2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 f992 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_GPIO_Init+0x12c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	2130      	movs	r1, #48	; 0x30
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 f98c 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <MX_GPIO_Init+0x130>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	2104      	movs	r1, #4
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 f986 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2202      	movs	r2, #2
 80009f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	193a      	adds	r2, r7, r4
 8000a06:	23a0      	movs	r3, #160	; 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 f80f 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2210      	movs	r2, #16
 8000a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	193a      	adds	r2, r7, r4
 8000a32:	23a0      	movs	r3, #160	; 0xa0
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 fff9 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2230      	movs	r2, #48	; 0x30
 8000a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2201      	movs	r2, #1
 8000a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <MX_GPIO_Init+0x12c>)
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	f000 ffe7 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a62:	0021      	movs	r1, r4
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2204      	movs	r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <MX_GPIO_Init+0x130>)
 8000a80:	0019      	movs	r1, r3
 8000a82:	0010      	movs	r0, r2
 8000a84:	f000 ffd4 	bl	8001a30 <HAL_GPIO_Init>

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b009      	add	sp, #36	; 0x24
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	50000800 	.word	0x50000800
 8000a98:	50000400 	.word	0x50000400

08000a9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f003 f8ad 	bl	8003c04 <osDelay>
 8000aaa:	e7fb      	b.n	8000aa4 <StartDefaultTask+0x8>

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x5c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_MspInit+0x5c>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0549      	lsls	r1, r1, #21
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	055b      	lsls	r3, r3, #21
 8000aec:	4013      	ands	r3, r2
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000af2:	2302      	movs	r3, #2
 8000af4:	425b      	negs	r3, r3
 8000af6:	2200      	movs	r2, #0
 8000af8:	2103      	movs	r1, #3
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 ff76 	bl	80019ec <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b00:	23c0      	movs	r3, #192	; 0xc0
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fa2b 	bl	8000f60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b097      	sub	sp, #92	; 0x5c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	2344      	movs	r3, #68	; 0x44
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	0018      	movs	r0, r3
 8000b26:	2314      	movs	r3, #20
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f005 f9f7 	bl	8005f1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	2410      	movs	r4, #16
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	0018      	movs	r0, r3
 8000b36:	2334      	movs	r3, #52	; 0x34
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f005 f9ef 	bl	8005f1e <memset>
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <HAL_ADC_MspInit+0xb0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d139      	bne.n	8000bbe <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	01d2      	lsls	r2, r2, #7
 8000b50:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 ff2e 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b64:	f7ff ffa2 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	0349      	lsls	r1, r1, #13
 8000b72:	430a      	orrs	r2, r1
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	035b      	lsls	r3, r3, #13
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b94:	2201      	movs	r2, #1
 8000b96:	4013      	ands	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9c:	2144      	movs	r1, #68	; 0x44
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	187a      	adds	r2, r7, r1
 8000bb2:	23a0      	movs	r3, #160	; 0xa0
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f000 ff39 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b017      	add	sp, #92	; 0x5c
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40012400 	.word	0x40012400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b099      	sub	sp, #100	; 0x64
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	234c      	movs	r3, #76	; 0x4c
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2314      	movs	r3, #20
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f005 f99b 	bl	8005f1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	2418      	movs	r4, #24
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	0018      	movs	r0, r3
 8000bee:	2334      	movs	r3, #52	; 0x34
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f005 f993 	bl	8005f1e <memset>
  if(hi2c->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <HAL_I2C_MspInit+0x128>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d13e      	bne.n	8000c80 <HAL_I2C_MspInit+0xb0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2220      	movs	r2, #32
 8000c06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fed3 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c1a:	f7ff ff47 	bl	8000aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c24:	2102      	movs	r1, #2
 8000c26:	430a      	orrs	r2, r1
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2e:	2202      	movs	r2, #2
 8000c30:	4013      	ands	r3, r2
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000c36:	214c      	movs	r1, #76	; 0x4c
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	22c0      	movs	r2, #192	; 0xc0
 8000c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2212      	movs	r2, #18
 8000c42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2206      	movs	r2, #6
 8000c54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <HAL_I2C_MspInit+0x130>)
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	f000 fee7 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	0389      	lsls	r1, r1, #14
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	039b      	lsls	r3, r3, #14
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c7e:	e036      	b.n	8000cee <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <HAL_I2C_MspInit+0x134>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d131      	bne.n	8000cee <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000ca2:	214c      	movs	r1, #76	; 0x4c
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	22c0      	movs	r2, #192	; 0xc0
 8000ca8:	0152      	lsls	r2, r2, #5
 8000caa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2212      	movs	r2, #18
 8000cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2206      	movs	r2, #6
 8000cc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	187a      	adds	r2, r7, r1
 8000cc6:	23a0      	movs	r3, #160	; 0xa0
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 feaf 	bl	8001a30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	03c9      	lsls	r1, r1, #15
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_I2C_MspInit+0x12c>)
 8000ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	03db      	lsls	r3, r3, #15
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b019      	add	sp, #100	; 0x64
 8000cf4:	bd90      	pop	{r4, r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	50000400 	.word	0x50000400
 8000d04:	40005800 	.word	0x40005800

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b097      	sub	sp, #92	; 0x5c
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	2344      	movs	r3, #68	; 0x44
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	0018      	movs	r0, r3
 8000d16:	2314      	movs	r3, #20
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f005 f8ff 	bl	8005f1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	2410      	movs	r4, #16
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	0018      	movs	r0, r3
 8000d26:	2334      	movs	r3, #52	; 0x34
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f005 f8f7 	bl	8005f1e <memset>
  if(huart->Instance==USART1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d13f      	bne.n	8000dba <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 fe37 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d52:	f7ff feab 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	01c9      	lsls	r1, r1, #7
 8000d60:	430a      	orrs	r2, r1
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	01db      	lsls	r3, r3, #7
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_UART_MspInit+0xc0>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000d8a:	2144      	movs	r1, #68	; 0x44
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	22c0      	movs	r2, #192	; 0xc0
 8000d90:	00d2      	lsls	r2, r2, #3
 8000d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	23a0      	movs	r3, #160	; 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 fe3b 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b017      	add	sp, #92	; 0x5c
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40013800 	.word	0x40013800
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8a4 	bl	8000f28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000de0:	f004 f9ac 	bl	800513c <xTaskGetSchedulerState>
 8000de4:	0003      	movs	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d001      	beq.n	8000dee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dea:	f004 fe7d 	bl	8005ae8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e04:	f7ff fff6 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	; (8000e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <LoopForever+0xe>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	; (8000e4c <LoopForever+0x16>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2e:	f005 f849 	bl	8005ec4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e32:	f7ff fbf5 	bl	8000620 <main>

08000e36 <LoopForever>:

LoopForever:
  b LoopForever
 8000e36:	e7fe      	b.n	8000e36 <LoopForever>
  ldr   r0, =_estack
 8000e38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e44:	08006050 	.word	0x08006050
  ldr r2, =_sbss
 8000e48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e4c:	20001b08 	.word	0x20001b08

08000e50 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_COMP_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x3c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Init+0x3c>)
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	0049      	lsls	r1, r1, #1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 f810 	bl	8000e94 <HAL_InitTick>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e001      	b.n	8000e84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fe1a 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_InitTick+0x88>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d02b      	beq.n	8000f04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_InitTick+0x8c>)
 8000eae:	681c      	ldr	r4, [r3, #0]
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_InitTick+0x88>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	23fa      	movs	r3, #250	; 0xfa
 8000eb8:	0098      	lsls	r0, r3, #2
 8000eba:	f7ff f925 	bl	8000108 <__udivsi3>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	f7ff f920 	bl	8000108 <__udivsi3>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 fda3 	bl	8001a16 <HAL_SYSTICK_Config>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d112      	bne.n	8000efa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d80a      	bhi.n	8000ef0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	2301      	movs	r3, #1
 8000ede:	425b      	negs	r3, r3
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 fd82 	bl	80019ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_InitTick+0x90>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e00d      	b.n	8000f0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e008      	b.n	8000f0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efa:	230f      	movs	r3, #15
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e003      	b.n	8000f0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	781b      	ldrb	r3, [r3, #0]
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b005      	add	sp, #20
 8000f18:	bd90      	pop	{r4, r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	001a      	movs	r2, r3
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	18d2      	adds	r2, r2, r3
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_IncTick+0x20>)
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20001ac4 	.word	0x20001ac4

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <HAL_GetTick+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20001ac4 	.word	0x20001ac4

08000f60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	0019      	movs	r1, r3
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	40010000 	.word	0x40010000
 8000f88:	fffff9ff 	.word	0xfffff9ff

08000f8c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	fe3fffff 	.word	0xfe3fffff

08000fb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	23e0      	movs	r3, #224	; 0xe0
 8000fc2:	045b      	lsls	r3, r3, #17
 8000fc4:	4013      	ands	r3, r2
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	4091      	lsls	r1, r2
 8000fe8:	000a      	movs	r2, r1
 8000fea:	43d2      	mvns	r2, r2
 8000fec:	401a      	ands	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4099      	lsls	r1, r3
 8000ff8:	000b      	movs	r3, r1
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bd80      	pop	{r7, pc}

08001008 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	211f      	movs	r1, #31
 800101c:	400a      	ands	r2, r1
 800101e:	210f      	movs	r1, #15
 8001020:	4091      	lsls	r1, r2
 8001022:	000a      	movs	r2, r1
 8001024:	43d2      	mvns	r2, r2
 8001026:	401a      	ands	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	0e9b      	lsrs	r3, r3, #26
 800102c:	210f      	movs	r1, #15
 800102e:	4019      	ands	r1, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	201f      	movs	r0, #31
 8001034:	4003      	ands	r3, r0
 8001036:	4099      	lsls	r1, r3
 8001038:	000b      	movs	r3, r1
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}

08001048 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	035b      	lsls	r3, r3, #13
 800105a:	0b5b      	lsrs	r3, r3, #13
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}

0800106a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	0352      	lsls	r2, r2, #13
 800107c:	0b52      	lsrs	r2, r2, #13
 800107e:	43d2      	mvns	r2, r2
 8001080:	401a      	ands	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	0212      	lsls	r2, r2, #8
 80010a4:	43d2      	mvns	r2, r2
 80010a6:	401a      	ands	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	400b      	ands	r3, r1
 80010b0:	4904      	ldr	r1, [pc, #16]	; (80010c4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80010b2:	400b      	ands	r3, r1
 80010b4:	431a      	orrs	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b004      	add	sp, #16
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	07ffff00 	.word	0x07ffff00

080010c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <LL_ADC_EnableInternalRegulator+0x24>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	0552      	lsls	r2, r2, #21
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	6fffffe8 	.word	0x6fffffe8

080010f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	055b      	lsls	r3, r3, #21
 8001100:	401a      	ands	r2, r3
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	055b      	lsls	r3, r3, #21
 8001106:	429a      	cmp	r2, r3
 8001108:	d101      	bne.n	800110e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800110e:	2300      	movs	r3, #0
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}

08001118 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2201      	movs	r2, #1
 8001126:	4013      	ands	r3, r2
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <LL_ADC_IsEnabled+0x18>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <LL_ADC_IsEnabled+0x1a>
 8001130:	2300      	movs	r3, #0
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}

0800113a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2204      	movs	r2, #4
 8001148:	4013      	ands	r3, r2
 800114a:	2b04      	cmp	r3, #4
 800114c:	d101      	bne.n	8001152 <LL_ADC_REG_IsConversionOngoing+0x18>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001152:	2300      	movs	r3, #0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	231f      	movs	r3, #31
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1b1      	b.n	80014e6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10a      	bne.n	80011a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff fcc3 	bl	8000b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2254      	movs	r2, #84	; 0x54
 800119c:	2100      	movs	r1, #0
 800119e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff ffa3 	bl	80010f0 <LL_ADC_IsInternalRegulatorEnabled>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d115      	bne.n	80011da <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff88 	bl	80010c8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011b8:	4bcd      	ldr	r3, [pc, #820]	; (80014f0 <HAL_ADC_Init+0x394>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	49cd      	ldr	r1, [pc, #820]	; (80014f4 <HAL_ADC_Init+0x398>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f7fe ffa2 	bl	8000108 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	3301      	adds	r3, #1
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011cc:	e002      	b.n	80011d4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f9      	bne.n	80011ce <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff ff86 	bl	80010f0 <LL_ADC_IsInternalRegulatorEnabled>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d10f      	bne.n	8001208 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	2210      	movs	r2, #16
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	2201      	movs	r2, #1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001200:	231f      	movs	r3, #31
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ff94 	bl	800113a <LL_ADC_REG_IsConversionOngoing>
 8001212:	0003      	movs	r3, r0
 8001214:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	2210      	movs	r2, #16
 800121c:	4013      	ands	r3, r2
 800121e:	d000      	beq.n	8001222 <HAL_ADC_Init+0xc6>
 8001220:	e154      	b.n	80014cc <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d000      	beq.n	800122a <HAL_ADC_Init+0xce>
 8001228:	e150      	b.n	80014cc <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4ab2      	ldr	r2, [pc, #712]	; (80014f8 <HAL_ADC_Init+0x39c>)
 8001230:	4013      	ands	r3, r2
 8001232:	2202      	movs	r2, #2
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff ff6a 	bl	8001118 <LL_ADC_IsEnabled>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d156      	bne.n	80012f6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2218      	movs	r2, #24
 8001250:	4393      	bics	r3, r2
 8001252:	0019      	movs	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	0f9b      	lsrs	r3, r3, #30
 8001266:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800126c:	4313      	orrs	r3, r2
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	223c      	movs	r2, #60	; 0x3c
 8001278:	5c9b      	ldrb	r3, [r3, r2]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d111      	bne.n	80012a2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	0f9b      	lsrs	r3, r3, #30
 8001284:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800128a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001290:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001296:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4313      	orrs	r3, r2
 800129c:	2201      	movs	r2, #1
 800129e:	4313      	orrs	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a94      	ldr	r2, [pc, #592]	; (80014fc <HAL_ADC_Init+0x3a0>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	0019      	movs	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	23c0      	movs	r3, #192	; 0xc0
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d018      	beq.n	80012f6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	05db      	lsls	r3, r3, #23
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d012      	beq.n	80012f6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	061b      	lsls	r3, r3, #24
 80012d8:	429a      	cmp	r2, r3
 80012da:	d00c      	beq.n	80012f6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012dc:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_ADC_Init+0x3a4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a88      	ldr	r2, [pc, #544]	; (8001504 <HAL_ADC_Init+0x3a8>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	23f0      	movs	r3, #240	; 0xf0
 80012ec:	039b      	lsls	r3, r3, #14
 80012ee:	401a      	ands	r2, r3
 80012f0:	4b83      	ldr	r3, [pc, #524]	; (8001500 <HAL_ADC_Init+0x3a4>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7e1b      	ldrb	r3, [r3, #24]
 80012fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7e5b      	ldrb	r3, [r3, #25]
 8001300:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001302:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e9b      	ldrb	r3, [r3, #26]
 8001308:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800130a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_ADC_Init+0x1be>
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	015b      	lsls	r3, r3, #5
 8001318:	e000      	b.n	800131c <HAL_ADC_Init+0x1c0>
 800131a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800131c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001322:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	da04      	bge.n	8001336 <HAL_ADC_Init+0x1da>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	085b      	lsrs	r3, r3, #1
 8001334:	e001      	b.n	800133a <HAL_ADC_Init+0x1de>
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800133a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	212c      	movs	r1, #44	; 0x2c
 8001340:	5c5b      	ldrb	r3, [r3, r1]
 8001342:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001344:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	5c9b      	ldrb	r3, [r3, r2]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d115      	bne.n	8001382 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7e9b      	ldrb	r3, [r3, #26]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	0252      	lsls	r2, r2, #9
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	e00b      	b.n	8001382 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	2220      	movs	r2, #32
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137a:	2201      	movs	r2, #1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00a      	beq.n	80013a0 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138e:	23e0      	movs	r3, #224	; 0xe0
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001398:	4313      	orrs	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_ADC_Init+0x3ac>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4a53      	ldr	r2, [pc, #332]	; (800150c <HAL_ADC_Init+0x3b0>)
 80013be:	4013      	ands	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d4:	001a      	movs	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	f7ff fdf9 	bl	8000fce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e4:	494a      	ldr	r1, [pc, #296]	; (8001510 <HAL_ADC_Init+0x3b4>)
 80013e6:	001a      	movs	r2, r3
 80013e8:	f7ff fdf1 	bl	8000fce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2110      	movs	r1, #16
 8001400:	4249      	negs	r1, r1
 8001402:	430a      	orrs	r2, r1
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
 8001406:	e03a      	b.n	800147e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	039b      	lsls	r3, r3, #14
 8001410:	429a      	cmp	r2, r3
 8001412:	d134      	bne.n	800147e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	e00c      	b.n	8001434 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	40da      	lsrs	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	220f      	movs	r2, #15
 8001428:	4013      	ands	r3, r2
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d006      	beq.n	800143c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	3301      	adds	r3, #1
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	2b07      	cmp	r3, #7
 8001438:	d9ef      	bls.n	800141a <HAL_ADC_Init+0x2be>
 800143a:	e000      	b.n	800143e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 800143c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d109      	bne.n	8001458 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2110      	movs	r1, #16
 8001450:	4249      	negs	r1, r1
 8001452:	430a      	orrs	r2, r1
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
 8001456:	e012      	b.n	800147e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	3b01      	subs	r3, #1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	221c      	movs	r2, #28
 8001468:	4013      	ands	r3, r2
 800146a:	2210      	movs	r2, #16
 800146c:	4252      	negs	r2, r2
 800146e:	409a      	lsls	r2, r3
 8001470:	0011      	movs	r1, r2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a23      	ldr	r2, [pc, #140]	; (8001514 <HAL_ADC_Init+0x3b8>)
 8001486:	4013      	ands	r3, r2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	429a      	cmp	r2, r3
 800148c:	d10b      	bne.n	80014a6 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	2203      	movs	r2, #3
 800149a:	4393      	bics	r3, r2
 800149c:	2201      	movs	r2, #1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80014a4:	e01c      	b.n	80014e0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	2212      	movs	r2, #18
 80014ac:	4393      	bics	r3, r2
 80014ae:	2210      	movs	r2, #16
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	2201      	movs	r2, #1
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80014c2:	231f      	movs	r3, #31
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80014ca:	e009      	b.n	80014e0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	2210      	movs	r2, #16
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014d8:	231f      	movs	r3, #31
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80014e0:	231f      	movs	r3, #31
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	781b      	ldrb	r3, [r3, #0]
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b008      	add	sp, #32
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000000 	.word	0x20000000
 80014f4:	00030d40 	.word	0x00030d40
 80014f8:	fffffefd 	.word	0xfffffefd
 80014fc:	1ffffc02 	.word	0x1ffffc02
 8001500:	40012708 	.word	0x40012708
 8001504:	ffc3ffff 	.word	0xffc3ffff
 8001508:	fffe0219 	.word	0xfffe0219
 800150c:	dffffc02 	.word	0xdffffc02
 8001510:	07ffff04 	.word	0x07ffff04
 8001514:	833fffe7 	.word	0x833fffe7

08001518 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001522:	2317      	movs	r3, #23
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2254      	movs	r2, #84	; 0x54
 8001532:	5c9b      	ldrb	r3, [r3, r2]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_ADC_ConfigChannel+0x24>
 8001538:	2302      	movs	r3, #2
 800153a:	e1c0      	b.n	80018be <HAL_ADC_ConfigChannel+0x3a6>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2254      	movs	r2, #84	; 0x54
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fdf6 	bl	800113a <LL_ADC_REG_IsConversionOngoing>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d000      	beq.n	8001554 <HAL_ADC_ConfigChannel+0x3c>
 8001552:	e1a3      	b.n	800189c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d100      	bne.n	800155e <HAL_ADC_ConfigChannel+0x46>
 800155c:	e143      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	429a      	cmp	r2, r3
 8001568:	d004      	beq.n	8001574 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800156e:	4ac1      	ldr	r2, [pc, #772]	; (8001874 <HAL_ADC_ConfigChannel+0x35c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d108      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0019      	movs	r1, r3
 800157e:	0010      	movs	r0, r2
 8001580:	f7ff fd62 	bl	8001048 <LL_ADC_REG_SetSequencerChAdd>
 8001584:	e0c9      	b.n	800171a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	211f      	movs	r1, #31
 8001590:	400b      	ands	r3, r1
 8001592:	210f      	movs	r1, #15
 8001594:	4099      	lsls	r1, r3
 8001596:	000b      	movs	r3, r1
 8001598:	43db      	mvns	r3, r3
 800159a:	4013      	ands	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	035b      	lsls	r3, r3, #13
 80015a4:	0b5b      	lsrs	r3, r3, #13
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x9c>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0e9b      	lsrs	r3, r3, #26
 80015ae:	221f      	movs	r2, #31
 80015b0:	4013      	ands	r3, r2
 80015b2:	e098      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d000      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xa8>
 80015be:	e091      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x1cc>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d000      	beq.n	80015cc <HAL_ADC_ConfigChannel+0xb4>
 80015ca:	e089      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x1c8>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2204      	movs	r2, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d000      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0xc0>
 80015d6:	e081      	b.n	80016dc <HAL_ADC_ConfigChannel+0x1c4>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2208      	movs	r2, #8
 80015de:	4013      	ands	r3, r2
 80015e0:	d000      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0xcc>
 80015e2:	e079      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1c0>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2210      	movs	r2, #16
 80015ea:	4013      	ands	r3, r2
 80015ec:	d000      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0xd8>
 80015ee:	e071      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1bc>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2220      	movs	r2, #32
 80015f6:	4013      	ands	r3, r2
 80015f8:	d000      	beq.n	80015fc <HAL_ADC_ConfigChannel+0xe4>
 80015fa:	e069      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x1b8>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	4013      	ands	r3, r2
 8001604:	d000      	beq.n	8001608 <HAL_ADC_ConfigChannel+0xf0>
 8001606:	e061      	b.n	80016cc <HAL_ADC_ConfigChannel+0x1b4>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	4013      	ands	r3, r2
 8001610:	d000      	beq.n	8001614 <HAL_ADC_ConfigChannel+0xfc>
 8001612:	e059      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x1b0>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4013      	ands	r3, r2
 800161e:	d151      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x1ac>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4013      	ands	r3, r2
 800162a:	d149      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x1a8>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4013      	ands	r3, r2
 8001636:	d141      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x1a4>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4013      	ands	r3, r2
 8001642:	d139      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1a0>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	015b      	lsls	r3, r3, #5
 800164c:	4013      	ands	r3, r2
 800164e:	d131      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x19c>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	019b      	lsls	r3, r3, #6
 8001658:	4013      	ands	r3, r2
 800165a:	d129      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x198>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	01db      	lsls	r3, r3, #7
 8001664:	4013      	ands	r3, r2
 8001666:	d121      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x194>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	4013      	ands	r3, r2
 8001672:	d119      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x190>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	4013      	ands	r3, r2
 800167e:	d111      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x18c>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d109      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x188>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	02db      	lsls	r3, r3, #11
 8001694:	4013      	ands	r3, r2
 8001696:	d001      	beq.n	800169c <HAL_ADC_ConfigChannel+0x184>
 8001698:	2312      	movs	r3, #18
 800169a:	e024      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 800169c:	2300      	movs	r3, #0
 800169e:	e022      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016a0:	2311      	movs	r3, #17
 80016a2:	e020      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016a4:	2310      	movs	r3, #16
 80016a6:	e01e      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016a8:	230f      	movs	r3, #15
 80016aa:	e01c      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016ac:	230e      	movs	r3, #14
 80016ae:	e01a      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016b0:	230d      	movs	r3, #13
 80016b2:	e018      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016b4:	230c      	movs	r3, #12
 80016b6:	e016      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016b8:	230b      	movs	r3, #11
 80016ba:	e014      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016bc:	230a      	movs	r3, #10
 80016be:	e012      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016c0:	2309      	movs	r3, #9
 80016c2:	e010      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016c4:	2308      	movs	r3, #8
 80016c6:	e00e      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016c8:	2307      	movs	r3, #7
 80016ca:	e00c      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016cc:	2306      	movs	r3, #6
 80016ce:	e00a      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016d0:	2305      	movs	r3, #5
 80016d2:	e008      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016d4:	2304      	movs	r3, #4
 80016d6:	e006      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016d8:	2303      	movs	r3, #3
 80016da:	e004      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1ce>
 80016e4:	2300      	movs	r3, #0
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	6852      	ldr	r2, [r2, #4]
 80016ea:	201f      	movs	r0, #31
 80016ec:	4002      	ands	r2, r0
 80016ee:	4093      	lsls	r3, r2
 80016f0:	000a      	movs	r2, r1
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	429a      	cmp	r2, r3
 8001706:	d808      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	001a      	movs	r2, r3
 8001716:	f7ff fc77 	bl	8001008 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	001a      	movs	r2, r3
 8001728:	f7ff fcb2 	bl	8001090 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db00      	blt.n	8001736 <HAL_ADC_ConfigChannel+0x21e>
 8001734:	e0bc      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001736:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff fc3b 	bl	8000fb4 <LL_ADC_GetCommonPathInternalCh>
 800173e:	0003      	movs	r3, r0
 8001740:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a4d      	ldr	r2, [pc, #308]	; (800187c <HAL_ADC_ConfigChannel+0x364>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d122      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001754:	d11d      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	0412      	lsls	r2, r2, #16
 800175c:	4313      	orrs	r3, r2
 800175e:	4a46      	ldr	r2, [pc, #280]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 8001760:	0019      	movs	r1, r3
 8001762:	0010      	movs	r0, r2
 8001764:	f7ff fc12 	bl	8000f8c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001768:	4b45      	ldr	r3, [pc, #276]	; (8001880 <HAL_ADC_ConfigChannel+0x368>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4945      	ldr	r1, [pc, #276]	; (8001884 <HAL_ADC_ConfigChannel+0x36c>)
 800176e:	0018      	movs	r0, r3
 8001770:	f7fe fcca 	bl	8000108 <__udivsi3>
 8001774:	0003      	movs	r3, r0
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	0013      	movs	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	189b      	adds	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001782:	e002      	b.n	800178a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3b01      	subs	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f9      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001790:	e08e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <HAL_ADC_ConfigChannel+0x370>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d10e      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x2a2>
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	045b      	lsls	r3, r3, #17
 80017a2:	4013      	ands	r3, r2
 80017a4:	d109      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0452      	lsls	r2, r2, #17
 80017ac:	4313      	orrs	r3, r2
 80017ae:	4a32      	ldr	r2, [pc, #200]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 80017b0:	0019      	movs	r1, r3
 80017b2:	0010      	movs	r0, r2
 80017b4:	f7ff fbea 	bl	8000f8c <LL_ADC_SetCommonPathInternalCh>
 80017b8:	e07a      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <HAL_ADC_ConfigChannel+0x374>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d000      	beq.n	80017c6 <HAL_ADC_ConfigChannel+0x2ae>
 80017c4:	e074      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	03db      	lsls	r3, r3, #15
 80017cc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017ce:	d000      	beq.n	80017d2 <HAL_ADC_ConfigChannel+0x2ba>
 80017d0:	e06e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	03d2      	lsls	r2, r2, #15
 80017d8:	4313      	orrs	r3, r2
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 80017dc:	0019      	movs	r1, r3
 80017de:	0010      	movs	r0, r2
 80017e0:	f7ff fbd4 	bl	8000f8c <LL_ADC_SetCommonPathInternalCh>
 80017e4:	e064      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d004      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_ADC_ConfigChannel+0x35c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d107      	bne.n	800180c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0019      	movs	r1, r3
 8001806:	0010      	movs	r0, r2
 8001808:	f7ff fc2f 	bl	800106a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	da4d      	bge.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff fbcc 	bl	8000fb4 <LL_ADC_GetCommonPathInternalCh>
 800181c:	0003      	movs	r3, r0
 800181e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a15      	ldr	r2, [pc, #84]	; (800187c <HAL_ADC_ConfigChannel+0x364>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d108      	bne.n	800183c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4a18      	ldr	r2, [pc, #96]	; (8001890 <HAL_ADC_ConfigChannel+0x378>)
 800182e:	4013      	ands	r3, r2
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 8001832:	0019      	movs	r1, r3
 8001834:	0010      	movs	r0, r2
 8001836:	f7ff fba9 	bl	8000f8c <LL_ADC_SetCommonPathInternalCh>
 800183a:	e039      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_ADC_ConfigChannel+0x370>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d108      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_ADC_ConfigChannel+0x37c>)
 800184a:	4013      	ands	r3, r2
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 800184e:	0019      	movs	r1, r3
 8001850:	0010      	movs	r0, r2
 8001852:	f7ff fb9b 	bl	8000f8c <LL_ADC_SetCommonPathInternalCh>
 8001856:	e02b      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_ADC_ConfigChannel+0x374>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d126      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <HAL_ADC_ConfigChannel+0x380>)
 8001866:	4013      	ands	r3, r2
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_ADC_ConfigChannel+0x360>)
 800186a:	0019      	movs	r1, r3
 800186c:	0010      	movs	r0, r2
 800186e:	f7ff fb8d 	bl	8000f8c <LL_ADC_SetCommonPathInternalCh>
 8001872:	e01d      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
 8001874:	80000004 	.word	0x80000004
 8001878:	40012708 	.word	0x40012708
 800187c:	b0001000 	.word	0xb0001000
 8001880:	20000000 	.word	0x20000000
 8001884:	00030d40 	.word	0x00030d40
 8001888:	b8004000 	.word	0xb8004000
 800188c:	b4002000 	.word	0xb4002000
 8001890:	ff7fffff 	.word	0xff7fffff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	2220      	movs	r2, #32
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018a8:	2317      	movs	r3, #23
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2254      	movs	r2, #84	; 0x54
 80018b4:	2100      	movs	r1, #0
 80018b6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80018b8:	2317      	movs	r3, #23
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	781b      	ldrb	r3, [r3, #0]
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b006      	add	sp, #24
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	0002      	movs	r2, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b7f      	cmp	r3, #127	; 0x7f
 80018dc:	d828      	bhi.n	8001930 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <__NVIC_SetPriority+0xd4>)
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	33c0      	adds	r3, #192	; 0xc0
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	589b      	ldr	r3, [r3, r2]
 80018ee:	1dfa      	adds	r2, r7, #7
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	0011      	movs	r1, r2
 80018f4:	2203      	movs	r2, #3
 80018f6:	400a      	ands	r2, r1
 80018f8:	00d2      	lsls	r2, r2, #3
 80018fa:	21ff      	movs	r1, #255	; 0xff
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	43d2      	mvns	r2, r2
 8001902:	401a      	ands	r2, r3
 8001904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	22ff      	movs	r2, #255	; 0xff
 800190c:	401a      	ands	r2, r3
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	0018      	movs	r0, r3
 8001914:	2303      	movs	r3, #3
 8001916:	4003      	ands	r3, r0
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191c:	481f      	ldr	r0, [pc, #124]	; (800199c <__NVIC_SetPriority+0xd4>)
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	430a      	orrs	r2, r1
 8001928:	33c0      	adds	r3, #192	; 0xc0
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800192e:	e031      	b.n	8001994 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <__NVIC_SetPriority+0xd8>)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	0019      	movs	r1, r3
 8001938:	230f      	movs	r3, #15
 800193a:	400b      	ands	r3, r1
 800193c:	3b08      	subs	r3, #8
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3306      	adds	r3, #6
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	3304      	adds	r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	; 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <__NVIC_SetPriority+0xd8>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	001c      	movs	r4, r3
 8001980:	230f      	movs	r3, #15
 8001982:	4023      	ands	r3, r4
 8001984:	3b08      	subs	r3, #8
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	430a      	orrs	r2, r1
 800198a:	3306      	adds	r3, #6
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	18c3      	adds	r3, r0, r3
 8001990:	3304      	adds	r3, #4
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b003      	add	sp, #12
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	1e5a      	subs	r2, r3, #1
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	045b      	lsls	r3, r3, #17
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d301      	bcc.n	80019bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b8:	2301      	movs	r3, #1
 80019ba:	e010      	b.n	80019de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <SysTick_Config+0x44>)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	3a01      	subs	r2, #1
 80019c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c4:	2301      	movs	r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	2103      	movs	r1, #3
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff ff7c 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x44>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x44>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b002      	add	sp, #8
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	210f      	movs	r1, #15
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	1c02      	adds	r2, r0, #0
 80019fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	0011      	movs	r1, r2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ffbf 	bl	80019a4 <SysTick_Config>
 8001a26:	0003      	movs	r3, r0
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	e147      	b.n	8001cd0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4091      	lsls	r1, r2
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <HAL_GPIO_Init+0x28>
 8001a56:	e138      	b.n	8001cca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d005      	beq.n	8001a70 <HAL_GPIO_Init+0x40>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d130      	bne.n	8001ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0013      	movs	r3, r2
 8001a80:	43da      	mvns	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	0013      	movs	r3, r2
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	2201      	movs	r2, #1
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d017      	beq.n	8001b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	409a      	lsls	r2, r3
 8001aec:	0013      	movs	r3, r2
 8001aee:	43da      	mvns	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	409a      	lsls	r2, r3
 8001b00:	0013      	movs	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2203      	movs	r2, #3
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d123      	bne.n	8001b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	58d3      	ldr	r3, [r2, r3]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	409a      	lsls	r2, r3
 8001b34:	0013      	movs	r3, r2
 8001b36:	43da      	mvns	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2107      	movs	r1, #7
 8001b46:	400b      	ands	r3, r1
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	6939      	ldr	r1, [r7, #16]
 8001b60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	43da      	mvns	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	401a      	ands	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_GPIO_Init+0x174>
 8001ba2:	e092      	b.n	8001cca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3318      	adds	r3, #24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	589b      	ldr	r3, [r3, r2]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	220f      	movs	r2, #15
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	23a0      	movs	r3, #160	; 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x1ca>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_GPIO_Init+0x2bc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x1c6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a44      	ldr	r2, [pc, #272]	; (8001cf0 <HAL_GPIO_Init+0x2c0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x1c2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <HAL_GPIO_Init+0x2c4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x1be>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	2103      	movs	r1, #3
 8001c00:	400a      	ands	r2, r1
 8001c02:	00d2      	lsls	r2, r2, #3
 8001c04:	4093      	lsls	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c0c:	4936      	ldr	r1, [pc, #216]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3318      	adds	r3, #24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c1a:	4a33      	ldr	r2, [pc, #204]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	58d3      	ldr	r3, [r2, r3]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43da      	mvns	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	4013      	ands	r3, r2
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c40:	4929      	ldr	r1, [pc, #164]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c4a:	2384      	movs	r3, #132	; 0x84
 8001c4c:	58d3      	ldr	r3, [r2, r3]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	4013      	ands	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c6e:	491e      	ldr	r1, [pc, #120]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c70:	2284      	movs	r2, #132	; 0x84
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	035b      	lsls	r3, r3, #13
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	039b      	lsls	r3, r3, #14
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	40da      	lsrs	r2, r3
 8001cd8:	1e13      	subs	r3, r2, #0
 8001cda:	d000      	beq.n	8001cde <HAL_GPIO_Init+0x2ae>
 8001cdc:	e6b0      	b.n	8001a40 <HAL_GPIO_Init+0x10>
  }
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b006      	add	sp, #24
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	50000400 	.word	0x50000400
 8001cf0:	50000800 	.word	0x50000800
 8001cf4:	50000c00 	.word	0x50000c00

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	0008      	movs	r0, r1
 8001d02:	0011      	movs	r1, r2
 8001d04:	1cbb      	adds	r3, r7, #2
 8001d06:	1c02      	adds	r2, r0, #0
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	1c7b      	adds	r3, r7, #1
 8001d0c:	1c0a      	adds	r2, r1, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d10:	1c7b      	adds	r3, r7, #1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d18:	1cbb      	adds	r3, r7, #2
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d22:	1cbb      	adds	r3, r7, #2
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e082      	b.n	8001e4c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2241      	movs	r2, #65	; 0x41
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	2100      	movs	r1, #0
 8001d58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7fe ff37 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2241      	movs	r2, #65	; 0x41
 8001d66:	2124      	movs	r1, #36	; 0x24
 8001d68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	438a      	bics	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4934      	ldr	r1, [pc, #208]	; (8001e54 <HAL_I2C_Init+0x120>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4931      	ldr	r1, [pc, #196]	; (8001e58 <HAL_I2C_Init+0x124>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	0209      	lsls	r1, r1, #8
 8001dac:	430a      	orrs	r2, r1
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	e007      	b.n	8001dc2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2184      	movs	r1, #132	; 0x84
 8001dbc:	0209      	lsls	r1, r1, #8
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d104      	bne.n	8001dd4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	491f      	ldr	r1, [pc, #124]	; (8001e5c <HAL_I2C_Init+0x128>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	491a      	ldr	r1, [pc, #104]	; (8001e58 <HAL_I2C_Init+0x124>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69d9      	ldr	r1, [r3, #28]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1a      	ldr	r2, [r3, #32]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2241      	movs	r2, #65	; 0x41
 8001e38:	2120      	movs	r1, #32
 8001e3a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2242      	movs	r2, #66	; 0x42
 8001e46:	2100      	movs	r1, #0
 8001e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b002      	add	sp, #8
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	f0ffffff 	.word	0xf0ffffff
 8001e58:	ffff7fff 	.word	0xffff7fff
 8001e5c:	02008000 	.word	0x02008000

08001e60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2241      	movs	r2, #65	; 0x41
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d138      	bne.n	8001ee8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e032      	b.n	8001eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	2101      	movs	r1, #1
 8001e8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2241      	movs	r2, #65	; 0x41
 8001e90:	2124      	movs	r1, #36	; 0x24
 8001e92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	438a      	bics	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4911      	ldr	r1, [pc, #68]	; (8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2241      	movs	r2, #65	; 0x41
 8001ed8:	2120      	movs	r1, #32
 8001eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ee8:	2302      	movs	r3, #2
  }
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	ffffefff 	.word	0xffffefff

08001ef8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2241      	movs	r2, #65	; 0x41
 8001f06:	5c9b      	ldrb	r3, [r3, r2]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d139      	bne.n	8001f82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	5c9b      	ldrb	r3, [r3, r2]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e033      	b.n	8001f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2241      	movs	r2, #65	; 0x41
 8001f28:	2124      	movs	r1, #36	; 0x24
 8001f2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	438a      	bics	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2241      	movs	r2, #65	; 0x41
 8001f72:	2120      	movs	r1, #32
 8001f74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	fffff0ff 	.word	0xfffff0ff

08001f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d11f      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	0013      	movs	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	189b      	adds	r3, r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4912      	ldr	r1, [pc, #72]	; (800200c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7fe f8a0 	bl	8000108 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fce:	e008      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e001      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e009      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	401a      	ands	r2, r3
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d0ed      	beq.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40007000 	.word	0x40007000
 8002004:	fffff9ff 	.word	0xfffff9ff
 8002008:	20000000 	.word	0x20000000
 800200c:	000f4240 	.word	0x000f4240

08002010 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	23e0      	movs	r3, #224	; 0xe0
 800201a:	01db      	lsls	r3, r3, #7
 800201c:	4013      	ands	r3, r2
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e304      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d100      	bne.n	8002046 <HAL_RCC_OscConfig+0x1e>
 8002044:	e07c      	b.n	8002140 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002046:	4bc3      	ldr	r3, [pc, #780]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2238      	movs	r2, #56	; 0x38
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002050:	4bc0      	ldr	r3, [pc, #768]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b10      	cmp	r3, #16
 800205e:	d102      	bne.n	8002066 <HAL_RCC_OscConfig+0x3e>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d002      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4bb9      	ldr	r3, [pc, #740]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	4013      	ands	r3, r2
 8002076:	d062      	beq.n	800213e <HAL_RCC_OscConfig+0x116>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d15e      	bne.n	800213e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e2df      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	025b      	lsls	r3, r3, #9
 800208c:	429a      	cmp	r2, r3
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x78>
 8002090:	4bb0      	ldr	r3, [pc, #704]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4baf      	ldr	r3, [pc, #700]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0249      	lsls	r1, r1, #9
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e020      	b.n	80020e2 <HAL_RCC_OscConfig+0xba>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	23a0      	movs	r3, #160	; 0xa0
 80020a6:	02db      	lsls	r3, r3, #11
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10e      	bne.n	80020ca <HAL_RCC_OscConfig+0xa2>
 80020ac:	4ba9      	ldr	r3, [pc, #676]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4ba8      	ldr	r3, [pc, #672]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	02c9      	lsls	r1, r1, #11
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	4ba6      	ldr	r3, [pc, #664]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4ba5      	ldr	r3, [pc, #660]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	0249      	lsls	r1, r1, #9
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e00b      	b.n	80020e2 <HAL_RCC_OscConfig+0xba>
 80020ca:	4ba2      	ldr	r3, [pc, #648]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4ba1      	ldr	r3, [pc, #644]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020d0:	49a1      	ldr	r1, [pc, #644]	; (8002358 <HAL_RCC_OscConfig+0x330>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	4b9f      	ldr	r3, [pc, #636]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b9e      	ldr	r3, [pc, #632]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80020dc:	499f      	ldr	r1, [pc, #636]	; (800235c <HAL_RCC_OscConfig+0x334>)
 80020de:	400a      	ands	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d014      	beq.n	8002114 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7fe ff2f 	bl	8000f4c <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7fe ff2a 	bl	8000f4c <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e29e      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002106:	4b93      	ldr	r3, [pc, #588]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	029b      	lsls	r3, r3, #10
 800210e:	4013      	ands	r3, r2
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xcc>
 8002112:	e015      	b.n	8002140 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe ff1a 	bl	8000f4c <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211e:	f7fe ff15 	bl	8000f4c <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e289      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002130:	4b88      	ldr	r3, [pc, #544]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	029b      	lsls	r3, r3, #10
 8002138:	4013      	ands	r3, r2
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0xf6>
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d100      	bne.n	800214c <HAL_RCC_OscConfig+0x124>
 800214a:	e099      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800214c:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2238      	movs	r2, #56	; 0x38
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002156:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2203      	movs	r2, #3
 800215c:	4013      	ands	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b10      	cmp	r3, #16
 8002164:	d102      	bne.n	800216c <HAL_RCC_OscConfig+0x144>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d002      	beq.n	8002172 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d135      	bne.n	80021de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002172:	4b78      	ldr	r3, [pc, #480]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4013      	ands	r3, r2
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x162>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e25c      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b72      	ldr	r3, [pc, #456]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a74      	ldr	r2, [pc, #464]	; (8002360 <HAL_RCC_OscConfig+0x338>)
 8002190:	4013      	ands	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d112      	bne.n	80021cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021a6:	4b6b      	ldr	r3, [pc, #428]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x33c>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	4b67      	ldr	r3, [pc, #412]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021ba:	4b66      	ldr	r3, [pc, #408]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0adb      	lsrs	r3, r3, #11
 80021c0:	2207      	movs	r2, #7
 80021c2:	4013      	ands	r3, r2
 80021c4:	4a68      	ldr	r2, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x340>)
 80021c6:	40da      	lsrs	r2, r3
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x344>)
 80021ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x348>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fe5f 	bl	8000e94 <HAL_InitTick>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d051      	beq.n	800227e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e232      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d030      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <HAL_RCC_OscConfig+0x33c>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	4b57      	ldr	r3, [pc, #348]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021fa:	4b56      	ldr	r3, [pc, #344]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b55      	ldr	r3, [pc, #340]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0049      	lsls	r1, r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe fea0 	bl	8000f4c <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7fe fe9b 	bl	8000f4c <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e20f      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002224:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4013      	ands	r3, r2
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b48      	ldr	r3, [pc, #288]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a4a      	ldr	r2, [pc, #296]	; (8002360 <HAL_RCC_OscConfig+0x338>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	021a      	lsls	r2, r3, #8
 8002240:	4b44      	ldr	r3, [pc, #272]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002248:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800224e:	4949      	ldr	r1, [pc, #292]	; (8002374 <HAL_RCC_OscConfig+0x34c>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fe7a 	bl	8000f4c <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225e:	f7fe fe75 	bl	8000f4c <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1e9      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4013      	ands	r3, r2
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x236>
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2208      	movs	r2, #8
 8002286:	4013      	ands	r3, r2
 8002288:	d047      	beq.n	800231a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2238      	movs	r2, #56	; 0x38
 8002290:	4013      	ands	r3, r2
 8002292:	2b18      	cmp	r3, #24
 8002294:	d10a      	bne.n	80022ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002296:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	2202      	movs	r2, #2
 800229c:	4013      	ands	r3, r2
 800229e:	d03c      	beq.n	800231a <HAL_RCC_OscConfig+0x2f2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d138      	bne.n	800231a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e1cb      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d019      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80022b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022b8:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	430a      	orrs	r2, r1
 80022be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fe44 	bl	8000f4c <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe fe3f 	bl	8000f4c <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1b3      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	d0f1      	beq.n	80022ca <HAL_RCC_OscConfig+0x2a2>
 80022e6:	e018      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80022ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	438a      	bics	r2, r1
 80022f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fe2a 	bl	8000f4c <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fe25 	bl	8000f4c <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e199      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002314:	2202      	movs	r2, #2
 8002316:	4013      	ands	r3, r2
 8002318:	d1f1      	bne.n	80022fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2204      	movs	r2, #4
 8002320:	4013      	ands	r3, r2
 8002322:	d100      	bne.n	8002326 <HAL_RCC_OscConfig+0x2fe>
 8002324:	e0c6      	b.n	80024b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	231f      	movs	r3, #31
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2238      	movs	r2, #56	; 0x38
 8002334:	4013      	ands	r3, r2
 8002336:	2b20      	cmp	r3, #32
 8002338:	d11e      	bne.n	8002378 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_OscConfig+0x32c>)
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d100      	bne.n	8002346 <HAL_RCC_OscConfig+0x31e>
 8002344:	e0b6      	b.n	80024b4 <HAL_RCC_OscConfig+0x48c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d000      	beq.n	8002350 <HAL_RCC_OscConfig+0x328>
 800234e:	e0b1      	b.n	80024b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e177      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
 8002354:	40021000 	.word	0x40021000
 8002358:	fffeffff 	.word	0xfffeffff
 800235c:	fffbffff 	.word	0xfffbffff
 8002360:	ffff80ff 	.word	0xffff80ff
 8002364:	ffffc7ff 	.word	0xffffc7ff
 8002368:	00f42400 	.word	0x00f42400
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004
 8002374:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002378:	4bb4      	ldr	r3, [pc, #720]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800237a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	055b      	lsls	r3, r3, #21
 8002380:	4013      	ands	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x360>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x362>
 8002388:	2300      	movs	r3, #0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d011      	beq.n	80023b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4baf      	ldr	r3, [pc, #700]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002392:	4bae      	ldr	r3, [pc, #696]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	0549      	lsls	r1, r1, #21
 8002398:	430a      	orrs	r2, r1
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
 800239c:	4bab      	ldr	r3, [pc, #684]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800239e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023aa:	231f      	movs	r3, #31
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b2:	4ba7      	ldr	r3, [pc, #668]	; (8002650 <HAL_RCC_OscConfig+0x628>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	d11a      	bne.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023be:	4ba4      	ldr	r3, [pc, #656]	; (8002650 <HAL_RCC_OscConfig+0x628>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4ba3      	ldr	r3, [pc, #652]	; (8002650 <HAL_RCC_OscConfig+0x628>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0049      	lsls	r1, r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fdbe 	bl	8000f4c <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7fe fdb9 	bl	8000f4c <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e12d      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e8:	4b99      	ldr	r3, [pc, #612]	; (8002650 <HAL_RCC_OscConfig+0x628>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x3e2>
 80023fc:	4b93      	ldr	r3, [pc, #588]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80023fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002400:	4b92      	ldr	r3, [pc, #584]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002402:	2101      	movs	r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	65da      	str	r2, [r3, #92]	; 0x5c
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x41c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x404>
 8002412:	4b8e      	ldr	r3, [pc, #568]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002416:	4b8d      	ldr	r3, [pc, #564]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002418:	2104      	movs	r1, #4
 800241a:	430a      	orrs	r2, r1
 800241c:	65da      	str	r2, [r3, #92]	; 0x5c
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002420:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002422:	4b8a      	ldr	r3, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002424:	2101      	movs	r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	65da      	str	r2, [r3, #92]	; 0x5c
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x41c>
 800242c:	4b87      	ldr	r3, [pc, #540]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800242e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002430:	4b86      	ldr	r3, [pc, #536]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	65da      	str	r2, [r3, #92]	; 0x5c
 8002438:	4b84      	ldr	r3, [pc, #528]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800243a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800243c:	4b83      	ldr	r3, [pc, #524]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800243e:	2104      	movs	r1, #4
 8002440:	438a      	bics	r2, r1
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d014      	beq.n	8002476 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fd7e 	bl	8000f4c <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002454:	e009      	b.n	800246a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fd79 	bl	8000f4c <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x62c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0ec      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x42e>
 8002474:	e013      	b.n	800249e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fd69 	bl	8000f4c <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247e:	e009      	b.n	8002494 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fd64 	bl	8000f4c <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	4a72      	ldr	r2, [pc, #456]	; (8002654 <HAL_RCC_OscConfig+0x62c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0d7      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002494:	4b6d      	ldr	r3, [pc, #436]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800249e:	231f      	movs	r3, #31
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80024aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ac:	4b67      	ldr	r3, [pc, #412]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80024ae:	496a      	ldr	r1, [pc, #424]	; (8002658 <HAL_RCC_OscConfig+0x630>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d100      	bne.n	80024be <HAL_RCC_OscConfig+0x496>
 80024bc:	e0c1      	b.n	8002642 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2238      	movs	r2, #56	; 0x38
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d100      	bne.n	80024cc <HAL_RCC_OscConfig+0x4a4>
 80024ca:	e081      	b.n	80025d0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d156      	bne.n	8002582 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d4:	4b5d      	ldr	r3, [pc, #372]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80024da:	4960      	ldr	r1, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x634>)
 80024dc:	400a      	ands	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd34 	bl	8000f4c <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fd2f 	bl	8000f4c <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e0a3      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	049b      	lsls	r3, r3, #18
 8002504:	4013      	ands	r3, r2
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a54      	ldr	r2, [pc, #336]	; (8002660 <HAL_RCC_OscConfig+0x638>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	431a      	orrs	r2, r3
 8002536:	4b45      	ldr	r3, [pc, #276]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002538:	430a      	orrs	r2, r1
 800253a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	0449      	lsls	r1, r1, #17
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0549      	lsls	r1, r1, #21
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fcf8 	bl	8000f4c <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe fcf3 	bl	8000f4c <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e067      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	049b      	lsls	r3, r3, #18
 800257c:	4013      	ands	r3, r2
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x53a>
 8002580:	e05f      	b.n	8002642 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002588:	4934      	ldr	r1, [pc, #208]	; (800265c <HAL_RCC_OscConfig+0x634>)
 800258a:	400a      	ands	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_RCC_OscConfig+0x624>)
 8002594:	2103      	movs	r1, #3
 8002596:	438a      	bics	r2, r1
 8002598:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCC_OscConfig+0x624>)
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80025a0:	4930      	ldr	r1, [pc, #192]	; (8002664 <HAL_RCC_OscConfig+0x63c>)
 80025a2:	400a      	ands	r2, r1
 80025a4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fcd1 	bl	8000f4c <HAL_GetTick>
 80025aa:	0003      	movs	r3, r0
 80025ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fccc 	bl	8000f4c <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e040      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	049b      	lsls	r3, r3, #18
 80025ca:	4013      	ands	r3, r2
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x588>
 80025ce:	e038      	b.n	8002642 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e033      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x624>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2203      	movs	r2, #3
 80025e6:	401a      	ands	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d126      	bne.n	800263e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2270      	movs	r2, #112	; 0x70
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d11f      	bne.n	800263e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	23fe      	movs	r3, #254	; 0xfe
 8002602:	01db      	lsls	r3, r3, #7
 8002604:	401a      	ands	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d116      	bne.n	800263e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	23f8      	movs	r3, #248	; 0xf8
 8002614:	039b      	lsls	r3, r3, #14
 8002616:	401a      	ands	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d10e      	bne.n	800263e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	23e0      	movs	r3, #224	; 0xe0
 8002624:	051b      	lsls	r3, r3, #20
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	0f5b      	lsrs	r3, r3, #29
 8002634:	075a      	lsls	r2, r3, #29
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b008      	add	sp, #32
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
 8002654:	00001388 	.word	0x00001388
 8002658:	efffffff 	.word	0xefffffff
 800265c:	feffffff 	.word	0xfeffffff
 8002660:	11c1808c 	.word	0x11c1808c
 8002664:	eefeffff 	.word	0xeefeffff

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0e9      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2207      	movs	r2, #7
 8002682:	4013      	ands	r3, r2
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d91e      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2207      	movs	r2, #7
 8002690:	4393      	bics	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	4b70      	ldr	r3, [pc, #448]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800269c:	f7fe fc56 	bl	8000f4c <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026a4:	e009      	b.n	80026ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a6:	f7fe fc51 	bl	8000f4c <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a6a      	ldr	r2, [pc, #424]	; (800285c <HAL_RCC_ClockConfig+0x1f4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0ca      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ba:	4b67      	ldr	r3, [pc, #412]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2207      	movs	r2, #7
 80026c0:	4013      	ands	r3, r2
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1ee      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2202      	movs	r2, #2
 80026ce:	4013      	ands	r3, r2
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2204      	movs	r2, #4
 80026d8:	4013      	ands	r3, r2
 80026da:	d006      	beq.n	80026ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026dc:	4b60      	ldr	r3, [pc, #384]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 80026e2:	21e0      	movs	r1, #224	; 0xe0
 80026e4:	01c9      	lsls	r1, r1, #7
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_RCC_ClockConfig+0x1fc>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b59      	ldr	r3, [pc, #356]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2201      	movs	r2, #1
 8002704:	4013      	ands	r3, r2
 8002706:	d057      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	4013      	ands	r3, r2
 800271a:	d12b      	bne.n	8002774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e097      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d107      	bne.n	8002738 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	049b      	lsls	r3, r3, #18
 8002730:	4013      	ands	r3, r2
 8002732:	d11f      	bne.n	8002774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e08b      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002740:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4013      	ands	r3, r2
 800274a:	d113      	bne.n	8002774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e07f      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d106      	bne.n	8002766 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 800275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d108      	bne.n	8002774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e074      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e06d      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002774:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2207      	movs	r2, #7
 800277a:	4393      	bics	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fbe0 	bl	8000f4c <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002790:	e009      	b.n	80027a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002792:	f7fe fbdb 	bl	8000f4c <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	4a2f      	ldr	r2, [pc, #188]	; (800285c <HAL_RCC_ClockConfig+0x1f4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e054      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2238      	movs	r2, #56	; 0x38
 80027ac:	401a      	ands	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1ec      	bne.n	8002792 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2207      	movs	r2, #7
 80027be:	4013      	ands	r3, r2
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d21e      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2207      	movs	r2, #7
 80027cc:	4393      	bics	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fbb8 	bl	8000f4c <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027e0:	e009      	b.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	f7fe fbb3 	bl	8000f4c <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_RCC_ClockConfig+0x1f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e02c      	b.n	8002850 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2207      	movs	r2, #7
 80027fc:	4013      	ands	r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d1ee      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2204      	movs	r2, #4
 800280a:	4013      	ands	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4a15      	ldr	r2, [pc, #84]	; (8002868 <HAL_RCC_ClockConfig+0x200>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002822:	f000 f829 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002826:	0001      	movs	r1, r0
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	220f      	movs	r2, #15
 8002830:	401a      	ands	r2, r3
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x204>)
 8002834:	0092      	lsls	r2, r2, #2
 8002836:	58d3      	ldr	r3, [r2, r3]
 8002838:	221f      	movs	r2, #31
 800283a:	4013      	ands	r3, r2
 800283c:	000a      	movs	r2, r1
 800283e:	40da      	lsrs	r2, r3
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_ClockConfig+0x208>)
 8002842:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_ClockConfig+0x20c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0018      	movs	r0, r3
 800284a:	f7fe fb23 	bl	8000e94 <HAL_InitTick>
 800284e:	0003      	movs	r3, r0
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b004      	add	sp, #16
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40022000 	.word	0x40022000
 800285c:	00001388 	.word	0x00001388
 8002860:	40021000 	.word	0x40021000
 8002864:	fffff0ff 	.word	0xfffff0ff
 8002868:	ffff8fff 	.word	0xffff8fff
 800286c:	08005f90 	.word	0x08005f90
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800287e:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2238      	movs	r2, #56	; 0x38
 8002884:	4013      	ands	r3, r2
 8002886:	d10f      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002888:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0adb      	lsrs	r3, r3, #11
 800288e:	2207      	movs	r2, #7
 8002890:	4013      	ands	r3, r2
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	0013      	movs	r3, r2
 8002898:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800289a:	6839      	ldr	r1, [r7, #0]
 800289c:	4835      	ldr	r0, [pc, #212]	; (8002974 <HAL_RCC_GetSysClockFreq+0xfc>)
 800289e:	f7fd fc33 	bl	8000108 <__udivsi3>
 80028a2:	0003      	movs	r3, r0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	e05d      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2238      	movs	r2, #56	; 0x38
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d102      	bne.n	80028ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b4:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_RCC_GetSysClockFreq+0x100>)
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	e054      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2238      	movs	r2, #56	; 0x38
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d138      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2203      	movs	r2, #3
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	2207      	movs	r2, #7
 80028d8:	4013      	ands	r3, r2
 80028da:	3301      	adds	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d10d      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	4824      	ldr	r0, [pc, #144]	; (8002978 <HAL_RCC_GetSysClockFreq+0x100>)
 80028e8:	f7fd fc0e 	bl	8000108 <__udivsi3>
 80028ec:	0003      	movs	r3, r0
 80028ee:	0019      	movs	r1, r3
 80028f0:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	227f      	movs	r2, #127	; 0x7f
 80028f8:	4013      	ands	r3, r2
 80028fa:	434b      	muls	r3, r1
 80028fc:	617b      	str	r3, [r7, #20]
        break;
 80028fe:	e00d      	b.n	800291c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	481c      	ldr	r0, [pc, #112]	; (8002974 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002904:	f7fd fc00 	bl	8000108 <__udivsi3>
 8002908:	0003      	movs	r3, r0
 800290a:	0019      	movs	r1, r3
 800290c:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	227f      	movs	r2, #127	; 0x7f
 8002914:	4013      	ands	r3, r2
 8002916:	434b      	muls	r3, r1
 8002918:	617b      	str	r3, [r7, #20]
        break;
 800291a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0f5b      	lsrs	r3, r3, #29
 8002922:	2207      	movs	r2, #7
 8002924:	4013      	ands	r3, r2
 8002926:	3301      	adds	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	6978      	ldr	r0, [r7, #20]
 800292e:	f7fd fbeb 	bl	8000108 <__udivsi3>
 8002932:	0003      	movs	r3, r0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e015      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2238      	movs	r2, #56	; 0x38
 800293e:	4013      	ands	r3, r2
 8002940:	2b20      	cmp	r3, #32
 8002942:	d103      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e00b      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2238      	movs	r2, #56	; 0x38
 8002952:	4013      	ands	r3, r2
 8002954:	2b18      	cmp	r3, #24
 8002956:	d103      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002958:	23fa      	movs	r3, #250	; 0xfa
 800295a:	01db      	lsls	r3, r3, #7
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	e001      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002964:	693b      	ldr	r3, [r7, #16]
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b006      	add	sp, #24
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40021000 	.word	0x40021000
 8002974:	00f42400 	.word	0x00f42400
 8002978:	007a1200 	.word	0x007a1200

0800297c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <HAL_RCC_GetHCLKFreq+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002994:	f7ff fff2 	bl	800297c <HAL_RCC_GetHCLKFreq>
 8002998:	0004      	movs	r4, r0
 800299a:	f7ff fb39 	bl	8002010 <LL_RCC_GetAPB1Prescaler>
 800299e:	0003      	movs	r3, r0
 80029a0:	0b1a      	lsrs	r2, r3, #12
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	58d3      	ldr	r3, [r2, r3]
 80029a8:	221f      	movs	r2, #31
 80029aa:	4013      	ands	r3, r2
 80029ac:	40dc      	lsrs	r4, r3
 80029ae:	0023      	movs	r3, r4
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bdb0      	pop	{r4, r5, r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	08005fd0 	.word	0x08005fd0

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029c4:	2313      	movs	r3, #19
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029cc:	2312      	movs	r3, #18
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	029b      	lsls	r3, r3, #10
 80029dc:	4013      	ands	r3, r2
 80029de:	d100      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80029e0:	e0a3      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2011      	movs	r0, #17
 80029e4:	183b      	adds	r3, r7, r0
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4bc3      	ldr	r3, [pc, #780]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	055b      	lsls	r3, r3, #21
 80029f2:	4013      	ands	r3, r2
 80029f4:	d110      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	4bc0      	ldr	r3, [pc, #768]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029fa:	4bbf      	ldr	r3, [pc, #764]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	0549      	lsls	r1, r1, #21
 8002a00:	430a      	orrs	r2, r1
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a04:	4bbc      	ldr	r3, [pc, #752]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	055b      	lsls	r3, r3, #21
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	183b      	adds	r3, r7, r0
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a18:	4bb8      	ldr	r3, [pc, #736]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4bb7      	ldr	r3, [pc, #732]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	0049      	lsls	r1, r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a26:	f7fe fa91 	bl	8000f4c <HAL_GetTick>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a30:	f7fe fa8c 	bl	8000f4c <HAL_GetTick>
 8002a34:	0002      	movs	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d904      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a3e:	2313      	movs	r3, #19
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2203      	movs	r2, #3
 8002a44:	701a      	strb	r2, [r3, #0]
        break;
 8002a46:	e005      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a48:	4bac      	ldr	r3, [pc, #688]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d0ed      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a54:	2313      	movs	r3, #19
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d154      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a5e:	4ba6      	ldr	r3, [pc, #664]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a62:	23c0      	movs	r3, #192	; 0xc0
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d019      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d014      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a7a:	4b9f      	ldr	r3, [pc, #636]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	4aa0      	ldr	r2, [pc, #640]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a84:	4b9c      	ldr	r3, [pc, #624]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a88:	4b9b      	ldr	r3, [pc, #620]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0249      	lsls	r1, r1, #9
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a92:	4b99      	ldr	r3, [pc, #612]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a96:	4b98      	ldr	r3, [pc, #608]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a98:	499a      	ldr	r1, [pc, #616]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a9e:	4b96      	ldr	r3, [pc, #600]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d016      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fa4e 	bl	8000f4c <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab4:	e00c      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fa49 	bl	8000f4c <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	4a91      	ldr	r2, [pc, #580]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d904      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ac6:	2313      	movs	r3, #19
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2203      	movs	r2, #3
 8002acc:	701a      	strb	r2, [r3, #0]
            break;
 8002ace:	e004      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad0:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d0ed      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ada:	2313      	movs	r3, #19
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae4:	4b84      	ldr	r3, [pc, #528]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	4a85      	ldr	r2, [pc, #532]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af2:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af8:	e00c      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002afa:	2312      	movs	r3, #18
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2213      	movs	r2, #19
 8002b00:	18ba      	adds	r2, r7, r2
 8002b02:	7812      	ldrb	r2, [r2, #0]
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e005      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b08:	2312      	movs	r3, #18
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2213      	movs	r2, #19
 8002b0e:	18ba      	adds	r2, r7, r2
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b14:	2311      	movs	r3, #17
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b22:	4b75      	ldr	r3, [pc, #468]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b24:	4979      	ldr	r1, [pc, #484]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b34:	4b70      	ldr	r3, [pc, #448]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4393      	bics	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b52:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	220c      	movs	r2, #12
 8002b58:	4393      	bics	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b62:	430a      	orrs	r2, r1
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d009      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b70:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	4a66      	ldr	r2, [pc, #408]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b80:	430a      	orrs	r2, r1
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	4a5f      	ldr	r2, [pc, #380]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4013      	ands	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bb0:	4b51      	ldr	r3, [pc, #324]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	4a58      	ldr	r2, [pc, #352]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bce:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	4a52      	ldr	r2, [pc, #328]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	01db      	lsls	r3, r3, #7
 8002bea:	4013      	ands	r3, r2
 8002bec:	d015      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bee:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	0899      	lsrs	r1, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	05db      	lsls	r3, r3, #23
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0249      	lsls	r1, r1, #9
 8002c16:	430a      	orrs	r2, r1
 8002c18:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	031b      	lsls	r3, r3, #12
 8002c22:	4013      	ands	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c36:	430a      	orrs	r2, r1
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	039b      	lsls	r3, r3, #14
 8002c42:	4013      	ands	r3, r2
 8002c44:	d016      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	4a35      	ldr	r2, [pc, #212]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	03db      	lsls	r3, r3, #15
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	0449      	lsls	r1, r1, #17
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	03db      	lsls	r3, r3, #15
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d016      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	045b      	lsls	r3, r3, #17
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	0449      	lsls	r1, r1, #17
 8002caa:	430a      	orrs	r2, r1
 8002cac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d016      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	01db      	lsls	r3, r3, #7
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	0249      	lsls	r1, r1, #9
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ce8:	2312      	movs	r3, #18
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b006      	add	sp, #24
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	fffffcff 	.word	0xfffffcff
 8002d04:	fffeffff 	.word	0xfffeffff
 8002d08:	00001388 	.word	0x00001388
 8002d0c:	efffffff 	.word	0xefffffff
 8002d10:	fffff3ff 	.word	0xfffff3ff
 8002d14:	fff3ffff 	.word	0xfff3ffff
 8002d18:	ffcfffff 	.word	0xffcfffff
 8002d1c:	ffffcfff 	.word	0xffffcfff
 8002d20:	ffbfffff 	.word	0xffbfffff
 8002d24:	feffffff 	.word	0xfeffffff
 8002d28:	ffff3fff 	.word	0xffff3fff

08002d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e046      	b.n	8002dcc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2284      	movs	r2, #132	; 0x84
 8002d42:	589b      	ldr	r3, [r3, r2]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7fd ffd8 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2284      	movs	r2, #132	; 0x84
 8002d5c:	2124      	movs	r1, #36	; 0x24
 8002d5e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f830 	bl	8002dd8 <UART_SetConfig>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e024      	b.n	8002dcc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fb01 	bl	8003394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	490d      	ldr	r1, [pc, #52]	; (8002dd4 <HAL_UART_Init+0xa8>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	212a      	movs	r1, #42	; 0x2a
 8002dae:	438a      	bics	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 fb99 	bl	80034fc <UART_CheckIdleState>
 8002dca:	0003      	movs	r3, r0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffffb7ff 	.word	0xffffb7ff

08002dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b090      	sub	sp, #64	; 0x40
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de0:	231a      	movs	r3, #26
 8002de2:	2220      	movs	r2, #32
 8002de4:	4694      	mov	ip, r2
 8002de6:	44bc      	add	ip, r7
 8002de8:	4463      	add	r3, ip
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4ab9      	ldr	r2, [pc, #740]	; (80030f4 <UART_SetConfig+0x31c>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4ab5      	ldr	r2, [pc, #724]	; (80030f8 <UART_SetConfig+0x320>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0018      	movs	r0, r3
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	68d9      	ldr	r1, [r3, #12]
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	0003      	movs	r3, r0
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4aae      	ldr	r2, [pc, #696]	; (80030fc <UART_SetConfig+0x324>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4aaa      	ldr	r2, [pc, #680]	; (8003100 <UART_SetConfig+0x328>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	4393      	bics	r3, r2
 8002e70:	0018      	movs	r0, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a9f      	ldr	r2, [pc, #636]	; (8003104 <UART_SetConfig+0x32c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d136      	bne.n	8002ef8 <UART_SetConfig+0x120>
 8002e8a:	4b9f      	ldr	r3, [pc, #636]	; (8003108 <UART_SetConfig+0x330>)
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	2203      	movs	r2, #3
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d020      	beq.n	8002ed8 <UART_SetConfig+0x100>
 8002e96:	d827      	bhi.n	8002ee8 <UART_SetConfig+0x110>
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d00d      	beq.n	8002eb8 <UART_SetConfig+0xe0>
 8002e9c:	d824      	bhi.n	8002ee8 <UART_SetConfig+0x110>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <UART_SetConfig+0xd0>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d010      	beq.n	8002ec8 <UART_SetConfig+0xf0>
 8002ea6:	e01f      	b.n	8002ee8 <UART_SetConfig+0x110>
 8002ea8:	231b      	movs	r3, #27
 8002eaa:	2220      	movs	r2, #32
 8002eac:	4694      	mov	ip, r2
 8002eae:	44bc      	add	ip, r7
 8002eb0:	4463      	add	r3, ip
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e0c5      	b.n	8003044 <UART_SetConfig+0x26c>
 8002eb8:	231b      	movs	r3, #27
 8002eba:	2220      	movs	r2, #32
 8002ebc:	4694      	mov	ip, r2
 8002ebe:	44bc      	add	ip, r7
 8002ec0:	4463      	add	r3, ip
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e0bd      	b.n	8003044 <UART_SetConfig+0x26c>
 8002ec8:	231b      	movs	r3, #27
 8002eca:	2220      	movs	r2, #32
 8002ecc:	4694      	mov	ip, r2
 8002ece:	44bc      	add	ip, r7
 8002ed0:	4463      	add	r3, ip
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e0b5      	b.n	8003044 <UART_SetConfig+0x26c>
 8002ed8:	231b      	movs	r3, #27
 8002eda:	2220      	movs	r2, #32
 8002edc:	4694      	mov	ip, r2
 8002ede:	44bc      	add	ip, r7
 8002ee0:	4463      	add	r3, ip
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	e0ad      	b.n	8003044 <UART_SetConfig+0x26c>
 8002ee8:	231b      	movs	r3, #27
 8002eea:	2220      	movs	r2, #32
 8002eec:	4694      	mov	ip, r2
 8002eee:	44bc      	add	ip, r7
 8002ef0:	4463      	add	r3, ip
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e0a5      	b.n	8003044 <UART_SetConfig+0x26c>
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a83      	ldr	r2, [pc, #524]	; (800310c <UART_SetConfig+0x334>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d136      	bne.n	8002f70 <UART_SetConfig+0x198>
 8002f02:	4b81      	ldr	r3, [pc, #516]	; (8003108 <UART_SetConfig+0x330>)
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	220c      	movs	r2, #12
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d020      	beq.n	8002f50 <UART_SetConfig+0x178>
 8002f0e:	d827      	bhi.n	8002f60 <UART_SetConfig+0x188>
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d00d      	beq.n	8002f30 <UART_SetConfig+0x158>
 8002f14:	d824      	bhi.n	8002f60 <UART_SetConfig+0x188>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <UART_SetConfig+0x148>
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d010      	beq.n	8002f40 <UART_SetConfig+0x168>
 8002f1e:	e01f      	b.n	8002f60 <UART_SetConfig+0x188>
 8002f20:	231b      	movs	r3, #27
 8002f22:	2220      	movs	r2, #32
 8002f24:	4694      	mov	ip, r2
 8002f26:	44bc      	add	ip, r7
 8002f28:	4463      	add	r3, ip
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e089      	b.n	8003044 <UART_SetConfig+0x26c>
 8002f30:	231b      	movs	r3, #27
 8002f32:	2220      	movs	r2, #32
 8002f34:	4694      	mov	ip, r2
 8002f36:	44bc      	add	ip, r7
 8002f38:	4463      	add	r3, ip
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e081      	b.n	8003044 <UART_SetConfig+0x26c>
 8002f40:	231b      	movs	r3, #27
 8002f42:	2220      	movs	r2, #32
 8002f44:	4694      	mov	ip, r2
 8002f46:	44bc      	add	ip, r7
 8002f48:	4463      	add	r3, ip
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e079      	b.n	8003044 <UART_SetConfig+0x26c>
 8002f50:	231b      	movs	r3, #27
 8002f52:	2220      	movs	r2, #32
 8002f54:	4694      	mov	ip, r2
 8002f56:	44bc      	add	ip, r7
 8002f58:	4463      	add	r3, ip
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e071      	b.n	8003044 <UART_SetConfig+0x26c>
 8002f60:	231b      	movs	r3, #27
 8002f62:	2220      	movs	r2, #32
 8002f64:	4694      	mov	ip, r2
 8002f66:	44bc      	add	ip, r7
 8002f68:	4463      	add	r3, ip
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e069      	b.n	8003044 <UART_SetConfig+0x26c>
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a66      	ldr	r2, [pc, #408]	; (8003110 <UART_SetConfig+0x338>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d107      	bne.n	8002f8a <UART_SetConfig+0x1b2>
 8002f7a:	231b      	movs	r3, #27
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	4694      	mov	ip, r2
 8002f80:	44bc      	add	ip, r7
 8002f82:	4463      	add	r3, ip
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e05c      	b.n	8003044 <UART_SetConfig+0x26c>
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a61      	ldr	r2, [pc, #388]	; (8003114 <UART_SetConfig+0x33c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d107      	bne.n	8002fa4 <UART_SetConfig+0x1cc>
 8002f94:	231b      	movs	r3, #27
 8002f96:	2220      	movs	r2, #32
 8002f98:	4694      	mov	ip, r2
 8002f9a:	44bc      	add	ip, r7
 8002f9c:	4463      	add	r3, ip
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e04f      	b.n	8003044 <UART_SetConfig+0x26c>
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a54      	ldr	r2, [pc, #336]	; (80030fc <UART_SetConfig+0x324>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d143      	bne.n	8003036 <UART_SetConfig+0x25e>
 8002fae:	4b56      	ldr	r3, [pc, #344]	; (8003108 <UART_SetConfig+0x330>)
 8002fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fb2:	23c0      	movs	r3, #192	; 0xc0
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	22c0      	movs	r2, #192	; 0xc0
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02a      	beq.n	8003016 <UART_SetConfig+0x23e>
 8002fc0:	22c0      	movs	r2, #192	; 0xc0
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d82e      	bhi.n	8003026 <UART_SetConfig+0x24e>
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <UART_SetConfig+0x21e>
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d826      	bhi.n	8003026 <UART_SetConfig+0x24e>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <UART_SetConfig+0x20e>
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	00d2      	lsls	r2, r2, #3
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d010      	beq.n	8003006 <UART_SetConfig+0x22e>
 8002fe4:	e01f      	b.n	8003026 <UART_SetConfig+0x24e>
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	2220      	movs	r2, #32
 8002fea:	4694      	mov	ip, r2
 8002fec:	44bc      	add	ip, r7
 8002fee:	4463      	add	r3, ip
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e026      	b.n	8003044 <UART_SetConfig+0x26c>
 8002ff6:	231b      	movs	r3, #27
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	4694      	mov	ip, r2
 8002ffc:	44bc      	add	ip, r7
 8002ffe:	4463      	add	r3, ip
 8003000:	2202      	movs	r2, #2
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e01e      	b.n	8003044 <UART_SetConfig+0x26c>
 8003006:	231b      	movs	r3, #27
 8003008:	2220      	movs	r2, #32
 800300a:	4694      	mov	ip, r2
 800300c:	44bc      	add	ip, r7
 800300e:	4463      	add	r3, ip
 8003010:	2204      	movs	r2, #4
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e016      	b.n	8003044 <UART_SetConfig+0x26c>
 8003016:	231b      	movs	r3, #27
 8003018:	2220      	movs	r2, #32
 800301a:	4694      	mov	ip, r2
 800301c:	44bc      	add	ip, r7
 800301e:	4463      	add	r3, ip
 8003020:	2208      	movs	r2, #8
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e00e      	b.n	8003044 <UART_SetConfig+0x26c>
 8003026:	231b      	movs	r3, #27
 8003028:	2220      	movs	r2, #32
 800302a:	4694      	mov	ip, r2
 800302c:	44bc      	add	ip, r7
 800302e:	4463      	add	r3, ip
 8003030:	2210      	movs	r2, #16
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e006      	b.n	8003044 <UART_SetConfig+0x26c>
 8003036:	231b      	movs	r3, #27
 8003038:	2220      	movs	r2, #32
 800303a:	4694      	mov	ip, r2
 800303c:	44bc      	add	ip, r7
 800303e:	4463      	add	r3, ip
 8003040:	2210      	movs	r2, #16
 8003042:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <UART_SetConfig+0x324>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d000      	beq.n	8003050 <UART_SetConfig+0x278>
 800304e:	e0ad      	b.n	80031ac <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003050:	231b      	movs	r3, #27
 8003052:	2220      	movs	r2, #32
 8003054:	4694      	mov	ip, r2
 8003056:	44bc      	add	ip, r7
 8003058:	4463      	add	r3, ip
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d015      	beq.n	800308c <UART_SetConfig+0x2b4>
 8003060:	dc18      	bgt.n	8003094 <UART_SetConfig+0x2bc>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d00d      	beq.n	8003082 <UART_SetConfig+0x2aa>
 8003066:	dc15      	bgt.n	8003094 <UART_SetConfig+0x2bc>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <UART_SetConfig+0x29a>
 800306c:	2b02      	cmp	r3, #2
 800306e:	d005      	beq.n	800307c <UART_SetConfig+0x2a4>
 8003070:	e010      	b.n	8003094 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003072:	f7ff fc8d 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003076:	0003      	movs	r3, r0
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800307a:	e015      	b.n	80030a8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800307c:	4b26      	ldr	r3, [pc, #152]	; (8003118 <UART_SetConfig+0x340>)
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003080:	e012      	b.n	80030a8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003082:	f7ff fbf9 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8003086:	0003      	movs	r3, r0
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800308a:	e00d      	b.n	80030a8 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003092:	e009      	b.n	80030a8 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003098:	231a      	movs	r3, #26
 800309a:	2220      	movs	r2, #32
 800309c:	4694      	mov	ip, r2
 800309e:	44bc      	add	ip, r7
 80030a0:	4463      	add	r3, ip
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
        break;
 80030a6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d100      	bne.n	80030b0 <UART_SetConfig+0x2d8>
 80030ae:	e154      	b.n	800335a <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <UART_SetConfig+0x344>)
 80030b6:	0052      	lsls	r2, r2, #1
 80030b8:	5ad3      	ldrh	r3, [r2, r3]
 80030ba:	0019      	movs	r1, r3
 80030bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030be:	f7fd f823 	bl	8000108 <__udivsi3>
 80030c2:	0003      	movs	r3, r0
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	0013      	movs	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d305      	bcc.n	80030e2 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030de:	429a      	cmp	r2, r3
 80030e0:	d91e      	bls.n	8003120 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80030e2:	231a      	movs	r3, #26
 80030e4:	2220      	movs	r2, #32
 80030e6:	4694      	mov	ip, r2
 80030e8:	44bc      	add	ip, r7
 80030ea:	4463      	add	r3, ip
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e133      	b.n	800335a <UART_SetConfig+0x582>
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	cfff69f3 	.word	0xcfff69f3
 80030f8:	ffffcfff 	.word	0xffffcfff
 80030fc:	40008000 	.word	0x40008000
 8003100:	11fff4ff 	.word	0x11fff4ff
 8003104:	40013800 	.word	0x40013800
 8003108:	40021000 	.word	0x40021000
 800310c:	40004400 	.word	0x40004400
 8003110:	40004800 	.word	0x40004800
 8003114:	40004c00 	.word	0x40004c00
 8003118:	00f42400 	.word	0x00f42400
 800311c:	08005ff0 	.word	0x08005ff0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312c:	4b97      	ldr	r3, [pc, #604]	; (800338c <UART_SetConfig+0x5b4>)
 800312e:	0052      	lsls	r2, r2, #1
 8003130:	5ad3      	ldrh	r3, [r2, r3]
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	69b8      	ldr	r0, [r7, #24]
 800313e:	69f9      	ldr	r1, [r7, #28]
 8003140:	f7fd f958 	bl	80003f4 <__aeabi_uldivmod>
 8003144:	0002      	movs	r2, r0
 8003146:	000b      	movs	r3, r1
 8003148:	0e11      	lsrs	r1, r2, #24
 800314a:	021d      	lsls	r5, r3, #8
 800314c:	430d      	orrs	r5, r1
 800314e:	0214      	lsls	r4, r2, #8
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68b8      	ldr	r0, [r7, #8]
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	1900      	adds	r0, r0, r4
 8003162:	4169      	adcs	r1, r5
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f7fd f93f 	bl	80003f4 <__aeabi_uldivmod>
 8003176:	0002      	movs	r2, r0
 8003178:	000b      	movs	r3, r1
 800317a:	0013      	movs	r3, r2
 800317c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800317e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003180:	23c0      	movs	r3, #192	; 0xc0
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	429a      	cmp	r2, r3
 8003186:	d309      	bcc.n	800319c <UART_SetConfig+0x3c4>
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	035b      	lsls	r3, r3, #13
 800318e:	429a      	cmp	r2, r3
 8003190:	d204      	bcs.n	800319c <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	e0de      	b.n	800335a <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 800319c:	231a      	movs	r3, #26
 800319e:	2220      	movs	r2, #32
 80031a0:	4694      	mov	ip, r2
 80031a2:	44bc      	add	ip, r7
 80031a4:	4463      	add	r3, ip
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e0d6      	b.n	800335a <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d000      	beq.n	80031ba <UART_SetConfig+0x3e2>
 80031b8:	e074      	b.n	80032a4 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 80031ba:	231b      	movs	r3, #27
 80031bc:	2220      	movs	r2, #32
 80031be:	4694      	mov	ip, r2
 80031c0:	44bc      	add	ip, r7
 80031c2:	4463      	add	r3, ip
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d015      	beq.n	80031f6 <UART_SetConfig+0x41e>
 80031ca:	dc18      	bgt.n	80031fe <UART_SetConfig+0x426>
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00d      	beq.n	80031ec <UART_SetConfig+0x414>
 80031d0:	dc15      	bgt.n	80031fe <UART_SetConfig+0x426>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <UART_SetConfig+0x404>
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d005      	beq.n	80031e6 <UART_SetConfig+0x40e>
 80031da:	e010      	b.n	80031fe <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7ff fbd8 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80031e0:	0003      	movs	r3, r0
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031e4:	e015      	b.n	8003212 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <UART_SetConfig+0x5b8>)
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031ea:	e012      	b.n	8003212 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ec:	f7ff fb44 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 80031f0:	0003      	movs	r3, r0
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031f4:	e00d      	b.n	8003212 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031fc:	e009      	b.n	8003212 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003202:	231a      	movs	r3, #26
 8003204:	2220      	movs	r2, #32
 8003206:	4694      	mov	ip, r2
 8003208:	44bc      	add	ip, r7
 800320a:	4463      	add	r3, ip
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
        break;
 8003210:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	2b00      	cmp	r3, #0
 8003216:	d100      	bne.n	800321a <UART_SetConfig+0x442>
 8003218:	e09f      	b.n	800335a <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321e:	4b5b      	ldr	r3, [pc, #364]	; (800338c <UART_SetConfig+0x5b4>)
 8003220:	0052      	lsls	r2, r2, #1
 8003222:	5ad3      	ldrh	r3, [r2, r3]
 8003224:	0019      	movs	r1, r3
 8003226:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003228:	f7fc ff6e 	bl	8000108 <__udivsi3>
 800322c:	0003      	movs	r3, r0
 800322e:	005a      	lsls	r2, r3, #1
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	18d2      	adds	r2, r2, r3
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0019      	movs	r1, r3
 800323e:	0010      	movs	r0, r2
 8003240:	f7fc ff62 	bl	8000108 <__udivsi3>
 8003244:	0003      	movs	r3, r0
 8003246:	b29b      	uxth	r3, r3
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d921      	bls.n	8003294 <UART_SetConfig+0x4bc>
 8003250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	025b      	lsls	r3, r3, #9
 8003256:	429a      	cmp	r2, r3
 8003258:	d21c      	bcs.n	8003294 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	b29a      	uxth	r2, r3
 800325e:	200e      	movs	r0, #14
 8003260:	2420      	movs	r4, #32
 8003262:	193b      	adds	r3, r7, r4
 8003264:	181b      	adds	r3, r3, r0
 8003266:	210f      	movs	r1, #15
 8003268:	438a      	bics	r2, r1
 800326a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	b29b      	uxth	r3, r3
 8003272:	2207      	movs	r2, #7
 8003274:	4013      	ands	r3, r2
 8003276:	b299      	uxth	r1, r3
 8003278:	193b      	adds	r3, r7, r4
 800327a:	181b      	adds	r3, r3, r0
 800327c:	193a      	adds	r2, r7, r4
 800327e:	1812      	adds	r2, r2, r0
 8003280:	8812      	ldrh	r2, [r2, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	193a      	adds	r2, r7, r4
 800328c:	1812      	adds	r2, r2, r0
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e062      	b.n	800335a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8003294:	231a      	movs	r3, #26
 8003296:	2220      	movs	r2, #32
 8003298:	4694      	mov	ip, r2
 800329a:	44bc      	add	ip, r7
 800329c:	4463      	add	r3, ip
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e05a      	b.n	800335a <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032a4:	231b      	movs	r3, #27
 80032a6:	2220      	movs	r2, #32
 80032a8:	4694      	mov	ip, r2
 80032aa:	44bc      	add	ip, r7
 80032ac:	4463      	add	r3, ip
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d015      	beq.n	80032e0 <UART_SetConfig+0x508>
 80032b4:	dc18      	bgt.n	80032e8 <UART_SetConfig+0x510>
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d00d      	beq.n	80032d6 <UART_SetConfig+0x4fe>
 80032ba:	dc15      	bgt.n	80032e8 <UART_SetConfig+0x510>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <UART_SetConfig+0x4ee>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d005      	beq.n	80032d0 <UART_SetConfig+0x4f8>
 80032c4:	e010      	b.n	80032e8 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c6:	f7ff fb63 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80032ca:	0003      	movs	r3, r0
 80032cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032ce:	e015      	b.n	80032fc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d0:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <UART_SetConfig+0x5b8>)
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032d4:	e012      	b.n	80032fc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d6:	f7ff facf 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 80032da:	0003      	movs	r3, r0
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032de:	e00d      	b.n	80032fc <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032e6:	e009      	b.n	80032fc <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032ec:	231a      	movs	r3, #26
 80032ee:	2220      	movs	r2, #32
 80032f0:	4694      	mov	ip, r2
 80032f2:	44bc      	add	ip, r7
 80032f4:	4463      	add	r3, ip
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
        break;
 80032fa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02b      	beq.n	800335a <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <UART_SetConfig+0x5b4>)
 8003308:	0052      	lsls	r2, r2, #1
 800330a:	5ad3      	ldrh	r3, [r2, r3]
 800330c:	0019      	movs	r1, r3
 800330e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003310:	f7fc fefa 	bl	8000108 <__udivsi3>
 8003314:	0003      	movs	r3, r0
 8003316:	001a      	movs	r2, r3
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	18d2      	adds	r2, r2, r3
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0019      	movs	r1, r3
 8003326:	0010      	movs	r0, r2
 8003328:	f7fc feee 	bl	8000108 <__udivsi3>
 800332c:	0003      	movs	r3, r0
 800332e:	b29b      	uxth	r3, r3
 8003330:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d909      	bls.n	800334c <UART_SetConfig+0x574>
 8003338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	025b      	lsls	r3, r3, #9
 800333e:	429a      	cmp	r2, r3
 8003340:	d204      	bcs.n	800334c <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	e006      	b.n	800335a <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 800334c:	231a      	movs	r3, #26
 800334e:	2220      	movs	r2, #32
 8003350:	4694      	mov	ip, r2
 8003352:	44bc      	add	ip, r7
 8003354:	4463      	add	r3, ip
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	226a      	movs	r2, #106	; 0x6a
 800335e:	2101      	movs	r1, #1
 8003360:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	2268      	movs	r2, #104	; 0x68
 8003366:	2101      	movs	r1, #1
 8003368:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2200      	movs	r2, #0
 800336e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2200      	movs	r2, #0
 8003374:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003376:	231a      	movs	r3, #26
 8003378:	2220      	movs	r2, #32
 800337a:	4694      	mov	ip, r2
 800337c:	44bc      	add	ip, r7
 800337e:	4463      	add	r3, ip
 8003380:	781b      	ldrb	r3, [r3, #0]
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b010      	add	sp, #64	; 0x40
 8003388:	bdb0      	pop	{r4, r5, r7, pc}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	08005ff0 	.word	0x08005ff0
 8003390:	00f42400 	.word	0x00f42400

08003394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	2201      	movs	r2, #1
 80033a2:	4013      	ands	r3, r2
 80033a4:	d00b      	beq.n	80033be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <UART_AdvFeatureConfig+0x144>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4a43      	ldr	r2, [pc, #268]	; (80034dc <UART_AdvFeatureConfig+0x148>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	2204      	movs	r2, #4
 80033e6:	4013      	ands	r3, r2
 80033e8:	d00b      	beq.n	8003402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <UART_AdvFeatureConfig+0x14c>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	2208      	movs	r2, #8
 8003408:	4013      	ands	r3, r2
 800340a:	d00b      	beq.n	8003424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <UART_AdvFeatureConfig+0x150>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	2210      	movs	r2, #16
 800342a:	4013      	ands	r3, r2
 800342c:	d00b      	beq.n	8003446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <UART_AdvFeatureConfig+0x154>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	2220      	movs	r2, #32
 800344c:	4013      	ands	r3, r2
 800344e:	d00b      	beq.n	8003468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4a25      	ldr	r2, [pc, #148]	; (80034ec <UART_AdvFeatureConfig+0x158>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	2240      	movs	r2, #64	; 0x40
 800346e:	4013      	ands	r3, r2
 8003470:	d01d      	beq.n	80034ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <UART_AdvFeatureConfig+0x15c>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	035b      	lsls	r3, r3, #13
 8003492:	429a      	cmp	r2, r3
 8003494:	d10b      	bne.n	80034ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <UART_AdvFeatureConfig+0x160>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	4013      	ands	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <UART_AdvFeatureConfig+0x164>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	fffdffff 	.word	0xfffdffff
 80034dc:	fffeffff 	.word	0xfffeffff
 80034e0:	fffbffff 	.word	0xfffbffff
 80034e4:	ffff7fff 	.word	0xffff7fff
 80034e8:	ffffefff 	.word	0xffffefff
 80034ec:	ffffdfff 	.word	0xffffdfff
 80034f0:	ffefffff 	.word	0xffefffff
 80034f4:	ff9fffff 	.word	0xff9fffff
 80034f8:	fff7ffff 	.word	0xfff7ffff

080034fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af02      	add	r7, sp, #8
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	228c      	movs	r2, #140	; 0x8c
 8003508:	2100      	movs	r1, #0
 800350a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800350c:	f7fd fd1e 	bl	8000f4c <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2208      	movs	r2, #8
 800351c:	4013      	ands	r3, r2
 800351e:	2b08      	cmp	r3, #8
 8003520:	d10c      	bne.n	800353c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2280      	movs	r2, #128	; 0x80
 8003526:	0391      	lsls	r1, r2, #14
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4a18      	ldr	r2, [pc, #96]	; (800358c <UART_CheckIdleState+0x90>)
 800352c:	9200      	str	r2, [sp, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	f000 f82e 	bl	8003590 <UART_WaitOnFlagUntilTimeout>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d001      	beq.n	800353c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e023      	b.n	8003584 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	2b04      	cmp	r3, #4
 8003548:	d10c      	bne.n	8003564 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	03d1      	lsls	r1, r2, #15
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <UART_CheckIdleState+0x90>)
 8003554:	9200      	str	r2, [sp, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	f000 f81a 	bl	8003590 <UART_WaitOnFlagUntilTimeout>
 800355c:	1e03      	subs	r3, r0, #0
 800355e:	d001      	beq.n	8003564 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e00f      	b.n	8003584 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2284      	movs	r2, #132	; 0x84
 8003568:	2120      	movs	r1, #32
 800356a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2288      	movs	r2, #136	; 0x88
 8003570:	2120      	movs	r1, #32
 8003572:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	2100      	movs	r1, #0
 8003580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bd80      	pop	{r7, pc}
 800358c:	01ffffff 	.word	0x01ffffff

08003590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b094      	sub	sp, #80	; 0x50
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	1dfb      	adds	r3, r7, #7
 800359e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a0:	e0a7      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a4:	3301      	adds	r3, #1
 80035a6:	d100      	bne.n	80035aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80035a8:	e0a3      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7fd fccf 	bl	8000f4c <HAL_GetTick>
 80035ae:	0002      	movs	r2, r0
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13f      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c0:	f3ef 8310 	mrs	r3, PRIMASK
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ca:	2301      	movs	r3, #1
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	494e      	ldr	r1, [pc, #312]	; (800371c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80035e2:	400a      	ands	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	f383 8810 	msr	PRIMASK, r3
}
 80035f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f2:	f3ef 8310 	mrs	r3, PRIMASK
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fa:	643b      	str	r3, [r7, #64]	; 0x40
 80035fc:	2301      	movs	r3, #1
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	f383 8810 	msr	PRIMASK, r3
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	438a      	bics	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361e:	f383 8810 	msr	PRIMASK, r3
}
 8003622:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2284      	movs	r2, #132	; 0x84
 8003628:	2120      	movs	r1, #32
 800362a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2288      	movs	r2, #136	; 0x88
 8003630:	2120      	movs	r1, #32
 8003632:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	2100      	movs	r1, #0
 800363a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e069      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2204      	movs	r2, #4
 8003648:	4013      	ands	r3, r2
 800364a:	d052      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	401a      	ands	r2, r3
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	429a      	cmp	r2, r3
 800365e:	d148      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366a:	f3ef 8310 	mrs	r3, PRIMASK
 800366e:	613b      	str	r3, [r7, #16]
  return(result);
 8003670:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003674:	2301      	movs	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4924      	ldr	r1, [pc, #144]	; (800371c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800368c:	400a      	ands	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003692:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80036a2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80036a6:	2301      	movs	r3, #1
 80036a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	438a      	bics	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
 80036c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2284      	movs	r2, #132	; 0x84
 80036d2:	2120      	movs	r1, #32
 80036d4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2288      	movs	r2, #136	; 0x88
 80036da:	2120      	movs	r1, #32
 80036dc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	228c      	movs	r2, #140	; 0x8c
 80036e2:	2120      	movs	r1, #32
 80036e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e010      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	425a      	negs	r2, r3
 8003702:	4153      	adcs	r3, r2
 8003704:	b2db      	uxtb	r3, r3
 8003706:	001a      	movs	r2, r3
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d100      	bne.n	8003712 <UART_WaitOnFlagUntilTimeout+0x182>
 8003710:	e747      	b.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b014      	add	sp, #80	; 0x50
 800371a:	bd80      	pop	{r7, pc}
 800371c:	fffffe5f 	.word	0xfffffe5f

08003720 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	5c9b      	ldrb	r3, [r3, r2]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_UARTEx_DisableFifoMode+0x16>
 8003732:	2302      	movs	r3, #2
 8003734:	e027      	b.n	8003786 <HAL_UARTEx_DisableFifoMode+0x66>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2284      	movs	r2, #132	; 0x84
 8003742:	2124      	movs	r1, #36	; 0x24
 8003744:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	438a      	bics	r2, r1
 800375c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2284      	movs	r2, #132	; 0x84
 8003778:	2120      	movs	r1, #32
 800377a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b004      	add	sp, #16
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	dfffffff 	.word	0xdfffffff

08003794 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e02e      	b.n	800380a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	2101      	movs	r1, #1
 80037b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2284      	movs	r2, #132	; 0x84
 80037b8:	2124      	movs	r1, #36	; 0x24
 80037ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2101      	movs	r1, #1
 80037d0:	438a      	bics	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	08d9      	lsrs	r1, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 f854 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2284      	movs	r2, #132	; 0x84
 80037fc:	2120      	movs	r1, #32
 80037fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b004      	add	sp, #16
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	5c9b      	ldrb	r3, [r3, r2]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003828:	2302      	movs	r3, #2
 800382a:	e02f      	b.n	800388c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	2101      	movs	r1, #1
 8003832:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2284      	movs	r2, #132	; 0x84
 8003838:	2124      	movs	r1, #36	; 0x24
 800383a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 f813 	bl	8003898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2284      	movs	r2, #132	; 0x84
 800387e:	2120      	movs	r1, #32
 8003880:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b004      	add	sp, #16
 8003892:	bd80      	pop	{r7, pc}
 8003894:	f1ffffff 	.word	0xf1ffffff

08003898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	226a      	movs	r2, #106	; 0x6a
 80038ac:	2101      	movs	r1, #1
 80038ae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2268      	movs	r2, #104	; 0x68
 80038b4:	2101      	movs	r1, #1
 80038b6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038b8:	e043      	b.n	8003942 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80038ba:	260f      	movs	r6, #15
 80038bc:	19bb      	adds	r3, r7, r6
 80038be:	2208      	movs	r2, #8
 80038c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80038c2:	200e      	movs	r0, #14
 80038c4:	183b      	adds	r3, r7, r0
 80038c6:	2208      	movs	r2, #8
 80038c8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	0e5b      	lsrs	r3, r3, #25
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	240d      	movs	r4, #13
 80038d6:	193b      	adds	r3, r7, r4
 80038d8:	2107      	movs	r1, #7
 80038da:	400a      	ands	r2, r1
 80038dc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	0f5b      	lsrs	r3, r3, #29
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	250c      	movs	r5, #12
 80038ea:	197b      	adds	r3, r7, r5
 80038ec:	2107      	movs	r1, #7
 80038ee:	400a      	ands	r2, r1
 80038f0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038f2:	183b      	adds	r3, r7, r0
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	197a      	adds	r2, r7, r5
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	4914      	ldr	r1, [pc, #80]	; (800394c <UARTEx_SetNbDataToProcess+0xb4>)
 80038fc:	5c8a      	ldrb	r2, [r1, r2]
 80038fe:	435a      	muls	r2, r3
 8003900:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003902:	197b      	adds	r3, r7, r5
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	4a12      	ldr	r2, [pc, #72]	; (8003950 <UARTEx_SetNbDataToProcess+0xb8>)
 8003908:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800390a:	0019      	movs	r1, r3
 800390c:	f7fc fc86 	bl	800021c <__divsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	b299      	uxth	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	226a      	movs	r2, #106	; 0x6a
 8003918:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800391a:	19bb      	adds	r3, r7, r6
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	193a      	adds	r2, r7, r4
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	490a      	ldr	r1, [pc, #40]	; (800394c <UARTEx_SetNbDataToProcess+0xb4>)
 8003924:	5c8a      	ldrb	r2, [r1, r2]
 8003926:	435a      	muls	r2, r3
 8003928:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800392a:	193b      	adds	r3, r7, r4
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <UARTEx_SetNbDataToProcess+0xb8>)
 8003930:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003932:	0019      	movs	r1, r3
 8003934:	f7fc fc72 	bl	800021c <__divsi3>
 8003938:	0003      	movs	r3, r0
 800393a:	b299      	uxth	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2268      	movs	r2, #104	; 0x68
 8003940:	5299      	strh	r1, [r3, r2]
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b005      	add	sp, #20
 8003948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	08006008 	.word	0x08006008
 8003950:	08006010 	.word	0x08006010

08003954 <__NVIC_SetPriority>:
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	0002      	movs	r2, r0
 800395c:	6039      	str	r1, [r7, #0]
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b7f      	cmp	r3, #127	; 0x7f
 8003968:	d828      	bhi.n	80039bc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800396a:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <__NVIC_SetPriority+0xd4>)
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	b25b      	sxtb	r3, r3
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	33c0      	adds	r3, #192	; 0xc0
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	589b      	ldr	r3, [r3, r2]
 800397a:	1dfa      	adds	r2, r7, #7
 800397c:	7812      	ldrb	r2, [r2, #0]
 800397e:	0011      	movs	r1, r2
 8003980:	2203      	movs	r2, #3
 8003982:	400a      	ands	r2, r1
 8003984:	00d2      	lsls	r2, r2, #3
 8003986:	21ff      	movs	r1, #255	; 0xff
 8003988:	4091      	lsls	r1, r2
 800398a:	000a      	movs	r2, r1
 800398c:	43d2      	mvns	r2, r2
 800398e:	401a      	ands	r2, r3
 8003990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	22ff      	movs	r2, #255	; 0xff
 8003998:	401a      	ands	r2, r3
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	0018      	movs	r0, r3
 80039a0:	2303      	movs	r3, #3
 80039a2:	4003      	ands	r3, r0
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039a8:	481f      	ldr	r0, [pc, #124]	; (8003a28 <__NVIC_SetPriority+0xd4>)
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b25b      	sxtb	r3, r3
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	430a      	orrs	r2, r1
 80039b4:	33c0      	adds	r3, #192	; 0xc0
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	501a      	str	r2, [r3, r0]
}
 80039ba:	e031      	b.n	8003a20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <__NVIC_SetPriority+0xd8>)
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	0019      	movs	r1, r3
 80039c4:	230f      	movs	r3, #15
 80039c6:	400b      	ands	r3, r1
 80039c8:	3b08      	subs	r3, #8
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3306      	adds	r3, #6
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	3304      	adds	r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	1dfa      	adds	r2, r7, #7
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	0011      	movs	r1, r2
 80039dc:	2203      	movs	r2, #3
 80039de:	400a      	ands	r2, r1
 80039e0:	00d2      	lsls	r2, r2, #3
 80039e2:	21ff      	movs	r1, #255	; 0xff
 80039e4:	4091      	lsls	r1, r2
 80039e6:	000a      	movs	r2, r1
 80039e8:	43d2      	mvns	r2, r2
 80039ea:	401a      	ands	r2, r3
 80039ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	401a      	ands	r2, r3
 80039f6:	1dfb      	adds	r3, r7, #7
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	0018      	movs	r0, r3
 80039fc:	2303      	movs	r3, #3
 80039fe:	4003      	ands	r3, r0
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a04:	4809      	ldr	r0, [pc, #36]	; (8003a2c <__NVIC_SetPriority+0xd8>)
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	001c      	movs	r4, r3
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	4023      	ands	r3, r4
 8003a10:	3b08      	subs	r3, #8
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	430a      	orrs	r2, r1
 8003a16:	3306      	adds	r3, #6
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	18c3      	adds	r3, r0, r3
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	601a      	str	r2, [r3, #0]
}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b003      	add	sp, #12
 8003a26:	bd90      	pop	{r4, r7, pc}
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a34:	2305      	movs	r3, #5
 8003a36:	425b      	negs	r3, r3
 8003a38:	2100      	movs	r1, #0
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7ff ff8a 	bl	8003954 <__NVIC_SetPriority>
#endif
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4e:	f3ef 8305 	mrs	r3, IPSR
 8003a52:	603b      	str	r3, [r7, #0]
  return(result);
 8003a54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	425b      	negs	r3, r3
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	e00c      	b.n	8003a7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <osKernelInitialize+0x40>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <osKernelInitialize+0x40>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e002      	b.n	8003a7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a76:	2301      	movs	r3, #1
 8003a78:	425b      	negs	r3, r3
 8003a7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a7c:	687b      	ldr	r3, [r7, #4]
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	2000002c 	.word	0x2000002c

08003a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a92:	f3ef 8305 	mrs	r3, IPSR
 8003a96:	603b      	str	r3, [r7, #0]
  return(result);
 8003a98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a9e:	2306      	movs	r3, #6
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	e010      	b.n	8003ac8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <osKernelStart+0x48>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d109      	bne.n	8003ac2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003aae:	f7ff ffbf 	bl	8003a30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <osKernelStart+0x48>)
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ab8:	f000 ff6e 	bl	8004998 <vTaskStartScheduler>
      stat = osOK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e002      	b.n	8003ac8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	425b      	negs	r3, r3
 8003ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ac8:	687b      	ldr	r3, [r7, #4]
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	2000002c 	.word	0x2000002c

08003ad8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b08e      	sub	sp, #56	; 0x38
 8003adc:	af04      	add	r7, sp, #16
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae8:	f3ef 8305 	mrs	r3, IPSR
 8003aec:	617b      	str	r3, [r7, #20]
  return(result);
 8003aee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d000      	beq.n	8003af6 <osThreadNew+0x1e>
 8003af4:	e081      	b.n	8003bfa <osThreadNew+0x122>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d100      	bne.n	8003afe <osThreadNew+0x26>
 8003afc:	e07d      	b.n	8003bfa <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b02:	2318      	movs	r3, #24
 8003b04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	425b      	negs	r3, r3
 8003b0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d044      	beq.n	8003ba0 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <osThreadNew+0x4c>
        name = attr->name;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <osThreadNew+0x70>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b38      	cmp	r3, #56	; 0x38
 8003b3c:	d804      	bhi.n	8003b48 <osThreadNew+0x70>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	4013      	ands	r3, r2
 8003b46:	d001      	beq.n	8003b4c <osThreadNew+0x74>
        return (NULL);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e057      	b.n	8003bfc <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <osThreadNew+0xaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b5b      	cmp	r3, #91	; 0x5b
 8003b6a:	d90a      	bls.n	8003b82 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <osThreadNew+0xaa>
        mem = 1;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e010      	b.n	8003ba4 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <osThreadNew+0xcc>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d108      	bne.n	8003ba4 <osThreadNew+0xcc>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <osThreadNew+0xcc>
          mem = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e001      	b.n	8003ba4 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d112      	bne.n	8003bd0 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb2:	68bd      	ldr	r5, [r7, #8]
 8003bb4:	6a3c      	ldr	r4, [r7, #32]
 8003bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	9302      	str	r3, [sp, #8]
 8003bbc:	9201      	str	r2, [sp, #4]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	002b      	movs	r3, r5
 8003bc4:	0022      	movs	r2, r4
 8003bc6:	f000 fd3e 	bl	8004646 <xTaskCreateStatic>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e014      	b.n	8003bfa <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d111      	bne.n	8003bfa <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68bc      	ldr	r4, [r7, #8]
 8003bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	2310      	movs	r3, #16
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	0023      	movs	r3, r4
 8003bec:	f000 fd6f 	bl	80046ce <xTaskCreate>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <osThreadNew+0x122>
            hTask = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bfa:	693b      	ldr	r3, [r7, #16]
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b00a      	add	sp, #40	; 0x28
 8003c02:	bdb0      	pop	{r4, r5, r7, pc}

08003c04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <osDelay+0x1c>
    stat = osErrorISR;
 8003c18:	2306      	movs	r3, #6
 8003c1a:	425b      	negs	r3, r3
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e008      	b.n	8003c32 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <osDelay+0x2e>
      vTaskDelay(ticks);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 fe8d 	bl	800494c <vTaskDelay>
    }
  }

  return (stat);
 8003c32:	68fb      	ldr	r3, [r7, #12]
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b004      	add	sp, #16
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a06      	ldr	r2, [pc, #24]	; (8003c64 <vApplicationGetIdleTaskMemory+0x28>)
 8003c4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4a05      	ldr	r2, [pc, #20]	; (8003c68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	601a      	str	r2, [r3, #0]
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b004      	add	sp, #16
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000030 	.word	0x20000030
 8003c68:	2000008c 	.word	0x2000008c

08003c6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a06      	ldr	r2, [pc, #24]	; (8003c94 <vApplicationGetTimerTaskMemory+0x28>)
 8003c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	0052      	lsls	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
}
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b004      	add	sp, #16
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	2000028c 	.word	0x2000028c
 8003c98:	200002e8 	.word	0x200002e8

08003c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	001a      	movs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4252      	negs	r2, r2
 8003cb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	001a      	movs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}

08003cee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	3301      	adds	r3, #1
 8003d46:	d103      	bne.n	8003d50 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e00c      	b.n	8003d6a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3308      	adds	r3, #8
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e002      	b.n	8003d5e <vListInsert+0x2c>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d2f6      	bcs.n	8003d58 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b004      	add	sp, #16
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6892      	ldr	r2, [r2, #8]
 8003db4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6852      	ldr	r2, [r2, #4]
 8003dbe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d103      	bne.n	8003dd2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	1e5a      	subs	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b004      	add	sp, #16
 8003dec:	bd80      	pop	{r7, pc}

08003dee <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <xQueueGenericReset+0x18>
 8003e02:	b672      	cpsid	i
 8003e04:	e7fe      	b.n	8003e04 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003e06:	f001 fe13 	bl	8005a30 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	434b      	muls	r3, r1
 8003e18:	18d2      	adds	r2, r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	1e59      	subs	r1, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	434b      	muls	r3, r1
 8003e3c:	18d2      	adds	r2, r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2244      	movs	r2, #68	; 0x44
 8003e46:	21ff      	movs	r1, #255	; 0xff
 8003e48:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2245      	movs	r2, #69	; 0x45
 8003e4e:	21ff      	movs	r1, #255	; 0xff
 8003e50:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10d      	bne.n	8003e74 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d013      	beq.n	8003e88 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3310      	adds	r3, #16
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 ffd7 	bl	8004e18 <xTaskRemoveFromEventList>
 8003e6a:	1e03      	subs	r3, r0, #0
 8003e6c:	d00c      	beq.n	8003e88 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e6e:	f001 fdcf 	bl	8005a10 <vPortYield>
 8003e72:	e009      	b.n	8003e88 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3310      	adds	r3, #16
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff ff0f 	bl	8003c9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3324      	adds	r3, #36	; 0x24
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff ff0a 	bl	8003c9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e88:	f001 fde4 	bl	8005a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e8c:	2301      	movs	r3, #1
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e96:	b590      	push	{r4, r7, lr}
 8003e98:	b089      	sub	sp, #36	; 0x24
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <xQueueGenericCreateStatic+0x18>
 8003eaa:	b672      	cpsid	i
 8003eac:	e7fe      	b.n	8003eac <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <xQueueGenericCreateStatic+0x22>
 8003eb4:	b672      	cpsid	i
 8003eb6:	e7fe      	b.n	8003eb6 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <xQueueGenericCreateStatic+0x2e>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <xQueueGenericCreateStatic+0x32>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xQueueGenericCreateStatic+0x34>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <xQueueGenericCreateStatic+0x3c>
 8003ece:	b672      	cpsid	i
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <xQueueGenericCreateStatic+0x48>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <xQueueGenericCreateStatic+0x4c>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericCreateStatic+0x4e>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <xQueueGenericCreateStatic+0x56>
 8003ee8:	b672      	cpsid	i
 8003eea:	e7fe      	b.n	8003eea <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eec:	2350      	movs	r3, #80	; 0x50
 8003eee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b50      	cmp	r3, #80	; 0x50
 8003ef4:	d001      	beq.n	8003efa <xQueueGenericCreateStatic+0x64>
 8003ef6:	b672      	cpsid	i
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003efa:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2246      	movs	r2, #70	; 0x46
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f0e:	2328      	movs	r3, #40	; 0x28
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	781c      	ldrb	r4, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	0023      	movs	r3, r4
 8003f20:	f000 f805 	bl	8003f2e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f24:	697b      	ldr	r3, [r7, #20]
	}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b007      	add	sp, #28
 8003f2c:	bd90      	pop	{r4, r7, pc}

08003f2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	001a      	movs	r2, r3
 8003f3c:	1cfb      	adds	r3, r7, #3
 8003f3e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e002      	b.n	8003f54 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2101      	movs	r1, #1
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff ff42 	bl	8003dee <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	1cfa      	adds	r2, r7, #3
 8003f6e:	214c      	movs	r1, #76	; 0x4c
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <xQueueGenericSend+0x20>
 8003f98:	b672      	cpsid	i
 8003f9a:	e7fe      	b.n	8003f9a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <xQueueGenericSend+0x2e>
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <xQueueGenericSend+0x32>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <xQueueGenericSend+0x34>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <xQueueGenericSend+0x3c>
 8003fb4:	b672      	cpsid	i
 8003fb6:	e7fe      	b.n	8003fb6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d103      	bne.n	8003fc6 <xQueueGenericSend+0x4a>
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <xQueueGenericSend+0x4e>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xQueueGenericSend+0x50>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xQueueGenericSend+0x58>
 8003fd0:	b672      	cpsid	i
 8003fd2:	e7fe      	b.n	8003fd2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fd4:	f001 f8b2 	bl	800513c <xTaskGetSchedulerState>
 8003fd8:	1e03      	subs	r3, r0, #0
 8003fda:	d102      	bne.n	8003fe2 <xQueueGenericSend+0x66>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <xQueueGenericSend+0x6a>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <xQueueGenericSend+0x6c>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <xQueueGenericSend+0x74>
 8003fec:	b672      	cpsid	i
 8003fee:	e7fe      	b.n	8003fee <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ff0:	f001 fd1e 	bl	8005a30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d302      	bcc.n	8004006 <xQueueGenericSend+0x8a>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d11e      	bne.n	8004044 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	0018      	movs	r0, r3
 800400e:	f000 f9a2 	bl	8004356 <prvCopyDataToQueue>
 8004012:	0003      	movs	r3, r0
 8004014:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	3324      	adds	r3, #36	; 0x24
 8004022:	0018      	movs	r0, r3
 8004024:	f000 fef8 	bl	8004e18 <xTaskRemoveFromEventList>
 8004028:	1e03      	subs	r3, r0, #0
 800402a:	d007      	beq.n	800403c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800402c:	f001 fcf0 	bl	8005a10 <vPortYield>
 8004030:	e004      	b.n	800403c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004038:	f001 fcea 	bl	8005a10 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800403c:	f001 fd0a 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8004040:	2301      	movs	r3, #1
 8004042:	e05b      	b.n	80040fc <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800404a:	f001 fd03 	bl	8005a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800404e:	2300      	movs	r3, #0
 8004050:	e054      	b.n	80040fc <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004058:	2314      	movs	r3, #20
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	0018      	movs	r0, r3
 800405e:	f000 ff37 	bl	8004ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004062:	2301      	movs	r3, #1
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004066:	f001 fcf5 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800406a:	f000 fce9 	bl	8004a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800406e:	f001 fcdf 	bl	8005a30 <vPortEnterCritical>
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	2244      	movs	r2, #68	; 0x44
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	b25b      	sxtb	r3, r3
 800407a:	3301      	adds	r3, #1
 800407c:	d103      	bne.n	8004086 <xQueueGenericSend+0x10a>
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	2244      	movs	r2, #68	; 0x44
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	2245      	movs	r2, #69	; 0x45
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	b25b      	sxtb	r3, r3
 800408e:	3301      	adds	r3, #1
 8004090:	d103      	bne.n	800409a <xQueueGenericSend+0x11e>
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2245      	movs	r2, #69	; 0x45
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]
 800409a:	f001 fcdb 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800409e:	1d3a      	adds	r2, r7, #4
 80040a0:	2314      	movs	r3, #20
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	0011      	movs	r1, r2
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 ff26 	bl	8004ef8 <xTaskCheckForTimeOut>
 80040ac:	1e03      	subs	r3, r0, #0
 80040ae:	d11e      	bne.n	80040ee <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fa54 	bl	8004560 <prvIsQueueFull>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d011      	beq.n	80040e0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	3310      	adds	r3, #16
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	0011      	movs	r1, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 fe63 	bl	8004d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 f9d3 	bl	8004478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040d2:	f000 fcc1 	bl	8004a58 <xTaskResumeAll>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d18a      	bne.n	8003ff0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80040da:	f001 fc99 	bl	8005a10 <vPortYield>
 80040de:	e787      	b.n	8003ff0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 f9c8 	bl	8004478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040e8:	f000 fcb6 	bl	8004a58 <xTaskResumeAll>
 80040ec:	e780      	b.n	8003ff0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 f9c1 	bl	8004478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040f6:	f000 fcaf 	bl	8004a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b00a      	add	sp, #40	; 0x28
 8004102:	bd80      	pop	{r7, pc}

08004104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b08b      	sub	sp, #44	; 0x2c
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <xQueueGenericSendFromISR+0x1c>
 800411c:	b672      	cpsid	i
 800411e:	e7fe      	b.n	800411e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <xQueueGenericSendFromISR+0x2a>
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <xQueueGenericSendFromISR+0x2e>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <xQueueGenericSendFromISR+0x30>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <xQueueGenericSendFromISR+0x38>
 8004138:	b672      	cpsid	i
 800413a:	e7fe      	b.n	800413a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d103      	bne.n	800414a <xQueueGenericSendFromISR+0x46>
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <xQueueGenericSendFromISR+0x4a>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <xQueueGenericSendFromISR+0x4c>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <xQueueGenericSendFromISR+0x54>
 8004154:	b672      	cpsid	i
 8004156:	e7fe      	b.n	8004156 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004158:	f001 fc94 	bl	8005a84 <ulSetInterruptMaskFromISR>
 800415c:	0003      	movs	r3, r0
 800415e:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <xQueueGenericSendFromISR+0x6e>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d131      	bne.n	80041d6 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004172:	241b      	movs	r4, #27
 8004174:	193b      	adds	r3, r7, r4
 8004176:	6a3a      	ldr	r2, [r7, #32]
 8004178:	2145      	movs	r1, #69	; 0x45
 800417a:	5c52      	ldrb	r2, [r2, r1]
 800417c:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 f8e3 	bl	8004356 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004190:	193b      	adds	r3, r7, r4
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b25b      	sxtb	r3, r3
 8004196:	3301      	adds	r3, #1
 8004198:	d111      	bne.n	80041be <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	3324      	adds	r3, #36	; 0x24
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 fe36 	bl	8004e18 <xTaskRemoveFromEventList>
 80041ac:	1e03      	subs	r3, r0, #0
 80041ae:	d00f      	beq.n	80041d0 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e008      	b.n	80041d0 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041be:	231b      	movs	r3, #27
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	b259      	sxtb	r1, r3
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	2245      	movs	r2, #69	; 0x45
 80041ce:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80041d0:	2301      	movs	r3, #1
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80041d4:	e001      	b.n	80041da <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	0018      	movs	r0, r3
 80041de:	f001 fc57 	bl	8005a90 <vClearInterruptMaskFromISR>

	return xReturn;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b00b      	add	sp, #44	; 0x2c
 80041ea:	bd90      	pop	{r4, r7, pc}

080041ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <xQueueReceive+0x1e>
 8004206:	b672      	cpsid	i
 8004208:	e7fe      	b.n	8004208 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <xQueueReceive+0x2c>
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <xQueueReceive+0x30>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <xQueueReceive+0x32>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <xQueueReceive+0x3a>
 8004222:	b672      	cpsid	i
 8004224:	e7fe      	b.n	8004224 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004226:	f000 ff89 	bl	800513c <xTaskGetSchedulerState>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d102      	bne.n	8004234 <xQueueReceive+0x48>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <xQueueReceive+0x4c>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <xQueueReceive+0x4e>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <xQueueReceive+0x56>
 800423e:	b672      	cpsid	i
 8004240:	e7fe      	b.n	8004240 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004242:	f001 fbf5 	bl	8005a30 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01a      	beq.n	8004288 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	0011      	movs	r1, r2
 8004258:	0018      	movs	r0, r3
 800425a:	f000 f8e7 	bl	800442c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	3310      	adds	r3, #16
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fdd0 	bl	8004e18 <xTaskRemoveFromEventList>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d001      	beq.n	8004280 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800427c:	f001 fbc8 	bl	8005a10 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004280:	f001 fbe8 	bl	8005a54 <vPortExitCritical>
				return pdPASS;
 8004284:	2301      	movs	r3, #1
 8004286:	e062      	b.n	800434e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800428e:	f001 fbe1 	bl	8005a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004292:	2300      	movs	r3, #0
 8004294:	e05b      	b.n	800434e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800429c:	2314      	movs	r3, #20
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 fe15 	bl	8004ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042aa:	f001 fbd3 	bl	8005a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ae:	f000 fbc7 	bl	8004a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042b2:	f001 fbbd 	bl	8005a30 <vPortEnterCritical>
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2244      	movs	r2, #68	; 0x44
 80042ba:	5c9b      	ldrb	r3, [r3, r2]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	d103      	bne.n	80042ca <xQueueReceive+0xde>
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	2244      	movs	r2, #68	; 0x44
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	2245      	movs	r2, #69	; 0x45
 80042ce:	5c9b      	ldrb	r3, [r3, r2]
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	d103      	bne.n	80042de <xQueueReceive+0xf2>
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	2245      	movs	r2, #69	; 0x45
 80042da:	2100      	movs	r1, #0
 80042dc:	5499      	strb	r1, [r3, r2]
 80042de:	f001 fbb9 	bl	8005a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042e2:	1d3a      	adds	r2, r7, #4
 80042e4:	2314      	movs	r3, #20
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	0011      	movs	r1, r2
 80042ea:	0018      	movs	r0, r3
 80042ec:	f000 fe04 	bl	8004ef8 <xTaskCheckForTimeOut>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d11e      	bne.n	8004332 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 f91c 	bl	8004534 <prvIsQueueEmpty>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d011      	beq.n	8004324 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	3324      	adds	r3, #36	; 0x24
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	0011      	movs	r1, r2
 8004308:	0018      	movs	r0, r3
 800430a:	f000 fd41 	bl	8004d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	0018      	movs	r0, r3
 8004312:	f000 f8b1 	bl	8004478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004316:	f000 fb9f 	bl	8004a58 <xTaskResumeAll>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d191      	bne.n	8004242 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800431e:	f001 fb77 	bl	8005a10 <vPortYield>
 8004322:	e78e      	b.n	8004242 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	0018      	movs	r0, r3
 8004328:	f000 f8a6 	bl	8004478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800432c:	f000 fb94 	bl	8004a58 <xTaskResumeAll>
 8004330:	e787      	b.n	8004242 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	0018      	movs	r0, r3
 8004336:	f000 f89f 	bl	8004478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800433a:	f000 fb8d 	bl	8004a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f8f7 	bl	8004534 <prvIsQueueEmpty>
 8004346:	1e03      	subs	r3, r0, #0
 8004348:	d100      	bne.n	800434c <xQueueReceive+0x160>
 800434a:	e77a      	b.n	8004242 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800434c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b00a      	add	sp, #40	; 0x28
 8004354:	bd80      	pop	{r7, pc}

08004356 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10e      	bne.n	8004392 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d14e      	bne.n	800441a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 fef7 	bl	8005174 <xTaskPriorityDisinherit>
 8004386:	0003      	movs	r3, r0
 8004388:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	e043      	b.n	800441a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d119      	bne.n	80043cc <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6858      	ldr	r0, [r3, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	0019      	movs	r1, r3
 80043a4:	f001 fdb2 	bl	8005f0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	18d2      	adds	r2, r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d32b      	bcc.n	800441a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	e026      	b.n	800441a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68d8      	ldr	r0, [r3, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	0019      	movs	r1, r3
 80043d8:	f001 fd98 	bl	8005f0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	425b      	negs	r3, r3
 80043e6:	18d2      	adds	r2, r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	425b      	negs	r3, r3
 8004402:	18d2      	adds	r2, r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d105      	bne.n	800441a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	3b01      	subs	r3, #1
 8004418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004422:	697b      	ldr	r3, [r7, #20]
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b006      	add	sp, #24
 800442a:	bd80      	pop	{r7, pc}

0800442c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d018      	beq.n	8004470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	18d2      	adds	r2, r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d303      	bcc.n	8004460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68d9      	ldr	r1, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	0018      	movs	r0, r3
 800446c:	f001 fd4e 	bl	8005f0c <memcpy>
	}
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004480:	f001 fad6 	bl	8005a30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004484:	230f      	movs	r3, #15
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	2145      	movs	r1, #69	; 0x45
 800448c:	5c52      	ldrb	r2, [r2, r1]
 800448e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004490:	e013      	b.n	80044ba <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3324      	adds	r3, #36	; 0x24
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 fcba 	bl	8004e18 <xTaskRemoveFromEventList>
 80044a4:	1e03      	subs	r3, r0, #0
 80044a6:	d001      	beq.n	80044ac <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044a8:	f000 fd76 	bl	8004f98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044ac:	210f      	movs	r1, #15
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044ba:	230f      	movs	r3, #15
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dce5      	bgt.n	8004492 <prvUnlockQueue+0x1a>
 80044c6:	e000      	b.n	80044ca <prvUnlockQueue+0x52>
					break;
 80044c8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2245      	movs	r2, #69	; 0x45
 80044ce:	21ff      	movs	r1, #255	; 0xff
 80044d0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80044d2:	f001 fabf 	bl	8005a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044d6:	f001 faab 	bl	8005a30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044da:	230e      	movs	r3, #14
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	2144      	movs	r1, #68	; 0x44
 80044e2:	5c52      	ldrb	r2, [r2, r1]
 80044e4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044e6:	e013      	b.n	8004510 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d016      	beq.n	800451e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3310      	adds	r3, #16
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 fc8f 	bl	8004e18 <xTaskRemoveFromEventList>
 80044fa:	1e03      	subs	r3, r0, #0
 80044fc:	d001      	beq.n	8004502 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80044fe:	f000 fd4b 	bl	8004f98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004502:	210e      	movs	r1, #14
 8004504:	187b      	adds	r3, r7, r1
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	3b01      	subs	r3, #1
 800450a:	b2da      	uxtb	r2, r3
 800450c:	187b      	adds	r3, r7, r1
 800450e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004510:	230e      	movs	r3, #14
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b25b      	sxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	dce5      	bgt.n	80044e8 <prvUnlockQueue+0x70>
 800451c:	e000      	b.n	8004520 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800451e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2244      	movs	r2, #68	; 0x44
 8004524:	21ff      	movs	r1, #255	; 0xff
 8004526:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004528:	f001 fa94 	bl	8005a54 <vPortExitCritical>
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	b004      	add	sp, #16
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800453c:	f001 fa78 	bl	8005a30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e001      	b.n	8004552 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004552:	f001 fa7f 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bd80      	pop	{r7, pc}

08004560 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004568:	f001 fa62 	bl	8005a30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	429a      	cmp	r2, r3
 8004576:	d102      	bne.n	800457e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004578:	2301      	movs	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e001      	b.n	8004582 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004582:	f001 fa67 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}

08004590 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e015      	b.n	80045cc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045a0:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <vQueueAddToRegistry+0x4c>)
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	00d2      	lsls	r2, r2, #3
 80045a6:	58d3      	ldr	r3, [r2, r3]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10c      	bne.n	80045c6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <vQueueAddToRegistry+0x4c>)
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	00d2      	lsls	r2, r2, #3
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <vQueueAddToRegistry+0x4c>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	18d3      	adds	r3, r2, r3
 80045be:	3304      	adds	r3, #4
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045c4:	e006      	b.n	80045d4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b07      	cmp	r3, #7
 80045d0:	d9e6      	bls.n	80045a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20001ac8 	.word	0x20001ac8

080045e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045f0:	f001 fa1e 	bl	8005a30 <vPortEnterCritical>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2244      	movs	r2, #68	; 0x44
 80045f8:	5c9b      	ldrb	r3, [r3, r2]
 80045fa:	b25b      	sxtb	r3, r3
 80045fc:	3301      	adds	r3, #1
 80045fe:	d103      	bne.n	8004608 <vQueueWaitForMessageRestricted+0x28>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2244      	movs	r2, #68	; 0x44
 8004604:	2100      	movs	r1, #0
 8004606:	5499      	strb	r1, [r3, r2]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2245      	movs	r2, #69	; 0x45
 800460c:	5c9b      	ldrb	r3, [r3, r2]
 800460e:	b25b      	sxtb	r3, r3
 8004610:	3301      	adds	r3, #1
 8004612:	d103      	bne.n	800461c <vQueueWaitForMessageRestricted+0x3c>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2245      	movs	r2, #69	; 0x45
 8004618:	2100      	movs	r1, #0
 800461a:	5499      	strb	r1, [r3, r2]
 800461c:	f001 fa1a 	bl	8005a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3324      	adds	r3, #36	; 0x24
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fbcb 	bl	8004dcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff ff1d 	bl	8004478 <prvUnlockQueue>
	}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b006      	add	sp, #24
 8004644:	bd80      	pop	{r7, pc}

08004646 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004646:	b590      	push	{r4, r7, lr}
 8004648:	b08d      	sub	sp, #52	; 0x34
 800464a:	af04      	add	r7, sp, #16
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <xTaskCreateStatic+0x18>
 800465a:	b672      	cpsid	i
 800465c:	e7fe      	b.n	800465c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <xTaskCreateStatic+0x22>
 8004664:	b672      	cpsid	i
 8004666:	e7fe      	b.n	8004666 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004668:	235c      	movs	r3, #92	; 0x5c
 800466a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b5c      	cmp	r3, #92	; 0x5c
 8004670:	d001      	beq.n	8004676 <xTaskCreateStatic+0x30>
 8004672:	b672      	cpsid	i
 8004674:	e7fe      	b.n	8004674 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004676:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <xTaskCreateStatic+0x7a>
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01d      	beq.n	80046c0 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004686:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	2259      	movs	r2, #89	; 0x59
 8004692:	2102      	movs	r1, #2
 8004694:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004696:	683c      	ldr	r4, [r7, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	2300      	movs	r3, #0
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	9302      	str	r3, [sp, #8]
 80046a6:	2318      	movs	r3, #24
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	0023      	movs	r3, r4
 80046b2:	f000 f859 	bl	8004768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 f8df 	bl	800487c <prvAddNewTaskToReadyList>
 80046be:	e001      	b.n	80046c4 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046c4:	69bb      	ldr	r3, [r7, #24]
	}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b009      	add	sp, #36	; 0x24
 80046cc:	bd90      	pop	{r4, r7, pc}

080046ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046ce:	b590      	push	{r4, r7, lr}
 80046d0:	b08d      	sub	sp, #52	; 0x34
 80046d2:	af04      	add	r7, sp, #16
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	1dbb      	adds	r3, r7, #6
 80046dc:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046de:	1dbb      	adds	r3, r7, #6
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	0018      	movs	r0, r3
 80046e6:	f001 fa3b 	bl	8005b60 <pvPortMalloc>
 80046ea:	0003      	movs	r3, r0
 80046ec:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046f4:	205c      	movs	r0, #92	; 0x5c
 80046f6:	f001 fa33 	bl	8005b60 <pvPortMalloc>
 80046fa:	0003      	movs	r3, r0
 80046fc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
 800470a:	e006      	b.n	800471a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	0018      	movs	r0, r3
 8004710:	f001 fad2 	bl	8005cb8 <vPortFree>
 8004714:	e001      	b.n	800471a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2259      	movs	r2, #89	; 0x59
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004728:	1dbb      	adds	r3, r7, #6
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	683c      	ldr	r4, [r7, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	2300      	movs	r3, #0
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	0023      	movs	r3, r4
 8004744:	f000 f810 	bl	8004768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 f896 	bl	800487c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004750:	2301      	movs	r3, #1
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e002      	b.n	800475c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004756:	2301      	movs	r3, #1
 8004758:	425b      	negs	r3, r3
 800475a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800475c:	69bb      	ldr	r3, [r7, #24]
	}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b009      	add	sp, #36	; 0x24
 8004764:	bd90      	pop	{r4, r7, pc}
	...

08004768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	001a      	movs	r2, r3
 8004780:	21a5      	movs	r1, #165	; 0xa5
 8004782:	f001 fbcc 	bl	8005f1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	493a      	ldr	r1, [pc, #232]	; (8004878 <prvInitialiseNewTask+0x110>)
 800478e:	468c      	mov	ip, r1
 8004790:	4463      	add	r3, ip
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	18d3      	adds	r3, r2, r3
 8004796:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2207      	movs	r2, #7
 800479c:	4393      	bics	r3, r2
 800479e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2207      	movs	r2, #7
 80047a4:	4013      	ands	r3, r2
 80047a6:	d001      	beq.n	80047ac <prvInitialiseNewTask+0x44>
 80047a8:	b672      	cpsid	i
 80047aa:	e7fe      	b.n	80047aa <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d020      	beq.n	80047f4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e013      	b.n	80047e0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	18d3      	adds	r3, r2, r3
 80047be:	7818      	ldrb	r0, [r3, #0]
 80047c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c2:	2134      	movs	r1, #52	; 0x34
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	18d3      	adds	r3, r2, r3
 80047c8:	185b      	adds	r3, r3, r1
 80047ca:	1c02      	adds	r2, r0, #0
 80047cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	18d3      	adds	r3, r2, r3
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	3301      	adds	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b0f      	cmp	r3, #15
 80047e4:	d9e8      	bls.n	80047b8 <prvInitialiseNewTask+0x50>
 80047e6:	e000      	b.n	80047ea <prvInitialiseNewTask+0x82>
			{
				break;
 80047e8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	2243      	movs	r2, #67	; 0x43
 80047ee:	2100      	movs	r1, #0
 80047f0:	5499      	strb	r1, [r3, r2]
 80047f2:	e003      	b.n	80047fc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	2234      	movs	r2, #52	; 0x34
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b37      	cmp	r3, #55	; 0x37
 8004800:	d901      	bls.n	8004806 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004802:	2337      	movs	r3, #55	; 0x37
 8004804:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	6a3a      	ldr	r2, [r7, #32]
 8004810:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	2200      	movs	r2, #0
 8004816:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	3304      	adds	r3, #4
 800481c:	0018      	movs	r0, r3
 800481e:	f7ff fa5b 	bl	8003cd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	3318      	adds	r3, #24
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff fa56 	bl	8003cd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004830:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2238      	movs	r2, #56	; 0x38
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004840:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	2200      	movs	r2, #0
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	2258      	movs	r2, #88	; 0x58
 800484c:	2100      	movs	r1, #0
 800484e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	0018      	movs	r0, r3
 8004858:	f001 f84e 	bl	80058f8 <pxPortInitialiseStack>
 800485c:	0002      	movs	r2, r0
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b006      	add	sp, #24
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	3fffffff 	.word	0x3fffffff

0800487c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004884:	f001 f8d4 	bl	8005a30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004888:	4b2a      	ldr	r3, [pc, #168]	; (8004934 <prvAddNewTaskToReadyList+0xb8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	4b29      	ldr	r3, [pc, #164]	; (8004934 <prvAddNewTaskToReadyList+0xb8>)
 8004890:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004892:	4b29      	ldr	r3, [pc, #164]	; (8004938 <prvAddNewTaskToReadyList+0xbc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800489a:	4b27      	ldr	r3, [pc, #156]	; (8004938 <prvAddNewTaskToReadyList+0xbc>)
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <prvAddNewTaskToReadyList+0xb8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d110      	bne.n	80048ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048a8:	f000 fb90 	bl	8004fcc <prvInitialiseTaskLists>
 80048ac:	e00d      	b.n	80048ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <prvAddNewTaskToReadyList+0xc0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <prvAddNewTaskToReadyList+0xbc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d802      	bhi.n	80048ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048c4:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <prvAddNewTaskToReadyList+0xbc>)
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <prvAddNewTaskToReadyList+0xc4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <prvAddNewTaskToReadyList+0xc4>)
 80048d2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <prvAddNewTaskToReadyList+0xc4>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <prvAddNewTaskToReadyList+0xc8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d903      	bls.n	80048f0 <prvAddNewTaskToReadyList+0x74>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4b15      	ldr	r3, [pc, #84]	; (8004944 <prvAddNewTaskToReadyList+0xc8>)
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	0013      	movs	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4a12      	ldr	r2, [pc, #72]	; (8004948 <prvAddNewTaskToReadyList+0xcc>)
 80048fe:	189a      	adds	r2, r3, r2
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	0019      	movs	r1, r3
 8004906:	0010      	movs	r0, r2
 8004908:	f7ff f9f1 	bl	8003cee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800490c:	f001 f8a2 	bl	8005a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <prvAddNewTaskToReadyList+0xc0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <prvAddNewTaskToReadyList+0xbc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	429a      	cmp	r2, r3
 8004924:	d201      	bcs.n	800492a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004926:	f001 f873 	bl	8005a10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b002      	add	sp, #8
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	20000bbc 	.word	0x20000bbc
 8004938:	200006e8 	.word	0x200006e8
 800493c:	20000bc8 	.word	0x20000bc8
 8004940:	20000bd8 	.word	0x20000bd8
 8004944:	20000bc4 	.word	0x20000bc4
 8004948:	200006ec 	.word	0x200006ec

0800494c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d010      	beq.n	8004980 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <vTaskDelay+0x48>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <vTaskDelay+0x1e>
 8004966:	b672      	cpsid	i
 8004968:	e7fe      	b.n	8004968 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800496a:	f000 f869 	bl	8004a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2100      	movs	r1, #0
 8004972:	0018      	movs	r0, r3
 8004974:	f000 fc5a 	bl	800522c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004978:	f000 f86e 	bl	8004a58 <xTaskResumeAll>
 800497c:	0003      	movs	r3, r0
 800497e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004986:	f001 f843 	bl	8005a10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b004      	add	sp, #16
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	20000be4 	.word	0x20000be4

08004998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b089      	sub	sp, #36	; 0x24
 800499c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049a6:	003a      	movs	r2, r7
 80049a8:	1d39      	adds	r1, r7, #4
 80049aa:	2308      	movs	r3, #8
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7ff f944 	bl	8003c3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049b4:	683c      	ldr	r4, [r7, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	491b      	ldr	r1, [pc, #108]	; (8004a28 <vTaskStartScheduler+0x90>)
 80049bc:	481b      	ldr	r0, [pc, #108]	; (8004a2c <vTaskStartScheduler+0x94>)
 80049be:	9202      	str	r2, [sp, #8]
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	2300      	movs	r3, #0
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	0022      	movs	r2, r4
 80049ca:	f7ff fe3c 	bl	8004646 <xTaskCreateStatic>
 80049ce:	0002      	movs	r2, r0
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <vTaskStartScheduler+0x98>)
 80049d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <vTaskStartScheduler+0x98>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049dc:	2301      	movs	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e001      	b.n	80049e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d103      	bne.n	80049f4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80049ec:	f000 fc72 	bl	80052d4 <xTimerCreateTimerTask>
 80049f0:	0003      	movs	r3, r0
 80049f2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10d      	bne.n	8004a16 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80049fa:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <vTaskStartScheduler+0x9c>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	4252      	negs	r2, r2
 8004a02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <vTaskStartScheduler+0xa0>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <vTaskStartScheduler+0xa4>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a10:	f000 ffda 	bl	80059c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a14:	e004      	b.n	8004a20 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <vTaskStartScheduler+0x88>
 8004a1c:	b672      	cpsid	i
 8004a1e:	e7fe      	b.n	8004a1e <vTaskStartScheduler+0x86>
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b005      	add	sp, #20
 8004a26:	bd90      	pop	{r4, r7, pc}
 8004a28:	08005f54 	.word	0x08005f54
 8004a2c:	08004fad 	.word	0x08004fad
 8004a30:	20000be0 	.word	0x20000be0
 8004a34:	20000bdc 	.word	0x20000bdc
 8004a38:	20000bc8 	.word	0x20000bc8
 8004a3c:	20000bc0 	.word	0x20000bc0

08004a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <vTaskSuspendAll+0x14>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	4b02      	ldr	r3, [pc, #8]	; (8004a54 <vTaskSuspendAll+0x14>)
 8004a4c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20000be4 	.word	0x20000be4

08004a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a66:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <xTaskResumeAll+0xf8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <xTaskResumeAll+0x1a>
 8004a6e:	b672      	cpsid	i
 8004a70:	e7fe      	b.n	8004a70 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a72:	f000 ffdd 	bl	8005a30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a76:	4b36      	ldr	r3, [pc, #216]	; (8004b50 <xTaskResumeAll+0xf8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	1e5a      	subs	r2, r3, #1
 8004a7c:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <xTaskResumeAll+0xf8>)
 8004a7e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a80:	4b33      	ldr	r3, [pc, #204]	; (8004b50 <xTaskResumeAll+0xf8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d15b      	bne.n	8004b40 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a88:	4b32      	ldr	r3, [pc, #200]	; (8004b54 <xTaskResumeAll+0xfc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d057      	beq.n	8004b40 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a90:	e02f      	b.n	8004af2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <xTaskResumeAll+0x100>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3318      	adds	r3, #24
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7ff f97d 	bl	8003d9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7ff f978 	bl	8003d9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <xTaskResumeAll+0x104>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d903      	bls.n	8004ac2 <xTaskResumeAll+0x6a>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <xTaskResumeAll+0x104>)
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	0013      	movs	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <xTaskResumeAll+0x108>)
 8004ad0:	189a      	adds	r2, r3, r2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	0010      	movs	r0, r2
 8004ada:	f7ff f908 	bl	8003cee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <xTaskResumeAll+0x10c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <xTaskResumeAll+0x110>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af2:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <xTaskResumeAll+0x100>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1cb      	bne.n	8004a92 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b00:	f000 fafe 	bl	8005100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <xTaskResumeAll+0x114>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00f      	beq.n	8004b30 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b10:	f000 f83c 	bl	8004b8c <xTaskIncrementTick>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d002      	beq.n	8004b1e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <xTaskResumeAll+0x110>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f2      	bne.n	8004b10 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <xTaskResumeAll+0x114>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <xTaskResumeAll+0x110>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b3c:	f000 ff68 	bl	8005a10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b40:	f000 ff88 	bl	8005a54 <vPortExitCritical>

	return xAlreadyYielded;
 8004b44:	68bb      	ldr	r3, [r7, #8]
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b004      	add	sp, #16
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	20000be4 	.word	0x20000be4
 8004b54:	20000bbc 	.word	0x20000bbc
 8004b58:	20000b7c 	.word	0x20000b7c
 8004b5c:	20000bc4 	.word	0x20000bc4
 8004b60:	200006ec 	.word	0x200006ec
 8004b64:	200006e8 	.word	0x200006e8
 8004b68:	20000bd0 	.word	0x20000bd0
 8004b6c:	20000bcc 	.word	0x20000bcc

08004b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <xTaskGetTickCount+0x18>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b7c:	687b      	ldr	r3, [r7, #4]
}
 8004b7e:	0018      	movs	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b002      	add	sp, #8
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	20000bc0 	.word	0x20000bc0

08004b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b96:	4b4a      	ldr	r3, [pc, #296]	; (8004cc0 <xTaskIncrementTick+0x134>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d000      	beq.n	8004ba0 <xTaskIncrementTick+0x14>
 8004b9e:	e084      	b.n	8004caa <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ba0:	4b48      	ldr	r3, [pc, #288]	; (8004cc4 <xTaskIncrementTick+0x138>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ba8:	4b46      	ldr	r3, [pc, #280]	; (8004cc4 <xTaskIncrementTick+0x138>)
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d117      	bne.n	8004be4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bb4:	4b44      	ldr	r3, [pc, #272]	; (8004cc8 <xTaskIncrementTick+0x13c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <xTaskIncrementTick+0x36>
 8004bbe:	b672      	cpsid	i
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskIncrementTick+0x34>
 8004bc2:	4b41      	ldr	r3, [pc, #260]	; (8004cc8 <xTaskIncrementTick+0x13c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	4b40      	ldr	r3, [pc, #256]	; (8004ccc <xTaskIncrementTick+0x140>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <xTaskIncrementTick+0x13c>)
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <xTaskIncrementTick+0x140>)
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	; (8004cd0 <xTaskIncrementTick+0x144>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	4b3c      	ldr	r3, [pc, #240]	; (8004cd0 <xTaskIncrementTick+0x144>)
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f000 fa8e 	bl	8005100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004be4:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <xTaskIncrementTick+0x148>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d349      	bcc.n	8004c82 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bee:	4b36      	ldr	r3, [pc, #216]	; (8004cc8 <xTaskIncrementTick+0x13c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d104      	bne.n	8004c02 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf8:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <xTaskIncrementTick+0x148>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4252      	negs	r2, r2
 8004bfe:	601a      	str	r2, [r3, #0]
					break;
 8004c00:	e03f      	b.n	8004c82 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c02:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <xTaskIncrementTick+0x13c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d203      	bcs.n	8004c22 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <xTaskIncrementTick+0x148>)
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c20:	e02f      	b.n	8004c82 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3304      	adds	r3, #4
 8004c26:	0018      	movs	r0, r3
 8004c28:	f7ff f8b9 	bl	8003d9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	3318      	adds	r3, #24
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff f8b0 	bl	8003d9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <xTaskIncrementTick+0x14c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d903      	bls.n	8004c52 <xTaskIncrementTick+0xc6>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <xTaskIncrementTick+0x14c>)
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c56:	0013      	movs	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <xTaskIncrementTick+0x150>)
 8004c60:	189a      	adds	r2, r3, r2
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3304      	adds	r3, #4
 8004c66:	0019      	movs	r1, r3
 8004c68:	0010      	movs	r0, r2
 8004c6a:	f7ff f840 	bl	8003cee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <xTaskIncrementTick+0x154>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d3b8      	bcc.n	8004bee <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c80:	e7b5      	b.n	8004bee <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c82:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <xTaskIncrementTick+0x154>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4914      	ldr	r1, [pc, #80]	; (8004cdc <xTaskIncrementTick+0x150>)
 8004c8a:	0013      	movs	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	585b      	ldr	r3, [r3, r1]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d901      	bls.n	8004c9c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <xTaskIncrementTick+0x158>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e004      	b.n	8004cb4 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <xTaskIncrementTick+0x15c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <xTaskIncrementTick+0x15c>)
 8004cb2:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cb4:	697b      	ldr	r3, [r7, #20]
}
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b006      	add	sp, #24
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	20000be4 	.word	0x20000be4
 8004cc4:	20000bc0 	.word	0x20000bc0
 8004cc8:	20000b74 	.word	0x20000b74
 8004ccc:	20000b78 	.word	0x20000b78
 8004cd0:	20000bd4 	.word	0x20000bd4
 8004cd4:	20000bdc 	.word	0x20000bdc
 8004cd8:	20000bc4 	.word	0x20000bc4
 8004cdc:	200006ec 	.word	0x200006ec
 8004ce0:	200006e8 	.word	0x200006e8
 8004ce4:	20000bd0 	.word	0x20000bd0
 8004ce8:	20000bcc 	.word	0x20000bcc

08004cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <vTaskSwitchContext+0x90>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cfa:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <vTaskSwitchContext+0x94>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d00:	e037      	b.n	8004d72 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004d02:	4b1f      	ldr	r3, [pc, #124]	; (8004d80 <vTaskSwitchContext+0x94>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <vTaskSwitchContext+0x98>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	e007      	b.n	8004d20 <vTaskSwitchContext+0x34>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <vTaskSwitchContext+0x2e>
 8004d16:	b672      	cpsid	i
 8004d18:	e7fe      	b.n	8004d18 <vTaskSwitchContext+0x2c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	4919      	ldr	r1, [pc, #100]	; (8004d88 <vTaskSwitchContext+0x9c>)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	0013      	movs	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	189b      	adds	r3, r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	585b      	ldr	r3, [r3, r1]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0ee      	beq.n	8004d10 <vTaskSwitchContext+0x24>
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	0013      	movs	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	189b      	adds	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <vTaskSwitchContext+0x9c>)
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	3308      	adds	r3, #8
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d104      	bne.n	8004d62 <vTaskSwitchContext+0x76>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <vTaskSwitchContext+0xa0>)
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <vTaskSwitchContext+0x98>)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b002      	add	sp, #8
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	20000be4 	.word	0x20000be4
 8004d80:	20000bd0 	.word	0x20000bd0
 8004d84:	20000bc4 	.word	0x20000bc4
 8004d88:	200006ec 	.word	0x200006ec
 8004d8c:	200006e8 	.word	0x200006e8

08004d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <vTaskPlaceOnEventList+0x14>
 8004da0:	b672      	cpsid	i
 8004da2:	e7fe      	b.n	8004da2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <vTaskPlaceOnEventList+0x38>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3318      	adds	r3, #24
 8004daa:	001a      	movs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	0011      	movs	r1, r2
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7fe ffbe 	bl	8003d32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2101      	movs	r1, #1
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 fa36 	bl	800522c <prvAddCurrentTaskToDelayedList>
}
 8004dc0:	46c0      	nop			; (mov r8, r8)
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b002      	add	sp, #8
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200006e8 	.word	0x200006e8

08004dcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <vTaskPlaceOnEventListRestricted+0x16>
 8004dde:	b672      	cpsid	i
 8004de0:	e7fe      	b.n	8004de0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004de2:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <vTaskPlaceOnEventListRestricted+0x48>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3318      	adds	r3, #24
 8004de8:	001a      	movs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	0011      	movs	r1, r2
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fe ff7d 	bl	8003cee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	425b      	negs	r3, r3
 8004dfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	0011      	movs	r1, r2
 8004e06:	0018      	movs	r0, r3
 8004e08:	f000 fa10 	bl	800522c <prvAddCurrentTaskToDelayedList>
	}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b004      	add	sp, #16
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200006e8 	.word	0x200006e8

08004e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <xTaskRemoveFromEventList+0x1a>
 8004e2e:	b672      	cpsid	i
 8004e30:	e7fe      	b.n	8004e30 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3318      	adds	r3, #24
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7fe ffb1 	bl	8003d9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e3c:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <xTaskRemoveFromEventList+0xa0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11d      	bne.n	8004e80 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	3304      	adds	r3, #4
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7fe ffa8 	bl	8003d9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <xTaskRemoveFromEventList+0xa4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d903      	bls.n	8004e62 <xTaskRemoveFromEventList+0x4a>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <xTaskRemoveFromEventList+0xa4>)
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	0013      	movs	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	189b      	adds	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <xTaskRemoveFromEventList+0xa8>)
 8004e70:	189a      	adds	r2, r3, r2
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3304      	adds	r3, #4
 8004e76:	0019      	movs	r1, r3
 8004e78:	0010      	movs	r0, r2
 8004e7a:	f7fe ff38 	bl	8003cee <vListInsertEnd>
 8004e7e:	e007      	b.n	8004e90 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	3318      	adds	r3, #24
 8004e84:	001a      	movs	r2, r3
 8004e86:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <xTaskRemoveFromEventList+0xac>)
 8004e88:	0011      	movs	r1, r2
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f7fe ff2f 	bl	8003cee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <xTaskRemoveFromEventList+0xb0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d905      	bls.n	8004eaa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <xTaskRemoveFromEventList+0xb4>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e001      	b.n	8004eae <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b004      	add	sp, #16
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000be4 	.word	0x20000be4
 8004ebc:	20000bc4 	.word	0x20000bc4
 8004ec0:	200006ec 	.word	0x200006ec
 8004ec4:	20000b7c 	.word	0x20000b7c
 8004ec8:	200006e8 	.word	0x200006e8
 8004ecc:	20000bd0 	.word	0x20000bd0

08004ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <vTaskInternalSetTimeOutState+0x20>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <vTaskInternalSetTimeOutState+0x24>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	605a      	str	r2, [r3, #4]
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000bd4 	.word	0x20000bd4
 8004ef4:	20000bc0 	.word	0x20000bc0

08004ef8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <xTaskCheckForTimeOut+0x14>
 8004f08:	b672      	cpsid	i
 8004f0a:	e7fe      	b.n	8004f0a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <xTaskCheckForTimeOut+0x1e>
 8004f12:	b672      	cpsid	i
 8004f14:	e7fe      	b.n	8004f14 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004f16:	f000 fd8b 	bl	8005a30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <xTaskCheckForTimeOut+0x98>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	d102      	bne.n	8004f38 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e024      	b.n	8004f82 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <xTaskCheckForTimeOut+0x9c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d007      	beq.n	8004f54 <xTaskCheckForTimeOut+0x5c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e016      	b.n	8004f82 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20c      	bcs.n	8004f78 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad2      	subs	r2, r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7ff ffaf 	bl	8004ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e004      	b.n	8004f82 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004f82:	f000 fd67 	bl	8005a54 <vPortExitCritical>

	return xReturn;
 8004f86:	697b      	ldr	r3, [r7, #20]
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b006      	add	sp, #24
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000bc0 	.word	0x20000bc0
 8004f94:	20000bd4 	.word	0x20000bd4

08004f98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <vTaskMissedYield+0x10>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000bd0 	.word	0x20000bd0

08004fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fb4:	f000 f84e 	bl	8005054 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fb8:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <prvIdleTask+0x1c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d9f9      	bls.n	8004fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fc0:	f000 fd26 	bl	8005a10 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004fc4:	e7f6      	b.n	8004fb4 <prvIdleTask+0x8>
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	200006ec 	.word	0x200006ec

08004fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e00c      	b.n	8004ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	0013      	movs	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a14      	ldr	r2, [pc, #80]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7fe fe58 	bl	8003c9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b37      	cmp	r3, #55	; 0x37
 8004ff6:	d9ef      	bls.n	8004fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <prvInitialiseTaskLists+0x6c>)
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7fe fe4e 	bl	8003c9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005000:	4b0e      	ldr	r3, [pc, #56]	; (800503c <prvInitialiseTaskLists+0x70>)
 8005002:	0018      	movs	r0, r3
 8005004:	f7fe fe4a 	bl	8003c9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <prvInitialiseTaskLists+0x74>)
 800500a:	0018      	movs	r0, r3
 800500c:	f7fe fe46 	bl	8003c9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <prvInitialiseTaskLists+0x78>)
 8005012:	0018      	movs	r0, r3
 8005014:	f7fe fe42 	bl	8003c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <prvInitialiseTaskLists+0x7c>)
 800501a:	0018      	movs	r0, r3
 800501c:	f7fe fe3e 	bl	8003c9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <prvInitialiseTaskLists+0x80>)
 8005022:	4a05      	ldr	r2, [pc, #20]	; (8005038 <prvInitialiseTaskLists+0x6c>)
 8005024:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvInitialiseTaskLists+0x84>)
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <prvInitialiseTaskLists+0x70>)
 800502a:	601a      	str	r2, [r3, #0]
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	46bd      	mov	sp, r7
 8005030:	b002      	add	sp, #8
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200006ec 	.word	0x200006ec
 8005038:	20000b4c 	.word	0x20000b4c
 800503c:	20000b60 	.word	0x20000b60
 8005040:	20000b7c 	.word	0x20000b7c
 8005044:	20000b90 	.word	0x20000b90
 8005048:	20000ba8 	.word	0x20000ba8
 800504c:	20000b74 	.word	0x20000b74
 8005050:	20000b78 	.word	0x20000b78

08005054 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800505a:	e01a      	b.n	8005092 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800505c:	f000 fce8 	bl	8005a30 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005060:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <prvCheckTasksWaitingTermination+0x50>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	0018      	movs	r0, r3
 800506e:	f7fe fe96 	bl	8003d9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <prvCheckTasksWaitingTermination+0x54>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <prvCheckTasksWaitingTermination+0x54>)
 800507a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <prvCheckTasksWaitingTermination+0x58>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1e5a      	subs	r2, r3, #1
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <prvCheckTasksWaitingTermination+0x58>)
 8005084:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005086:	f000 fce5 	bl	8005a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0018      	movs	r0, r3
 800508e:	f000 f80f 	bl	80050b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <prvCheckTasksWaitingTermination+0x58>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e0      	bne.n	800505c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46c0      	nop			; (mov r8, r8)
 800509e:	46bd      	mov	sp, r7
 80050a0:	b002      	add	sp, #8
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000b90 	.word	0x20000b90
 80050a8:	20000bbc 	.word	0x20000bbc
 80050ac:	20000ba4 	.word	0x20000ba4

080050b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2259      	movs	r2, #89	; 0x59
 80050bc:	5c9b      	ldrb	r3, [r3, r2]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	0018      	movs	r0, r3
 80050c8:	f000 fdf6 	bl	8005cb8 <vPortFree>
				vPortFree( pxTCB );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 fdf2 	bl	8005cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050d4:	e010      	b.n	80050f8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2259      	movs	r2, #89	; 0x59
 80050da:	5c9b      	ldrb	r3, [r3, r2]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d104      	bne.n	80050ea <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 fde8 	bl	8005cb8 <vPortFree>
	}
 80050e8:	e006      	b.n	80050f8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2259      	movs	r2, #89	; 0x59
 80050ee:	5c9b      	ldrb	r3, [r3, r2]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d001      	beq.n	80050f8 <prvDeleteTCB+0x48>
 80050f4:	b672      	cpsid	i
 80050f6:	e7fe      	b.n	80050f6 <prvDeleteTCB+0x46>
	}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b002      	add	sp, #8
 80050fe:	bd80      	pop	{r7, pc}

08005100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <prvResetNextTaskUnblockTime+0x34>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <prvResetNextTaskUnblockTime+0x38>)
 8005112:	2201      	movs	r2, #1
 8005114:	4252      	negs	r2, r2
 8005116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005118:	e008      	b.n	800512c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <prvResetNextTaskUnblockTime+0x34>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <prvResetNextTaskUnblockTime+0x38>)
 800512a:	601a      	str	r2, [r3, #0]
}
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	b002      	add	sp, #8
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000b74 	.word	0x20000b74
 8005138:	20000bdc 	.word	0x20000bdc

0800513c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005142:	4b0a      	ldr	r3, [pc, #40]	; (800516c <xTaskGetSchedulerState+0x30>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800514a:	2301      	movs	r3, #1
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	e008      	b.n	8005162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <xTaskGetSchedulerState+0x34>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005158:	2302      	movs	r3, #2
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e001      	b.n	8005162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005162:	687b      	ldr	r3, [r7, #4]
	}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b002      	add	sp, #8
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000bc8 	.word	0x20000bc8
 8005170:	20000be4 	.word	0x20000be4

08005174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800518a:	4b25      	ldr	r3, [pc, #148]	; (8005220 <xTaskPriorityDisinherit+0xac>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <xTaskPriorityDisinherit+0x24>
 8005194:	b672      	cpsid	i
 8005196:	e7fe      	b.n	8005196 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <xTaskPriorityDisinherit+0x30>
 80051a0:	b672      	cpsid	i
 80051a2:	e7fe      	b.n	80051a2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d02c      	beq.n	8005214 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d128      	bne.n	8005214 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	3304      	adds	r3, #4
 80051c6:	0018      	movs	r0, r3
 80051c8:	f7fe fde9 	bl	8003d9e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	2238      	movs	r2, #56	; 0x38
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <xTaskPriorityDisinherit+0xb0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d903      	bls.n	80051f4 <xTaskPriorityDisinherit+0x80>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <xTaskPriorityDisinherit+0xb0>)
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	0013      	movs	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	189b      	adds	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4a09      	ldr	r2, [pc, #36]	; (8005228 <xTaskPriorityDisinherit+0xb4>)
 8005202:	189a      	adds	r2, r3, r2
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	3304      	adds	r3, #4
 8005208:	0019      	movs	r1, r3
 800520a:	0010      	movs	r0, r2
 800520c:	f7fe fd6f 	bl	8003cee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005210:	2301      	movs	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005214:	68fb      	ldr	r3, [r7, #12]
	}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b004      	add	sp, #16
 800521c:	bd80      	pop	{r7, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	200006e8 	.word	0x200006e8
 8005224:	20000bc4 	.word	0x20000bc4
 8005228:	200006ec 	.word	0x200006ec

0800522c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005236:	4b21      	ldr	r3, [pc, #132]	; (80052bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800523c:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3304      	adds	r3, #4
 8005242:	0018      	movs	r0, r3
 8005244:	f7fe fdab 	bl	8003d9e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3301      	adds	r3, #1
 800524c:	d10b      	bne.n	8005266 <prvAddCurrentTaskToDelayedList+0x3a>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1d1a      	adds	r2, r3, #4
 800525a:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800525c:	0011      	movs	r1, r2
 800525e:	0018      	movs	r0, r3
 8005260:	f7fe fd45 	bl	8003cee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005264:	e026      	b.n	80052b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	18d3      	adds	r3, r2, r3
 800526c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800526e:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	429a      	cmp	r2, r3
 800527c:	d209      	bcs.n	8005292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3304      	adds	r3, #4
 8005288:	0019      	movs	r1, r3
 800528a:	0010      	movs	r0, r2
 800528c:	f7fe fd51 	bl	8003d32 <vListInsert>
}
 8005290:	e010      	b.n	80052b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005292:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3304      	adds	r3, #4
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f7fe fd47 	bl	8003d32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d202      	bcs.n	80052b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052ae:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b004      	add	sp, #16
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000bc0 	.word	0x20000bc0
 80052c0:	200006e8 	.word	0x200006e8
 80052c4:	20000ba8 	.word	0x20000ba8
 80052c8:	20000b78 	.word	0x20000b78
 80052cc:	20000b74 	.word	0x20000b74
 80052d0:	20000bdc 	.word	0x20000bdc

080052d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052de:	f000 fac9 	bl	8005874 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <xTimerCreateTimerTask+0x6c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d020      	beq.n	800532c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052f2:	003a      	movs	r2, r7
 80052f4:	1d39      	adds	r1, r7, #4
 80052f6:	2308      	movs	r3, #8
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	0018      	movs	r0, r3
 80052fc:	f7fe fcb6 	bl	8003c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005300:	683c      	ldr	r4, [r7, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	490f      	ldr	r1, [pc, #60]	; (8005344 <xTimerCreateTimerTask+0x70>)
 8005308:	480f      	ldr	r0, [pc, #60]	; (8005348 <xTimerCreateTimerTask+0x74>)
 800530a:	9202      	str	r2, [sp, #8]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	2302      	movs	r3, #2
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	0022      	movs	r2, r4
 8005316:	f7ff f996 	bl	8004646 <xTaskCreateStatic>
 800531a:	0002      	movs	r2, r0
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <xTimerCreateTimerTask+0x78>)
 800531e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <xTimerCreateTimerTask+0x78>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005328:	2301      	movs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <xTimerCreateTimerTask+0x62>
 8005332:	b672      	cpsid	i
 8005334:	e7fe      	b.n	8005334 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	b005      	add	sp, #20
 800533e:	bd90      	pop	{r4, r7, pc}
 8005340:	20000c18 	.word	0x20000c18
 8005344:	08005f5c 	.word	0x08005f5c
 8005348:	0800546d 	.word	0x0800546d
 800534c:	20000c1c 	.word	0x20000c1c

08005350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b08b      	sub	sp, #44	; 0x2c
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <xTimerGenericCommand+0x1c>
 8005368:	b672      	cpsid	i
 800536a:	e7fe      	b.n	800536a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800536c:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <xTimerGenericCommand+0x90>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d030      	beq.n	80053d6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005374:	2414      	movs	r4, #20
 8005376:	193b      	adds	r3, r7, r4
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800537c:	193b      	adds	r3, r7, r4
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005382:	193b      	adds	r3, r7, r4
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b05      	cmp	r3, #5
 800538c:	dc19      	bgt.n	80053c2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800538e:	f7ff fed5 	bl	800513c <xTaskGetSchedulerState>
 8005392:	0003      	movs	r3, r0
 8005394:	2b02      	cmp	r3, #2
 8005396:	d109      	bne.n	80053ac <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <xTimerGenericCommand+0x90>)
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800539e:	1939      	adds	r1, r7, r4
 80053a0:	2300      	movs	r3, #0
 80053a2:	f7fe fdeb 	bl	8003f7c <xQueueGenericSend>
 80053a6:	0003      	movs	r3, r0
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	e014      	b.n	80053d6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <xTimerGenericCommand+0x90>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	2314      	movs	r3, #20
 80053b2:	18f9      	adds	r1, r7, r3
 80053b4:	2300      	movs	r3, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	f7fe fde0 	bl	8003f7c <xQueueGenericSend>
 80053bc:	0003      	movs	r3, r0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	e009      	b.n	80053d6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <xTimerGenericCommand+0x90>)
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	2314      	movs	r3, #20
 80053ca:	18f9      	adds	r1, r7, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	f7fe fe99 	bl	8004104 <xQueueGenericSendFromISR>
 80053d2:	0003      	movs	r3, r0
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	b00b      	add	sp, #44	; 0x2c
 80053de:	bd90      	pop	{r4, r7, pc}
 80053e0:	20000c18 	.word	0x20000c18

080053e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <prvProcessExpiredTimer+0x84>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3304      	adds	r3, #4
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fe fcce 	bl	8003d9e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2228      	movs	r2, #40	; 0x28
 8005406:	5c9b      	ldrb	r3, [r3, r2]
 8005408:	001a      	movs	r2, r3
 800540a:	2304      	movs	r3, #4
 800540c:	4013      	ands	r3, r2
 800540e:	d019      	beq.n	8005444 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	18d1      	adds	r1, r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f8c3 	bl	80055a8 <prvInsertTimerInActiveList>
 8005422:	1e03      	subs	r3, r0, #0
 8005424:	d017      	beq.n	8005456 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	2300      	movs	r3, #0
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2300      	movs	r3, #0
 8005430:	2100      	movs	r1, #0
 8005432:	f7ff ff8d 	bl	8005350 <xTimerGenericCommand>
 8005436:	0003      	movs	r3, r0
 8005438:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <prvProcessExpiredTimer+0x72>
 8005440:	b672      	cpsid	i
 8005442:	e7fe      	b.n	8005442 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2228      	movs	r2, #40	; 0x28
 8005448:	5c9b      	ldrb	r3, [r3, r2]
 800544a:	2201      	movs	r2, #1
 800544c:	4393      	bics	r3, r2
 800544e:	b2d9      	uxtb	r1, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2228      	movs	r2, #40	; 0x28
 8005454:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	0010      	movs	r0, r2
 800545e:	4798      	blx	r3
}
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	b004      	add	sp, #16
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000c10 	.word	0x20000c10

0800546c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005474:	2308      	movs	r3, #8
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	0018      	movs	r0, r3
 800547a:	f000 f853 	bl	8005524 <prvGetNextExpireTime>
 800547e:	0003      	movs	r3, r0
 8005480:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f000 f803 	bl	8005494 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800548e:	f000 f8cd 	bl	800562c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005492:	e7ef      	b.n	8005474 <prvTimerTask+0x8>

08005494 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800549e:	f7ff facf 	bl	8004a40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054a2:	2308      	movs	r3, #8
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	0018      	movs	r0, r3
 80054a8:	f000 f85e 	bl	8005568 <prvSampleTimeNow>
 80054ac:	0003      	movs	r3, r0
 80054ae:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d12b      	bne.n	800550e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10c      	bne.n	80054d6 <prvProcessTimerOrBlockTask+0x42>
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d808      	bhi.n	80054d6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80054c4:	f7ff fac8 	bl	8004a58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0011      	movs	r1, r2
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7ff ff88 	bl	80053e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054d4:	e01d      	b.n	8005512 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <prvProcessTimerOrBlockTask+0x88>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <prvProcessTimerOrBlockTask+0x56>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <prvProcessTimerOrBlockTask+0x58>
 80054ea:	2300      	movs	r3, #0
 80054ec:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <prvProcessTimerOrBlockTask+0x8c>)
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	0019      	movs	r1, r3
 80054fc:	f7ff f870 	bl	80045e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005500:	f7ff faaa 	bl	8004a58 <xTaskResumeAll>
 8005504:	1e03      	subs	r3, r0, #0
 8005506:	d104      	bne.n	8005512 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8005508:	f000 fa82 	bl	8005a10 <vPortYield>
}
 800550c:	e001      	b.n	8005512 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800550e:	f7ff faa3 	bl	8004a58 <xTaskResumeAll>
}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b004      	add	sp, #16
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	20000c14 	.word	0x20000c14
 8005520:	20000c18 	.word	0x20000c18

08005524 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <prvGetNextExpireTime+0x40>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <prvGetNextExpireTime+0x16>
 8005536:	2201      	movs	r2, #1
 8005538:	e000      	b.n	800553c <prvGetNextExpireTime+0x18>
 800553a:	2200      	movs	r2, #0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <prvGetNextExpireTime+0x40>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e001      	b.n	8005558 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b004      	add	sp, #16
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	20000c10 	.word	0x20000c10

08005568 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005570:	f7ff fafe 	bl	8004b70 <xTaskGetTickCount>
 8005574:	0003      	movs	r3, r0
 8005576:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <prvSampleTimeNow+0x3c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	429a      	cmp	r2, r3
 8005580:	d205      	bcs.n	800558e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005582:	f000 f919 	bl	80057b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e002      	b.n	8005594 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005594:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <prvSampleTimeNow+0x3c>)
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	b004      	add	sp, #16
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000c20 	.word	0x20000c20

080055a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d812      	bhi.n	80055f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	1ad2      	subs	r2, r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d302      	bcc.n	80055e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055dc:	2301      	movs	r3, #1
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e01b      	b.n	800561a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055e2:	4b10      	ldr	r3, [pc, #64]	; (8005624 <prvInsertTimerInActiveList+0x7c>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3304      	adds	r3, #4
 80055ea:	0019      	movs	r1, r3
 80055ec:	0010      	movs	r0, r2
 80055ee:	f7fe fba0 	bl	8003d32 <vListInsert>
 80055f2:	e012      	b.n	800561a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d206      	bcs.n	800560a <prvInsertTimerInActiveList+0x62>
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e007      	b.n	800561a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <prvInsertTimerInActiveList+0x80>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3304      	adds	r3, #4
 8005612:	0019      	movs	r1, r3
 8005614:	0010      	movs	r0, r2
 8005616:	f7fe fb8c 	bl	8003d32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800561a:	697b      	ldr	r3, [r7, #20]
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b006      	add	sp, #24
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000c14 	.word	0x20000c14
 8005628:	20000c10 	.word	0x20000c10

0800562c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800562c:	b590      	push	{r4, r7, lr}
 800562e:	b08d      	sub	sp, #52	; 0x34
 8005630:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005632:	e0ac      	b.n	800578e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005634:	2208      	movs	r2, #8
 8005636:	18bb      	adds	r3, r7, r2
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	da0f      	bge.n	800565e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800563e:	18bb      	adds	r3, r7, r2
 8005640:	3304      	adds	r3, #4
 8005642:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <prvProcessReceivedCommands+0x22>
 800564a:	b672      	cpsid	i
 800564c:	e7fe      	b.n	800564c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	6858      	ldr	r0, [r3, #4]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	0019      	movs	r1, r3
 800565c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800565e:	2208      	movs	r2, #8
 8005660:	18bb      	adds	r3, r7, r2
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	da00      	bge.n	800566a <prvProcessReceivedCommands+0x3e>
 8005668:	e090      	b.n	800578c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800566a:	18bb      	adds	r3, r7, r2
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	3304      	adds	r3, #4
 800567c:	0018      	movs	r0, r3
 800567e:	f7fe fb8e 	bl	8003d9e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	0018      	movs	r0, r3
 8005686:	f7ff ff6f 	bl	8005568 <prvSampleTimeNow>
 800568a:	0003      	movs	r3, r0
 800568c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800568e:	2308      	movs	r3, #8
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b09      	cmp	r3, #9
 8005696:	d900      	bls.n	800569a <prvProcessReceivedCommands+0x6e>
 8005698:	e079      	b.n	800578e <prvProcessReceivedCommands+0x162>
 800569a:	009a      	lsls	r2, r3, #2
 800569c:	4b44      	ldr	r3, [pc, #272]	; (80057b0 <prvProcessReceivedCommands+0x184>)
 800569e:	18d3      	adds	r3, r2, r3
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2228      	movs	r2, #40	; 0x28
 80056a8:	5c9b      	ldrb	r3, [r3, r2]
 80056aa:	2201      	movs	r2, #1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	b2d9      	uxtb	r1, r3
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	2228      	movs	r2, #40	; 0x28
 80056b4:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056b6:	2408      	movs	r4, #8
 80056b8:	193b      	adds	r3, r7, r4
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	18d1      	adds	r1, r2, r3
 80056c2:	193b      	adds	r3, r7, r4
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	6a38      	ldr	r0, [r7, #32]
 80056ca:	f7ff ff6d 	bl	80055a8 <prvInsertTimerInActiveList>
 80056ce:	1e03      	subs	r3, r0, #0
 80056d0:	d05d      	beq.n	800578e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	6a3a      	ldr	r2, [r7, #32]
 80056d8:	0010      	movs	r0, r2
 80056da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	2228      	movs	r2, #40	; 0x28
 80056e0:	5c9b      	ldrb	r3, [r3, r2]
 80056e2:	001a      	movs	r2, r3
 80056e4:	2304      	movs	r3, #4
 80056e6:	4013      	ands	r3, r2
 80056e8:	d051      	beq.n	800578e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056ea:	193b      	adds	r3, r7, r4
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	18d2      	adds	r2, r2, r3
 80056f4:	6a38      	ldr	r0, [r7, #32]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	2100      	movs	r1, #0
 80056fe:	f7ff fe27 	bl	8005350 <xTimerGenericCommand>
 8005702:	0003      	movs	r3, r0
 8005704:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d140      	bne.n	800578e <prvProcessReceivedCommands+0x162>
 800570c:	b672      	cpsid	i
 800570e:	e7fe      	b.n	800570e <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	2228      	movs	r2, #40	; 0x28
 8005714:	5c9b      	ldrb	r3, [r3, r2]
 8005716:	2201      	movs	r2, #1
 8005718:	4393      	bics	r3, r2
 800571a:	b2d9      	uxtb	r1, r3
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	2228      	movs	r2, #40	; 0x28
 8005720:	5499      	strb	r1, [r3, r2]
					break;
 8005722:	e034      	b.n	800578e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2228      	movs	r2, #40	; 0x28
 8005728:	5c9b      	ldrb	r3, [r3, r2]
 800572a:	2201      	movs	r2, #1
 800572c:	4313      	orrs	r3, r2
 800572e:	b2d9      	uxtb	r1, r3
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	2228      	movs	r2, #40	; 0x28
 8005734:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005736:	2308      	movs	r3, #8
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <prvProcessReceivedCommands+0x120>
 8005748:	b672      	cpsid	i
 800574a:	e7fe      	b.n	800574a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	18d1      	adds	r1, r2, r3
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	6a38      	ldr	r0, [r7, #32]
 800575a:	f7ff ff25 	bl	80055a8 <prvInsertTimerInActiveList>
					break;
 800575e:	e016      	b.n	800578e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	2228      	movs	r2, #40	; 0x28
 8005764:	5c9b      	ldrb	r3, [r3, r2]
 8005766:	001a      	movs	r2, r3
 8005768:	2302      	movs	r3, #2
 800576a:	4013      	ands	r3, r2
 800576c:	d104      	bne.n	8005778 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	0018      	movs	r0, r3
 8005772:	f000 faa1 	bl	8005cb8 <vPortFree>
 8005776:	e00a      	b.n	800578e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2228      	movs	r2, #40	; 0x28
 800577c:	5c9b      	ldrb	r3, [r3, r2]
 800577e:	2201      	movs	r2, #1
 8005780:	4393      	bics	r3, r2
 8005782:	b2d9      	uxtb	r1, r3
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2228      	movs	r2, #40	; 0x28
 8005788:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800578a:	e000      	b.n	800578e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800578c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvProcessReceivedCommands+0x188>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2208      	movs	r2, #8
 8005794:	18b9      	adds	r1, r7, r2
 8005796:	2200      	movs	r2, #0
 8005798:	0018      	movs	r0, r3
 800579a:	f7fe fd27 	bl	80041ec <xQueueReceive>
 800579e:	1e03      	subs	r3, r0, #0
 80057a0:	d000      	beq.n	80057a4 <prvProcessReceivedCommands+0x178>
 80057a2:	e747      	b.n	8005634 <prvProcessReceivedCommands+0x8>
	}
}
 80057a4:	46c0      	nop			; (mov r8, r8)
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b00b      	add	sp, #44	; 0x2c
 80057ac:	bd90      	pop	{r4, r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	08006018 	.word	0x08006018
 80057b4:	20000c18 	.word	0x20000c18

080057b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057be:	e041      	b.n	8005844 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057c0:	4b2a      	ldr	r3, [pc, #168]	; (800586c <prvSwitchTimerLists+0xb4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ca:	4b28      	ldr	r3, [pc, #160]	; (800586c <prvSwitchTimerLists+0xb4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3304      	adds	r3, #4
 80057d8:	0018      	movs	r0, r3
 80057da:	f7fe fae0 	bl	8003d9e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	0010      	movs	r0, r2
 80057e6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2228      	movs	r2, #40	; 0x28
 80057ec:	5c9b      	ldrb	r3, [r3, r2]
 80057ee:	001a      	movs	r2, r3
 80057f0:	2304      	movs	r3, #4
 80057f2:	4013      	ands	r3, r2
 80057f4:	d026      	beq.n	8005844 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	18d3      	adds	r3, r2, r3
 80057fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	429a      	cmp	r2, r3
 8005806:	d90e      	bls.n	8005826 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <prvSwitchTimerLists+0xb4>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3304      	adds	r3, #4
 800581c:	0019      	movs	r1, r3
 800581e:	0010      	movs	r0, r2
 8005820:	f7fe fa87 	bl	8003d32 <vListInsert>
 8005824:	e00e      	b.n	8005844 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2300      	movs	r3, #0
 8005830:	2100      	movs	r1, #0
 8005832:	f7ff fd8d 	bl	8005350 <xTimerGenericCommand>
 8005836:	0003      	movs	r3, r0
 8005838:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <prvSwitchTimerLists+0x8c>
 8005840:	b672      	cpsid	i
 8005842:	e7fe      	b.n	8005842 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <prvSwitchTimerLists+0xb4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1b8      	bne.n	80057c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <prvSwitchTimerLists+0xb4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <prvSwitchTimerLists+0xb8>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b04      	ldr	r3, [pc, #16]	; (800586c <prvSwitchTimerLists+0xb4>)
 800585a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <prvSwitchTimerLists+0xb8>)
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	601a      	str	r2, [r3, #0]
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b006      	add	sp, #24
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	20000c10 	.word	0x20000c10
 8005870:	20000c14 	.word	0x20000c14

08005874 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800587a:	f000 f8d9 	bl	8005a30 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800587e:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <prvCheckForValidListAndQueue+0x64>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d123      	bne.n	80058ce <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005886:	4b15      	ldr	r3, [pc, #84]	; (80058dc <prvCheckForValidListAndQueue+0x68>)
 8005888:	0018      	movs	r0, r3
 800588a:	f7fe fa07 	bl	8003c9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <prvCheckForValidListAndQueue+0x6c>)
 8005890:	0018      	movs	r0, r3
 8005892:	f7fe fa03 	bl	8003c9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <prvCheckForValidListAndQueue+0x70>)
 8005898:	4a10      	ldr	r2, [pc, #64]	; (80058dc <prvCheckForValidListAndQueue+0x68>)
 800589a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800589c:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <prvCheckForValidListAndQueue+0x74>)
 800589e:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <prvCheckForValidListAndQueue+0x6c>)
 80058a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058a2:	4b12      	ldr	r3, [pc, #72]	; (80058ec <prvCheckForValidListAndQueue+0x78>)
 80058a4:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <prvCheckForValidListAndQueue+0x7c>)
 80058a6:	2100      	movs	r1, #0
 80058a8:	9100      	str	r1, [sp, #0]
 80058aa:	2110      	movs	r1, #16
 80058ac:	200a      	movs	r0, #10
 80058ae:	f7fe faf2 	bl	8003e96 <xQueueGenericCreateStatic>
 80058b2:	0002      	movs	r2, r0
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <prvCheckForValidListAndQueue+0x64>)
 80058b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <prvCheckForValidListAndQueue+0x64>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <prvCheckForValidListAndQueue+0x64>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a0b      	ldr	r2, [pc, #44]	; (80058f4 <prvCheckForValidListAndQueue+0x80>)
 80058c6:	0011      	movs	r1, r2
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7fe fe61 	bl	8004590 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058ce:	f000 f8c1 	bl	8005a54 <vPortExitCritical>
}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000c18 	.word	0x20000c18
 80058dc:	20000be8 	.word	0x20000be8
 80058e0:	20000bfc 	.word	0x20000bfc
 80058e4:	20000c10 	.word	0x20000c10
 80058e8:	20000c14 	.word	0x20000c14
 80058ec:	20000cc4 	.word	0x20000cc4
 80058f0:	20000c24 	.word	0x20000c24
 80058f4:	08005f64 	.word	0x08005f64

080058f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3b04      	subs	r3, #4
 8005908:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2280      	movs	r2, #128	; 0x80
 800590e:	0452      	lsls	r2, r2, #17
 8005910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3b04      	subs	r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b04      	subs	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005924:	4a08      	ldr	r2, [pc, #32]	; (8005948 <pxPortInitialiseStack+0x50>)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3b14      	subs	r3, #20
 800592e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3b20      	subs	r3, #32
 800593a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800593c:	68fb      	ldr	r3, [r7, #12]
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b004      	add	sp, #16
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	0800594d 	.word	0x0800594d

0800594c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <prvTaskExitError+0x2c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	d001      	beq.n	8005962 <prvTaskExitError+0x16>
 800595e:	b672      	cpsid	i
 8005960:	e7fe      	b.n	8005960 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005962:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0fc      	beq.n	8005966 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b002      	add	sp, #8
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	2000000c 	.word	0x2000000c

0800597c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005990 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005990:	4a0b      	ldr	r2, [pc, #44]	; (80059c0 <pxCurrentTCBConst2>)
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	3020      	adds	r0, #32
 8005998:	f380 8809 	msr	PSP, r0
 800599c:	2002      	movs	r0, #2
 800599e:	f380 8814 	msr	CONTROL, r0
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80059a8:	46ae      	mov	lr, r5
 80059aa:	bc08      	pop	{r3}
 80059ac:	bc04      	pop	{r2}
 80059ae:	b662      	cpsie	i
 80059b0:	4718      	bx	r3
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46c0      	nop			; (mov r8, r8)
 80059be:	46c0      	nop			; (mov r8, r8)

080059c0 <pxCurrentTCBConst2>:
 80059c0:	200006e8 	.word	0x200006e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80059c4:	46c0      	nop			; (mov r8, r8)
 80059c6:	46c0      	nop			; (mov r8, r8)

080059c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <xPortStartScheduler+0x40>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <xPortStartScheduler+0x40>)
 80059d2:	21ff      	movs	r1, #255	; 0xff
 80059d4:	0409      	lsls	r1, r1, #16
 80059d6:	430a      	orrs	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <xPortStartScheduler+0x40>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <xPortStartScheduler+0x40>)
 80059e0:	21ff      	movs	r1, #255	; 0xff
 80059e2:	0609      	lsls	r1, r1, #24
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059e8:	f000 f898 	bl	8005b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059ec:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <xPortStartScheduler+0x44>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80059f2:	f7ff ffcd 	bl	8005990 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059f6:	f7ff f979 	bl	8004cec <vTaskSwitchContext>
	prvTaskExitError();
 80059fa:	f7ff ffa7 	bl	800594c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	0018      	movs	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	e000ed20 	.word	0xe000ed20
 8005a0c:	2000000c 	.word	0x2000000c

08005a10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <vPortYield+0x1c>)
 8005a16:	2280      	movs	r2, #128	; 0x80
 8005a18:	0552      	lsls	r2, r2, #21
 8005a1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005a1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005a20:	f3bf 8f6f 	isb	sy
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005a34:	b672      	cpsid	i
	uxCriticalNesting++;
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <vPortEnterCritical+0x20>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <vPortEnterCritical+0x20>)
 8005a3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005a40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005a44:	f3bf 8f6f 	isb	sy
}
 8005a48:	46c0      	nop			; (mov r8, r8)
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	2000000c 	.word	0x2000000c

08005a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <vPortExitCritical+0x2c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <vPortExitCritical+0x10>
 8005a60:	b672      	cpsid	i
 8005a62:	e7fe      	b.n	8005a62 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <vPortExitCritical+0x2c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	1e5a      	subs	r2, r3, #1
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <vPortExitCritical+0x2c>)
 8005a6c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8005a6e:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <vPortExitCritical+0x2c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d100      	bne.n	8005a78 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005a76:	b662      	cpsie	i
	}
}
 8005a78:	46c0      	nop			; (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	2000000c 	.word	0x2000000c

08005a84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005a84:	f3ef 8010 	mrs	r0, PRIMASK
 8005a88:	b672      	cpsid	i
 8005a8a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005a8c:	46c0      	nop			; (mov r8, r8)
 8005a8e:	0018      	movs	r0, r3

08005a90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005a90:	f380 8810 	msr	PRIMASK, r0
 8005a94:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005a96:	46c0      	nop			; (mov r8, r8)
	...

08005aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005aa0:	f3ef 8009 	mrs	r0, PSP
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <pxCurrentTCBConst>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	3820      	subs	r0, #32
 8005aaa:	6010      	str	r0, [r2, #0]
 8005aac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005aae:	4644      	mov	r4, r8
 8005ab0:	464d      	mov	r5, r9
 8005ab2:	4656      	mov	r6, sl
 8005ab4:	465f      	mov	r7, fp
 8005ab6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ab8:	b508      	push	{r3, lr}
 8005aba:	b672      	cpsid	i
 8005abc:	f7ff f916 	bl	8004cec <vTaskSwitchContext>
 8005ac0:	b662      	cpsie	i
 8005ac2:	bc0c      	pop	{r2, r3}
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	6808      	ldr	r0, [r1, #0]
 8005ac8:	3010      	adds	r0, #16
 8005aca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005acc:	46a0      	mov	r8, r4
 8005ace:	46a9      	mov	r9, r5
 8005ad0:	46b2      	mov	sl, r6
 8005ad2:	46bb      	mov	fp, r7
 8005ad4:	f380 8809 	msr	PSP, r0
 8005ad8:	3820      	subs	r0, #32
 8005ada:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005adc:	4718      	bx	r3
 8005ade:	46c0      	nop			; (mov r8, r8)

08005ae0 <pxCurrentTCBConst>:
 8005ae0:	200006e8 	.word	0x200006e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	46c0      	nop			; (mov r8, r8)

08005ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aee:	f7ff ffc9 	bl	8005a84 <ulSetInterruptMaskFromISR>
 8005af2:	0003      	movs	r3, r0
 8005af4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005af6:	f7ff f849 	bl	8004b8c <xTaskIncrementTick>
 8005afa:	1e03      	subs	r3, r0, #0
 8005afc:	d003      	beq.n	8005b06 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <xPortSysTickHandler+0x30>)
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	0552      	lsls	r2, r2, #21
 8005b04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f7ff ffc1 	bl	8005a90 <vClearInterruptMaskFromISR>
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b002      	add	sp, #8
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <vPortSetupTimerInterrupt+0x34>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <vPortSetupTimerInterrupt+0x38>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <vPortSetupTimerInterrupt+0x3c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	22fa      	movs	r2, #250	; 0xfa
 8005b32:	0091      	lsls	r1, r2, #2
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7fa fae7 	bl	8000108 <__udivsi3>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	001a      	movs	r2, r3
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <vPortSetupTimerInterrupt+0x40>)
 8005b40:	3a01      	subs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005b44:	4b02      	ldr	r3, [pc, #8]	; (8005b50 <vPortSetupTimerInterrupt+0x34>)
 8005b46:	2207      	movs	r2, #7
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	e000e010 	.word	0xe000e010
 8005b54:	e000e018 	.word	0xe000e018
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	e000e014 	.word	0xe000e014

08005b60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005b6c:	f7fe ff68 	bl	8004a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b70:	4b4b      	ldr	r3, [pc, #300]	; (8005ca0 <pvPortMalloc+0x140>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b78:	f000 f8ec 	bl	8005d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b7c:	4b49      	ldr	r3, [pc, #292]	; (8005ca4 <pvPortMalloc+0x144>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4013      	ands	r3, r2
 8005b84:	d000      	beq.n	8005b88 <pvPortMalloc+0x28>
 8005b86:	e07e      	b.n	8005c86 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d012      	beq.n	8005bb4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005b8e:	2208      	movs	r2, #8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2207      	movs	r2, #7
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d00a      	beq.n	8005bb4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	4393      	bics	r3, r2
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2207      	movs	r2, #7
 8005bac:	4013      	ands	r3, r2
 8005bae:	d001      	beq.n	8005bb4 <pvPortMalloc+0x54>
 8005bb0:	b672      	cpsid	i
 8005bb2:	e7fe      	b.n	8005bb2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d065      	beq.n	8005c86 <pvPortMalloc+0x126>
 8005bba:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <pvPortMalloc+0x148>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d860      	bhi.n	8005c86 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bc4:	4b39      	ldr	r3, [pc, #228]	; (8005cac <pvPortMalloc+0x14c>)
 8005bc6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005bc8:	4b38      	ldr	r3, [pc, #224]	; (8005cac <pvPortMalloc+0x14c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bce:	e004      	b.n	8005bda <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d903      	bls.n	8005bec <pvPortMalloc+0x8c>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f1      	bne.n	8005bd0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bec:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <pvPortMalloc+0x140>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d047      	beq.n	8005c86 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	189b      	adds	r3, r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	2308      	movs	r3, #8
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d916      	bls.n	8005c46 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	18d3      	adds	r3, r2, r3
 8005c1e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2207      	movs	r2, #7
 8005c24:	4013      	ands	r3, r2
 8005c26:	d001      	beq.n	8005c2c <pvPortMalloc+0xcc>
 8005c28:	b672      	cpsid	i
 8005c2a:	e7fe      	b.n	8005c2a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	1ad2      	subs	r2, r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f000 f8e7 	bl	8005e14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c46:	4b18      	ldr	r3, [pc, #96]	; (8005ca8 <pvPortMalloc+0x148>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <pvPortMalloc+0x148>)
 8005c52:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c54:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <pvPortMalloc+0x148>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <pvPortMalloc+0x150>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d203      	bcs.n	8005c68 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <pvPortMalloc+0x148>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <pvPortMalloc+0x150>)
 8005c66:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <pvPortMalloc+0x144>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <pvPortMalloc+0x154>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <pvPortMalloc+0x154>)
 8005c84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c86:	f7fe fee7 	bl	8004a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2207      	movs	r2, #7
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d001      	beq.n	8005c96 <pvPortMalloc+0x136>
 8005c92:	b672      	cpsid	i
 8005c94:	e7fe      	b.n	8005c94 <pvPortMalloc+0x134>
	return pvReturn;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b006      	add	sp, #24
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	2000191c 	.word	0x2000191c
 8005ca4:	20001930 	.word	0x20001930
 8005ca8:	20001920 	.word	0x20001920
 8005cac:	20001914 	.word	0x20001914
 8005cb0:	20001924 	.word	0x20001924
 8005cb4:	20001928 	.word	0x20001928

08005cb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d03a      	beq.n	8005d40 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cca:	2308      	movs	r3, #8
 8005ccc:	425b      	negs	r3, r3
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	18d3      	adds	r3, r2, r3
 8005cd2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <vPortFree+0x90>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <vPortFree+0x30>
 8005ce4:	b672      	cpsid	i
 8005ce6:	e7fe      	b.n	8005ce6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <vPortFree+0x3c>
 8005cf0:	b672      	cpsid	i
 8005cf2:	e7fe      	b.n	8005cf2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <vPortFree+0x90>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d01f      	beq.n	8005d40 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d11b      	bne.n	8005d40 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <vPortFree+0x90>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	43db      	mvns	r3, r3
 8005d12:	401a      	ands	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d18:	f7fe fe92 	bl	8004a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <vPortFree+0x94>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	18d2      	adds	r2, r2, r3
 8005d26:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <vPortFree+0x94>)
 8005d28:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 f871 	bl	8005e14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <vPortFree+0x98>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <vPortFree+0x98>)
 8005d3a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8005d3c:	f7fe fe8c 	bl	8004a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b004      	add	sp, #16
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20001930 	.word	0x20001930
 8005d4c:	20001920 	.word	0x20001920
 8005d50:	2000192c 	.word	0x2000192c

08005d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d5a:	23c0      	movs	r3, #192	; 0xc0
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d60:	4b26      	ldr	r3, [pc, #152]	; (8005dfc <prvHeapInit+0xa8>)
 8005d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2207      	movs	r2, #7
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d00c      	beq.n	8005d86 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3307      	adds	r3, #7
 8005d70:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2207      	movs	r2, #7
 8005d76:	4393      	bics	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <prvHeapInit+0xa8>)
 8005d82:	18d3      	adds	r3, r2, r3
 8005d84:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <prvHeapInit+0xac>)
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <prvHeapInit+0xac>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	18d3      	adds	r3, r2, r3
 8005d9c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d9e:	2208      	movs	r2, #8
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2207      	movs	r2, #7
 8005daa:	4393      	bics	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <prvHeapInit+0xb0>)
 8005db2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <prvHeapInit+0xb0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <prvHeapInit+0xb0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <prvHeapInit+0xb0>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <prvHeapInit+0xb4>)
 8005de0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <prvHeapInit+0xb8>)
 8005de8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <prvHeapInit+0xbc>)
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	0612      	lsls	r2, r2, #24
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b004      	add	sp, #16
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	20000d14 	.word	0x20000d14
 8005e00:	20001914 	.word	0x20001914
 8005e04:	2000191c 	.word	0x2000191c
 8005e08:	20001924 	.word	0x20001924
 8005e0c:	20001920 	.word	0x20001920
 8005e10:	20001930 	.word	0x20001930

08005e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e1c:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <prvInsertBlockIntoFreeList+0xa8>)
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e002      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x14>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d8f7      	bhi.n	8005e22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	18d3      	adds	r3, r2, r3
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d108      	bne.n	8005e56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	18d2      	adds	r2, r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	18d2      	adds	r2, r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d118      	bne.n	8005e9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b14      	ldr	r3, [pc, #80]	; (8005ec0 <prvInsertBlockIntoFreeList+0xac>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d00d      	beq.n	8005e92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	18d2      	adds	r2, r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e008      	b.n	8005ea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <prvInsertBlockIntoFreeList+0xac>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e003      	b.n	8005ea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d002      	beq.n	8005eb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	20001914 	.word	0x20001914
 8005ec0:	2000191c 	.word	0x2000191c

08005ec4 <__libc_init_array>:
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	4d0c      	ldr	r5, [pc, #48]	; (8005efc <__libc_init_array+0x38>)
 8005eca:	4c0d      	ldr	r4, [pc, #52]	; (8005f00 <__libc_init_array+0x3c>)
 8005ecc:	1b64      	subs	r4, r4, r5
 8005ece:	10a4      	asrs	r4, r4, #2
 8005ed0:	42a6      	cmp	r6, r4
 8005ed2:	d109      	bne.n	8005ee8 <__libc_init_array+0x24>
 8005ed4:	2600      	movs	r6, #0
 8005ed6:	f000 f82b 	bl	8005f30 <_init>
 8005eda:	4d0a      	ldr	r5, [pc, #40]	; (8005f04 <__libc_init_array+0x40>)
 8005edc:	4c0a      	ldr	r4, [pc, #40]	; (8005f08 <__libc_init_array+0x44>)
 8005ede:	1b64      	subs	r4, r4, r5
 8005ee0:	10a4      	asrs	r4, r4, #2
 8005ee2:	42a6      	cmp	r6, r4
 8005ee4:	d105      	bne.n	8005ef2 <__libc_init_array+0x2e>
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	00b3      	lsls	r3, r6, #2
 8005eea:	58eb      	ldr	r3, [r5, r3]
 8005eec:	4798      	blx	r3
 8005eee:	3601      	adds	r6, #1
 8005ef0:	e7ee      	b.n	8005ed0 <__libc_init_array+0xc>
 8005ef2:	00b3      	lsls	r3, r6, #2
 8005ef4:	58eb      	ldr	r3, [r5, r3]
 8005ef6:	4798      	blx	r3
 8005ef8:	3601      	adds	r6, #1
 8005efa:	e7f2      	b.n	8005ee2 <__libc_init_array+0x1e>
 8005efc:	08006048 	.word	0x08006048
 8005f00:	08006048 	.word	0x08006048
 8005f04:	08006048 	.word	0x08006048
 8005f08:	0800604c 	.word	0x0800604c

08005f0c <memcpy>:
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d100      	bne.n	8005f16 <memcpy+0xa>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	5ccc      	ldrb	r4, [r1, r3]
 8005f18:	54c4      	strb	r4, [r0, r3]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	e7f8      	b.n	8005f10 <memcpy+0x4>

08005f1e <memset>:
 8005f1e:	0003      	movs	r3, r0
 8005f20:	1882      	adds	r2, r0, r2
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d100      	bne.n	8005f28 <memset+0xa>
 8005f26:	4770      	bx	lr
 8005f28:	7019      	strb	r1, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	e7f9      	b.n	8005f22 <memset+0x4>
	...

08005f30 <_init>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr

08005f3c <_fini>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr
